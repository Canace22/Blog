{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/favicon.ico","hash":"8d4d7c68c9dba9323504167a1b0b4315d45100fe","modified":1527389162000},{"_id":"source/CNAME","hash":"ef0ff7088875a632bd8e42de22b8b8467acedfa7","modified":1531047062000},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1526478898000},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1526478898000},{"_id":"themes/maupassant/README.md","hash":"1c8631bc25c0f616e2dbd01c7fc224fa19eefdf3","modified":1526478898000},{"_id":"themes/maupassant/.DS_Store","hash":"9f3b72eaa639047e0282e0abbbb167cb70828a4f","modified":1573521033294},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1526478898000},{"_id":"themes/maupassant/_config.yml","hash":"621660fe42fb44f2988eb5bcc1ce8a3a9f923ba1","modified":1573652332802},{"_id":"source/about/index.md","hash":"a61d10c33eb6aa2c4f405abc6c07a817a12aa7c1","modified":1558246738000},{"_id":"source/_posts/CKeditor-在-angular-中的使用文档.md","hash":"42c1bf00fa4e4e1da87d96051d92367b5250e63b","modified":1573646989934},{"_id":"source/_posts/CSS-小技巧.md","hash":"82d4be5b2aafc2f68fde9f346200d6bfdd8c9c72","modified":1573646997085},{"_id":"source/_posts/Canvas画动态路径.md","hash":"1fc0ae0bc248b84efba8f2027bb05de01bbaf932","modified":1573646980173},{"_id":"source/_posts/Django-channels.md","hash":"b6e0002f0770c29531e97e12dd4d55c4b21a7c5c","modified":1573646779042},{"_id":"source/_posts/JS模态框blog.md","hash":"7ae421a5a95c1781c7f85cf0cad1df0ffb5628be","modified":1573647452536},{"_id":"source/_posts/JS概谈.md","hash":"735d199b7b6d783c80a90edd490e6746950b3137","modified":1573647447609},{"_id":"source/_posts/MySQL.md","hash":"06830348ebe0b67c8f97f072758358ccfe50d8ed","modified":1573647546114},{"_id":"source/_posts/KNN算法.md","hash":"58c6e486a2d631908924a42f83ade18e12fcb413","modified":1573647517513},{"_id":"source/_posts/angular-导航栏与内容联动.md","hash":"68bb0c6bdc3e64ceb13448f7abe75553c252e9a5","modified":1573646960809},{"_id":"source/_posts/axios网络请求封装.md","hash":"3b56dcd708652a2cdb6c08f645c6aea1a174bd66","modified":1573646966369},{"_id":"source/_posts/css2下块级元素垂直水平居中.md","hash":"089657f64db2d5a322bd3f5637f00720c54e5d78","modified":1573647007691},{"_id":"source/_posts/css-笔记.md","hash":"af5ae8d793da86fa518830bbd05e51ced8a3dc0c","modified":1573647003145},{"_id":"source/_posts/TCP-IP三次握手.md","hash":"fcdc917fa268faa2b984f18572d69f1e17454154","modified":1573647787605},{"_id":"source/_posts/canvas绘制雪碧图导出.md","hash":"10fcb71d910cb0a7ab3b7e2d945393b581e1c772","modified":1573646985408},{"_id":"source/_posts/css3动画-vs-js动画.md","hash":"ee28adb17c077af7a98046558c6752e0ea96d6a0","modified":1573647013511},{"_id":"source/_posts/egg.md","hash":"5ba1b01f5eb2770040c72577610d08864cf10ff5","modified":1573646792955},{"_id":"source/_posts/github-travis自动构建vue项目到gitpage.md","hash":"f0f187d5bc8691eb75d200e966dcd2a0ae0f321e","modified":1573646917119},{"_id":"source/_posts/gitlab-ci配置模板.md","hash":"2877eb3d3b1efd2d357cced157fab2baa2601f7c","modified":1573647050944},{"_id":"source/_posts/gitpage-hexo.md","hash":"fed22eeabeeef1921d0e2089f2309ea243ce1df8","modified":1573647058344},{"_id":"source/_posts/css布局篇.md","hash":"b069670ec165507d2d44a6f95033682fe6159e2b","modified":1573647018109},{"_id":"source/_posts/git环境配置.md","hash":"3213eceda25efbba787d5ad52c21cd24798b7a5b","modified":1573647128464},{"_id":"source/_posts/git常用命令.md","hash":"a1f949477e086c528a2de81b19c7a106776a5bf0","modified":1578445224546},{"_id":"source/_posts/git使用指南.md","hash":"46fb3dc2888c92fbd62a1bf0ae8696593da8306c","modified":1573647087274},{"_id":"source/_posts/git域名配置.md","hash":"cdaaeed8a6f003a438096d8fa6b6b45b798c9776","modified":1573647100974},{"_id":"source/_posts/hexo-博客迁移.md","hash":"fc1ff7064eae7e367bf70d91f9c7959ddd58bf27","modified":1573647352645},{"_id":"source/_posts/hexo入门.md","hash":"30eddbec22770dec07e9e6bbd0e7ea06ae638b56","modified":1573647368156},{"_id":"source/_posts/html-笔记.md","hash":"7d79706d5b7a346133d6d58695d07c7057d543b3","modified":1573647363114},{"_id":"source/_posts/html转文本(js).md","hash":"cb8cf99e16e95879a84e19d6333d71a78bd27695","modified":1573647380437},{"_id":"source/_posts/key值在vue组件中的作用.md","hash":"714b8c080958233355a817b3343c5500169941a5","modified":1573647499634},{"_id":"source/_posts/javaScript-promise.md","hash":"c26abb0c1b535268adf4b447790e146fe08a90f5","modified":1573647389807},{"_id":"source/_posts/linux后台执行脚本.md","hash":"b70396ad5a724b174d3ed65d1ff78c603e4d5602","modified":1573647524956},{"_id":"source/_posts/n-n-阶矩阵算法.md","hash":"b9bde3607eee1ba394da60c208a005b3b1a76a03","modified":1573647589415},{"_id":"source/_posts/javaScript函数.md","hash":"0269f82450513a893fdf8aff0ba35c8d82d641ab","modified":1573647407987},{"_id":"source/_posts/javaScript面向对象编程.md","hash":"36ac8fb63fd48797acd5eb45b03107498227e5a2","modified":1573647429678},{"_id":"source/_posts/nodeJs配置.md","hash":"7f13a90d4c874ffa30fcde048589d8e89850971d","modified":1573647646965},{"_id":"source/_posts/nodeJs.md","hash":"885b5bd8b03e0ba493f94271d12863ebe4085c55","modified":1578445224546},{"_id":"source/_posts/npm常用命令.md","hash":"472c985ad0322cf1ad3afe4c7bdcceb8480cbfa9","modified":1573647671852},{"_id":"source/_posts/mac安装mysql.md","hash":"3540f94aff50aff4deec1c8dbd00ceaab15c2f77","modified":1573647974979},{"_id":"source/_posts/python3安装.md","hash":"69309731f0f574f0cf3687c64fc45080e32896cc","modified":1573647711863},{"_id":"source/_posts/python采坑集合.md","hash":"482f67ae4b7b28b26f7813864813745efb92033c","modified":1573647730678},{"_id":"source/_posts/sublime-text-nodeJS配置.md","hash":"1f08c456560637aa89eff4a86e8a82dd3adbf950","modified":1573647760999},{"_id":"source/_posts/table-cell等分.md","hash":"333182c9b146c96d80181b48f3c35a53c7ade505","modified":1573647766970},{"_id":"source/_posts/typescript环境配置.md","hash":"dc37b4165a585e1e0d8c7fc0d1b987a8ac5a19a2","modified":1573647811567},{"_id":"source/_posts/ubuntu下安装tensorflow.md","hash":"b4d58f08bf9c6e8829619d24d51c1744415291b1","modified":1573647841589},{"_id":"source/_posts/ubuntu下配置ss.md","hash":"dc3ade73c78c40c3bf790c3412c5794ff705d8b9","modified":1573647872304},{"_id":"source/_posts/ubuntu配置前端环境.md","hash":"f2e1fac4c1933bda8a640e56d4f412fb2e4da1c6","modified":1573647891057},{"_id":"source/_posts/pixi基础.md","hash":"11713db824ecaeb240a8bcefd6696456d4d5e1e2","modified":1573651831334},{"_id":"source/_posts/vue-config配置模板.md","hash":"c8c3a9c3513b7b22e393e83ebc46bede8c7b0381","modified":1558243590000},{"_id":"source/_posts/vue动态改变title.md","hash":"fcccd7f8bdf0dd4b1961f743c098f51b0d6ac75f","modified":1558243600000},{"_id":"source/_posts/vue项目搭建步骤.md","hash":"d627c5b2437b7ff89a91a39fc889f8c44545c965","modified":1558243608000},{"_id":"source/_posts/react-hooks创建电影app.md","hash":"eb87c3145ece722196860a6a24b78051a8aa01a1","modified":1573647750241},{"_id":"source/_posts/webpack.md","hash":"f2a8066c53b9916241119f03a36aa6278d94f9cf","modified":1564893076000},{"_id":"source/_posts/web请求加密.md","hash":"7b2df4d72b8b6a020f7d0c629121d4a8f2c6bcc9","modified":1558243618000},{"_id":"source/_posts/wsl配置.md","hash":"45d2fa2d0790d04cfb911bc2c1c9df0f3fd7f265","modified":1558243662000},{"_id":"source/_posts/wordpress安装.md","hash":"531dcf9babb19a6c2f9c924bb2e357d9fb7c0157","modified":1558243640000},{"_id":"source/_posts/yml文件操作方法.md","hash":"846a8bc4dc72cd238042fd8661b73a36c7f3556a","modified":1558246294000},{"_id":"source/_posts/下拉列表的实现.md","hash":"4073d1e7675e43fa217889cb06cf497c0118650d","modified":1578445224546},{"_id":"source/_posts/一键生成响应式表格.md","hash":"d97239d8f4ea894a1d68e44c57acacd08d684d8e","modified":1558243682000},{"_id":"source/_posts/两数求和问题.md","hash":"7d04e14e14ed5f42db816332524f9f954175dc86","modified":1558243694000},{"_id":"source/_posts/关于写周报的笔记.md","hash":"918d4bc0d563ab8c6205bbc57fed8b63c30cc2d8","modified":1558246404000},{"_id":"source/_posts/代码优化.md","hash":"0a3d0ab63231b49f96443aa1efb41edfd600d504","modified":1578445224546},{"_id":"source/_posts/前端性能优化.md","hash":"2e08b49814d510d6d1e9ac66f5f1ff62df9b2d70","modified":1558243764000},{"_id":"source/_posts/分页算法.md","hash":"92b8de0f01f05b60cf6de484a3e455b87af67199","modified":1558243750000},{"_id":"source/_posts/前端面试总结——读书郎.md","hash":"ac4e7989aac9640c3effbacd549c6b984b14880f","modified":1558243810000},{"_id":"source/_posts/单向列表拼接.md","hash":"26f020bd5c88c2cbdd3c3e7b959945d9da9452e1","modified":1568541792000},{"_id":"source/_posts/写给大家看的算法书笔记.md","hash":"08e75520f1076894c0b471f2b73cf3fc75e42947","modified":1558243720000},{"_id":"source/_posts/前端绘制图形验证码.md","hash":"f2a582c308d624c9496dd6faec4838afc8282ee2","modified":1572571419418},{"_id":"source/_posts/初始化可伸缩数组.md","hash":"188d840f516f8c2436abedb7c1be1fccd6e02db1","modified":1561875546000},{"_id":"source/_posts/反转整数.md","hash":"56b15e2d2136fd83ee6fd424f6da9648de59f279","modified":1567924380000},{"_id":"source/_posts/同步源代码.md","hash":"4c8cbb6e769686404a5ac9f989bc47c4e140e743","modified":1558243834000},{"_id":"source/_posts/四个JS小技巧.md","hash":"d1ec453f5e4ace1f76e5c0b841372fa63cd674fb","modified":1563290326000},{"_id":"source/_posts/天使之恋.md","hash":"bb1cc817b773f921ed031d6d344b038eaccc97d6","modified":1526808860000},{"_id":"source/_posts/回文数判断.md","hash":"301baa43eafa0126aacc712f5a2925104537e506","modified":1567924468000},{"_id":"source/_posts/寻找数组中重复元素个数的简洁方法.md","hash":"7a2ed3f7acda346cf7e4ced0694a4d345cd861c0","modified":1561875224000},{"_id":"source/_posts/对象属性值监听.md","hash":"cb8fd528d7c78eb7c38d323cfc7704340204d4c4","modified":1561875486000},{"_id":"source/_posts/布尔变量在项目中的应用.md","hash":"778aa68f2bb90aab7ba45f1a1e57fa81294a268b","modified":1558246252000},{"_id":"source/_posts/微信小程序踩坑.md","hash":"07159437e2907ffcbdae59c68ec7d4f9b2ee7209","modified":1558243864000},{"_id":"source/_posts/拼音学习项目笔记.md","hash":"55c9439fb74190e37ff05ceae9e3ea3eaada8dc5","modified":1558243874000},{"_id":"source/_posts/括号匹配.md","hash":"7b9dbe3c540bf485d2838d51fda9325256843d28","modified":1567924406000},{"_id":"source/_posts/找出数组中相加等于目标值的两个元素下标.md","hash":"df30b45d590414be90ee3f499adbc98bf5cb8d94","modified":1567924310000},{"_id":"source/_posts/搭建 Django 博客系统.md","hash":"a552a88fda1c73eec9d60298bb56fbb14e4982c7","modified":1558243892000},{"_id":"source/_posts/数组、对象的深拷贝.md","hash":"b07123d59142ea002c8ced15a3ed17b732923054","modified":1561875620000},{"_id":"source/_posts/日语学习笔记.md","hash":"f47f7044ceae62da8e759d9bd95a3ec86287997b","modified":1554011394000},{"_id":"source/_posts/模型训练步骤.md","hash":"9984be122397cbf69856cdea0ab349665ecfdcd7","modified":1558243904000},{"_id":"source/_posts/时间戳转日期.md","hash":"bf3789f2573a5c8af0b1ca5a7d1b22a5deca621e","modified":1561875298000},{"_id":"source/_posts/正则.md","hash":"6b588739a9d63ff5cd778d026bb12c2d8e8862d4","modified":1564893274000},{"_id":"source/_posts/每周分享第一周（5-27）.md","hash":"41680641b1c4db4fe0ed22c30713e04aa2244707","modified":1558246338000},{"_id":"source/_posts/每周分享第三周（6-8).md","hash":"31fe8d86077d5e4d941e95e7583870ab626f7421","modified":1558246348000},{"_id":"source/_posts/每周分享第二周（6-2）.md","hash":"bac051ec7c226ac2c585f8d4787ee7b2c4a4eac0","modified":1558246356000},{"_id":"source/_posts/海边的曼彻斯特.md","hash":"41bc5daf3cff8fe8a1d7316d2c485780d000fe7d","modified":1528422112000},{"_id":"source/_posts/深度工作哲学解读.md","hash":"c856b330b4642218b95246fcda3da6a767f657ad","modified":1528422304000},{"_id":"source/_posts/文件命名踩坑记录.md","hash":"c7f69cccd2243fcedd9d25f6b4d196a9dc4c7df3","modified":1573174650591},{"_id":"source/_posts/火狐删除各种虚线框.md","hash":"0c8656135b6156feb1ba69d36ba46038cd397409","modified":1558243926000},{"_id":"source/_posts/滚动翻页.md","hash":"f3c7322242f1e4268ed1940b10eb16e18e053dcc","modified":1558243918000},{"_id":"source/_posts/添加骨架屏.md","hash":"d11987b84b96c4eac5d5412dba03280ed796d9b5","modified":1578445224547},{"_id":"source/_posts/登陆华南师范大学校园网的方法.md","hash":"2244f4d8a39634a053df2954853d79927f2b5fe6","modified":1558245708000},{"_id":"source/_posts/盒模型.md","hash":"fd4dae3b778bb49bb0844147a16508f2ca2cb474","modified":1558245724000},{"_id":"source/_posts/碎片化阅读知识系统化方法.md","hash":"0db76576dbe2a7c70fd3c3a41fc8dea76519e5c5","modified":1528422292000},{"_id":"source/_posts/网页或html元素在浏览器上全屏解决方案.md","hash":"1b16db841262e798b9c999890000ac84da933a1a","modified":1558245772000},{"_id":"source/_posts/获取最长公共前缀.md","hash":"c1c4ac727e86280dbcedc27c4ffa2103e93938f7","modified":1568541716000},{"_id":"source/_posts/统计函数.md","hash":"cb421ae3b30379ab3946b6479c535c10c99a95de","modified":1572571605336},{"_id":"source/_posts/计算机图形学-2.md","hash":"7811b7209e7eb963449bd8a0b3a9a07a3a036255","modified":1573521540803},{"_id":"source/_posts/软件版本号定义.md","hash":"afb1cb0c13d81091d7835d0517fa770519512fc2","modified":1578972497554},{"_id":"source/_posts/首屏优化.md","hash":"18268c0879eb37d55c47f8d09eb482ad28d35d25","modified":1578445224547},{"_id":"source/_posts/项目模块化原则.md","hash":"cecf16365e4ac269a66bfd95b0ecd9b3a564dcc8","modified":1573174835413},{"_id":"source/_posts/计算机图形学-1.md","hash":"773d385d74353fb32a9f996cad8f5483b215a366","modified":1573521554171},{"_id":"themes/maupassant/layout/archive.pug","hash":"e749f047da5eb6449060a724a543ce84e80a2b8b","modified":1526478898000},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"b0a0ec63ee0225eaa0996d72164202bc9a28a225","modified":1526478898000},{"_id":"themes/maupassant/layout/base.pug","hash":"7451a590db6943edc099dc0e13b317c38686e8fc","modified":1526478898000},{"_id":"themes/maupassant/layout/index.pug","hash":"d1d56fa62f1293cd0cbefe96dbbde2d35b557a0a","modified":1526478898000},{"_id":"themes/maupassant/layout/page.pug","hash":"a21e638d5459120d88e45e8f18a23dc072d9ca07","modified":1526478898000},{"_id":"source/_posts/说说网页自适应和响应式布局.md","hash":"28ff05a2a993bdb2b61d01fefc4cef6184384e46","modified":1573174656337},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1526478898000},{"_id":"themes/maupassant/layout/timeline.pug","hash":"04f7efdc45acda1faff409d0f80fa5a0dd2309d0","modified":1526478898000},{"_id":"themes/maupassant/layout/post.pug","hash":"5d7181969351038521c5a42a1eb74a42f9cce6ec","modified":1574995080612},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1526478898000},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1526478898000},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1526478898000},{"_id":"themes/maupassant/languages/en.yml","hash":"518beaa8538a772ca697122264d667059797e458","modified":1526478898000},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1526478898000},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1526478898000},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"a1a9888b6cd0fd3dc45ffed3490f4ca8ce1abfd7","modified":1526478898000},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"34dba7ac67aeb316f629ca73e546fa143cc362d5","modified":1526478898000},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1526478898000},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"7bc7c17cfd498c3e0c3371cef78f08f1dc25db36","modified":1526478898000},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1526478898000},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"68bae3eb2f80e6127e03faa7ee1b78fb2e70aafc","modified":1526478898000},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1526478898000},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"d5cb5736a068258c61c15b76a79518993bb98efd","modified":1526799888000},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"595e85948da68d9e19055384f29598c4f5e74a12","modified":1573652381081},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"68d56b94c8b3e7df6f60a5be67b001739d7432be","modified":1526478898000},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"a6e49060fad643899256ad10c9fa976336086cae","modified":1573651832816},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"e34f7f52ae2a8dcbb7d6b53339b2fc4127f66851","modified":1526478898000},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"2074eb18448143d34ff104e580f8fd4324626553","modified":1526478898000},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1526478898000},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"44a932d09ed74104eda6c244fb47455d0cb94888","modified":1526478898000},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1526478898000},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1526478898000},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"6fb1d8ee09cfc4fd31e8ae53736e4f479d45e31e","modified":1526478898000},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1526478898000},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1526478898000},{"_id":"themes/maupassant/source/css/donate.css","hash":"ca39d14a598e1de5c51db4170ceb399c6a7131fe","modified":1526478898000},{"_id":"themes/maupassant/source/css/default.css","hash":"ebd3a64cb47247f995aec81b2d1fe82cfcd0c3bc","modified":1573651151390},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1526478898000},{"_id":"themes/maupassant/source/css/style.scss","hash":"6fbd86030ab272a75acfdffce755f8670d6e2c48","modified":1573652574430},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1526478898000},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1526478898000},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1526478898000},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1526478898000},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1526478898000},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1526478898000},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1526478898000},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1526478898000},{"_id":"themes/maupassant/source/donate/index.html","hash":"15cccdbea40527be50168617f239620e9d524370","modified":1526478898000},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1526478898000},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1526478898000},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1526478898000},{"_id":"themes/maupassant/source/js/search.js","hash":"dbda07a03e6edc73f1dc28a068c24a6037b97b56","modified":1526478898000},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1526478898000},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1526478898000},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1526478898000},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"b15998a45d5f386d30905cfbfbb1658336acbb5b","modified":1526478898000},{"_id":"public/search.xml","hash":"34ef42abea9aee34f59098a970078e9a6c07b880","modified":1578972518085},{"_id":"public/about/index.html","hash":"def54c88ee74e7860be7209e8124e7b6284cb41f","modified":1578972518152},{"_id":"public/2020/01/14/软件版本号定义/index.html","hash":"82b3a63356984667240adfb15d6b3b1b54abc682","modified":1578972518152},{"_id":"public/2019/11/13/mac安装mysql/index.html","hash":"815fe567ea0d8fb5669e263c8f6a88c5deac0fdc","modified":1578972518152},{"_id":"public/2019/11/08/文件命名踩坑记录/index.html","hash":"06933e9aac4a7c5a49f2f81aa5e14a06f6a493b2","modified":1578972518152},{"_id":"public/2019/11/08/项目模块化原则/index.html","hash":"54db6a6be53aca969130bae77f239748833c6bc9","modified":1578972518152},{"_id":"public/2019/11/05/说说网页自适应和响应式布局/index.html","hash":"d5d66f135eff26b0004e2227e934f8111f6cbe59","modified":1578972518152},{"_id":"public/2019/06/30/初始化可伸缩数组/index.html","hash":"0bae051758555c3e78329726842da79b4e99c10f","modified":1578972518152},{"_id":"public/2019/06/30/时间戳转日期/index.html","hash":"a6057f7d63155802b328811846527d8691caf115","modified":1578972518152},{"_id":"public/2019/05/19/css3动画-vs-js动画/index.html","hash":"c757132f719ceb0a0945bf105618fbcfa905e094","modified":1578972518152},{"_id":"public/2019/03/31/日语学习笔记/index.html","hash":"d742be6f085af53c6d2bed5fc516211be8c4ef15","modified":1578972518152},{"_id":"public/2019/03/20/linux后台执行脚本/index.html","hash":"764426dfddeeb3ded2d7bbf0e614f5f372b8a33b","modified":1578972518152},{"_id":"public/2019/02/19/key值在vue组件中的作用/index.html","hash":"4486c0c89ab23d39b866a40969baa3054490811b","modified":1578972518152},{"_id":"public/2019/01/06/python3安装/index.html","hash":"5ab727e87c42d0b32b7d6c28d58bcabd8b3d313a","modified":1578972518152},{"_id":"public/2018/12/18/wsl配置/index.html","hash":"22cbd44c2de7404dd8733234240590aad88c91a7","modified":1578972518152},{"_id":"public/2018/09/09/同步源代码/index.html","hash":"6a5606b2072e4a9116aec48ca551114da7b5a681","modified":1578972518153},{"_id":"public/2018/09/09/微信小程序踩坑/index.html","hash":"16461cafcf9cb57b1eec40971f6a1df3a9878393","modified":1578972518153},{"_id":"public/2018/07/29/hexo-博客迁移/index.html","hash":"e8f1ff5f87f0e7a2f3bcd1267f820f3338a9d702","modified":1578972518153},{"_id":"public/2018/06/02/每周分享第二周（6-2）/index.html","hash":"e1a8775767bc3fde47bbfe8bcca344073ae7ec87","modified":1578972518153},{"_id":"public/2018/05/27/模型训练步骤/index.html","hash":"06e50e6217945c6c32f8835cd39ad2d6e2891177","modified":1578972518153},{"_id":"public/2018/05/27/ubuntu下配置ss/index.html","hash":"b2820d111e8f8885d5af1984a3727d78fc72f55d","modified":1578972518153},{"_id":"public/2018/05/27/ubuntu下安装tensorflow/index.html","hash":"2ddf58c6d736c4ea38810210feee8f7f8f7389ed","modified":1578972518153},{"_id":"public/2018/05/20/天使之恋/index.html","hash":"a47408f3eecb3b48d648eff3ff12d8c1e6b2d641","modified":1578972518153},{"_id":"public/2018/05/20/海边的曼彻斯特/index.html","hash":"883fe69ea9f48f6215034f33f83e3962079c7dcf","modified":1578972518153},{"_id":"public/2018/05/20/碎片化阅读知识系统化方法/index.html","hash":"2bff4a32324179a937862ceac46091d8cbaa8d42","modified":1578972518153},{"_id":"public/2017/05/25/TCP-IP三次握手/index.html","hash":"9643c3c3510889402fce52b41ba86293fbbef50a","modified":1578972518153},{"_id":"public/2017/05/09/git域名配置/index.html","hash":"9e10bbc4f11a4b0e522b5f3e22b74f6e15217f30","modified":1578972518153},{"_id":"public/2017/05/09/git环境配置/index.html","hash":"de802e4877547212223fe72f367ced62ea35e6a6","modified":1578972518153},{"_id":"public/2017/05/09/nodeJs配置/index.html","hash":"9d921c3b00b37e0529a2fa8309dafb8805dd7bfe","modified":1578972518153},{"_id":"public/categories/web/index.html","hash":"afd3af9a2ebf46b234f1b26cbc4c11ef15b59865","modified":1578972518153},{"_id":"public/categories/web/page/2/index.html","hash":"92197f310c7c28ac859ae063aea6790b5000239a","modified":1578972518153},{"_id":"public/categories/web/page/3/index.html","hash":"a4dd9645397fdd34368c8894d3f3de483ba09615","modified":1578972518153},{"_id":"public/categories/web/page/4/index.html","hash":"680611e20d5c6e37eb1210f89355b65a755d9384","modified":1578972518153},{"_id":"public/categories/web/page/5/index.html","hash":"1d4c363dd718ee8a5dcc8af5600b45932b6cf099","modified":1578972518153},{"_id":"public/categories/web/page/6/index.html","hash":"3d0cfcb099d25187f40777e4a5bff321909fb421","modified":1578972518153},{"_id":"public/categories/web/page/7/index.html","hash":"8591c33d51980ca9599bb896bcab50ee182a65db","modified":1578972518153},{"_id":"public/categories/python/index.html","hash":"ee1ae5657b9fecfbdffa612406ed4e1540421831","modified":1578972518153},{"_id":"public/categories/系统/index.html","hash":"0465c2ab271d418c4371597422ce751b08d5422f","modified":1578972518153},{"_id":"public/categories/算法/index.html","hash":"a0b09cf61dee7b3635891a7488068892cb6870a7","modified":1578972518153},{"_id":"public/categories/算法/page/2/index.html","hash":"bb715c060d6c7ac381c33d8e1413d987d17dc78a","modified":1578972518154},{"_id":"public/categories/项目管理/index.html","hash":"503cdddf4e6a81807e2fdccfb5f56d09b9a3c10c","modified":1578972518154},{"_id":"public/categories/博客/index.html","hash":"2f68b5d0e111dd1ef360275251793cd5cb3a5856","modified":1578972518154},{"_id":"public/categories/数据库/index.html","hash":"e064e39eacaacded2c5b81f88086578130323cb8","modified":1578972518154},{"_id":"public/categories/深度学习/index.html","hash":"9f8ba418365b81097a6ac278a3b1e4f5a4dcd638","modified":1578972518154},{"_id":"public/categories/随笔/index.html","hash":"a2d8ec94b0b1d63d314b8850bb92f2045b9eab1e","modified":1578972518154},{"_id":"public/categories/语言/index.html","hash":"3db296a2480f3d795ea941925da62bed2ae8940b","modified":1578972518154},{"_id":"public/archives/index.html","hash":"277fd7e7636f4891098a9b3163b6cb4d54a7229b","modified":1578972518154},{"_id":"public/archives/page/2/index.html","hash":"17d5823c2985335a7f8bc82d1e44e34550888103","modified":1578972518154},{"_id":"public/archives/page/3/index.html","hash":"8b19eff9d9cb5276ead54b76ec1045379c7f837f","modified":1578972518154},{"_id":"public/archives/page/4/index.html","hash":"3eceed7eb68a29d026ce75dc31ee57b66ce90f12","modified":1578972518154},{"_id":"public/archives/page/5/index.html","hash":"e159204dbceea28bdb84771eb02524986bdc7979","modified":1578972518155},{"_id":"public/archives/page/6/index.html","hash":"ce6a729071c08647f2643625532458461a74f0d7","modified":1578972518155},{"_id":"public/archives/page/7/index.html","hash":"338550348dd7def311504e4daff944dfec91279d","modified":1578972518155},{"_id":"public/archives/page/8/index.html","hash":"4fe86bdefc99a7d90bbf75ae95b4f8fa061e2c2f","modified":1578972518155},{"_id":"public/archives/page/9/index.html","hash":"5b47cf6843956ea1d4283f064de93bc71197172f","modified":1578972518155},{"_id":"public/archives/page/10/index.html","hash":"fc93c3ed1005b5788214fbfcf23b04c5ebd5a243","modified":1578972518155},{"_id":"public/archives/page/11/index.html","hash":"0b2034baed03615d14e4bc4f8e69b4f1341e415f","modified":1578972518155},{"_id":"public/archives/2017/index.html","hash":"b6436d9fb29ccbf31299e63e15c7bb8cd3d1750e","modified":1578972518155},{"_id":"public/archives/2017/05/index.html","hash":"b6436d9fb29ccbf31299e63e15c7bb8cd3d1750e","modified":1578972518155},{"_id":"public/archives/2018/index.html","hash":"2171fd7042f64cdd4656fe3d793f9761c10ca7a4","modified":1578972518155},{"_id":"public/archives/2018/page/2/index.html","hash":"45ae7deb79e61b4ee5c706aee64e032c4cebf4ae","modified":1578972518155},{"_id":"public/archives/2018/page/3/index.html","hash":"61aa5326fad66a92d7c4e49dc7de9f6761e091ce","modified":1578972518155},{"_id":"public/archives/2018/page/4/index.html","hash":"6c66cdcc2191d2c71b2a8e421559fb0c64129897","modified":1578972518155},{"_id":"public/archives/2018/page/5/index.html","hash":"e9c0aaae32a7cfecd2bebaeef236f974500f94a7","modified":1578972518155},{"_id":"public/archives/2018/05/index.html","hash":"eba96d227ef635539c952e78c6ae8a027c86706b","modified":1578972518155},{"_id":"public/archives/2018/05/page/2/index.html","hash":"c9ff76778ef607ce7784db628d9dd0f1fc85c142","modified":1578972518155},{"_id":"public/archives/2018/06/index.html","hash":"cd0517fead0af6d445795c3064362479667f319c","modified":1578972518155},{"_id":"public/archives/2018/07/index.html","hash":"4c10d561640fec134cb35c43df6c938e840d3af7","modified":1578972518155},{"_id":"public/archives/2018/08/index.html","hash":"9b212d9985b4258060878c33b794d2b7418c71cd","modified":1578972518155},{"_id":"public/archives/2018/09/index.html","hash":"d1746a7153e5aa0f49898d3295dfd4619f8454d8","modified":1578972518155},{"_id":"public/archives/2018/10/index.html","hash":"cc82b9cc08ac54f439f6847297136d73004aa2af","modified":1578972518155},{"_id":"public/archives/2018/12/index.html","hash":"9cdd16ded457dc446384ee0ede16cf916b1df1cd","modified":1578972518155},{"_id":"public/archives/2019/index.html","hash":"d95e7eb298c2864ac12b928b6fd4c393b5c7f616","modified":1578972518155},{"_id":"public/archives/2019/page/2/index.html","hash":"51b0c4570375a8915c0db15199706fbd01d71344","modified":1578972518155},{"_id":"public/archives/2019/page/3/index.html","hash":"6285f035035221ce08f73a3f58204dad6684044b","modified":1578972518156},{"_id":"public/archives/2019/page/4/index.html","hash":"f9dd91001e6b99743ff7cc8891391013b21b3537","modified":1578972518156},{"_id":"public/archives/2019/page/5/index.html","hash":"4c29dd38cb1d189cff77a66ceb614021cfc61563","modified":1578972518156},{"_id":"public/archives/2019/page/6/index.html","hash":"3afde5af25ef896cefeeb880539ec95867224e7b","modified":1578972518156},{"_id":"public/archives/2019/01/index.html","hash":"941a257ff7f9d8cd1c2acf2e36041504fe066ff8","modified":1578972518156},{"_id":"public/archives/2019/02/index.html","hash":"e6849bd76f8b2427ef4a5d670dac13f83bc1f377","modified":1578972518156},{"_id":"public/archives/2019/03/index.html","hash":"fc74c16441e517ca451fda0bdcd3b685ad071c5e","modified":1578972518156},{"_id":"public/archives/2019/04/index.html","hash":"10ed9a2cb7da34d2a460ae59e00b11d99b28f12b","modified":1578972518156},{"_id":"public/archives/2019/05/index.html","hash":"9e0d84286dfeea6b0a5e5da8c3ed16c0f9efc381","modified":1578972518156},{"_id":"public/archives/2019/06/index.html","hash":"7f6e81d1c44d2e461ae3b05e6e642e47701219b5","modified":1578972518156},{"_id":"public/archives/2019/07/index.html","hash":"2ae3d1c797afd0a3decca1e264dadb48ba45ec88","modified":1578972518156},{"_id":"public/archives/2019/08/index.html","hash":"43001db291111640ffdd7f4b2c976d4eace8ced0","modified":1578972518156},{"_id":"public/archives/2019/09/index.html","hash":"71582f86b6dbf49dd16159533b848d3f2e4b509f","modified":1578972518156},{"_id":"public/archives/2019/10/index.html","hash":"e1030c8387d9067f6e43332354bc1075106ac02d","modified":1578972518156},{"_id":"public/archives/2019/11/index.html","hash":"c0852d0d72d27dd3bb2ec09ff6a86fb3bba41f39","modified":1578972518156},{"_id":"public/archives/2020/index.html","hash":"85d8c3b1c0bb2931e4f5adce642ad6f8121b6ddd","modified":1578972518156},{"_id":"public/archives/2020/01/index.html","hash":"85d8c3b1c0bb2931e4f5adce642ad6f8121b6ddd","modified":1578972518156},{"_id":"public/page/11/index.html","hash":"39ee3d1e12a619dda31c07266d6f4c9bf12ef1e4","modified":1578972518156},{"_id":"public/tags/CKeditor/index.html","hash":"5e87a3abb7cd06c60658e649e9e3ff2e132f5e89","modified":1578972518156},{"_id":"public/tags/css/index.html","hash":"842f0c6cec06423dc331f4c6f898548fcdb0c90d","modified":1578972518156},{"_id":"public/tags/css/page/2/index.html","hash":"b79dd80eea308d3423ff718dd241681ef01a7e63","modified":1578972518157},{"_id":"public/tags/canvas/index.html","hash":"5e9fb25a7b2c6c5ccc9c1cd459c3baf97dfabec5","modified":1578972518157},{"_id":"public/tags/django/index.html","hash":"d897266ff4408885cbfce289643d11764f54a2c2","modified":1578972518157},{"_id":"public/tags/angular/index.html","hash":"bd1d8d5c68da104e5f9b16f1171c963295d3fc78","modified":1578972518157},{"_id":"public/tags/js/index.html","hash":"7816a2a9cc566e771349262bf32c323ee86e4379","modified":1578972518157},{"_id":"public/tags/js/page/2/index.html","hash":"06f4cd112bd6b0146001d87142b87bdb75615808","modified":1578972518157},{"_id":"public/tags/mysql/index.html","hash":"7acb2700c2a06ad1bdfe3e5b6b5e43e0764a751d","modified":1578972518157},{"_id":"public/tags/KNN/index.html","hash":"808877eb2c12abd36b0f786e6ad2eac9288e197e","modified":1578972518157},{"_id":"public/tags/http/index.html","hash":"94f5d9f7cbd938f7f35ce0861efe69ebab71e51d","modified":1578972518157},{"_id":"public/tags/egg/index.html","hash":"07ded0ec5efc53c1634c8b0d9a4e899930f97807","modified":1578972518157},{"_id":"public/tags/ci/index.html","hash":"ec7facd051e5096cba5a4575684444bce0e07c70","modified":1578972518157},{"_id":"public/tags/git/index.html","hash":"1a06f29ebcc6c545ea83df172e59b560f1811f67","modified":1578972518157},{"_id":"public/tags/hexo/index.html","hash":"d4ca626ccf853dfd8489646a6cde50b46f28d312","modified":1578972518157},{"_id":"public/tags/html/index.html","hash":"17979a0650d906e65f197d1347d50042c8c8ba2b","modified":1578972518157},{"_id":"public/tags/文本转换/index.html","hash":"8bb7189f19bc8ede6b504374f4f768bff824dc5b","modified":1578972518157},{"_id":"public/tags/vue/index.html","hash":"588482c5000230186ba66b7303e401c8685cf3f9","modified":1578972518157},{"_id":"public/tags/linux/index.html","hash":"24368761e9815ed7bc2d822a995ae360cf94a8de","modified":1578972518157},{"_id":"public/tags/矩阵/index.html","hash":"a571df51cc01a79eef1dfecfc1ac6f3737db3447","modified":1578972518157},{"_id":"public/tags/nodeJs/index.html","hash":"c64837a6b82686120bc2651a8b6680b703c688b9","modified":1578972518157},{"_id":"public/tags/npm/index.html","hash":"11b2853b1824c1b6e91161a3359b19cd55ea763a","modified":1578972518157},{"_id":"public/tags/笔记/index.html","hash":"353883dcb666d893e3d0dbd1e0aa847c83212391","modified":1578972518157},{"_id":"public/tags/编辑器/index.html","hash":"613eb3dcc0ca93913b7b2834cf03daa944a7f854","modified":1578972518157},{"_id":"public/tags/ts/index.html","hash":"bd9377a53365c7beed61e0fe255cb7b783f35062","modified":1578972518158},{"_id":"public/tags/tensorflow/index.html","hash":"24e526b1e3b28f380e0ada5704c681c960d8a42d","modified":1578972518158},{"_id":"public/tags/科学上网/index.html","hash":"a830cd31b707bc8310d1905839c7b5f38d71f20d","modified":1578972518158},{"_id":"public/tags/环境配置/index.html","hash":"f967c55aa97a5c00a92f299af8db71be768f4e9a","modified":1578972518158},{"_id":"public/tags/2D/index.html","hash":"c8e5404dfff22ea1d1b7ddfa5a96a3160819ca0a","modified":1578972518158},{"_id":"public/tags/react/index.html","hash":"b10255cd9a34a484997e844c0b39068f705b6770","modified":1578972518158},{"_id":"public/tags/webpack/index.html","hash":"2e44a97dae531947bd97a2b97f97bd2030b17d75","modified":1578972518158},{"_id":"public/tags/wordpress/index.html","hash":"045c273215691b4219bdac17e435b673781c9128","modified":1578972518158},{"_id":"public/tags/文本操作/index.html","hash":"74fd66334e152371c024a3504de4278c4add337b","modified":1578972518158},{"_id":"public/tags/vue-组件/index.html","hash":"bcc5c62d668b6ed71d4fa6c1960ad0db5b323647","modified":1578972518158},{"_id":"public/tags/leetcode/index.html","hash":"8860b746a22cbbb420bcaf8f5280971e9f0704a2","modified":1578972518158},{"_id":"public/tags/个人管理/index.html","hash":"ff22d9c8ddcdc46ae09c5001422bb8f779a86bbe","modified":1578972518158},{"_id":"public/tags/性能优化/index.html","hash":"f685dd48c1fba1697d65957fcf3d0b12f49402c2","modified":1578972518158},{"_id":"public/tags/分页/index.html","hash":"6f449705472fb05898cfe5edd15199e02ba4c9b8","modified":1578972518158},{"_id":"public/tags/面试/index.html","hash":"4479e5d08e6c955b839497eb0f2c21b1404de1b6","modified":1578972518158},{"_id":"public/tags/algorithmn-simple/index.html","hash":"14f0c783b080d8ad96ab7e76c80931a7b757216e","modified":1578972518158},{"_id":"public/tags/影评/index.html","hash":"d2fc73d8c4da41f383361a9399e75d61e24b6ebb","modified":1578972518158},{"_id":"public/tags/经验/index.html","hash":"b08b4863c2f0b0abfa90c83d6c23adfc038b88fe","modified":1578972518158},{"_id":"public/tags/小程序/index.html","hash":"65b04020618fc6ea08a719251b5bf72521be2c3f","modified":1578972518158},{"_id":"public/tags/Django/index.html","hash":"82a124003895a74854112165b65559f037950570","modified":1578972518158},{"_id":"public/tags/日语/index.html","hash":"745f919641153d20b98f2f8b5969f02a1c740c7a","modified":1578972518158},{"_id":"public/tags/正则/index.html","hash":"48e2ae424f6735a0e9067c9a887785c6f6df0535","modified":1578972518158},{"_id":"public/tags/分享/index.html","hash":"3747600ffff42fa1547216a3d35226b46cd7b2ce","modified":1578972518159},{"_id":"public/tags/开发风格/index.html","hash":"3b8d04867c3574fb9f548ac5d8d79b95e790b6c2","modified":1578972518159},{"_id":"public/tags/翻页/index.html","hash":"6f061e73506234fe0cfeec6716d92795a07de5bc","modified":1578972518159},{"_id":"public/tags/PWA/index.html","hash":"0fbe0ac272651a9a89bb8e59ee3491a7836ffd35","modified":1578972518159},{"_id":"public/tags/3D/index.html","hash":"dce5340491ad52fec46af291222b85ca46a16a4c","modified":1578972518159},{"_id":"public/tags/项目模块化/index.html","hash":"8c0958d14f12cb39a6c3e3ba8d6c7dbfec304690","modified":1578972518159},{"_id":"public/2019/11/12/pixi基础/index.html","hash":"44197388ccae3a9b5a112fb33520aa8d4453fbc5","modified":1578972518159},{"_id":"public/2019/11/12/计算机图形学-2/index.html","hash":"59c9bedcd951be1b952bac519fea07667e35d2be","modified":1578972518159},{"_id":"public/2019/11/11/计算机图形学-1/index.html","hash":"185ff5af97760f51d69510d9ff297505acfbe88f","modified":1578972518159},{"_id":"public/2019/11/01/react-hooks创建电影app/index.html","hash":"7ef52648db33b8e766e638de13d84630ef04fab2","modified":1578972518159},{"_id":"public/2019/10/26/canvas绘制雪碧图导出/index.html","hash":"e18b960ddf9299e6c6599e2c1b38d952787af931","modified":1578972518159},{"_id":"public/2019/09/26/添加骨架屏/index.html","hash":"592d1830e14b2878303305f42e20f3981f1564a0","modified":1578972518159},{"_id":"public/2019/09/15/单向列表拼接/index.html","hash":"d0401aef79fb02259256b732c3211c749fac5b8e","modified":1578972518159},{"_id":"public/2019/09/08/回文数判断/index.html","hash":"2d45e6897a5a81fc686dfbf89dec6420de49251e","modified":1578972518159},{"_id":"public/2019/09/08/括号匹配/index.html","hash":"b10051f9b2222908c575ad62d76f944df7b04ad6","modified":1578972518159},{"_id":"public/2019/09/15/获取最长公共前缀/index.html","hash":"f03751b799bb0cc07108fc7b94d91e2570c82a6e","modified":1578972518159},{"_id":"public/2019/09/08/反转整数/index.html","hash":"88c34111e028be7e5b1de1cb624b4f9633b7c6be","modified":1578972518159},{"_id":"public/2019/09/08/找出数组中相加等于目标值的两个元素下标/index.html","hash":"e7c730380acf12cc553f7ef018ee6a752b0cd3e9","modified":1578972518159},{"_id":"public/2019/09/01/下拉列表的实现/index.html","hash":"156e41b4876c185f302ae6e6a7f4a35cee4ee02e","modified":1578972518159},{"_id":"public/2019/08/25/Canvas画动态路径/index.html","hash":"f3c26e5387f9542a38d1e4933da87a37535afa00","modified":1578972518159},{"_id":"public/2019/08/17/npm常用命令/index.html","hash":"7f289bce65fef46d42cbd8a6f2e75b0f57793ddf","modified":1578972518160},{"_id":"public/2019/08/11/css布局篇/index.html","hash":"6076116c7613ffcfe64de8e4987ae02f5c60769f","modified":1578972518160},{"_id":"public/2019/08/11/统计函数/index.html","hash":"a37889bb7c754916d03fd83784478734a356934f","modified":1578972518160},{"_id":"public/2019/08/11/nodeJs/index.html","hash":"66fefe9c53509c622df11fa2555d2e71a854845c","modified":1578972518160},{"_id":"public/2019/08/04/egg/index.html","hash":"2ab1f747e081cd19a247c4c1e0d795631cfd930c","modified":1578972518160},{"_id":"public/2019/08/04/正则/index.html","hash":"1616948d805328c516662eef1f33ccf0023cdf83","modified":1578972518160},{"_id":"public/2019/08/04/webpack/index.html","hash":"1a65eac8916cb9a8c61f57b2d68ffcc8dd1dc19f","modified":1578972518160},{"_id":"public/2019/08/04/github-travis自动构建vue项目到gitpage/index.html","hash":"242e273e1ab667fc7bdd6237a90a2c724c331214","modified":1578972518160},{"_id":"public/2019/07/16/四个JS小技巧/index.html","hash":"b319d04af2d1c301c4a3f62ffcfebe5f3d79b21d","modified":1578972518160},{"_id":"public/2019/06/30/数组、对象的深拷贝/index.html","hash":"dd7d01498df6fdb820474344f5ee8f3555efa07a","modified":1578972518160},{"_id":"public/2019/06/30/对象属性值监听/index.html","hash":"3638e9af87c543ff28c0fad699647aec8294fcac","modified":1578972518160},{"_id":"public/2019/06/30/代码优化/index.html","hash":"8f58bfe6c6a06f1853f089f41b8f594dccaea975","modified":1578972518160},{"_id":"public/2019/06/30/寻找数组中重复元素个数的简洁方法/index.html","hash":"a3544e4654bfa97f023abc537deb4ef23dd100fd","modified":1578972518160},{"_id":"public/2019/04/15/滚动翻页/index.html","hash":"fe9198d1ecbf63a9db3beb954129e3ee1c27f9a5","modified":1578972518160},{"_id":"public/2019/03/30/KNN算法/index.html","hash":"22d46c2a11f86ebe5641aef0ff60e945e9fb69a6","modified":1578972518160},{"_id":"public/2019/03/20/table-cell等分/index.html","hash":"41b09a46815e7e54f59d49d1c91746ae8e4abe0f","modified":1578972518160},{"_id":"public/2019/03/19/拼音学习项目笔记/index.html","hash":"45bd8994474869697708b84c5b23aebe9c6263e6","modified":1578972518160},{"_id":"public/2019/03/18/分页算法/index.html","hash":"fda89d565268d91d63dfeb9cebcddc9f517d8531","modified":1578972518160},{"_id":"public/2019/03/16/css2下块级元素垂直水平居中/index.html","hash":"a9bf7d6380c191e8eb79dd8e7adbf020cedcdcb1","modified":1578972518160},{"_id":"public/2019/03/09/MySQL/index.html","hash":"8f033abe76306f806b9e2adf3d9d26326d809081","modified":1578972518160},{"_id":"public/2019/02/28/一键生成响应式表格/index.html","hash":"ccaf92c9bfdaba2662a290222e4dc0e12d31aa9f","modified":1578972518160},{"_id":"public/2019/02/20/网页或html元素在浏览器上全屏解决方案/index.html","hash":"1a9096860f5dfe96d4db5ea91fda1a212a6b8e75","modified":1578972518160},{"_id":"public/2019/02/18/typescript环境配置/index.html","hash":"ba392e2e12d80e729662ad1a7546a40056b45e97","modified":1578972518161},{"_id":"public/2019/02/13/前端绘制图形验证码/index.html","hash":"cc40665380a90dde29501480b86fb26f3d87d6cb","modified":1578972518161},{"_id":"public/2019/02/12/火狐删除各种虚线框/index.html","hash":"91a5a9656fc9508aba9769a1928a8eb7e14d0878","modified":1578972518161},{"_id":"public/2019/01/26/css-笔记/index.html","hash":"fee3539f708dcca84618027d9d83631ffcfe66a0","modified":1578972518161},{"_id":"public/2019/01/22/html-笔记/index.html","hash":"98dc8cb8db18174473af612e4dcd2997d4b62333","modified":1578972518161},{"_id":"public/2018/12/02/首屏优化/index.html","hash":"dcfea431c7c7ed5078e48b0caef381975188cac0","modified":1578972518161},{"_id":"public/2018/10/22/前端性能优化/index.html","hash":"c10b794c72951b003f4e8a02630e743d990f227a","modified":1578972518161},{"_id":"public/2018/10/22/javaScript面向对象编程/index.html","hash":"97fe6c93b8e693015df7e63da80f912befb0f275","modified":1578972518161},{"_id":"public/2018/10/22/javaScript函数/index.html","hash":"914f80c1901704ae051a06027bc1ee276306d27c","modified":1578972518161},{"_id":"public/2018/10/22/javaScript-promise/index.html","hash":"40ffdb488ab1f6a7b43e43030a56abd04d754d71","modified":1578972518161},{"_id":"public/2018/10/22/web请求加密/index.html","hash":"409c26740b4db624189d35e10bab9741f5fcc694","modified":1578972518161},{"_id":"public/2018/10/22/axios网络请求封装/index.html","hash":"e88fc99181f9bfcfae5d6037034c74a751171c23","modified":1578972518161},{"_id":"public/2018/10/22/vue动态改变title/index.html","hash":"619c27c0b32fbf9f92a5b9e1bcc375ccf126295e","modified":1578972518161},{"_id":"public/2018/10/22/vue项目搭建步骤/index.html","hash":"b5d6c33560695d64d85a295b54e4db5583e5726b","modified":1578972518161},{"_id":"public/2018/10/22/vue-config配置模板/index.html","hash":"99198f97dc71c750b7983f3ca093f18f5f91d2b4","modified":1578972518161},{"_id":"public/2018/10/22/gitlab-ci配置模板/index.html","hash":"9a2434f3e5b92e774d9a7081782aec2d853f1b13","modified":1578972518161},{"_id":"public/2018/08/25/html转文本(js)/index.html","hash":"7eb068037dc7bde0a81abb83e066e2566a36abfe","modified":1578972518161},{"_id":"public/2018/07/30/n-n-阶矩阵算法/index.html","hash":"6fe61cd5f5add6a1290609ca940fd2eb26fb8eab","modified":1578972518161},{"_id":"public/2018/07/30/两数求和问题/index.html","hash":"208ab9b6e90f5f4bf264fb79baa624bd3a4cea6d","modified":1578972518161},{"_id":"public/2018/07/29/CSS-小技巧/index.html","hash":"a140199d84c0ee8f88e5eed27e31cd690ec279ef","modified":1578972518161},{"_id":"public/2018/07/29/angular-导航栏与内容联动/index.html","hash":"89c2324fae9c3f27f9c21a2755a3ed4af6ce8ff2","modified":1578972518161},{"_id":"public/2018/07/29/CKeditor-在-angular-中的使用文档/index.html","hash":"92170b9ee426b30b5bcf3e637802effd94063e78","modified":1578972518162},{"_id":"public/2018/07/11/git使用指南/index.html","hash":"9606e4907320898b62a27c0feae4f5ced9a32ef5","modified":1578972518162},{"_id":"public/2018/07/11/JS模态框blog/index.html","hash":"7ba9372b695f744ed5cf81f112228064cf017da5","modified":1578972518162},{"_id":"public/2018/07/08/git常用命令/index.html","hash":"54f6263937352d3396417466011c3f4fab1e2fb7","modified":1578972518162},{"_id":"public/2018/07/08/ubuntu配置前端环境/index.html","hash":"f9827a1d10f94e92cd5f7ed22fde64990c0ff4e3","modified":1578972518162},{"_id":"public/2018/06/08/每周分享第三周（6-8)/index.html","hash":"8648b090e4b6e71f5527cd1e888e4d4bcb125308","modified":1578972518162},{"_id":"public/2018/06/08/盒模型/index.html","hash":"7c83f8456f97a5dd28e444782b6050bb5dcb4cad","modified":1578972518162},{"_id":"public/2018/06/08/布尔变量在项目中的应用/index.html","hash":"ac480458dcfd0815bfdd1920a6f6e0ba9297b1ce","modified":1578972518162},{"_id":"public/2018/06/08/yml文件操作方法/index.html","hash":"7ff55c365363298c998ad093ce23cacb52628d06","modified":1578972518162},{"_id":"public/2018/06/08/python采坑集合/index.html","hash":"b393dfc7efd3657db5d8974f85c934db977f5b61","modified":1578972518162},{"_id":"public/2018/06/07/写给大家看的算法书笔记/index.html","hash":"4d52c656791fd2e5a50ac56429cd8dbcd1076010","modified":1578972518162},{"_id":"public/2018/06/07/前端面试总结——读书郎/index.html","hash":"e718673b7e6c215420d1a8b36fe3cdc3f7829cd9","modified":1578972518162},{"_id":"public/2018/06/08/sublime-text-nodeJS配置/index.html","hash":"8523d411f4c95dee45aa24f7df0fd3326bc519e6","modified":1578972518162},{"_id":"public/2018/05/27/每周分享第一周（5-27）/index.html","hash":"0df621d375ab088dedda44717238b7ca04953ee5","modified":1578972518162},{"_id":"public/2018/05/20/深度工作哲学解读/index.html","hash":"59efaaed8b95f01ff9494c84b97d245bcd71105a","modified":1578972518162},{"_id":"public/2018/05/20/关于写周报的笔记/index.html","hash":"7cae312dfb467e42c9b24845630f63f9842c3cfd","modified":1578972518162},{"_id":"public/2018/05/20/登陆华南师范大学校园网的方法/index.html","hash":"bac8b8c95f501db12b8f0afb982f09c119363134","modified":1578972518162},{"_id":"public/2018/05/20/wordpress安装/index.html","hash":"d03d30e18d1f33cefdcb37c2d7172339afe72d88","modified":1578972518162},{"_id":"public/2018/05/20/gitpage-hexo/index.html","hash":"930c36beb33bc4bdb88d7c3611c5ee287ba6ca2b","modified":1578972518162},{"_id":"public/2018/05/20/JS概谈/index.html","hash":"e61c4b909d91929be2b962b24d31a3c8229c0276","modified":1578972518162},{"_id":"public/2018/05/20/Django-channels/index.html","hash":"43f8d5b92f7fcdd1988319582d41c724585958a8","modified":1578972518162},{"_id":"public/2018/05/20/hexo入门/index.html","hash":"aa8c07fadbdf7abff6ccbc8a3f3c5f0f425b125f","modified":1578972518162},{"_id":"public/2018/05/20/搭建 Django 博客系统/index.html","hash":"254bb19f3ed06a49904dd2c6103b402396a8e354","modified":1578972518162},{"_id":"public/index.html","hash":"3db555a889c56b565fd99182c3164a4f706a915f","modified":1578972518163},{"_id":"public/page/2/index.html","hash":"d5e0c15c5fe920438f7df1a9147346ebae63f876","modified":1578972518163},{"_id":"public/page/3/index.html","hash":"3b0a3be5736a2828a025b78ea3f096a91cf8e067","modified":1578972518163},{"_id":"public/page/4/index.html","hash":"df9d6af1c7b288fd3c4a43a31648930014fa2801","modified":1578972518163},{"_id":"public/page/5/index.html","hash":"c6c0e3965bc17ea556b9b2eb5a3f208f2e6d09db","modified":1578972518163},{"_id":"public/page/6/index.html","hash":"4dcfd1be591eb6a3b6c090bd4b8f08da4d5a0a4d","modified":1578972518163},{"_id":"public/page/7/index.html","hash":"57468cceb370a46f3eb96d10658ecc8be8588305","modified":1578972518163},{"_id":"public/page/8/index.html","hash":"55de49c3f7cc9ff044a91cd9291bcf294186ea98","modified":1578972518163},{"_id":"public/page/9/index.html","hash":"39340ecea4a5dfcf7fd9187172f969aff8287bca","modified":1578972518163},{"_id":"public/page/10/index.html","hash":"b7a7d830bf4bccfde023eb5e26ea906a0fb2b1f1","modified":1578972518163},{"_id":"public/favicon.ico","hash":"8d4d7c68c9dba9323504167a1b0b4315d45100fe","modified":1578972518171},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1578972518171},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1578972518172},{"_id":"public/CNAME","hash":"ef0ff7088875a632bd8e42de22b8b8467acedfa7","modified":1578972518172},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1578972518172},{"_id":"public/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1578972518172},{"_id":"public/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1578972518172},{"_id":"public/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1578972518172},{"_id":"public/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1578972518172},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1578972518216},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1578972518217},{"_id":"public/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1578972518224},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1578972518224},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1578972518224},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1578972518224},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1578972518224},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1578972518224},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1578972518224},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1578972518224},{"_id":"public/donate/index.html","hash":"04ada98363af3e45a4c8c6e7efb0340f3f236733","modified":1578972518224},{"_id":"public/css/default.css","hash":"a48595787227e8e4c9e32a18e75b896631db22c3","modified":1578972518224},{"_id":"public/css/style.css","hash":"1842dd7ef9534c28f932208b01d503b6f7b1e540","modified":1578972518224},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1578972518224}],"Category":[{"name":"web","_id":"ck5dbgu8j00038ex0paeaapyn"},{"name":"python","_id":"ck5dbgu8x000k8ex0951wq2kf"},{"name":"系统","_id":"ck5dbgu8z000s8ex0lvlk42xv"},{"name":"算法","_id":"ck5dbgu93000z8ex0go6s7lle"},{"name":"项目管理","_id":"ck5dbgu99001j8ex0eic2uhom"},{"name":"博客","_id":"ck5dbgu9i002a8ex078mnmm0f"},{"name":"数据库","_id":"ck5dbgu9w003i8ex008sz6kg1"},{"name":"深度学习","_id":"ck5dbgua200438ex0uii34x9p"},{"name":"随笔","_id":"ck5dbguak005h8ex08ciffg2a"},{"name":"语言","_id":"ck5dbgub5007l8ex06vpiauya"}],"Data":[],"Page":[{"title":"关于我","date":"2018-05-20T06:43:08.000Z","_content":"\n**称呼**：Canace\n\n**性别**：雌性\n\n**职业**：web 前端开发工程师\n\n**毕业院校**：华南师范大学\n\n**邮箱**：canance22@qq.com\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2018-05-20 14:43:08\n---\n\n**称呼**：Canace\n\n**性别**：雌性\n\n**职业**：web 前端开发工程师\n\n**毕业院校**：华南师范大学\n\n**邮箱**：canance22@qq.com\n","updated":"2019-05-19T06:18:58.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck5dbgu8c00008ex0ftzq7nx8","content":"<p><strong>称呼</strong>：Canace</p>\n<p><strong>性别</strong>：雌性</p>\n<p><strong>职业</strong>：web 前端开发工程师</p>\n<p><strong>毕业院校</strong>：华南师范大学</p>\n<p><strong>邮箱</strong>：<a href=\"mailto:canance22@qq.com\" target=\"_blank\" rel=\"noopener\">canance22@qq.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>称呼</strong>：Canace</p>\n<p><strong>性别</strong>：雌性</p>\n<p><strong>职业</strong>：web 前端开发工程师</p>\n<p><strong>毕业院校</strong>：华南师范大学</p>\n<p><strong>邮箱</strong>：<a href=\"mailto:canance22@qq.com\" target=\"_blank\" rel=\"noopener\">canance22@qq.com</a></p>\n"}],"Post":[{"title":"CKeditor 在 Angular 中的使用文档","comments":1,"date":"2018-07-29T08:07:31.000Z","_content":"\nCKeditor 是比较好用的一款所见即所得编辑器，有多种模式可供选择，里面还可集成 leText 等第三方插件，也可以自己开发一些插件，推荐使用。上手也很简单，但是在 angular 中使用还是要费一点时间，配置上也要花点时间。\n\n<!--more-->\n\n1. 下载 ckeditor;\n\n2. 把 ckeditor 解压并放到 angular 的 assets 文件中;\n\n3. 在 angular 的 index 文件中引用 ckeditor.js;\n\n4. 根据自己的需求修改 ckeditor 配置文件;\n\n5. ckeditor 相关配置说明:\n\n```js\nCKEDITOR.editorConfig = function(config) {\n  config.language = \"zh-cn\"; // 编辑器语言\n  config.skin = \"moono\"; // 编辑器皮肤,需要下载并解压到 ckeditor 的 skins 文件夹下\n  config.allowedContent = true;\n  config.toolbar = \"Full\"; // 工具条类型\n  config.extraPlugins = \"ckeditor_wiris\"; //  添加扩展插件 ckeditor_wiris\n  config.toolbar_Full = [\n    [\"Underline\", \"-\", \"Subscript\", \"Superscript\", \"RemoveFormat\"],\n    [\"Image\", \"Table\", \"SpecialChar\"],\n    [\"ckeditor_wiris_formulaEditor\"]\n  ]; // 配置工具条\n  config.width = 360; // 编辑器宽度设置\n  config.resize_enabled = false; // 编辑器拖拽设置\n};\n\nCKEDITOR.plugins.addExternal(\n  \"ckeditor_wiris\",\n  \"https://www.wiris.net/demo/plugins/ckeditor/\",\n  \"plugin.js\"\n); // 扩展编辑器引用\n```\n\n6. ckeditor 的使用有两种模式,一种是 inline 模式,使用方法是直接在相应的元素加上 contentable = \"true\" 即可生效, 第二种是 textarea 模式, 使用方法是以 class 的形式引用,这个我暂时还没有触及,之后再添加;\n\n7. 使用 ckeditor inline 模式会有一个广告,xx 所见即所得编辑器, 这句话可以通过删除 ckeditor.js 文件中的一些语句来删掉,要删除的语句如下:\n\n```js\na.title =\n  \"string\" == typeof d || !1 === d ? d : [a.lang.editor, a.name].join(\", \");\n```\n\n也可以通过设置 config.title = ' '， 去除编辑框的 title。\n\n8. 工具栏加数学公式插件的方法:\n\n(1) 下载 ckeditor_wiri , 下载 asp 版, 具体为什么,是因为我只学过 asp.net, 看着有眼缘, 使用应该都没差吧;\n\n(2) config.js 添加如下语句:\n\nA. `config.extraPlugins = 'ckeditor_wiris';`\n\nB. `[ 'ckeditor_wiris_formulaEditor']`\n\nC. `CKEDITOR.plugins.addExternal('ckeditor_wiris', 'https://www.wiris.net/demo/plugins/ckeditor/', 'plugin.js');`\n\n此外,要修改显示图标可以替换掉相应的 icon\n\n9. CKedditor inline 模式是默认初始化一个全局实例的，也就是在页面的所有地方用 contenteditable = true 都会初始化一个 inline 编辑器，而这并不是我们想要的结果，可以通过在 index.html 中添加以下语句，禁止自动初始化编辑器： `CKEDITOR.disableAutoInline = true;`\n\n10. 禁用了默认初始化全局实例，我们要用的话，就自己在相应的组件初始化一个编辑器就行了，大概思路就是，创建一个 editors 变量用于存储 CKeditor 实例， 声明一个初始化编辑器的函数，函数接收所有类名为 ckeditor 的元素，遍历这些元素，在相应的节点上依次添加编辑器的实例（\n    CKEDITOR.inline(elements[i])），保存在 editors 中，在 ngAfterViewInit() 生命周期钩子中执行函数，目的是在文档加载完之后执行函数，因为一开始元素默认隐藏状态还没加载进来，初始化不了。在执行完了函数之后，为了提高性能，记得把初始化的实例都销毁掉。\n","source":"_posts/CKeditor-在-angular-中的使用文档.md","raw":"---\ntitle: CKeditor 在 angular 中的使用文档\ncomments: true\ndate: 2018-07-29 16:07:31\ncategories: web\ntags: CKeditor\n---\n\nCKeditor 是比较好用的一款所见即所得编辑器，有多种模式可供选择，里面还可集成 leText 等第三方插件，也可以自己开发一些插件，推荐使用。上手也很简单，但是在 angular 中使用还是要费一点时间，配置上也要花点时间。\n\n<!--more-->\n\n1. 下载 ckeditor;\n\n2. 把 ckeditor 解压并放到 angular 的 assets 文件中;\n\n3. 在 angular 的 index 文件中引用 ckeditor.js;\n\n4. 根据自己的需求修改 ckeditor 配置文件;\n\n5. ckeditor 相关配置说明:\n\n```js\nCKEDITOR.editorConfig = function(config) {\n  config.language = \"zh-cn\"; // 编辑器语言\n  config.skin = \"moono\"; // 编辑器皮肤,需要下载并解压到 ckeditor 的 skins 文件夹下\n  config.allowedContent = true;\n  config.toolbar = \"Full\"; // 工具条类型\n  config.extraPlugins = \"ckeditor_wiris\"; //  添加扩展插件 ckeditor_wiris\n  config.toolbar_Full = [\n    [\"Underline\", \"-\", \"Subscript\", \"Superscript\", \"RemoveFormat\"],\n    [\"Image\", \"Table\", \"SpecialChar\"],\n    [\"ckeditor_wiris_formulaEditor\"]\n  ]; // 配置工具条\n  config.width = 360; // 编辑器宽度设置\n  config.resize_enabled = false; // 编辑器拖拽设置\n};\n\nCKEDITOR.plugins.addExternal(\n  \"ckeditor_wiris\",\n  \"https://www.wiris.net/demo/plugins/ckeditor/\",\n  \"plugin.js\"\n); // 扩展编辑器引用\n```\n\n6. ckeditor 的使用有两种模式,一种是 inline 模式,使用方法是直接在相应的元素加上 contentable = \"true\" 即可生效, 第二种是 textarea 模式, 使用方法是以 class 的形式引用,这个我暂时还没有触及,之后再添加;\n\n7. 使用 ckeditor inline 模式会有一个广告,xx 所见即所得编辑器, 这句话可以通过删除 ckeditor.js 文件中的一些语句来删掉,要删除的语句如下:\n\n```js\na.title =\n  \"string\" == typeof d || !1 === d ? d : [a.lang.editor, a.name].join(\", \");\n```\n\n也可以通过设置 config.title = ' '， 去除编辑框的 title。\n\n8. 工具栏加数学公式插件的方法:\n\n(1) 下载 ckeditor_wiri , 下载 asp 版, 具体为什么,是因为我只学过 asp.net, 看着有眼缘, 使用应该都没差吧;\n\n(2) config.js 添加如下语句:\n\nA. `config.extraPlugins = 'ckeditor_wiris';`\n\nB. `[ 'ckeditor_wiris_formulaEditor']`\n\nC. `CKEDITOR.plugins.addExternal('ckeditor_wiris', 'https://www.wiris.net/demo/plugins/ckeditor/', 'plugin.js');`\n\n此外,要修改显示图标可以替换掉相应的 icon\n\n9. CKedditor inline 模式是默认初始化一个全局实例的，也就是在页面的所有地方用 contenteditable = true 都会初始化一个 inline 编辑器，而这并不是我们想要的结果，可以通过在 index.html 中添加以下语句，禁止自动初始化编辑器： `CKEDITOR.disableAutoInline = true;`\n\n10. 禁用了默认初始化全局实例，我们要用的话，就自己在相应的组件初始化一个编辑器就行了，大概思路就是，创建一个 editors 变量用于存储 CKeditor 实例， 声明一个初始化编辑器的函数，函数接收所有类名为 ckeditor 的元素，遍历这些元素，在相应的节点上依次添加编辑器的实例（\n    CKEDITOR.inline(elements[i])），保存在 editors 中，在 ngAfterViewInit() 生命周期钩子中执行函数，目的是在文档加载完之后执行函数，因为一开始元素默认隐藏状态还没加载进来，初始化不了。在执行完了函数之后，为了提高性能，记得把初始化的实例都销毁掉。\n","slug":"CKeditor-在-angular-中的使用文档","published":1,"updated":"2019-11-13T12:09:49.934Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu8d00018ex0zimkqcqe","content":"<p>CKeditor 是比较好用的一款所见即所得编辑器，有多种模式可供选择，里面还可集成 leText 等第三方插件，也可以自己开发一些插件，推荐使用。上手也很简单，但是在 angular 中使用还是要费一点时间，配置上也要花点时间。</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>下载 ckeditor;</p>\n</li>\n<li><p>把 ckeditor 解压并放到 angular 的 assets 文件中;</p>\n</li>\n<li><p>在 angular 的 index 文件中引用 ckeditor.js;</p>\n</li>\n<li><p>根据自己的需求修改 ckeditor 配置文件;</p>\n</li>\n<li><p>ckeditor 相关配置说明:</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CKEDITOR.editorConfig = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.language = <span class=\"string\">\"zh-cn\"</span>; <span class=\"comment\">// 编辑器语言</span></span><br><span class=\"line\">  config.skin = <span class=\"string\">\"moono\"</span>; <span class=\"comment\">// 编辑器皮肤,需要下载并解压到 ckeditor 的 skins 文件夹下</span></span><br><span class=\"line\">  config.allowedContent = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  config.toolbar = <span class=\"string\">\"Full\"</span>; <span class=\"comment\">// 工具条类型</span></span><br><span class=\"line\">  config.extraPlugins = <span class=\"string\">\"ckeditor_wiris\"</span>; <span class=\"comment\">//  添加扩展插件 ckeditor_wiris</span></span><br><span class=\"line\">  config.toolbar_Full = [</span><br><span class=\"line\">    [<span class=\"string\">\"Underline\"</span>, <span class=\"string\">\"-\"</span>, <span class=\"string\">\"Subscript\"</span>, <span class=\"string\">\"Superscript\"</span>, <span class=\"string\">\"RemoveFormat\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"Image\"</span>, <span class=\"string\">\"Table\"</span>, <span class=\"string\">\"SpecialChar\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"ckeditor_wiris_formulaEditor\"</span>]</span><br><span class=\"line\">  ]; <span class=\"comment\">// 配置工具条</span></span><br><span class=\"line\">  config.width = <span class=\"number\">360</span>; <span class=\"comment\">// 编辑器宽度设置</span></span><br><span class=\"line\">  config.resize_enabled = <span class=\"literal\">false</span>; <span class=\"comment\">// 编辑器拖拽设置</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CKEDITOR.plugins.addExternal(</span><br><span class=\"line\">  <span class=\"string\">\"ckeditor_wiris\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"https://www.wiris.net/demo/plugins/ckeditor/\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"plugin.js\"</span></span><br><span class=\"line\">); <span class=\"comment\">// 扩展编辑器引用</span></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><p>ckeditor 的使用有两种模式,一种是 inline 模式,使用方法是直接在相应的元素加上 contentable = “true” 即可生效, 第二种是 textarea 模式, 使用方法是以 class 的形式引用,这个我暂时还没有触及,之后再添加;</p>\n</li>\n<li><p>使用 ckeditor inline 模式会有一个广告,xx 所见即所得编辑器, 这句话可以通过删除 ckeditor.js 文件中的一些语句来删掉,要删除的语句如下:</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.title =</span><br><span class=\"line\">  <span class=\"string\">\"string\"</span> == <span class=\"keyword\">typeof</span> d || !<span class=\"number\">1</span> === d ? d : [a.lang.editor, a.name].join(<span class=\"string\">\", \"</span>);</span><br></pre></td></tr></table></figure>\n<p>也可以通过设置 config.title = ‘ ‘， 去除编辑框的 title。</p>\n<ol start=\"8\">\n<li>工具栏加数学公式插件的方法:</li>\n</ol>\n<p>(1) 下载 ckeditor_wiri , 下载 asp 版, 具体为什么,是因为我只学过 asp.net, 看着有眼缘, 使用应该都没差吧;</p>\n<p>(2) config.js 添加如下语句:</p>\n<p>A. <code>config.extraPlugins = &#39;ckeditor_wiris&#39;;</code></p>\n<p>B. <code>[ &#39;ckeditor_wiris_formulaEditor&#39;]</code></p>\n<p>C. <code>CKEDITOR.plugins.addExternal(&#39;ckeditor_wiris&#39;, &#39;https://www.wiris.net/demo/plugins/ckeditor/&#39;, &#39;plugin.js&#39;);</code></p>\n<p>此外,要修改显示图标可以替换掉相应的 icon</p>\n<ol start=\"9\">\n<li><p>CKedditor inline 模式是默认初始化一个全局实例的，也就是在页面的所有地方用 contenteditable = true 都会初始化一个 inline 编辑器，而这并不是我们想要的结果，可以通过在 index.html 中添加以下语句，禁止自动初始化编辑器： <code>CKEDITOR.disableAutoInline = true;</code></p>\n</li>\n<li><p>禁用了默认初始化全局实例，我们要用的话，就自己在相应的组件初始化一个编辑器就行了，大概思路就是，创建一个 editors 变量用于存储 CKeditor 实例， 声明一个初始化编辑器的函数，函数接收所有类名为 ckeditor 的元素，遍历这些元素，在相应的节点上依次添加编辑器的实例（<br>CKEDITOR.inline(elements[i])），保存在 editors 中，在 ngAfterViewInit() 生命周期钩子中执行函数，目的是在文档加载完之后执行函数，因为一开始元素默认隐藏状态还没加载进来，初始化不了。在执行完了函数之后，为了提高性能，记得把初始化的实例都销毁掉。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>CKeditor 是比较好用的一款所见即所得编辑器，有多种模式可供选择，里面还可集成 leText 等第三方插件，也可以自己开发一些插件，推荐使用。上手也很简单，但是在 angular 中使用还是要费一点时间，配置上也要花点时间。</p>","more":"<ol>\n<li><p>下载 ckeditor;</p>\n</li>\n<li><p>把 ckeditor 解压并放到 angular 的 assets 文件中;</p>\n</li>\n<li><p>在 angular 的 index 文件中引用 ckeditor.js;</p>\n</li>\n<li><p>根据自己的需求修改 ckeditor 配置文件;</p>\n</li>\n<li><p>ckeditor 相关配置说明:</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CKEDITOR.editorConfig = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.language = <span class=\"string\">\"zh-cn\"</span>; <span class=\"comment\">// 编辑器语言</span></span><br><span class=\"line\">  config.skin = <span class=\"string\">\"moono\"</span>; <span class=\"comment\">// 编辑器皮肤,需要下载并解压到 ckeditor 的 skins 文件夹下</span></span><br><span class=\"line\">  config.allowedContent = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  config.toolbar = <span class=\"string\">\"Full\"</span>; <span class=\"comment\">// 工具条类型</span></span><br><span class=\"line\">  config.extraPlugins = <span class=\"string\">\"ckeditor_wiris\"</span>; <span class=\"comment\">//  添加扩展插件 ckeditor_wiris</span></span><br><span class=\"line\">  config.toolbar_Full = [</span><br><span class=\"line\">    [<span class=\"string\">\"Underline\"</span>, <span class=\"string\">\"-\"</span>, <span class=\"string\">\"Subscript\"</span>, <span class=\"string\">\"Superscript\"</span>, <span class=\"string\">\"RemoveFormat\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"Image\"</span>, <span class=\"string\">\"Table\"</span>, <span class=\"string\">\"SpecialChar\"</span>],</span><br><span class=\"line\">    [<span class=\"string\">\"ckeditor_wiris_formulaEditor\"</span>]</span><br><span class=\"line\">  ]; <span class=\"comment\">// 配置工具条</span></span><br><span class=\"line\">  config.width = <span class=\"number\">360</span>; <span class=\"comment\">// 编辑器宽度设置</span></span><br><span class=\"line\">  config.resize_enabled = <span class=\"literal\">false</span>; <span class=\"comment\">// 编辑器拖拽设置</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">CKEDITOR.plugins.addExternal(</span><br><span class=\"line\">  <span class=\"string\">\"ckeditor_wiris\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"https://www.wiris.net/demo/plugins/ckeditor/\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"plugin.js\"</span></span><br><span class=\"line\">); <span class=\"comment\">// 扩展编辑器引用</span></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li><p>ckeditor 的使用有两种模式,一种是 inline 模式,使用方法是直接在相应的元素加上 contentable = “true” 即可生效, 第二种是 textarea 模式, 使用方法是以 class 的形式引用,这个我暂时还没有触及,之后再添加;</p>\n</li>\n<li><p>使用 ckeditor inline 模式会有一个广告,xx 所见即所得编辑器, 这句话可以通过删除 ckeditor.js 文件中的一些语句来删掉,要删除的语句如下:</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.title =</span><br><span class=\"line\">  <span class=\"string\">\"string\"</span> == <span class=\"keyword\">typeof</span> d || !<span class=\"number\">1</span> === d ? d : [a.lang.editor, a.name].join(<span class=\"string\">\", \"</span>);</span><br></pre></td></tr></table></figure>\n<p>也可以通过设置 config.title = ‘ ‘， 去除编辑框的 title。</p>\n<ol start=\"8\">\n<li>工具栏加数学公式插件的方法:</li>\n</ol>\n<p>(1) 下载 ckeditor_wiri , 下载 asp 版, 具体为什么,是因为我只学过 asp.net, 看着有眼缘, 使用应该都没差吧;</p>\n<p>(2) config.js 添加如下语句:</p>\n<p>A. <code>config.extraPlugins = &#39;ckeditor_wiris&#39;;</code></p>\n<p>B. <code>[ &#39;ckeditor_wiris_formulaEditor&#39;]</code></p>\n<p>C. <code>CKEDITOR.plugins.addExternal(&#39;ckeditor_wiris&#39;, &#39;https://www.wiris.net/demo/plugins/ckeditor/&#39;, &#39;plugin.js&#39;);</code></p>\n<p>此外,要修改显示图标可以替换掉相应的 icon</p>\n<ol start=\"9\">\n<li><p>CKedditor inline 模式是默认初始化一个全局实例的，也就是在页面的所有地方用 contenteditable = true 都会初始化一个 inline 编辑器，而这并不是我们想要的结果，可以通过在 index.html 中添加以下语句，禁止自动初始化编辑器： <code>CKEDITOR.disableAutoInline = true;</code></p>\n</li>\n<li><p>禁用了默认初始化全局实例，我们要用的话，就自己在相应的组件初始化一个编辑器就行了，大概思路就是，创建一个 editors 变量用于存储 CKeditor 实例， 声明一个初始化编辑器的函数，函数接收所有类名为 ckeditor 的元素，遍历这些元素，在相应的节点上依次添加编辑器的实例（<br>CKEDITOR.inline(elements[i])），保存在 editors 中，在 ngAfterViewInit() 生命周期钩子中执行函数，目的是在文档加载完之后执行函数，因为一开始元素默认隐藏状态还没加载进来，初始化不了。在执行完了函数之后，为了提高性能，记得把初始化的实例都销毁掉。</p>\n</li>\n</ol>"},{"title":"CSS 小技巧","comments":1,"date":"2018-07-29T08:08:22.000Z","_content":"\n本文收录日常开发中一些 css 小技巧，包括文本处理、导航栏样式等。\n\n<!--more-->\n\n1、文本不折行\n\n有时候需要控制文本不折行, 并且以 \"....\", 代替超出的文本部分,也就是相当于 more 功能, 用 css 实现方式如下:\n\n```CSS\n.noWrap{\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n```\n\n以上 css 代码中主要用到了 csss3 的一些特性, 除了以上代码,注意给个宽度, 不然不知道什么时候需要用\"...\"代替文本, 更多相关内容可以查看 w3c 文档。\n\n2、导航栏位置固定\n\n```css\nposition: fixed;\noverflow: hidden;\nbackground: #fff;\nz-index: 50;\n```\n\nfixed 定位, 固定元素位置, 超出部分隐藏, 给背景颜色是因为内容是往上滑的,会跟导航栏有重叠部分, 设置 z-index 也是为了处理内容重叠的问题。\n\n3、隐藏浏览器默认滚动条：\n\n```css\n::-webkit-scrollbar {\n  display: none;\n}\n```\n\n4、鼠标移动到某个元素，显示列表，重点是列表跟该元素同级，若不同级就比较烧脑了，就算用 js 也不好控制\n\n结构：\n\n```html\n<div class=\"wrap\">\n  <span>鼠标移动到我，显示列表</span>\n  <ul>\n    <li></li>\n  </ul>\n</div>\n```\n\n样式：\n\n```css\nwrap {\n  ul {\n    list-style: none;\n    display: none;\n  }\n  &:hover {\n    ul {\n      display: block;\n    }\n  }\n}\n```\n\n5、Android 端，img 和 button，点击之后出现一块阴影区域，一开始以为是 user-select 作怪，设置为 none 无果，后来发现是 curser：pointer 的锅，在 Android 端 cursor 设置为 none，即可解决问题\n\n6、导航条样式操作\n\n```css\n// 自定义导航条\n/* width */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 16px;\n}\n\n/* Track */\n::-webkit-scrollbar-track {\n  border-radius: 10px;\n}\n\n/* Handle */\n::-webkit-scrollbar-thumb {\n  height: 10px;\n  background-color: #d9d9d9;\n  border-radius: 10px;\n}\n\n/* Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: rgb(14, 77, 136);\n}\n```\n\n7、图片自适应：\n\n```css\nimg {\n  max-width: 100%;\n  height: auto !important;\n}\n```\n\n8、网页适应大屏幕和小屏幕的方案：\n\n```css\nhtml,\nbody {\n  max-width: 1400px;\n  min-width: 1200px;\n}\n```\n\n9、利用 max-height 实现展开、收起效果:\n\n```css\n.element {\n  max-height: 0;\n}\n.element:hover {\n  max-height: 700px;\n  transition: ease 0.25s;\n}\n```\n\n10、利用 content 属性设置序号\n\n```css\n.reset {\n  padding-left: 20px;\n  counter-reset: wangxiaoer;\n}\n.counter:before {\n  content: counters(wangxiaoer, \"-\") \". \";\n  counter-increment: wangxiaoer;\n}\n```\n\n11、管道符号：\n\n```css\na + a:before {\n  content: \"\";\n  padding: 10px 3px 1px;\n  margin-left: 6px;\n  border-left: 1px solid gray;\n}\n```\n\n12、flex 布局最后一行左对齐\n\n用 flex 布局一时爽，一直爽，但是里面还是有些坑需要避一避的。比如说想要有间隔的布局，但是用 space-around 和 space-between 都会有一个瑕疵，那就是，最后一行并不是左对齐的，有人会说用 aligh-content，交叉轴对其啊，但是 jusfy-content 需要 flex-start 才能做到这种效果，这样子的话，就没有居中效果了，因此，只能另辟蹊径。我采用的方法比较笨拙，就是在最后一个块级元素的后面，加多两个空的等宽的块级元素，高度设置为 0，完美实现想要的效果。\n","source":"_posts/CSS-小技巧.md","raw":"---\ntitle: CSS 小技巧\ncomments: true\ndate: 2018-07-29 16:08:22\ncategories: web\ntags: css\n---\n\n本文收录日常开发中一些 css 小技巧，包括文本处理、导航栏样式等。\n\n<!--more-->\n\n1、文本不折行\n\n有时候需要控制文本不折行, 并且以 \"....\", 代替超出的文本部分,也就是相当于 more 功能, 用 css 实现方式如下:\n\n```CSS\n.noWrap{\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n```\n\n以上 css 代码中主要用到了 csss3 的一些特性, 除了以上代码,注意给个宽度, 不然不知道什么时候需要用\"...\"代替文本, 更多相关内容可以查看 w3c 文档。\n\n2、导航栏位置固定\n\n```css\nposition: fixed;\noverflow: hidden;\nbackground: #fff;\nz-index: 50;\n```\n\nfixed 定位, 固定元素位置, 超出部分隐藏, 给背景颜色是因为内容是往上滑的,会跟导航栏有重叠部分, 设置 z-index 也是为了处理内容重叠的问题。\n\n3、隐藏浏览器默认滚动条：\n\n```css\n::-webkit-scrollbar {\n  display: none;\n}\n```\n\n4、鼠标移动到某个元素，显示列表，重点是列表跟该元素同级，若不同级就比较烧脑了，就算用 js 也不好控制\n\n结构：\n\n```html\n<div class=\"wrap\">\n  <span>鼠标移动到我，显示列表</span>\n  <ul>\n    <li></li>\n  </ul>\n</div>\n```\n\n样式：\n\n```css\nwrap {\n  ul {\n    list-style: none;\n    display: none;\n  }\n  &:hover {\n    ul {\n      display: block;\n    }\n  }\n}\n```\n\n5、Android 端，img 和 button，点击之后出现一块阴影区域，一开始以为是 user-select 作怪，设置为 none 无果，后来发现是 curser：pointer 的锅，在 Android 端 cursor 设置为 none，即可解决问题\n\n6、导航条样式操作\n\n```css\n// 自定义导航条\n/* width */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 16px;\n}\n\n/* Track */\n::-webkit-scrollbar-track {\n  border-radius: 10px;\n}\n\n/* Handle */\n::-webkit-scrollbar-thumb {\n  height: 10px;\n  background-color: #d9d9d9;\n  border-radius: 10px;\n}\n\n/* Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: rgb(14, 77, 136);\n}\n```\n\n7、图片自适应：\n\n```css\nimg {\n  max-width: 100%;\n  height: auto !important;\n}\n```\n\n8、网页适应大屏幕和小屏幕的方案：\n\n```css\nhtml,\nbody {\n  max-width: 1400px;\n  min-width: 1200px;\n}\n```\n\n9、利用 max-height 实现展开、收起效果:\n\n```css\n.element {\n  max-height: 0;\n}\n.element:hover {\n  max-height: 700px;\n  transition: ease 0.25s;\n}\n```\n\n10、利用 content 属性设置序号\n\n```css\n.reset {\n  padding-left: 20px;\n  counter-reset: wangxiaoer;\n}\n.counter:before {\n  content: counters(wangxiaoer, \"-\") \". \";\n  counter-increment: wangxiaoer;\n}\n```\n\n11、管道符号：\n\n```css\na + a:before {\n  content: \"\";\n  padding: 10px 3px 1px;\n  margin-left: 6px;\n  border-left: 1px solid gray;\n}\n```\n\n12、flex 布局最后一行左对齐\n\n用 flex 布局一时爽，一直爽，但是里面还是有些坑需要避一避的。比如说想要有间隔的布局，但是用 space-around 和 space-between 都会有一个瑕疵，那就是，最后一行并不是左对齐的，有人会说用 aligh-content，交叉轴对其啊，但是 jusfy-content 需要 flex-start 才能做到这种效果，这样子的话，就没有居中效果了，因此，只能另辟蹊径。我采用的方法比较笨拙，就是在最后一个块级元素的后面，加多两个空的等宽的块级元素，高度设置为 0，完美实现想要的效果。\n","slug":"CSS-小技巧","published":1,"updated":"2019-11-13T12:09:57.085Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu8i00028ex0gdexmpxk","content":"<p>本文收录日常开发中一些 css 小技巧，包括文本处理、导航栏样式等。</p>\n<a id=\"more\"></a>\n<p>1、文本不折行</p>\n<p>有时候需要控制文本不折行, 并且以 “….”, 代替超出的文本部分,也就是相当于 more 功能, 用 css 实现方式如下:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.noWrap</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上 css 代码中主要用到了 csss3 的一些特性, 除了以上代码,注意给个宽度, 不然不知道什么时候需要用”…”代替文本, 更多相关内容可以查看 w3c 文档。</p>\n<p>2、导航栏位置固定</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">fixed</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#fff</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">z-index</span>: 50;</span><br></pre></td></tr></table></figure>\n<p>fixed 定位, 固定元素位置, 超出部分隐藏, 给背景颜色是因为内容是往上滑的,会跟导航栏有重叠部分, 设置 z-index 也是为了处理内容重叠的问题。</p>\n<p>3、隐藏浏览器默认滚动条：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、鼠标移动到某个元素，显示列表，重点是列表跟该元素同级，若不同级就比较烧脑了，就算用 js 也不好控制</p>\n<p>结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>鼠标移动到我，显示列表<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">wrap</span> &#123;</span><br><span class=\"line\">  ul &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">list-style</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    ul &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">block</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5、Android 端，img 和 button，点击之后出现一块阴影区域，一开始以为是 user-select 作怪，设置为 none 无果，后来发现是 curser：pointer 的锅，在 Android 端 cursor 设置为 none，即可解决问题</p>\n<p>6、导航条样式操作</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 自定义导航条</span><br><span class=\"line\"><span class=\"comment\">/* width */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Track */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-track</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Handle */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#d9d9d9</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Handle on hover */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(14, 77, 136);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>7、图片自适应：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: auto <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>8、网页适应大屏幕和小屏幕的方案：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">1400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>9、利用 max-height 实现展开、收起效果:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.element</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">700px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: ease <span class=\"number\">0.25s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>10、利用 content 属性设置序号</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.reset</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">counter-reset</span>: wangxiaoer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.counter</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">counters</span>(wangxiaoer, <span class=\"string\">\"-\"</span>) <span class=\"string\">\". \"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">counter-increment</span>: wangxiaoer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>11、管道符号：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> + <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">3px</span> <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>12、flex 布局最后一行左对齐</p>\n<p>用 flex 布局一时爽，一直爽，但是里面还是有些坑需要避一避的。比如说想要有间隔的布局，但是用 space-around 和 space-between 都会有一个瑕疵，那就是，最后一行并不是左对齐的，有人会说用 aligh-content，交叉轴对其啊，但是 jusfy-content 需要 flex-start 才能做到这种效果，这样子的话，就没有居中效果了，因此，只能另辟蹊径。我采用的方法比较笨拙，就是在最后一个块级元素的后面，加多两个空的等宽的块级元素，高度设置为 0，完美实现想要的效果。</p>\n","site":{"data":{}},"excerpt":"<p>本文收录日常开发中一些 css 小技巧，包括文本处理、导航栏样式等。</p>","more":"<p>1、文本不折行</p>\n<p>有时候需要控制文本不折行, 并且以 “….”, 代替超出的文本部分,也就是相当于 more 功能, 用 css 实现方式如下:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.noWrap</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上 css 代码中主要用到了 csss3 的一些特性, 除了以上代码,注意给个宽度, 不然不知道什么时候需要用”…”代替文本, 更多相关内容可以查看 w3c 文档。</p>\n<p>2、导航栏位置固定</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">fixed</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#fff</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">z-index</span>: 50;</span><br></pre></td></tr></table></figure>\n<p>fixed 定位, 固定元素位置, 超出部分隐藏, 给背景颜色是因为内容是往上滑的,会跟导航栏有重叠部分, 设置 z-index 也是为了处理内容重叠的问题。</p>\n<p>3、隐藏浏览器默认滚动条：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、鼠标移动到某个元素，显示列表，重点是列表跟该元素同级，若不同级就比较烧脑了，就算用 js 也不好控制</p>\n<p>结构：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"wrap\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>鼠标移动到我，显示列表<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">wrap</span> &#123;</span><br><span class=\"line\">  ul &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">list-style</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">none</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    ul &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">block</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5、Android 端，img 和 button，点击之后出现一块阴影区域，一开始以为是 user-select 作怪，设置为 none 无果，后来发现是 curser：pointer 的锅，在 Android 端 cursor 设置为 none，即可解决问题</p>\n<p>6、导航条样式操作</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 自定义导航条</span><br><span class=\"line\"><span class=\"comment\">/* width */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">8px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Track */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-track</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Handle */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#d9d9d9</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Handle on hover */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(14, 77, 136);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>7、图片自适应：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: auto <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>8、网页适应大屏幕和小屏幕的方案：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">1400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-width</span>: <span class=\"number\">1200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>9、利用 max-height 实现展开、收起效果:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.element</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">700px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: ease <span class=\"number\">0.25s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>10、利用 content 属性设置序号</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.reset</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">counter-reset</span>: wangxiaoer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.counter</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">counters</span>(wangxiaoer, <span class=\"string\">\"-\"</span>) <span class=\"string\">\". \"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">counter-increment</span>: wangxiaoer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>11、管道符号：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> + <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">3px</span> <span class=\"number\">1px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid gray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>12、flex 布局最后一行左对齐</p>\n<p>用 flex 布局一时爽，一直爽，但是里面还是有些坑需要避一避的。比如说想要有间隔的布局，但是用 space-around 和 space-between 都会有一个瑕疵，那就是，最后一行并不是左对齐的，有人会说用 aligh-content，交叉轴对其啊，但是 jusfy-content 需要 flex-start 才能做到这种效果，这样子的话，就没有居中效果了，因此，只能另辟蹊径。我采用的方法比较笨拙，就是在最后一个块级元素的后面，加多两个空的等宽的块级元素，高度设置为 0，完美实现想要的效果。</p>"},{"title":"Canvas 画动态路径","comments":1,"date":"2019-08-25T03:04:28.000Z","_content":"\n这个函数是一个用于画 canvas 路径的，也就是把 canvas 画线的过程演示出来的一个东东。采用的是纯 js 和 canvas 描绘方法。当然前提是得有路径的点集，不然画不了。\n\n<!--more-->\n\n#### 一、参数列表\n\n| 参数                | 类型        | 说明               |\n| ------------------- | ----------- | ------------------ |\n| config.color        | String      | 路径颜色           |\n| config.path         | Object      | 路径的点集         |\n| config.padding.left | Number      | 路径图的左偏移值   |\n| config.padding.top  | Number      | 路径图的上偏移值   |\n| config.img          | HTMLElement | 描绘路径的图       |\n| config.sw           | Number      | 描绘路径图的原始宽 |\n| config.sh           | Number      | 描绘路径图的原始高 |\n| config.scale        | Number      | 缩放尺度           |\n\n#### 二、函数\n\n```js\nexport default function drawPolygon(config) {\n  const canvas = document.getElementById(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  let t = 0;\n  const [scale, path, color, sw, sh, padding, handleEl] = [\n    config.scale,\n    config.path,\n    config.color,\n    config.sw,\n    config.sh,\n    config.padding,\n    config.handleEl\n  ];\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  const draw = () => {\n    if (t >= config.path.length) {\n      clearInterval(clock);\n      return;\n    }\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    t += 2;\n    ctx.beginPath();\n    ctx.moveTo(\n      path[0].x * scale + padding.left,\n      path[0].y * scale + padding.top\n    );\n    if (t > path.length) {\n      t = path.length;\n    }\n    if (handleEl) {\n      ctx.drawImage(\n        handleEl,\n        path[t - 1].x * scale + padding.left,\n        (path[t - 1].y - 240) * scale + padding.top,\n        sw * scale,\n        sh * scale\n      );\n    }\n\n    for (let i = 0; i < t; i++) {\n      if (config.path[i]) {\n        ctx.lineTo(\n          config.path[i].x * scale + config.padding.left,\n          config.path[i].y * scale + config.padding.top\n        );\n      }\n    }\n    ctx.strokeStyle = color || \"#07B1CA\";\n    ctx.lineWidth = 3;\n    ctx.stroke();\n  };\n\n  const clock = setInterval(draw, 50);\n}\n```\n\n#### 三、Demo 地址\n\n[Demo](https://canace22.github.io/Demos/#/) => 绘图 => canvas 路径\n","source":"_posts/Canvas画动态路径.md","raw":"---\ntitle: Canvas 画动态路径\ncomments: true\ndate: 2019-08-25 11:04:28\ncategories: web\ntags: canvas\n---\n\n这个函数是一个用于画 canvas 路径的，也就是把 canvas 画线的过程演示出来的一个东东。采用的是纯 js 和 canvas 描绘方法。当然前提是得有路径的点集，不然画不了。\n\n<!--more-->\n\n#### 一、参数列表\n\n| 参数                | 类型        | 说明               |\n| ------------------- | ----------- | ------------------ |\n| config.color        | String      | 路径颜色           |\n| config.path         | Object      | 路径的点集         |\n| config.padding.left | Number      | 路径图的左偏移值   |\n| config.padding.top  | Number      | 路径图的上偏移值   |\n| config.img          | HTMLElement | 描绘路径的图       |\n| config.sw           | Number      | 描绘路径图的原始宽 |\n| config.sh           | Number      | 描绘路径图的原始高 |\n| config.scale        | Number      | 缩放尺度           |\n\n#### 二、函数\n\n```js\nexport default function drawPolygon(config) {\n  const canvas = document.getElementById(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  let t = 0;\n  const [scale, path, color, sw, sh, padding, handleEl] = [\n    config.scale,\n    config.path,\n    config.color,\n    config.sw,\n    config.sh,\n    config.padding,\n    config.handleEl\n  ];\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  const draw = () => {\n    if (t >= config.path.length) {\n      clearInterval(clock);\n      return;\n    }\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    t += 2;\n    ctx.beginPath();\n    ctx.moveTo(\n      path[0].x * scale + padding.left,\n      path[0].y * scale + padding.top\n    );\n    if (t > path.length) {\n      t = path.length;\n    }\n    if (handleEl) {\n      ctx.drawImage(\n        handleEl,\n        path[t - 1].x * scale + padding.left,\n        (path[t - 1].y - 240) * scale + padding.top,\n        sw * scale,\n        sh * scale\n      );\n    }\n\n    for (let i = 0; i < t; i++) {\n      if (config.path[i]) {\n        ctx.lineTo(\n          config.path[i].x * scale + config.padding.left,\n          config.path[i].y * scale + config.padding.top\n        );\n      }\n    }\n    ctx.strokeStyle = color || \"#07B1CA\";\n    ctx.lineWidth = 3;\n    ctx.stroke();\n  };\n\n  const clock = setInterval(draw, 50);\n}\n```\n\n#### 三、Demo 地址\n\n[Demo](https://canace22.github.io/Demos/#/) => 绘图 => canvas 路径\n","slug":"Canvas画动态路径","published":1,"updated":"2019-11-13T12:09:40.173Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu8l00058ex0w02cfcsc","content":"<p>这个函数是一个用于画 canvas 路径的，也就是把 canvas 画线的过程演示出来的一个东东。采用的是纯 js 和 canvas 描绘方法。当然前提是得有路径的点集，不然画不了。</p>\n<a id=\"more\"></a>\n<h4 id=\"一、参数列表\"><a href=\"#一、参数列表\" class=\"headerlink\" title=\"一、参数列表\"></a>一、参数列表</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>config.color</td>\n<td>String</td>\n<td>路径颜色</td>\n</tr>\n<tr>\n<td>config.path</td>\n<td>Object</td>\n<td>路径的点集</td>\n</tr>\n<tr>\n<td>config.padding.left</td>\n<td>Number</td>\n<td>路径图的左偏移值</td>\n</tr>\n<tr>\n<td>config.padding.top</td>\n<td>Number</td>\n<td>路径图的上偏移值</td>\n</tr>\n<tr>\n<td>config.img</td>\n<td>HTMLElement</td>\n<td>描绘路径的图</td>\n</tr>\n<tr>\n<td>config.sw</td>\n<td>Number</td>\n<td>描绘路径图的原始宽</td>\n</tr>\n<tr>\n<td>config.sh</td>\n<td>Number</td>\n<td>描绘路径图的原始高</td>\n</tr>\n<tr>\n<td>config.scale</td>\n<td>Number</td>\n<td>缩放尺度</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"二、函数\"><a href=\"#二、函数\" class=\"headerlink\" title=\"二、函数\"></a>二、函数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawPolygon</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [scale, path, color, sw, sh, padding, handleEl] = [</span><br><span class=\"line\">    config.scale,</span><br><span class=\"line\">    config.path,</span><br><span class=\"line\">    config.color,</span><br><span class=\"line\">    config.sw,</span><br><span class=\"line\">    config.sh,</span><br><span class=\"line\">    config.padding,</span><br><span class=\"line\">    config.handleEl</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, canvas.width, canvas.height);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> draw = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t &gt;= config.path.length) &#123;</span><br><span class=\"line\">      clearInterval(clock);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, canvas.width, canvas.height);</span><br><span class=\"line\">    t += <span class=\"number\">2</span>;</span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.moveTo(</span><br><span class=\"line\">      path[<span class=\"number\">0</span>].x * scale + padding.left,</span><br><span class=\"line\">      path[<span class=\"number\">0</span>].y * scale + padding.top</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t &gt; path.length) &#123;</span><br><span class=\"line\">      t = path.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handleEl) &#123;</span><br><span class=\"line\">      ctx.drawImage(</span><br><span class=\"line\">        handleEl,</span><br><span class=\"line\">        path[t - <span class=\"number\">1</span>].x * scale + padding.left,</span><br><span class=\"line\">        (path[t - <span class=\"number\">1</span>].y - <span class=\"number\">240</span>) * scale + padding.top,</span><br><span class=\"line\">        sw * scale,</span><br><span class=\"line\">        sh * scale</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; t; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (config.path[i]) &#123;</span><br><span class=\"line\">        ctx.lineTo(</span><br><span class=\"line\">          config.path[i].x * scale + config.padding.left,</span><br><span class=\"line\">          config.path[i].y * scale + config.padding.top</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.strokeStyle = color || <span class=\"string\">\"#07B1CA\"</span>;</span><br><span class=\"line\">    ctx.lineWidth = <span class=\"number\">3</span>;</span><br><span class=\"line\">    ctx.stroke();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> clock = setInterval(draw, <span class=\"number\">50</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"三、Demo-地址\"><a href=\"#三、Demo-地址\" class=\"headerlink\" title=\"三、Demo 地址\"></a>三、Demo 地址</h4><p><a href=\"https://canace22.github.io/Demos/#/\" target=\"_blank\" rel=\"noopener\">Demo</a> =&gt; 绘图 =&gt; canvas 路径</p>\n","site":{"data":{}},"excerpt":"<p>这个函数是一个用于画 canvas 路径的，也就是把 canvas 画线的过程演示出来的一个东东。采用的是纯 js 和 canvas 描绘方法。当然前提是得有路径的点集，不然画不了。</p>","more":"<h4 id=\"一、参数列表\"><a href=\"#一、参数列表\" class=\"headerlink\" title=\"一、参数列表\"></a>一、参数列表</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>config.color</td>\n<td>String</td>\n<td>路径颜色</td>\n</tr>\n<tr>\n<td>config.path</td>\n<td>Object</td>\n<td>路径的点集</td>\n</tr>\n<tr>\n<td>config.padding.left</td>\n<td>Number</td>\n<td>路径图的左偏移值</td>\n</tr>\n<tr>\n<td>config.padding.top</td>\n<td>Number</td>\n<td>路径图的上偏移值</td>\n</tr>\n<tr>\n<td>config.img</td>\n<td>HTMLElement</td>\n<td>描绘路径的图</td>\n</tr>\n<tr>\n<td>config.sw</td>\n<td>Number</td>\n<td>描绘路径图的原始宽</td>\n</tr>\n<tr>\n<td>config.sh</td>\n<td>Number</td>\n<td>描绘路径图的原始高</td>\n</tr>\n<tr>\n<td>config.scale</td>\n<td>Number</td>\n<td>缩放尺度</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"二、函数\"><a href=\"#二、函数\" class=\"headerlink\" title=\"二、函数\"></a>二、函数</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawPolygon</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> t = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [scale, path, color, sw, sh, padding, handleEl] = [</span><br><span class=\"line\">    config.scale,</span><br><span class=\"line\">    config.path,</span><br><span class=\"line\">    config.color,</span><br><span class=\"line\">    config.sw,</span><br><span class=\"line\">    config.sh,</span><br><span class=\"line\">    config.padding,</span><br><span class=\"line\">    config.handleEl</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, canvas.width, canvas.height);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> draw = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t &gt;= config.path.length) &#123;</span><br><span class=\"line\">      clearInterval(clock);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, canvas.width, canvas.height);</span><br><span class=\"line\">    t += <span class=\"number\">2</span>;</span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.moveTo(</span><br><span class=\"line\">      path[<span class=\"number\">0</span>].x * scale + padding.left,</span><br><span class=\"line\">      path[<span class=\"number\">0</span>].y * scale + padding.top</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t &gt; path.length) &#123;</span><br><span class=\"line\">      t = path.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handleEl) &#123;</span><br><span class=\"line\">      ctx.drawImage(</span><br><span class=\"line\">        handleEl,</span><br><span class=\"line\">        path[t - <span class=\"number\">1</span>].x * scale + padding.left,</span><br><span class=\"line\">        (path[t - <span class=\"number\">1</span>].y - <span class=\"number\">240</span>) * scale + padding.top,</span><br><span class=\"line\">        sw * scale,</span><br><span class=\"line\">        sh * scale</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; t; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (config.path[i]) &#123;</span><br><span class=\"line\">        ctx.lineTo(</span><br><span class=\"line\">          config.path[i].x * scale + config.padding.left,</span><br><span class=\"line\">          config.path[i].y * scale + config.padding.top</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ctx.strokeStyle = color || <span class=\"string\">\"#07B1CA\"</span>;</span><br><span class=\"line\">    ctx.lineWidth = <span class=\"number\">3</span>;</span><br><span class=\"line\">    ctx.stroke();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> clock = setInterval(draw, <span class=\"number\">50</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"三、Demo-地址\"><a href=\"#三、Demo-地址\" class=\"headerlink\" title=\"三、Demo 地址\"></a>三、Demo 地址</h4><p><a href=\"https://canace22.github.io/Demos/#/\" target=\"_blank\" rel=\"noopener\">Demo</a> =&gt; 绘图 =&gt; canvas 路径</p>"},{"title":"Django-Channels","date":"2018-05-20T08:43:09.000Z","comments":1,"_content":"\n写在前面，这个项目用到了 py 的全能框架 Django 来写 web 界面，其中引用了一个通道插件 Django Channel。Django Channels 是为了解决 Django 只发送一个调用视图请求，却不断发送数据到客户端的问题而存在的。Django Channels 的实现机制大概是：生产者把消息推到通道队列中，再通过通道队列把消息传递给消费者之一。\n\n<!--more-->\n\n##### 一、 关于 Django 实现实时聊天应用\n\nDjango 实现实时聊天应用一共分为以下几步：\n\n1. 定义一个模型，用来表示聊天室和其中的消息；\n\n2. 创建聊天室视图以及相应的 urls.py 和模板；\n\n3. 定义一个通道层；\n\n4. 创建通道路由；\n\n5. 替换 Django 的基于 HTTP/WSGI 的请求处理器；\n\n6. 运行应用\n\n##### 二、 项目目录\n\n主要包括以下文件。\n\n1. **urls.py** 是 Django 项目的 URL 声明，配置目录映射。\n\n2. **_init_.py** 是一个空文件，告诉 python 该目录事一个 python 包。\n\n3. **setting.py** 是 Django 项目的配置文件，包括 template 模板 path 设置之类的。\n\n4. **wsgi.py** 是 WSGI 兼容的 Web 服务器入口。\n\n5. **asgi.py** 文件用于替换 Django 的基于 HTTP/WSGI 的请求处理器。\n\n6. **production.py** 创建队列消息。\n\n7. **logger.py** 提供 log 接口，记录 log，这里可以直接这么用，是因为在 setting 里已经配置过 logging 了。\n\n##### 三、 网页文件\n\n主要网页文件，相当于 Django 框架的一个应用实例，通过 urls.py 可以映射到该文件夹并进行页面或者函数的调用。\n\n1. **admin.py** 文件调用了 Django 的网站后台管理模块，主要使用方式是在 Django 框架的 url.py 中映射路径，激活该功能。\n\n2. **apps.py** 配置应用信息.\n\n3. **consumer.py**\n\n   (1) 首先检测有没有新的请求要求打开 WebSocket,有的话,记录该请求产生的房间并给出回应。\n\n   (2) 接着，检测有没有新的消息请求，有的话，先把它转换为 json 字段，然后把它放入消息队列，并给出回应，这个过程会一直执行，知道接下来收到客户端发出的结束请求为止。简言之，这个文档就是实现线程通信的，俗称实时通信。\n\n4. **routing.py** 通信路由，用于连接 WebSocket。\n\n5. **view.py** 视图页，渲染前端页面。\n\n6. **accounts 文件夹** 是用户组件。\n\n##### 四、 tensorflow 组件\n\n主要是用了 tensorflow 进行人机交互。\n","source":"_posts/Django-channels.md","raw":"---\ntitle: Django-channels\ndate: 2018-05-20 16:43:09\ncategories: python\ntags: django\ncomments: true\n---\n\n写在前面，这个项目用到了 py 的全能框架 Django 来写 web 界面，其中引用了一个通道插件 Django Channel。Django Channels 是为了解决 Django 只发送一个调用视图请求，却不断发送数据到客户端的问题而存在的。Django Channels 的实现机制大概是：生产者把消息推到通道队列中，再通过通道队列把消息传递给消费者之一。\n\n<!--more-->\n\n##### 一、 关于 Django 实现实时聊天应用\n\nDjango 实现实时聊天应用一共分为以下几步：\n\n1. 定义一个模型，用来表示聊天室和其中的消息；\n\n2. 创建聊天室视图以及相应的 urls.py 和模板；\n\n3. 定义一个通道层；\n\n4. 创建通道路由；\n\n5. 替换 Django 的基于 HTTP/WSGI 的请求处理器；\n\n6. 运行应用\n\n##### 二、 项目目录\n\n主要包括以下文件。\n\n1. **urls.py** 是 Django 项目的 URL 声明，配置目录映射。\n\n2. **_init_.py** 是一个空文件，告诉 python 该目录事一个 python 包。\n\n3. **setting.py** 是 Django 项目的配置文件，包括 template 模板 path 设置之类的。\n\n4. **wsgi.py** 是 WSGI 兼容的 Web 服务器入口。\n\n5. **asgi.py** 文件用于替换 Django 的基于 HTTP/WSGI 的请求处理器。\n\n6. **production.py** 创建队列消息。\n\n7. **logger.py** 提供 log 接口，记录 log，这里可以直接这么用，是因为在 setting 里已经配置过 logging 了。\n\n##### 三、 网页文件\n\n主要网页文件，相当于 Django 框架的一个应用实例，通过 urls.py 可以映射到该文件夹并进行页面或者函数的调用。\n\n1. **admin.py** 文件调用了 Django 的网站后台管理模块，主要使用方式是在 Django 框架的 url.py 中映射路径，激活该功能。\n\n2. **apps.py** 配置应用信息.\n\n3. **consumer.py**\n\n   (1) 首先检测有没有新的请求要求打开 WebSocket,有的话,记录该请求产生的房间并给出回应。\n\n   (2) 接着，检测有没有新的消息请求，有的话，先把它转换为 json 字段，然后把它放入消息队列，并给出回应，这个过程会一直执行，知道接下来收到客户端发出的结束请求为止。简言之，这个文档就是实现线程通信的，俗称实时通信。\n\n4. **routing.py** 通信路由，用于连接 WebSocket。\n\n5. **view.py** 视图页，渲染前端页面。\n\n6. **accounts 文件夹** 是用户组件。\n\n##### 四、 tensorflow 组件\n\n主要是用了 tensorflow 进行人机交互。\n","slug":"Django-channels","published":1,"updated":"2019-11-13T12:06:19.042Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu8m00068ex065lqlkyr","content":"<p>写在前面，这个项目用到了 py 的全能框架 Django 来写 web 界面，其中引用了一个通道插件 Django Channel。Django Channels 是为了解决 Django 只发送一个调用视图请求，却不断发送数据到客户端的问题而存在的。Django Channels 的实现机制大概是：生产者把消息推到通道队列中，再通过通道队列把消息传递给消费者之一。</p>\n<a id=\"more\"></a>\n<h5 id=\"一、-关于-Django-实现实时聊天应用\"><a href=\"#一、-关于-Django-实现实时聊天应用\" class=\"headerlink\" title=\"一、 关于 Django 实现实时聊天应用\"></a>一、 关于 Django 实现实时聊天应用</h5><p>Django 实现实时聊天应用一共分为以下几步：</p>\n<ol>\n<li><p>定义一个模型，用来表示聊天室和其中的消息；</p>\n</li>\n<li><p>创建聊天室视图以及相应的 urls.py 和模板；</p>\n</li>\n<li><p>定义一个通道层；</p>\n</li>\n<li><p>创建通道路由；</p>\n</li>\n<li><p>替换 Django 的基于 HTTP/WSGI 的请求处理器；</p>\n</li>\n<li><p>运行应用</p>\n</li>\n</ol>\n<h5 id=\"二、-项目目录\"><a href=\"#二、-项目目录\" class=\"headerlink\" title=\"二、 项目目录\"></a>二、 项目目录</h5><p>主要包括以下文件。</p>\n<ol>\n<li><p><strong>urls.py</strong> 是 Django 项目的 URL 声明，配置目录映射。</p>\n</li>\n<li><p><strong><em>init</em>.py</strong> 是一个空文件，告诉 python 该目录事一个 python 包。</p>\n</li>\n<li><p><strong>setting.py</strong> 是 Django 项目的配置文件，包括 template 模板 path 设置之类的。</p>\n</li>\n<li><p><strong>wsgi.py</strong> 是 WSGI 兼容的 Web 服务器入口。</p>\n</li>\n<li><p><strong>asgi.py</strong> 文件用于替换 Django 的基于 HTTP/WSGI 的请求处理器。</p>\n</li>\n<li><p><strong>production.py</strong> 创建队列消息。</p>\n</li>\n<li><p><strong>logger.py</strong> 提供 log 接口，记录 log，这里可以直接这么用，是因为在 setting 里已经配置过 logging 了。</p>\n</li>\n</ol>\n<h5 id=\"三、-网页文件\"><a href=\"#三、-网页文件\" class=\"headerlink\" title=\"三、 网页文件\"></a>三、 网页文件</h5><p>主要网页文件，相当于 Django 框架的一个应用实例，通过 urls.py 可以映射到该文件夹并进行页面或者函数的调用。</p>\n<ol>\n<li><p><strong>admin.py</strong> 文件调用了 Django 的网站后台管理模块，主要使用方式是在 Django 框架的 url.py 中映射路径，激活该功能。</p>\n</li>\n<li><p><strong>apps.py</strong> 配置应用信息.</p>\n</li>\n<li><p><strong>consumer.py</strong></p>\n<p>(1) 首先检测有没有新的请求要求打开 WebSocket,有的话,记录该请求产生的房间并给出回应。</p>\n<p>(2) 接着，检测有没有新的消息请求，有的话，先把它转换为 json 字段，然后把它放入消息队列，并给出回应，这个过程会一直执行，知道接下来收到客户端发出的结束请求为止。简言之，这个文档就是实现线程通信的，俗称实时通信。</p>\n</li>\n<li><p><strong>routing.py</strong> 通信路由，用于连接 WebSocket。</p>\n</li>\n<li><p><strong>view.py</strong> 视图页，渲染前端页面。</p>\n</li>\n<li><p><strong>accounts 文件夹</strong> 是用户组件。</p>\n</li>\n</ol>\n<h5 id=\"四、-tensorflow-组件\"><a href=\"#四、-tensorflow-组件\" class=\"headerlink\" title=\"四、 tensorflow 组件\"></a>四、 tensorflow 组件</h5><p>主要是用了 tensorflow 进行人机交互。</p>\n","site":{"data":{}},"excerpt":"<p>写在前面，这个项目用到了 py 的全能框架 Django 来写 web 界面，其中引用了一个通道插件 Django Channel。Django Channels 是为了解决 Django 只发送一个调用视图请求，却不断发送数据到客户端的问题而存在的。Django Channels 的实现机制大概是：生产者把消息推到通道队列中，再通过通道队列把消息传递给消费者之一。</p>","more":"<h5 id=\"一、-关于-Django-实现实时聊天应用\"><a href=\"#一、-关于-Django-实现实时聊天应用\" class=\"headerlink\" title=\"一、 关于 Django 实现实时聊天应用\"></a>一、 关于 Django 实现实时聊天应用</h5><p>Django 实现实时聊天应用一共分为以下几步：</p>\n<ol>\n<li><p>定义一个模型，用来表示聊天室和其中的消息；</p>\n</li>\n<li><p>创建聊天室视图以及相应的 urls.py 和模板；</p>\n</li>\n<li><p>定义一个通道层；</p>\n</li>\n<li><p>创建通道路由；</p>\n</li>\n<li><p>替换 Django 的基于 HTTP/WSGI 的请求处理器；</p>\n</li>\n<li><p>运行应用</p>\n</li>\n</ol>\n<h5 id=\"二、-项目目录\"><a href=\"#二、-项目目录\" class=\"headerlink\" title=\"二、 项目目录\"></a>二、 项目目录</h5><p>主要包括以下文件。</p>\n<ol>\n<li><p><strong>urls.py</strong> 是 Django 项目的 URL 声明，配置目录映射。</p>\n</li>\n<li><p><strong><em>init</em>.py</strong> 是一个空文件，告诉 python 该目录事一个 python 包。</p>\n</li>\n<li><p><strong>setting.py</strong> 是 Django 项目的配置文件，包括 template 模板 path 设置之类的。</p>\n</li>\n<li><p><strong>wsgi.py</strong> 是 WSGI 兼容的 Web 服务器入口。</p>\n</li>\n<li><p><strong>asgi.py</strong> 文件用于替换 Django 的基于 HTTP/WSGI 的请求处理器。</p>\n</li>\n<li><p><strong>production.py</strong> 创建队列消息。</p>\n</li>\n<li><p><strong>logger.py</strong> 提供 log 接口，记录 log，这里可以直接这么用，是因为在 setting 里已经配置过 logging 了。</p>\n</li>\n</ol>\n<h5 id=\"三、-网页文件\"><a href=\"#三、-网页文件\" class=\"headerlink\" title=\"三、 网页文件\"></a>三、 网页文件</h5><p>主要网页文件，相当于 Django 框架的一个应用实例，通过 urls.py 可以映射到该文件夹并进行页面或者函数的调用。</p>\n<ol>\n<li><p><strong>admin.py</strong> 文件调用了 Django 的网站后台管理模块，主要使用方式是在 Django 框架的 url.py 中映射路径，激活该功能。</p>\n</li>\n<li><p><strong>apps.py</strong> 配置应用信息.</p>\n</li>\n<li><p><strong>consumer.py</strong></p>\n<p>(1) 首先检测有没有新的请求要求打开 WebSocket,有的话,记录该请求产生的房间并给出回应。</p>\n<p>(2) 接着，检测有没有新的消息请求，有的话，先把它转换为 json 字段，然后把它放入消息队列，并给出回应，这个过程会一直执行，知道接下来收到客户端发出的结束请求为止。简言之，这个文档就是实现线程通信的，俗称实时通信。</p>\n</li>\n<li><p><strong>routing.py</strong> 通信路由，用于连接 WebSocket。</p>\n</li>\n<li><p><strong>view.py</strong> 视图页，渲染前端页面。</p>\n</li>\n<li><p><strong>accounts 文件夹</strong> 是用户组件。</p>\n</li>\n</ol>\n<h5 id=\"四、-tensorflow-组件\"><a href=\"#四、-tensorflow-组件\" class=\"headerlink\" title=\"四、 tensorflow 组件\"></a>四、 tensorflow 组件</h5><p>主要是用了 tensorflow 进行人机交互。</p>"},{"title":"JS 模态框————Angular","comments":1,"date":"2018-07-11T12:32:55.000Z","_content":"\n最近有个功能要做，要用到模态框，了解了一下，可以引用 boostrap + jquery 实现，但是看了看还要引用两个库，麻烦，自己写还来得快点，自己写还有个好处，想写成什么样都行。\n\n<!--more-->\n\n主要思路就是，点击按钮，弹出模态框，同时模态框外的区域不可点击。\n\n页面结构如下：\n\n```html\n<div class=\"mask\" *ngIf=\"isShow\"></div>\n<div class=\"container\">\n  <!-- 按钮：用于打开模态框 -->\n  <button class=\"btn btn-primary\" (click)=\"show()\">\n    试卷分析\n  </button>\n  <!-- 模态框 -->\n  <div class=\"modal fade\" *ngIf=\"isShow\">\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <!-- 模态框头部 -->\n        <div class=\"modal-header\">\n          <span class=\"modal-title\">试卷分析: 总分({{allScoreCount}})</span>\n          <button class=\"close\" (click)=\"close()\">&times;</button>\n        </div>\n\n        <!-- 模态框主体 -->\n        <div class=\"modal-body\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\nmask 模块是一个遮罩层，只有 isShow 为真的时候才会被触发，show 函数用于处理是否要显示模态框和遮罩层，模态框模块也写了个判断，分辨何时显示这个区域，下面是 JS 代码，很简单，但是很实用，很多地方都可以用到，用于控制显示状态。\n\n```JS\nisShow: boolean = false;\n\nshow(): void {\nthis.isShow = true;\n}\n\nclose(): void {\nthis.isShow = false;\n}\n```\n","source":"_posts/JS模态框blog.md","raw":"---\ntitle: JS 模态框————angular\ncomments: true\ndate: 2018-07-11 20:32:55\ncategories: web\ntags: angular\n---\n\n最近有个功能要做，要用到模态框，了解了一下，可以引用 boostrap + jquery 实现，但是看了看还要引用两个库，麻烦，自己写还来得快点，自己写还有个好处，想写成什么样都行。\n\n<!--more-->\n\n主要思路就是，点击按钮，弹出模态框，同时模态框外的区域不可点击。\n\n页面结构如下：\n\n```html\n<div class=\"mask\" *ngIf=\"isShow\"></div>\n<div class=\"container\">\n  <!-- 按钮：用于打开模态框 -->\n  <button class=\"btn btn-primary\" (click)=\"show()\">\n    试卷分析\n  </button>\n  <!-- 模态框 -->\n  <div class=\"modal fade\" *ngIf=\"isShow\">\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <!-- 模态框头部 -->\n        <div class=\"modal-header\">\n          <span class=\"modal-title\">试卷分析: 总分({{allScoreCount}})</span>\n          <button class=\"close\" (click)=\"close()\">&times;</button>\n        </div>\n\n        <!-- 模态框主体 -->\n        <div class=\"modal-body\"></div>\n      </div>\n    </div>\n  </div>\n</div>\n```\n\nmask 模块是一个遮罩层，只有 isShow 为真的时候才会被触发，show 函数用于处理是否要显示模态框和遮罩层，模态框模块也写了个判断，分辨何时显示这个区域，下面是 JS 代码，很简单，但是很实用，很多地方都可以用到，用于控制显示状态。\n\n```JS\nisShow: boolean = false;\n\nshow(): void {\nthis.isShow = true;\n}\n\nclose(): void {\nthis.isShow = false;\n}\n```\n","slug":"JS模态框blog","published":1,"updated":"2019-11-13T12:17:32.536Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu8o00078ex0fmdjq626","content":"<p>最近有个功能要做，要用到模态框，了解了一下，可以引用 boostrap + jquery 实现，但是看了看还要引用两个库，麻烦，自己写还来得快点，自己写还有个好处，想写成什么样都行。</p>\n<a id=\"more\"></a>\n<p>主要思路就是，点击按钮，弹出模态框，同时模态框外的区域不可点击。</p>\n<p>页面结构如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mask\"</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"isShow\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 按钮：用于打开模态框 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"show()\"</span>&gt;</span></span><br><span class=\"line\">    试卷分析</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 模态框 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal fade\"</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"isShow\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-dialog\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 模态框头部 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-header\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-title\"</span>&gt;</span>试卷分析: 总分(&#123;&#123;allScoreCount&#125;&#125;)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"close\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"close()\"</span>&gt;</span>&amp;times;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 模态框主体 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-body\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>mask 模块是一个遮罩层，只有 isShow 为真的时候才会被触发，show 函数用于处理是否要显示模态框和遮罩层，模态框模块也写了个判断，分辨何时显示这个区域，下面是 JS 代码，很简单，但是很实用，很多地方都可以用到，用于控制显示状态。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isShow: boolean = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">show(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.isShow = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">close(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.isShow = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>最近有个功能要做，要用到模态框，了解了一下，可以引用 boostrap + jquery 实现，但是看了看还要引用两个库，麻烦，自己写还来得快点，自己写还有个好处，想写成什么样都行。</p>","more":"<p>主要思路就是，点击按钮，弹出模态框，同时模态框外的区域不可点击。</p>\n<p>页面结构如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"mask\"</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"isShow\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 按钮：用于打开模态框 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"show()\"</span>&gt;</span></span><br><span class=\"line\">    试卷分析</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 模态框 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal fade\"</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">\"isShow\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-dialog\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-content\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 模态框头部 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-header\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-title\"</span>&gt;</span>试卷分析: 总分(&#123;&#123;allScoreCount&#125;&#125;)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"close\"</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"close()\"</span>&gt;</span>&amp;times;<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 模态框主体 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal-body\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>mask 模块是一个遮罩层，只有 isShow 为真的时候才会被触发，show 函数用于处理是否要显示模态框和遮罩层，模态框模块也写了个判断，分辨何时显示这个区域，下面是 JS 代码，很简单，但是很实用，很多地方都可以用到，用于控制显示状态。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">isShow: boolean = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">show(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.isShow = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">close(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.isShow = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JS 概谈","date":"2018-05-20T08:56:12.000Z","comments":1,"_content":"\n话说 JavaScript 其实是诞生在一个特殊的时期，20 世纪 90 年代，正值第三次科技革命\n时期，互联网刚开始进入人们的生活。设想一下，在网速只有几十比特的那个时代，在登录注册时要花上很长一段时间等待服务器传回验证信息，会是怎样一种体验？简直是嘴上也不笑眯眯，心里千万句 mmp 吧？为了解决这个问题，网景公司着手设计出了 JavaScript，与它的浏览器一起捆绑推出。\n\n<!--more-->\n\n这里有个问题，那就是 Java 跟 JavaScript 有什么关系呢？毕竟单词里都带有相同的“Java”字节，难免会让人把他们联系在一起啊。这里只要记住 Java 跟 JavaScript 没有半毛钱关系，如果说勉强算得上有关系的话，那就是 JavaScript 在创立之初本名叫 LiveScript，但是因为当时 Java 风头正足，为了蹭热点，改了名。\n\nJavaScript 在诞生之初，有一些克隆兄弟，比如微软家推出的 JScript。我们知道，克隆人的出现会影响社会秩序，编程语言亦然。论天下之大事，分久必合，合久必分，这个时候就继续一个统一的标准对这些脚本语言进行规范了，于是 ECMA 组织了一些大公司的程序员开始策划这个规范，ECMAScript 第一代就这样诞生了。现在我们说的 JavaScript 其实是说对 ECMAScript 的实现。\n\nECMAScript 第一代出现后，很快就繁衍到了第二代，但是这一代的 ECMAScript 基本继承了第一代的特性，对 JavaScript 的语法、句法进行描述，没有做什么改动。到第三代的时候，ECMAScript 已经开始成熟，可以被称为一门编程语言了，其中加入了新的的描述，比如支持错误处理、正则表达式等。第四代的 ECMAScript 可以说是废弃的一代，因为它的欲望太强了，试图改朝换代，把旧有的 ECMAScript 改得面目全非，最终没有被组织通过。第五代的 ECMAScript 可以说是经历了一个漫长的讨论孕育期终于在 2009 年发布了正式版，对 ECMAScript 特性进行了进一步的描述，包括引入模式，弥补 JAVAScript 松散的语言结构缺点，提供了更多方便快捷的新方法等。紧随着 ECMAScript5 之后，2015 年演化出了 ECMAScript6，这一代的 ECMAScript 是他自己看起来更像是一门系统的编程语言了，添加了箭头年符号简化函数的写法，强化了对象字面量等都使他看起来更像是年轻力壮的青年男子。进入壮年后的 ECMAScript 发展更加迅速了，2016 年推出了第六代，新增了 Array.prototype.includes 和幂运算符。2017 年又奋起直追，推出了第八代，新增了字符串填充、对象值遍历、对象的属性描述符获取、 函数参数列表与调用中的尾部逗号、异步函数、共享内存与原子操作等。\n\n所以，时至今日，ECMAScript 也就是 JavaScript 的核心标准已经发展到了第八代，但是比较经常听到周围人提起的依然是 ECMAScript6。\n","source":"_posts/JS概谈.md","raw":"---\ntitle: JS 概谈\ndate: 2018-05-20 16:56:12\ncategories: web\ntags: js\ncomments: true\n---\n\n话说 JavaScript 其实是诞生在一个特殊的时期，20 世纪 90 年代，正值第三次科技革命\n时期，互联网刚开始进入人们的生活。设想一下，在网速只有几十比特的那个时代，在登录注册时要花上很长一段时间等待服务器传回验证信息，会是怎样一种体验？简直是嘴上也不笑眯眯，心里千万句 mmp 吧？为了解决这个问题，网景公司着手设计出了 JavaScript，与它的浏览器一起捆绑推出。\n\n<!--more-->\n\n这里有个问题，那就是 Java 跟 JavaScript 有什么关系呢？毕竟单词里都带有相同的“Java”字节，难免会让人把他们联系在一起啊。这里只要记住 Java 跟 JavaScript 没有半毛钱关系，如果说勉强算得上有关系的话，那就是 JavaScript 在创立之初本名叫 LiveScript，但是因为当时 Java 风头正足，为了蹭热点，改了名。\n\nJavaScript 在诞生之初，有一些克隆兄弟，比如微软家推出的 JScript。我们知道，克隆人的出现会影响社会秩序，编程语言亦然。论天下之大事，分久必合，合久必分，这个时候就继续一个统一的标准对这些脚本语言进行规范了，于是 ECMA 组织了一些大公司的程序员开始策划这个规范，ECMAScript 第一代就这样诞生了。现在我们说的 JavaScript 其实是说对 ECMAScript 的实现。\n\nECMAScript 第一代出现后，很快就繁衍到了第二代，但是这一代的 ECMAScript 基本继承了第一代的特性，对 JavaScript 的语法、句法进行描述，没有做什么改动。到第三代的时候，ECMAScript 已经开始成熟，可以被称为一门编程语言了，其中加入了新的的描述，比如支持错误处理、正则表达式等。第四代的 ECMAScript 可以说是废弃的一代，因为它的欲望太强了，试图改朝换代，把旧有的 ECMAScript 改得面目全非，最终没有被组织通过。第五代的 ECMAScript 可以说是经历了一个漫长的讨论孕育期终于在 2009 年发布了正式版，对 ECMAScript 特性进行了进一步的描述，包括引入模式，弥补 JAVAScript 松散的语言结构缺点，提供了更多方便快捷的新方法等。紧随着 ECMAScript5 之后，2015 年演化出了 ECMAScript6，这一代的 ECMAScript 是他自己看起来更像是一门系统的编程语言了，添加了箭头年符号简化函数的写法，强化了对象字面量等都使他看起来更像是年轻力壮的青年男子。进入壮年后的 ECMAScript 发展更加迅速了，2016 年推出了第六代，新增了 Array.prototype.includes 和幂运算符。2017 年又奋起直追，推出了第八代，新增了字符串填充、对象值遍历、对象的属性描述符获取、 函数参数列表与调用中的尾部逗号、异步函数、共享内存与原子操作等。\n\n所以，时至今日，ECMAScript 也就是 JavaScript 的核心标准已经发展到了第八代，但是比较经常听到周围人提起的依然是 ECMAScript6。\n","slug":"JS概谈","published":1,"updated":"2019-11-13T12:17:27.609Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu8s000b8ex0ujrjw370","content":"<p>话说 JavaScript 其实是诞生在一个特殊的时期，20 世纪 90 年代，正值第三次科技革命<br>时期，互联网刚开始进入人们的生活。设想一下，在网速只有几十比特的那个时代，在登录注册时要花上很长一段时间等待服务器传回验证信息，会是怎样一种体验？简直是嘴上也不笑眯眯，心里千万句 mmp 吧？为了解决这个问题，网景公司着手设计出了 JavaScript，与它的浏览器一起捆绑推出。</p>\n<a id=\"more\"></a>\n<p>这里有个问题，那就是 Java 跟 JavaScript 有什么关系呢？毕竟单词里都带有相同的“Java”字节，难免会让人把他们联系在一起啊。这里只要记住 Java 跟 JavaScript 没有半毛钱关系，如果说勉强算得上有关系的话，那就是 JavaScript 在创立之初本名叫 LiveScript，但是因为当时 Java 风头正足，为了蹭热点，改了名。</p>\n<p>JavaScript 在诞生之初，有一些克隆兄弟，比如微软家推出的 JScript。我们知道，克隆人的出现会影响社会秩序，编程语言亦然。论天下之大事，分久必合，合久必分，这个时候就继续一个统一的标准对这些脚本语言进行规范了，于是 ECMA 组织了一些大公司的程序员开始策划这个规范，ECMAScript 第一代就这样诞生了。现在我们说的 JavaScript 其实是说对 ECMAScript 的实现。</p>\n<p>ECMAScript 第一代出现后，很快就繁衍到了第二代，但是这一代的 ECMAScript 基本继承了第一代的特性，对 JavaScript 的语法、句法进行描述，没有做什么改动。到第三代的时候，ECMAScript 已经开始成熟，可以被称为一门编程语言了，其中加入了新的的描述，比如支持错误处理、正则表达式等。第四代的 ECMAScript 可以说是废弃的一代，因为它的欲望太强了，试图改朝换代，把旧有的 ECMAScript 改得面目全非，最终没有被组织通过。第五代的 ECMAScript 可以说是经历了一个漫长的讨论孕育期终于在 2009 年发布了正式版，对 ECMAScript 特性进行了进一步的描述，包括引入模式，弥补 JAVAScript 松散的语言结构缺点，提供了更多方便快捷的新方法等。紧随着 ECMAScript5 之后，2015 年演化出了 ECMAScript6，这一代的 ECMAScript 是他自己看起来更像是一门系统的编程语言了，添加了箭头年符号简化函数的写法，强化了对象字面量等都使他看起来更像是年轻力壮的青年男子。进入壮年后的 ECMAScript 发展更加迅速了，2016 年推出了第六代，新增了 Array.prototype.includes 和幂运算符。2017 年又奋起直追，推出了第八代，新增了字符串填充、对象值遍历、对象的属性描述符获取、 函数参数列表与调用中的尾部逗号、异步函数、共享内存与原子操作等。</p>\n<p>所以，时至今日，ECMAScript 也就是 JavaScript 的核心标准已经发展到了第八代，但是比较经常听到周围人提起的依然是 ECMAScript6。</p>\n","site":{"data":{}},"excerpt":"<p>话说 JavaScript 其实是诞生在一个特殊的时期，20 世纪 90 年代，正值第三次科技革命<br>时期，互联网刚开始进入人们的生活。设想一下，在网速只有几十比特的那个时代，在登录注册时要花上很长一段时间等待服务器传回验证信息，会是怎样一种体验？简直是嘴上也不笑眯眯，心里千万句 mmp 吧？为了解决这个问题，网景公司着手设计出了 JavaScript，与它的浏览器一起捆绑推出。</p>","more":"<p>这里有个问题，那就是 Java 跟 JavaScript 有什么关系呢？毕竟单词里都带有相同的“Java”字节，难免会让人把他们联系在一起啊。这里只要记住 Java 跟 JavaScript 没有半毛钱关系，如果说勉强算得上有关系的话，那就是 JavaScript 在创立之初本名叫 LiveScript，但是因为当时 Java 风头正足，为了蹭热点，改了名。</p>\n<p>JavaScript 在诞生之初，有一些克隆兄弟，比如微软家推出的 JScript。我们知道，克隆人的出现会影响社会秩序，编程语言亦然。论天下之大事，分久必合，合久必分，这个时候就继续一个统一的标准对这些脚本语言进行规范了，于是 ECMA 组织了一些大公司的程序员开始策划这个规范，ECMAScript 第一代就这样诞生了。现在我们说的 JavaScript 其实是说对 ECMAScript 的实现。</p>\n<p>ECMAScript 第一代出现后，很快就繁衍到了第二代，但是这一代的 ECMAScript 基本继承了第一代的特性，对 JavaScript 的语法、句法进行描述，没有做什么改动。到第三代的时候，ECMAScript 已经开始成熟，可以被称为一门编程语言了，其中加入了新的的描述，比如支持错误处理、正则表达式等。第四代的 ECMAScript 可以说是废弃的一代，因为它的欲望太强了，试图改朝换代，把旧有的 ECMAScript 改得面目全非，最终没有被组织通过。第五代的 ECMAScript 可以说是经历了一个漫长的讨论孕育期终于在 2009 年发布了正式版，对 ECMAScript 特性进行了进一步的描述，包括引入模式，弥补 JAVAScript 松散的语言结构缺点，提供了更多方便快捷的新方法等。紧随着 ECMAScript5 之后，2015 年演化出了 ECMAScript6，这一代的 ECMAScript 是他自己看起来更像是一门系统的编程语言了，添加了箭头年符号简化函数的写法，强化了对象字面量等都使他看起来更像是年轻力壮的青年男子。进入壮年后的 ECMAScript 发展更加迅速了，2016 年推出了第六代，新增了 Array.prototype.includes 和幂运算符。2017 年又奋起直追，推出了第八代，新增了字符串填充、对象值遍历、对象的属性描述符获取、 函数参数列表与调用中的尾部逗号、异步函数、共享内存与原子操作等。</p>\n<p>所以，时至今日，ECMAScript 也就是 JavaScript 的核心标准已经发展到了第八代，但是比较经常听到周围人提起的依然是 ECMAScript6。</p>"},{"title":"Centos7 安装 MySQL","comments":1,"date":"2019-03-09T10:58:56.000Z","_content":"\ncentos7 安装 MySQL\n\n<!--more-->\n\n### 系统环境\n\n```\ncentOS7 64位\n```\n\n### 部署过程\n\n1. 添加 mysql yum 源：\n\n   ```\n   rpm -Uvh https://repo.mysql.com//mysql80-community-release-el7-2.noarch.rpm\n   ```\n\n2. 查看 yum 源中所有 Mysql 版本：\n\n   ```\n   yum repolist all | grep mysql\n   ```\n\n3. 禁用其他版本：\n\n   ```\n   yum-config-manager --disable mysql80-community\n   ```\n\n4. 启用要安装的版本 mysql5.7\n\n   ```\n   yum-config-manager --enable mysql57-community\n   ```\n\n5. 检查配置是否生效\n\n   ```\n   yum repolist enabled | grep mysql\n   ```\n\n6. 开始安装:\n\n   ```\n   yum install mysql-community-server\n   ```\n\n7. 启动服务：\n\n   ```\n   service mysqld start\n   ```\n\n8. 查看 mysql 状态:\n\n   ```\n   service mysqld status\n   ```\n\n9. 查看临时密码：\n\n   ```\n   grep 'temporary password' /var/log/mysqld.log\n   ```\n\n10. 登录\n\n    ```\n    mysql -uroot -p\n    ```\n","source":"_posts/MySQL.md","raw":"---\ntitle: centos7 安装 MySQL\ncomments: true\ndate: 2019-03-09 18:58:56\ncategories: 系统\ntags: mysql\n---\n\ncentos7 安装 MySQL\n\n<!--more-->\n\n### 系统环境\n\n```\ncentOS7 64位\n```\n\n### 部署过程\n\n1. 添加 mysql yum 源：\n\n   ```\n   rpm -Uvh https://repo.mysql.com//mysql80-community-release-el7-2.noarch.rpm\n   ```\n\n2. 查看 yum 源中所有 Mysql 版本：\n\n   ```\n   yum repolist all | grep mysql\n   ```\n\n3. 禁用其他版本：\n\n   ```\n   yum-config-manager --disable mysql80-community\n   ```\n\n4. 启用要安装的版本 mysql5.7\n\n   ```\n   yum-config-manager --enable mysql57-community\n   ```\n\n5. 检查配置是否生效\n\n   ```\n   yum repolist enabled | grep mysql\n   ```\n\n6. 开始安装:\n\n   ```\n   yum install mysql-community-server\n   ```\n\n7. 启动服务：\n\n   ```\n   service mysqld start\n   ```\n\n8. 查看 mysql 状态:\n\n   ```\n   service mysqld status\n   ```\n\n9. 查看临时密码：\n\n   ```\n   grep 'temporary password' /var/log/mysqld.log\n   ```\n\n10. 登录\n\n    ```\n    mysql -uroot -p\n    ```\n","slug":"MySQL","published":1,"updated":"2019-11-13T12:19:06.114Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu8t000c8ex0k1grfk2c","content":"<p>centos7 安装 MySQL</p>\n<a id=\"more\"></a>\n<h3 id=\"系统环境\"><a href=\"#系统环境\" class=\"headerlink\" title=\"系统环境\"></a>系统环境</h3><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ce<span class=\"symbol\">ntOS7</span> <span class=\"number\">64</span>位</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署过程\"><a href=\"#部署过程\" class=\"headerlink\" title=\"部署过程\"></a>部署过程</h3><ol>\n<li><p>添加 mysql yum 源：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -Uvh https:<span class=\"regexp\">//</span>repo.mysql.com<span class=\"regexp\">//my</span>sql80-community-release-el7-<span class=\"number\">2</span>.noarch.rpm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 yum 源中所有 Mysql 版本：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum repolist <span class=\"keyword\">all</span> | <span class=\"keyword\">grep</span> mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁用其他版本：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-<span class=\"built_in\">config</span>-manager <span class=\"comment\">--disable mysql80-community</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启用要安装的版本 mysql5.7</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-<span class=\"built_in\">config</span>-manager <span class=\"comment\">--enable mysql57-community</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查配置是否生效</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum repolist enabled <span class=\"string\">| grep mysql</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开始安装:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum <span class=\"keyword\">install</span> mysql-community-<span class=\"keyword\">server</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld <span class=\"literal\">start</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 mysql 状态:</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">service mysqld status</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看临时密码：</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">'temporary password'</span> /<span class=\"built_in\">var</span>/<span class=\"keyword\">log</span>/mysqld.<span class=\"keyword\">log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>登录</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">mysql -uroot -p</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>centos7 安装 MySQL</p>","more":"<h3 id=\"系统环境\"><a href=\"#系统环境\" class=\"headerlink\" title=\"系统环境\"></a>系统环境</h3><figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ce<span class=\"symbol\">ntOS7</span> <span class=\"number\">64</span>位</span><br></pre></td></tr></table></figure>\n<h3 id=\"部署过程\"><a href=\"#部署过程\" class=\"headerlink\" title=\"部署过程\"></a>部署过程</h3><ol>\n<li><p>添加 mysql yum 源：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -Uvh https:<span class=\"regexp\">//</span>repo.mysql.com<span class=\"regexp\">//my</span>sql80-community-release-el7-<span class=\"number\">2</span>.noarch.rpm</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 yum 源中所有 Mysql 版本：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum repolist <span class=\"keyword\">all</span> | <span class=\"keyword\">grep</span> mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>禁用其他版本：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-<span class=\"built_in\">config</span>-manager <span class=\"comment\">--disable mysql80-community</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启用要安装的版本 mysql5.7</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum-<span class=\"built_in\">config</span>-manager <span class=\"comment\">--enable mysql57-community</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查配置是否生效</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum repolist enabled <span class=\"string\">| grep mysql</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开始安装:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum <span class=\"keyword\">install</span> mysql-community-<span class=\"keyword\">server</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld <span class=\"literal\">start</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看 mysql 状态:</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">service mysqld status</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看临时密码：</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep <span class=\"string\">'temporary password'</span> /<span class=\"built_in\">var</span>/<span class=\"keyword\">log</span>/mysqld.<span class=\"keyword\">log</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>登录</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">mysql -uroot -p</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"KNN算法","comments":1,"date":"2019-03-30T05:31:24.000Z","_content":"\nKNN 算法概述\n\n<!--more-->\n\n## KNN 算法是做什么的\n\nKNN 算法， 即 K 最邻近算法，通过对比与临近事物的相似度，可以对具有特征的事物进行分类，也可以根据这些分类，预测下一步的结果。\n\n## KNN 算法步骤\n\nKNN 算法主要分为三步：\n\n### 一、准备\n\n找出邻近值，这个邻近值 k 可以是任意数，1， 1000 甚至 10000 都可以。\n\n### 二、分类\n\n用毕达哥拉斯公式算出该对象与邻近值的相似度（该对象与邻近值得距离），并将该对象归到相似度最高的那一个近邻类里。\n\n### 三、回归\n\n重新找到该对象的近邻，算出这些近邻各特征的平均值，形成新的特征组合，即新的对象，这个对象就是预估的结果，也就是通常所说的预测值。\n\n## 其他\n\n### KNN 算法的实现\n\n```python\n# 已知所有特征集合，第一个特征为颜色，第二个特征为所属类别\nL = {'orange' : [1, 0], 'apple': [2, 0], 'flower': [1, 1], 'fish': [5, 5]}\n\n# 未知物体\ntest = [1.1, 0]\n# 所有的相似度集合\nresults = []\n# 已知所有水果的集合\nitems = []\n\nfor item in L:\n    x = L[item][0] - test[0]\n    y = L[item][1] - test[1]\n    instance = x ** 2 + y ** 2\n    results.append(instance ** 0.5)\n    items.append(item)\n\n# 最大相似度\nminValue = min(results)\n# 物体名称\nresult = items[results.index(minValue)]\n\nprint(minValue, result)\n```\n","source":"_posts/KNN算法.md","raw":"---\ntitle: KNN算法\ncomments: true\ndate: 2019-03-30 13:31:24\ncategories: 算法\ntags: KNN\n---\n\nKNN 算法概述\n\n<!--more-->\n\n## KNN 算法是做什么的\n\nKNN 算法， 即 K 最邻近算法，通过对比与临近事物的相似度，可以对具有特征的事物进行分类，也可以根据这些分类，预测下一步的结果。\n\n## KNN 算法步骤\n\nKNN 算法主要分为三步：\n\n### 一、准备\n\n找出邻近值，这个邻近值 k 可以是任意数，1， 1000 甚至 10000 都可以。\n\n### 二、分类\n\n用毕达哥拉斯公式算出该对象与邻近值的相似度（该对象与邻近值得距离），并将该对象归到相似度最高的那一个近邻类里。\n\n### 三、回归\n\n重新找到该对象的近邻，算出这些近邻各特征的平均值，形成新的特征组合，即新的对象，这个对象就是预估的结果，也就是通常所说的预测值。\n\n## 其他\n\n### KNN 算法的实现\n\n```python\n# 已知所有特征集合，第一个特征为颜色，第二个特征为所属类别\nL = {'orange' : [1, 0], 'apple': [2, 0], 'flower': [1, 1], 'fish': [5, 5]}\n\n# 未知物体\ntest = [1.1, 0]\n# 所有的相似度集合\nresults = []\n# 已知所有水果的集合\nitems = []\n\nfor item in L:\n    x = L[item][0] - test[0]\n    y = L[item][1] - test[1]\n    instance = x ** 2 + y ** 2\n    results.append(instance ** 0.5)\n    items.append(item)\n\n# 最大相似度\nminValue = min(results)\n# 物体名称\nresult = items[results.index(minValue)]\n\nprint(minValue, result)\n```\n","slug":"KNN算法","published":1,"updated":"2019-11-13T12:18:37.513Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu8v000g8ex0fajjeozm","content":"<p>KNN 算法概述</p>\n<a id=\"more\"></a>\n<h2 id=\"KNN-算法是做什么的\"><a href=\"#KNN-算法是做什么的\" class=\"headerlink\" title=\"KNN 算法是做什么的\"></a>KNN 算法是做什么的</h2><p>KNN 算法， 即 K 最邻近算法，通过对比与临近事物的相似度，可以对具有特征的事物进行分类，也可以根据这些分类，预测下一步的结果。</p>\n<h2 id=\"KNN-算法步骤\"><a href=\"#KNN-算法步骤\" class=\"headerlink\" title=\"KNN 算法步骤\"></a>KNN 算法步骤</h2><p>KNN 算法主要分为三步：</p>\n<h3 id=\"一、准备\"><a href=\"#一、准备\" class=\"headerlink\" title=\"一、准备\"></a>一、准备</h3><p>找出邻近值，这个邻近值 k 可以是任意数，1， 1000 甚至 10000 都可以。</p>\n<h3 id=\"二、分类\"><a href=\"#二、分类\" class=\"headerlink\" title=\"二、分类\"></a>二、分类</h3><p>用毕达哥拉斯公式算出该对象与邻近值的相似度（该对象与邻近值得距离），并将该对象归到相似度最高的那一个近邻类里。</p>\n<h3 id=\"三、回归\"><a href=\"#三、回归\" class=\"headerlink\" title=\"三、回归\"></a>三、回归</h3><p>重新找到该对象的近邻，算出这些近邻各特征的平均值，形成新的特征组合，即新的对象，这个对象就是预估的结果，也就是通常所说的预测值。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"KNN-算法的实现\"><a href=\"#KNN-算法的实现\" class=\"headerlink\" title=\"KNN 算法的实现\"></a>KNN 算法的实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 已知所有特征集合，第一个特征为颜色，第二个特征为所属类别</span></span><br><span class=\"line\">L = &#123;<span class=\"string\">'orange'</span> : [<span class=\"number\">1</span>, <span class=\"number\">0</span>], <span class=\"string\">'apple'</span>: [<span class=\"number\">2</span>, <span class=\"number\">0</span>], <span class=\"string\">'flower'</span>: [<span class=\"number\">1</span>, <span class=\"number\">1</span>], <span class=\"string\">'fish'</span>: [<span class=\"number\">5</span>, <span class=\"number\">5</span>]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 未知物体</span></span><br><span class=\"line\">test = [<span class=\"number\">1.1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"comment\"># 所有的相似度集合</span></span><br><span class=\"line\">results = []</span><br><span class=\"line\"><span class=\"comment\"># 已知所有水果的集合</span></span><br><span class=\"line\">items = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> L:</span><br><span class=\"line\">    x = L[item][<span class=\"number\">0</span>] - test[<span class=\"number\">0</span>]</span><br><span class=\"line\">    y = L[item][<span class=\"number\">1</span>] - test[<span class=\"number\">1</span>]</span><br><span class=\"line\">    instance = x ** <span class=\"number\">2</span> + y ** <span class=\"number\">2</span></span><br><span class=\"line\">    results.append(instance ** <span class=\"number\">0.5</span>)</span><br><span class=\"line\">    items.append(item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最大相似度</span></span><br><span class=\"line\">minValue = min(results)</span><br><span class=\"line\"><span class=\"comment\"># 物体名称</span></span><br><span class=\"line\">result = items[results.index(minValue)]</span><br><span class=\"line\"></span><br><span class=\"line\">print(minValue, result)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>KNN 算法概述</p>","more":"<h2 id=\"KNN-算法是做什么的\"><a href=\"#KNN-算法是做什么的\" class=\"headerlink\" title=\"KNN 算法是做什么的\"></a>KNN 算法是做什么的</h2><p>KNN 算法， 即 K 最邻近算法，通过对比与临近事物的相似度，可以对具有特征的事物进行分类，也可以根据这些分类，预测下一步的结果。</p>\n<h2 id=\"KNN-算法步骤\"><a href=\"#KNN-算法步骤\" class=\"headerlink\" title=\"KNN 算法步骤\"></a>KNN 算法步骤</h2><p>KNN 算法主要分为三步：</p>\n<h3 id=\"一、准备\"><a href=\"#一、准备\" class=\"headerlink\" title=\"一、准备\"></a>一、准备</h3><p>找出邻近值，这个邻近值 k 可以是任意数，1， 1000 甚至 10000 都可以。</p>\n<h3 id=\"二、分类\"><a href=\"#二、分类\" class=\"headerlink\" title=\"二、分类\"></a>二、分类</h3><p>用毕达哥拉斯公式算出该对象与邻近值的相似度（该对象与邻近值得距离），并将该对象归到相似度最高的那一个近邻类里。</p>\n<h3 id=\"三、回归\"><a href=\"#三、回归\" class=\"headerlink\" title=\"三、回归\"></a>三、回归</h3><p>重新找到该对象的近邻，算出这些近邻各特征的平均值，形成新的特征组合，即新的对象，这个对象就是预估的结果，也就是通常所说的预测值。</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"KNN-算法的实现\"><a href=\"#KNN-算法的实现\" class=\"headerlink\" title=\"KNN 算法的实现\"></a>KNN 算法的实现</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 已知所有特征集合，第一个特征为颜色，第二个特征为所属类别</span></span><br><span class=\"line\">L = &#123;<span class=\"string\">'orange'</span> : [<span class=\"number\">1</span>, <span class=\"number\">0</span>], <span class=\"string\">'apple'</span>: [<span class=\"number\">2</span>, <span class=\"number\">0</span>], <span class=\"string\">'flower'</span>: [<span class=\"number\">1</span>, <span class=\"number\">1</span>], <span class=\"string\">'fish'</span>: [<span class=\"number\">5</span>, <span class=\"number\">5</span>]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 未知物体</span></span><br><span class=\"line\">test = [<span class=\"number\">1.1</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"comment\"># 所有的相似度集合</span></span><br><span class=\"line\">results = []</span><br><span class=\"line\"><span class=\"comment\"># 已知所有水果的集合</span></span><br><span class=\"line\">items = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> L:</span><br><span class=\"line\">    x = L[item][<span class=\"number\">0</span>] - test[<span class=\"number\">0</span>]</span><br><span class=\"line\">    y = L[item][<span class=\"number\">1</span>] - test[<span class=\"number\">1</span>]</span><br><span class=\"line\">    instance = x ** <span class=\"number\">2</span> + y ** <span class=\"number\">2</span></span><br><span class=\"line\">    results.append(instance ** <span class=\"number\">0.5</span>)</span><br><span class=\"line\">    items.append(item)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最大相似度</span></span><br><span class=\"line\">minValue = min(results)</span><br><span class=\"line\"><span class=\"comment\"># 物体名称</span></span><br><span class=\"line\">result = items[results.index(minValue)]</span><br><span class=\"line\"></span><br><span class=\"line\">print(minValue, result)</span><br></pre></td></tr></table></figure>"},{"title":"Angular 导航栏与内容联动","comments":1,"date":"2018-07-29T08:07:54.000Z","_content":"\n通过 angular 的 render2 渲染器操作 DOM , 通过获取 DOM 的滑动只与定位,计算出滑动距离,并控制速率。\n\n<!--more-->\n\n1.  注入 commonService 服务,里面封装了 handleAnchor 函数,主要思路就是通过 angular 的 render2 渲染器操作 DOM , 通过获取 DOM 的滑动只与定位,计算出滑动距离,并控制速率。代码如下:\n\n```js\n/**\n* 点击题目进行锚点定位\n* @param targetDom 需要定位的目标Dom元素\n* @param scrollElementRef 滑动区域\n* @param SCROLL_OFFSET 需定位的位置在滑动区域中的距离\n* @param ANCHOR_RATE 自动滑动速度，数值越小速度越快\n* @param isPreview 来自试卷预览的特殊处理 默认 false\n*/\nhandleAnchor(targetDom: any, scrollElementRef: any, SCROLL_OFFSET: number, ANCHOR_RATE: number, isPreview = false): void {\n    let currentAnchor = scrollElementRef.scrollTop;\n    let questionTop = this.getElementTop(targetDom);\n    let scrollWrapTop = this.getElementTop(scrollElementRef);\n    let actualTop = questionTop - scrollWrapTop - SCROLL_OFFSET;\n    if (isPreview) {\n        actualTop -= 45; // 去掉解析栏的高度\n    }\n    const anchorRate = (Math.abs(actualTop - currentAnchor)) / ANCHOR_RATE;\n    const interval = setInterval(() => {\n    if (currentAnchor < actualTop) {\n        scrollElementRef.scrollTop = currentAnchor += anchorRate;\n    } else {\n        scrollElementRef.scrollTop = currentAnchor -= anchorRate;\n    }\n    if (currentAnchor <= actualTop + anchorRate && currentAnchor >= actualTop - anchorRate) {\n        clearInterval(interval);\n        scrollElementRef.scrollTop = actualTop;\n    }\n    }, 10);\n}\n```\n\n2.  以上函数通过注入依赖的形式在组件中进行使用,通过传递相应的参数, 实现数据联动效果, 代码如下:\n\n```js\nhandleAnchor(targetId): void {\n    const targetDom = document.getElementById(targetId)\n    let documentElement: Element;\n    documentElement = document.documentElement;\n    this.commonService.handleAnchor(targetDom, documentElement, this.SCROLL_OFFSET, this.ANCHOR_RATE)\n    this.renderer.addClass(targetDom, 'paper-hover')\n    setTimeout(() => {\n        this.renderer.removeClass(targetDom, 'paper-hover')\n    }, 1000);\n}\n```\n\n以上代码将整个文档流作为滑动区域传给了 handleAnchor 函数,并且通过虚拟 DOM 加了一段样式表, 实现滚动到相应位置, 出现一个边框的视觉效果。\n","source":"_posts/angular-导航栏与内容联动.md","raw":"---\ntitle: angular 导航栏与内容联动\ncomments: true\ndate: 2018-07-29 16:07:54\ncategories: web\ntags: angular\n---\n\n通过 angular 的 render2 渲染器操作 DOM , 通过获取 DOM 的滑动只与定位,计算出滑动距离,并控制速率。\n\n<!--more-->\n\n1.  注入 commonService 服务,里面封装了 handleAnchor 函数,主要思路就是通过 angular 的 render2 渲染器操作 DOM , 通过获取 DOM 的滑动只与定位,计算出滑动距离,并控制速率。代码如下:\n\n```js\n/**\n* 点击题目进行锚点定位\n* @param targetDom 需要定位的目标Dom元素\n* @param scrollElementRef 滑动区域\n* @param SCROLL_OFFSET 需定位的位置在滑动区域中的距离\n* @param ANCHOR_RATE 自动滑动速度，数值越小速度越快\n* @param isPreview 来自试卷预览的特殊处理 默认 false\n*/\nhandleAnchor(targetDom: any, scrollElementRef: any, SCROLL_OFFSET: number, ANCHOR_RATE: number, isPreview = false): void {\n    let currentAnchor = scrollElementRef.scrollTop;\n    let questionTop = this.getElementTop(targetDom);\n    let scrollWrapTop = this.getElementTop(scrollElementRef);\n    let actualTop = questionTop - scrollWrapTop - SCROLL_OFFSET;\n    if (isPreview) {\n        actualTop -= 45; // 去掉解析栏的高度\n    }\n    const anchorRate = (Math.abs(actualTop - currentAnchor)) / ANCHOR_RATE;\n    const interval = setInterval(() => {\n    if (currentAnchor < actualTop) {\n        scrollElementRef.scrollTop = currentAnchor += anchorRate;\n    } else {\n        scrollElementRef.scrollTop = currentAnchor -= anchorRate;\n    }\n    if (currentAnchor <= actualTop + anchorRate && currentAnchor >= actualTop - anchorRate) {\n        clearInterval(interval);\n        scrollElementRef.scrollTop = actualTop;\n    }\n    }, 10);\n}\n```\n\n2.  以上函数通过注入依赖的形式在组件中进行使用,通过传递相应的参数, 实现数据联动效果, 代码如下:\n\n```js\nhandleAnchor(targetId): void {\n    const targetDom = document.getElementById(targetId)\n    let documentElement: Element;\n    documentElement = document.documentElement;\n    this.commonService.handleAnchor(targetDom, documentElement, this.SCROLL_OFFSET, this.ANCHOR_RATE)\n    this.renderer.addClass(targetDom, 'paper-hover')\n    setTimeout(() => {\n        this.renderer.removeClass(targetDom, 'paper-hover')\n    }, 1000);\n}\n```\n\n以上代码将整个文档流作为滑动区域传给了 handleAnchor 函数,并且通过虚拟 DOM 加了一段样式表, 实现滚动到相应位置, 出现一个边框的视觉效果。\n","slug":"angular-导航栏与内容联动","published":1,"updated":"2019-11-13T12:09:20.809Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu8w000j8ex08btpb101","content":"<p>通过 angular 的 render2 渲染器操作 DOM , 通过获取 DOM 的滑动只与定位,计算出滑动距离,并控制速率。</p>\n<a id=\"more\"></a>\n<ol>\n<li>注入 commonService 服务,里面封装了 handleAnchor 函数,主要思路就是通过 angular 的 render2 渲染器操作 DOM , 通过获取 DOM 的滑动只与定位,计算出滑动距离,并控制速率。代码如下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 点击题目进行锚点定位</span></span><br><span class=\"line\"><span class=\"comment\">* @param targetDom 需要定位的目标Dom元素</span></span><br><span class=\"line\"><span class=\"comment\">* @param scrollElementRef 滑动区域</span></span><br><span class=\"line\"><span class=\"comment\">* @param SCROLL_OFFSET 需定位的位置在滑动区域中的距离</span></span><br><span class=\"line\"><span class=\"comment\">* @param ANCHOR_RATE 自动滑动速度，数值越小速度越快</span></span><br><span class=\"line\"><span class=\"comment\">* @param isPreview 来自试卷预览的特殊处理 默认 false</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">handleAnchor(targetDom: any, <span class=\"attr\">scrollElementRef</span>: any, <span class=\"attr\">SCROLL_OFFSET</span>: number, <span class=\"attr\">ANCHOR_RATE</span>: number, isPreview = <span class=\"literal\">false</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentAnchor = scrollElementRef.scrollTop;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> questionTop = <span class=\"keyword\">this</span>.getElementTop(targetDom);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> scrollWrapTop = <span class=\"keyword\">this</span>.getElementTop(scrollElementRef);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> actualTop = questionTop - scrollWrapTop - SCROLL_OFFSET;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPreview) &#123;</span><br><span class=\"line\">        actualTop -= <span class=\"number\">45</span>; <span class=\"comment\">// 去掉解析栏的高度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> anchorRate = (<span class=\"built_in\">Math</span>.abs(actualTop - currentAnchor)) / ANCHOR_RATE;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> interval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentAnchor &lt; actualTop) &#123;</span><br><span class=\"line\">        scrollElementRef.scrollTop = currentAnchor += anchorRate;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        scrollElementRef.scrollTop = currentAnchor -= anchorRate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentAnchor &lt;= actualTop + anchorRate &amp;&amp; currentAnchor &gt;= actualTop - anchorRate) &#123;</span><br><span class=\"line\">        clearInterval(interval);</span><br><span class=\"line\">        scrollElementRef.scrollTop = actualTop;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>以上函数通过注入依赖的形式在组件中进行使用,通过传递相应的参数, 实现数据联动效果, 代码如下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleAnchor(targetId): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> targetDom = <span class=\"built_in\">document</span>.getElementById(targetId)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> documentElement: Element;</span><br><span class=\"line\">    documentElement = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.commonService.handleAnchor(targetDom, documentElement, <span class=\"keyword\">this</span>.SCROLL_OFFSET, <span class=\"keyword\">this</span>.ANCHOR_RATE)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderer.addClass(targetDom, <span class=\"string\">'paper-hover'</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.renderer.removeClass(targetDom, <span class=\"string\">'paper-hover'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码将整个文档流作为滑动区域传给了 handleAnchor 函数,并且通过虚拟 DOM 加了一段样式表, 实现滚动到相应位置, 出现一个边框的视觉效果。</p>\n","site":{"data":{}},"excerpt":"<p>通过 angular 的 render2 渲染器操作 DOM , 通过获取 DOM 的滑动只与定位,计算出滑动距离,并控制速率。</p>","more":"<ol>\n<li>注入 commonService 服务,里面封装了 handleAnchor 函数,主要思路就是通过 angular 的 render2 渲染器操作 DOM , 通过获取 DOM 的滑动只与定位,计算出滑动距离,并控制速率。代码如下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 点击题目进行锚点定位</span></span><br><span class=\"line\"><span class=\"comment\">* @param targetDom 需要定位的目标Dom元素</span></span><br><span class=\"line\"><span class=\"comment\">* @param scrollElementRef 滑动区域</span></span><br><span class=\"line\"><span class=\"comment\">* @param SCROLL_OFFSET 需定位的位置在滑动区域中的距离</span></span><br><span class=\"line\"><span class=\"comment\">* @param ANCHOR_RATE 自动滑动速度，数值越小速度越快</span></span><br><span class=\"line\"><span class=\"comment\">* @param isPreview 来自试卷预览的特殊处理 默认 false</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">handleAnchor(targetDom: any, <span class=\"attr\">scrollElementRef</span>: any, <span class=\"attr\">SCROLL_OFFSET</span>: number, <span class=\"attr\">ANCHOR_RATE</span>: number, isPreview = <span class=\"literal\">false</span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> currentAnchor = scrollElementRef.scrollTop;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> questionTop = <span class=\"keyword\">this</span>.getElementTop(targetDom);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> scrollWrapTop = <span class=\"keyword\">this</span>.getElementTop(scrollElementRef);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> actualTop = questionTop - scrollWrapTop - SCROLL_OFFSET;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isPreview) &#123;</span><br><span class=\"line\">        actualTop -= <span class=\"number\">45</span>; <span class=\"comment\">// 去掉解析栏的高度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> anchorRate = (<span class=\"built_in\">Math</span>.abs(actualTop - currentAnchor)) / ANCHOR_RATE;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> interval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentAnchor &lt; actualTop) &#123;</span><br><span class=\"line\">        scrollElementRef.scrollTop = currentAnchor += anchorRate;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        scrollElementRef.scrollTop = currentAnchor -= anchorRate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (currentAnchor &lt;= actualTop + anchorRate &amp;&amp; currentAnchor &gt;= actualTop - anchorRate) &#123;</span><br><span class=\"line\">        clearInterval(interval);</span><br><span class=\"line\">        scrollElementRef.scrollTop = actualTop;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>以上函数通过注入依赖的形式在组件中进行使用,通过传递相应的参数, 实现数据联动效果, 代码如下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleAnchor(targetId): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> targetDom = <span class=\"built_in\">document</span>.getElementById(targetId)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> documentElement: Element;</span><br><span class=\"line\">    documentElement = <span class=\"built_in\">document</span>.documentElement;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.commonService.handleAnchor(targetDom, documentElement, <span class=\"keyword\">this</span>.SCROLL_OFFSET, <span class=\"keyword\">this</span>.ANCHOR_RATE)</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.renderer.addClass(targetDom, <span class=\"string\">'paper-hover'</span>)</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.renderer.removeClass(targetDom, <span class=\"string\">'paper-hover'</span>)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上代码将整个文档流作为滑动区域传给了 handleAnchor 函数,并且通过虚拟 DOM 加了一段样式表, 实现滚动到相应位置, 出现一个边框的视觉效果。</p>"},{"title":"Axios网络请求封装","comments":1,"date":"2018-10-22T11:44:02.000Z","_content":"\naxios 是网页请求库中的新星，经常会看到他与 vue 携手，该库对 http 请求已经封装得很好了，但是，由于我需要一些更加定制化的操作，比如加密请求参数等，所以这里进行了二次封装。\n\n<!--more-->\n\n1. 代码：\n\n```js\nimport axios from \"axios\";\nimport qs from \"qs\";\n\nexport class Http {\n  constructor() {\n    this.ins = axios.create({\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    });\n  }\n\n  get(url, param = {}, config = {}) {\n    config.params = param;\n    return this.ins.get(url, config);\n  }\n\n  post(url, data = {}, config = {}) {\n    return this.ins.post(url, qs.stringify(data), config);\n  }\n\n  delete(url, param = {}, config = {}) {\n    config.params = param;\n    return this.ins.delete(url, config);\n  }\n\n  put(url, body = {}, config = {}) {\n    return this.ins.put(url, body, config);\n  }\n}\n\nconst http = new Http();\nexport { http };\n```\n\n2. 使用方法：\n\n- 安装 [axios](https://github.com/axios/axios)\n- 安装 [qs](https://www.npmjs.com/package/qs)\n- 使用示例：\n\n  ```js\n  import { http } from '@/service.js'\n\n  // http get example\n  let url = ''\n  let params = {}\n  http.get(url, {\n    params\n  }, {})\n  .then(res => {\n    console.log(res)\n  }\n  // http post example\n  let url = ''\n  let params = {}\n  let config = {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }\n  http.post(url, params, config)\n  ```\n","source":"_posts/axios网络请求封装.md","raw":"---\ntitle: axios网络请求封装\ncomments: true\ndate: 2018-10-22 19:44:02\ncategories: web\ntags: http\n---\n\naxios 是网页请求库中的新星，经常会看到他与 vue 携手，该库对 http 请求已经封装得很好了，但是，由于我需要一些更加定制化的操作，比如加密请求参数等，所以这里进行了二次封装。\n\n<!--more-->\n\n1. 代码：\n\n```js\nimport axios from \"axios\";\nimport qs from \"qs\";\n\nexport class Http {\n  constructor() {\n    this.ins = axios.create({\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    });\n  }\n\n  get(url, param = {}, config = {}) {\n    config.params = param;\n    return this.ins.get(url, config);\n  }\n\n  post(url, data = {}, config = {}) {\n    return this.ins.post(url, qs.stringify(data), config);\n  }\n\n  delete(url, param = {}, config = {}) {\n    config.params = param;\n    return this.ins.delete(url, config);\n  }\n\n  put(url, body = {}, config = {}) {\n    return this.ins.put(url, body, config);\n  }\n}\n\nconst http = new Http();\nexport { http };\n```\n\n2. 使用方法：\n\n- 安装 [axios](https://github.com/axios/axios)\n- 安装 [qs](https://www.npmjs.com/package/qs)\n- 使用示例：\n\n  ```js\n  import { http } from '@/service.js'\n\n  // http get example\n  let url = ''\n  let params = {}\n  http.get(url, {\n    params\n  }, {})\n  .then(res => {\n    console.log(res)\n  }\n  // http post example\n  let url = ''\n  let params = {}\n  let config = {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  }\n  http.post(url, params, config)\n  ```\n","slug":"axios网络请求封装","published":1,"updated":"2019-11-13T12:09:26.369Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu8x000n8ex0zgzp197c","content":"<p>axios 是网页请求库中的新星，经常会看到他与 vue 携手，该库对 http 请求已经封装得很好了，但是，由于我需要一些更加定制化的操作，比如加密请求参数等，所以这里进行了二次封装。</p>\n<a id=\"more\"></a>\n<ol>\n<li>代码：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">\"qs\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Http</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ins = axios.create(&#123;</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/x-www-form-urlencoded\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span>(url, param = &#123;&#125;, config = &#123;&#125;) &#123;</span><br><span class=\"line\">    config.params = param;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ins.get(url, config);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  post(url, data = &#123;&#125;, config = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ins.post(url, qs.stringify(data), config);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">delete</span>(url, param = &#123;&#125;, config = &#123;&#125;) &#123;</span><br><span class=\"line\">    config.params = param;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ins.delete(url, config);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  put(url, body = &#123;&#125;, config = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ins.put(url, body, config);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"keyword\">new</span> Http();</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; http &#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用方法：</li>\n</ol>\n<ul>\n<li>安装 <a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"noopener\">axios</a></li>\n<li>安装 <a href=\"https://www.npmjs.com/package/qs\" target=\"_blank\" rel=\"noopener\">qs</a></li>\n<li><p>使用示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; http &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/service.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// http get example</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> params = &#123;&#125;</span><br><span class=\"line\">http.get(url, &#123;</span><br><span class=\"line\">  params</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// http post example</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> params = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> config = &#123;</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.post(url, params, config)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>axios 是网页请求库中的新星，经常会看到他与 vue 携手，该库对 http 请求已经封装得很好了，但是，由于我需要一些更加定制化的操作，比如加密请求参数等，所以这里进行了二次封装。</p>","more":"<ol>\n<li>代码：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">\"qs\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Http</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ins = axios.create(&#123;</span><br><span class=\"line\">      headers: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/x-www-form-urlencoded\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span>(url, param = &#123;&#125;, config = &#123;&#125;) &#123;</span><br><span class=\"line\">    config.params = param;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ins.get(url, config);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  post(url, data = &#123;&#125;, config = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ins.post(url, qs.stringify(data), config);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">delete</span>(url, param = &#123;&#125;, config = &#123;&#125;) &#123;</span><br><span class=\"line\">    config.params = param;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ins.delete(url, config);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  put(url, body = &#123;&#125;, config = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ins.put(url, body, config);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"keyword\">new</span> Http();</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; http &#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用方法：</li>\n</ol>\n<ul>\n<li>安装 <a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"noopener\">axios</a></li>\n<li>安装 <a href=\"https://www.npmjs.com/package/qs\" target=\"_blank\" rel=\"noopener\">qs</a></li>\n<li><p>使用示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; http &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/service.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// http get example</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> params = &#123;&#125;</span><br><span class=\"line\">http.get(url, &#123;</span><br><span class=\"line\">  params</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// http post example</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> url = <span class=\"string\">''</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> params = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> config = &#123;</span><br><span class=\"line\">  headers: &#123;</span><br><span class=\"line\">    <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/x-www-form-urlencoded'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">http.post(url, params, config)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"CSS2 下块级元素垂直水平居中","comments":1,"date":"2019-03-16T08:41:28.000Z","_content":"\n前几天有人问我给定一个这样的结构：div => div，如何让里面的元素水平垂直居中？给出 css2 代码。这对于一直用 css3 布局方式的我来说，一时还有点蒙蔽，只知道左右居中一般用 margin：0 auto，至于垂直居中，还真没用 css2 实现过。于是动手实践，发现以下的方式而已完美达到想要的效果。\n\n<!--more-->\n\n```css\n.box {\n  position: absolute;\n  margin: auto;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: 500px;\n  height: 500px;\n  background: orange;\n}\n```\n\n这个方法的一个要点是运用 position：absolute，使里面的块级元素始终相对于父元素定位，由水平居中 margin: 0 auto，可以类推上下左右都居中的话，应该 margin 都为 auto 可以达到想要的效果，至于四个方向大的定位都为 0，是为了防止位置偏移。\n","source":"_posts/css2下块级元素垂直水平居中.md","raw":"---\ntitle: CSS2 下块级元素垂直水平居中\ncomments: true\ndate: 2019-03-16 16:41:28\ncategories: web\ntags: css\n---\n\n前几天有人问我给定一个这样的结构：div => div，如何让里面的元素水平垂直居中？给出 css2 代码。这对于一直用 css3 布局方式的我来说，一时还有点蒙蔽，只知道左右居中一般用 margin：0 auto，至于垂直居中，还真没用 css2 实现过。于是动手实践，发现以下的方式而已完美达到想要的效果。\n\n<!--more-->\n\n```css\n.box {\n  position: absolute;\n  margin: auto;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  width: 500px;\n  height: 500px;\n  background: orange;\n}\n```\n\n这个方法的一个要点是运用 position：absolute，使里面的块级元素始终相对于父元素定位，由水平居中 margin: 0 auto，可以类推上下左右都居中的话，应该 margin 都为 auto 可以达到想要的效果，至于四个方向大的定位都为 0，是为了防止位置偏移。\n","slug":"css2下块级元素垂直水平居中","published":1,"updated":"2019-11-13T12:10:07.691Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu8y000q8ex022p83rkk","content":"<p>前几天有人问我给定一个这样的结构：div =&gt; div，如何让里面的元素水平垂直居中？给出 css2 代码。这对于一直用 css3 布局方式的我来说，一时还有点蒙蔽，只知道左右居中一般用 margin：0 auto，至于垂直居中，还真没用 css2 实现过。于是动手实践，发现以下的方式而已完美达到想要的效果。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法的一个要点是运用 position：absolute，使里面的块级元素始终相对于父元素定位，由水平居中 margin: 0 auto，可以类推上下左右都居中的话，应该 margin 都为 auto 可以达到想要的效果，至于四个方向大的定位都为 0，是为了防止位置偏移。</p>\n","site":{"data":{}},"excerpt":"<p>前几天有人问我给定一个这样的结构：div =&gt; div，如何让里面的元素水平垂直居中？给出 css2 代码。这对于一直用 css3 布局方式的我来说，一时还有点蒙蔽，只知道左右居中一般用 margin：0 auto，至于垂直居中，还真没用 css2 实现过。于是动手实践，发现以下的方式而已完美达到想要的效果。</p>","more":"<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: orange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法的一个要点是运用 position：absolute，使里面的块级元素始终相对于父元素定位，由水平居中 margin: 0 auto，可以类推上下左右都居中的话，应该 margin 都为 auto 可以达到想要的效果，至于四个方向大的定位都为 0，是为了防止位置偏移。</p>"},{"title":"CSS 基础","comments":1,"date":"2019-01-26T05:55:01.000Z","_content":"\ncss 基础知识笔记，包括专业术语介绍、css 流概述等，具体内容可以查看全文\n\n<!--more-->\n\n## 一、 专业术语概览\n\n1. 属性，eg. height, width...\n\n2. 值的常用类别\n\n   - 整数值, eg. z-index: 1\n\n   - 数值, eg. line-height: 1.5\n\n   - 百分比值, eg. padding: 20%\n\n   - 长度值，eg. 12px\n\n   - 颜色值, eg. #fff\n\n3. 关键字, eg. transparent, solid\n\n4. 变量\n\n5. 长度单位分类：\n\n   - 相对字体长度单位, eg. em, rem\n\n   - 相对视区长度单位, eg. vh, vw\n\n   - 绝对长度单位, eg. px\n\n6. 功能符：eg. rgba, url, scale\n\n7. 选择器：\n\n   - 类选择器, .\n\n   - ID 选择器，唯一性, #\n\n   - 属性选择器，[]\n\n   - 伪类选择器，:\n\n   - 伪元素选择器，::before, ::after\n\n   - 关系选择器：后代选择器（空格连接）、相邻后代选择器（>），兄弟选择器（~），相邻兄弟选择器（+）\n\n## 二、css 流\n\n1. 流被破坏的原因：给块级元素设置了绝对宽度，而这个宽度实际是作用域 content-box 的，另外有设置了 border、padding、margin 等，把盒子撑大了。\n\n2. 防止流破坏的方式：\n\n   - 宽度分离，即内容层跟包裹层分离，在包裹层设置 width，内容层设置 border、poadding、margin 等属性值。\n\n   - 设置 box-sizing（content-box, padding-box, border-box），兼容性不好，慎用\n\n   - 使用 flex 布局\n\n3. 父元素没有设置 height，网上查找到顶部也没有设置 height，则子元素设置 height:100% 无效\n\n4. 元素支持 height: 100% 的方法：\n\n   - 父元素或向上的元素设置 height\n\n   - 使用绝对定位\n","source":"_posts/css-笔记.md","raw":"---\ntitle: CSS 基础\ncomments: true\ndate: 2019-01-26 13:55:01\ncategories: web\ntags: css\n---\n\ncss 基础知识笔记，包括专业术语介绍、css 流概述等，具体内容可以查看全文\n\n<!--more-->\n\n## 一、 专业术语概览\n\n1. 属性，eg. height, width...\n\n2. 值的常用类别\n\n   - 整数值, eg. z-index: 1\n\n   - 数值, eg. line-height: 1.5\n\n   - 百分比值, eg. padding: 20%\n\n   - 长度值，eg. 12px\n\n   - 颜色值, eg. #fff\n\n3. 关键字, eg. transparent, solid\n\n4. 变量\n\n5. 长度单位分类：\n\n   - 相对字体长度单位, eg. em, rem\n\n   - 相对视区长度单位, eg. vh, vw\n\n   - 绝对长度单位, eg. px\n\n6. 功能符：eg. rgba, url, scale\n\n7. 选择器：\n\n   - 类选择器, .\n\n   - ID 选择器，唯一性, #\n\n   - 属性选择器，[]\n\n   - 伪类选择器，:\n\n   - 伪元素选择器，::before, ::after\n\n   - 关系选择器：后代选择器（空格连接）、相邻后代选择器（>），兄弟选择器（~），相邻兄弟选择器（+）\n\n## 二、css 流\n\n1. 流被破坏的原因：给块级元素设置了绝对宽度，而这个宽度实际是作用域 content-box 的，另外有设置了 border、padding、margin 等，把盒子撑大了。\n\n2. 防止流破坏的方式：\n\n   - 宽度分离，即内容层跟包裹层分离，在包裹层设置 width，内容层设置 border、poadding、margin 等属性值。\n\n   - 设置 box-sizing（content-box, padding-box, border-box），兼容性不好，慎用\n\n   - 使用 flex 布局\n\n3. 父元素没有设置 height，网上查找到顶部也没有设置 height，则子元素设置 height:100% 无效\n\n4. 元素支持 height: 100% 的方法：\n\n   - 父元素或向上的元素设置 height\n\n   - 使用绝对定位\n","slug":"css-笔记","published":1,"updated":"2019-11-13T12:10:03.145Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu90000u8ex0kog29uyi","content":"<p>css 基础知识笔记，包括专业术语介绍、css 流概述等，具体内容可以查看全文</p>\n<a id=\"more\"></a>\n<h2 id=\"一、-专业术语概览\"><a href=\"#一、-专业术语概览\" class=\"headerlink\" title=\"一、 专业术语概览\"></a>一、 专业术语概览</h2><ol>\n<li><p>属性，eg. height, width…</p>\n</li>\n<li><p>值的常用类别</p>\n<ul>\n<li><p>整数值, eg. z-index: 1</p>\n</li>\n<li><p>数值, eg. line-height: 1.5</p>\n</li>\n<li><p>百分比值, eg. padding: 20%</p>\n</li>\n<li><p>长度值，eg. 12px</p>\n</li>\n<li><p>颜色值, eg. #fff</p>\n</li>\n</ul>\n</li>\n<li><p>关键字, eg. transparent, solid</p>\n</li>\n<li><p>变量</p>\n</li>\n<li><p>长度单位分类：</p>\n<ul>\n<li><p>相对字体长度单位, eg. em, rem</p>\n</li>\n<li><p>相对视区长度单位, eg. vh, vw</p>\n</li>\n<li><p>绝对长度单位, eg. px</p>\n</li>\n</ul>\n</li>\n<li><p>功能符：eg. rgba, url, scale</p>\n</li>\n<li><p>选择器：</p>\n<ul>\n<li><p>类选择器, .</p>\n</li>\n<li><p>ID 选择器，唯一性, #</p>\n</li>\n<li><p>属性选择器，[]</p>\n</li>\n<li><p>伪类选择器，:</p>\n</li>\n<li><p>伪元素选择器，::before, ::after</p>\n</li>\n<li><p>关系选择器：后代选择器（空格连接）、相邻后代选择器（&gt;），兄弟选择器（~），相邻兄弟选择器（+）</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"二、css-流\"><a href=\"#二、css-流\" class=\"headerlink\" title=\"二、css 流\"></a>二、css 流</h2><ol>\n<li><p>流被破坏的原因：给块级元素设置了绝对宽度，而这个宽度实际是作用域 content-box 的，另外有设置了 border、padding、margin 等，把盒子撑大了。</p>\n</li>\n<li><p>防止流破坏的方式：</p>\n<ul>\n<li><p>宽度分离，即内容层跟包裹层分离，在包裹层设置 width，内容层设置 border、poadding、margin 等属性值。</p>\n</li>\n<li><p>设置 box-sizing（content-box, padding-box, border-box），兼容性不好，慎用</p>\n</li>\n<li><p>使用 flex 布局</p>\n</li>\n</ul>\n</li>\n<li><p>父元素没有设置 height，网上查找到顶部也没有设置 height，则子元素设置 height:100% 无效</p>\n</li>\n<li><p>元素支持 height: 100% 的方法：</p>\n<ul>\n<li><p>父元素或向上的元素设置 height</p>\n</li>\n<li><p>使用绝对定位</p>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>css 基础知识笔记，包括专业术语介绍、css 流概述等，具体内容可以查看全文</p>","more":"<h2 id=\"一、-专业术语概览\"><a href=\"#一、-专业术语概览\" class=\"headerlink\" title=\"一、 专业术语概览\"></a>一、 专业术语概览</h2><ol>\n<li><p>属性，eg. height, width…</p>\n</li>\n<li><p>值的常用类别</p>\n<ul>\n<li><p>整数值, eg. z-index: 1</p>\n</li>\n<li><p>数值, eg. line-height: 1.5</p>\n</li>\n<li><p>百分比值, eg. padding: 20%</p>\n</li>\n<li><p>长度值，eg. 12px</p>\n</li>\n<li><p>颜色值, eg. #fff</p>\n</li>\n</ul>\n</li>\n<li><p>关键字, eg. transparent, solid</p>\n</li>\n<li><p>变量</p>\n</li>\n<li><p>长度单位分类：</p>\n<ul>\n<li><p>相对字体长度单位, eg. em, rem</p>\n</li>\n<li><p>相对视区长度单位, eg. vh, vw</p>\n</li>\n<li><p>绝对长度单位, eg. px</p>\n</li>\n</ul>\n</li>\n<li><p>功能符：eg. rgba, url, scale</p>\n</li>\n<li><p>选择器：</p>\n<ul>\n<li><p>类选择器, .</p>\n</li>\n<li><p>ID 选择器，唯一性, #</p>\n</li>\n<li><p>属性选择器，[]</p>\n</li>\n<li><p>伪类选择器，:</p>\n</li>\n<li><p>伪元素选择器，::before, ::after</p>\n</li>\n<li><p>关系选择器：后代选择器（空格连接）、相邻后代选择器（&gt;），兄弟选择器（~），相邻兄弟选择器（+）</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"二、css-流\"><a href=\"#二、css-流\" class=\"headerlink\" title=\"二、css 流\"></a>二、css 流</h2><ol>\n<li><p>流被破坏的原因：给块级元素设置了绝对宽度，而这个宽度实际是作用域 content-box 的，另外有设置了 border、padding、margin 等，把盒子撑大了。</p>\n</li>\n<li><p>防止流破坏的方式：</p>\n<ul>\n<li><p>宽度分离，即内容层跟包裹层分离，在包裹层设置 width，内容层设置 border、poadding、margin 等属性值。</p>\n</li>\n<li><p>设置 box-sizing（content-box, padding-box, border-box），兼容性不好，慎用</p>\n</li>\n<li><p>使用 flex 布局</p>\n</li>\n</ul>\n</li>\n<li><p>父元素没有设置 height，网上查找到顶部也没有设置 height，则子元素设置 height:100% 无效</p>\n</li>\n<li><p>元素支持 height: 100% 的方法：</p>\n<ul>\n<li><p>父元素或向上的元素设置 height</p>\n</li>\n<li><p>使用绝对定位</p>\n</li>\n</ul>\n</li>\n</ol>"},{"title":"TCP/IP三次握手","date":"2017-05-25T08:57:02.000Z","_content":"\nTCP/IP 三次握手描述\n\n<!--more-->\n\n1.  第一次 握手：客户端向服务器端发包，并且不确定服务器端是否收到，同时服务器端确认接受包；\n\n2.  第二次握手：服务器端向客户端发包作为回复，并且不确定客户端是否能接收自己发出的包，同时客户端收到包；\n\n3.  客户端发包回应服务器端，服务器端确认收到包，两边都确认能接收传递信息，通过快速连接，客户端发出初始信息，开始通信;\n    用简洁易懂的话说就是：\n\n        A：在吗？亲（第一次握手）\n\n        B：恩，有啥事？（第二次握手）\n\n        A：我们来聊天吧。（第三次握手）\n","source":"_posts/TCP-IP三次握手.md","raw":"---\ntitle: TCP/IP三次握手\ndate: 2017-05-25 16:57:02\ncategories: web\ntags: http\n---\n\nTCP/IP 三次握手描述\n\n<!--more-->\n\n1.  第一次 握手：客户端向服务器端发包，并且不确定服务器端是否收到，同时服务器端确认接受包；\n\n2.  第二次握手：服务器端向客户端发包作为回复，并且不确定客户端是否能接收自己发出的包，同时客户端收到包；\n\n3.  客户端发包回应服务器端，服务器端确认收到包，两边都确认能接收传递信息，通过快速连接，客户端发出初始信息，开始通信;\n    用简洁易懂的话说就是：\n\n        A：在吗？亲（第一次握手）\n\n        B：恩，有啥事？（第二次握手）\n\n        A：我们来聊天吧。（第三次握手）\n","slug":"TCP-IP三次握手","published":1,"updated":"2019-11-13T12:23:07.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dbgu92000x8ex0nunyfwpj","content":"<p>TCP/IP 三次握手描述</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>第一次 握手：客户端向服务器端发包，并且不确定服务器端是否收到，同时服务器端确认接受包；</p>\n</li>\n<li><p>第二次握手：服务器端向客户端发包作为回复，并且不确定客户端是否能接收自己发出的包，同时客户端收到包；</p>\n</li>\n<li><p>客户端发包回应服务器端，服务器端确认收到包，两边都确认能接收传递信息，通过快速连接，客户端发出初始信息，开始通信;<br>用简洁易懂的话说就是：</p>\n<pre><code>A：在吗？亲（第一次握手）\n\nB：恩，有啥事？（第二次握手）\n\nA：我们来聊天吧。（第三次握手）\n</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>TCP/IP 三次握手描述</p>","more":"<ol>\n<li><p>第一次 握手：客户端向服务器端发包，并且不确定服务器端是否收到，同时服务器端确认接受包；</p>\n</li>\n<li><p>第二次握手：服务器端向客户端发包作为回复，并且不确定客户端是否能接收自己发出的包，同时客户端收到包；</p>\n</li>\n<li><p>客户端发包回应服务器端，服务器端确认收到包，两边都确认能接收传递信息，通过快速连接，客户端发出初始信息，开始通信;<br>用简洁易懂的话说就是：</p>\n<pre><code>A：在吗？亲（第一次握手）\n\nB：恩，有啥事？（第二次握手）\n\nA：我们来聊天吧。（第三次握手）\n</code></pre></li>\n</ol>"},{"title":"Canvas绘制雪碧图导出","comments":1,"date":"2019-10-26T09:19:41.000Z","_content":"\n在开发中，我们经常会用到雪碧图，有时候 UI 可能给了很多小图，没有给到雪碧图，为了减少请求，我们会选择自己去在线生成或 ps，但是这样太繁琐了，能不能我们用一个函数实现呢？网上很多方案是借助 webpack 实现这个功能的，但是我想能不能简单点，于是就有了这个 demo，目前该 demo 可以合成雪碧图导出，但是没有导出对应的坐标 json 文件，后期再完善，先这样。\n\n<!--more-->\n\n一、主要思路\n\n1、要合成雪碧图的前提是拿到对应图片的路径，网页要拿图片的路径无非就是通过 input file 上传的时候拿本地路径或者更加简单粗暴地自己写；\n\n2、要合成雪碧图，需要有个工具去把他们拼凑在一起，网页怎么把图片拼在一起呢？当然是用 canvas 画啦；\n\n3、已经可以组合图片了，怎么导出呢？客户端的 js 没有操作文件系统的高端属性啊，我选择的是用一个保存文件的第三方库 file-saver，这是一个客户端 js 保存文件的神器。\n\n二、实现\n\ndemo:\n\n```js\nimport { saveAs } from \"file-saver\";\n\nfunction newSprite({ canvasId, images, width, height }) {\n  const canvas = document.getElementById(canvasId);\n  canvas.setAttribute(\"width\", width);\n  canvas.setAttribute(\"height\", height);\n  const initX = 0;\n  images.forEach((ele, index) => {\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(ele, initX + 50 * index, 0);\n  });\n  canvas.toBlob(blob => {\n    saveAs(blob, \"sprite.png\");\n  });\n}\n```\n\n预览：\n\n[Demos](https://canace22.github.io/Demos/#/) => canvas 绘图 => 合成雪碧图\n\n三、扩展\n\n如果觉得这样还不够好用的话，可以学习 smithSprite，把对应图片的 css 坐标样式也导出来\n","source":"_posts/canvas绘制雪碧图导出.md","raw":"---\ntitle: canvas绘制雪碧图导出\ncomments: true\ndate: 2019-10-26 17:19:41\ncategories: web\ntags: canvas\n---\n\n在开发中，我们经常会用到雪碧图，有时候 UI 可能给了很多小图，没有给到雪碧图，为了减少请求，我们会选择自己去在线生成或 ps，但是这样太繁琐了，能不能我们用一个函数实现呢？网上很多方案是借助 webpack 实现这个功能的，但是我想能不能简单点，于是就有了这个 demo，目前该 demo 可以合成雪碧图导出，但是没有导出对应的坐标 json 文件，后期再完善，先这样。\n\n<!--more-->\n\n一、主要思路\n\n1、要合成雪碧图的前提是拿到对应图片的路径，网页要拿图片的路径无非就是通过 input file 上传的时候拿本地路径或者更加简单粗暴地自己写；\n\n2、要合成雪碧图，需要有个工具去把他们拼凑在一起，网页怎么把图片拼在一起呢？当然是用 canvas 画啦；\n\n3、已经可以组合图片了，怎么导出呢？客户端的 js 没有操作文件系统的高端属性啊，我选择的是用一个保存文件的第三方库 file-saver，这是一个客户端 js 保存文件的神器。\n\n二、实现\n\ndemo:\n\n```js\nimport { saveAs } from \"file-saver\";\n\nfunction newSprite({ canvasId, images, width, height }) {\n  const canvas = document.getElementById(canvasId);\n  canvas.setAttribute(\"width\", width);\n  canvas.setAttribute(\"height\", height);\n  const initX = 0;\n  images.forEach((ele, index) => {\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(ele, initX + 50 * index, 0);\n  });\n  canvas.toBlob(blob => {\n    saveAs(blob, \"sprite.png\");\n  });\n}\n```\n\n预览：\n\n[Demos](https://canace22.github.io/Demos/#/) => canvas 绘图 => 合成雪碧图\n\n三、扩展\n\n如果觉得这样还不够好用的话，可以学习 smithSprite，把对应图片的 css 坐标样式也导出来\n","slug":"canvas绘制雪碧图导出","published":1,"updated":"2019-11-13T12:09:45.408Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9400118ex0guxflag0","content":"<p>在开发中，我们经常会用到雪碧图，有时候 UI 可能给了很多小图，没有给到雪碧图，为了减少请求，我们会选择自己去在线生成或 ps，但是这样太繁琐了，能不能我们用一个函数实现呢？网上很多方案是借助 webpack 实现这个功能的，但是我想能不能简单点，于是就有了这个 demo，目前该 demo 可以合成雪碧图导出，但是没有导出对应的坐标 json 文件，后期再完善，先这样。</p>\n<a id=\"more\"></a>\n<p>一、主要思路</p>\n<p>1、要合成雪碧图的前提是拿到对应图片的路径，网页要拿图片的路径无非就是通过 input file 上传的时候拿本地路径或者更加简单粗暴地自己写；</p>\n<p>2、要合成雪碧图，需要有个工具去把他们拼凑在一起，网页怎么把图片拼在一起呢？当然是用 canvas 画啦；</p>\n<p>3、已经可以组合图片了，怎么导出呢？客户端的 js 没有操作文件系统的高端属性啊，我选择的是用一个保存文件的第三方库 file-saver，这是一个客户端 js 保存文件的神器。</p>\n<p>二、实现</p>\n<p>demo:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; saveAs &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"file-saver\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newSprite</span>(<span class=\"params\">&#123; canvasId, images, width, height &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.getElementById(canvasId);</span><br><span class=\"line\">  canvas.setAttribute(<span class=\"string\">\"width\"</span>, width);</span><br><span class=\"line\">  canvas.setAttribute(<span class=\"string\">\"height\"</span>, height);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> initX = <span class=\"number\">0</span>;</span><br><span class=\"line\">  images.forEach(<span class=\"function\">(<span class=\"params\">ele, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">    ctx.drawImage(ele, initX + <span class=\"number\">50</span> * index, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  canvas.toBlob(<span class=\"function\"><span class=\"params\">blob</span> =&gt;</span> &#123;</span><br><span class=\"line\">    saveAs(blob, <span class=\"string\">\"sprite.png\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>预览：</p>\n<p><a href=\"https://canace22.github.io/Demos/#/\" target=\"_blank\" rel=\"noopener\">Demos</a> =&gt; canvas 绘图 =&gt; 合成雪碧图</p>\n<p>三、扩展</p>\n<p>如果觉得这样还不够好用的话，可以学习 smithSprite，把对应图片的 css 坐标样式也导出来</p>\n","site":{"data":{}},"excerpt":"<p>在开发中，我们经常会用到雪碧图，有时候 UI 可能给了很多小图，没有给到雪碧图，为了减少请求，我们会选择自己去在线生成或 ps，但是这样太繁琐了，能不能我们用一个函数实现呢？网上很多方案是借助 webpack 实现这个功能的，但是我想能不能简单点，于是就有了这个 demo，目前该 demo 可以合成雪碧图导出，但是没有导出对应的坐标 json 文件，后期再完善，先这样。</p>","more":"<p>一、主要思路</p>\n<p>1、要合成雪碧图的前提是拿到对应图片的路径，网页要拿图片的路径无非就是通过 input file 上传的时候拿本地路径或者更加简单粗暴地自己写；</p>\n<p>2、要合成雪碧图，需要有个工具去把他们拼凑在一起，网页怎么把图片拼在一起呢？当然是用 canvas 画啦；</p>\n<p>3、已经可以组合图片了，怎么导出呢？客户端的 js 没有操作文件系统的高端属性啊，我选择的是用一个保存文件的第三方库 file-saver，这是一个客户端 js 保存文件的神器。</p>\n<p>二、实现</p>\n<p>demo:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; saveAs &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"file-saver\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">newSprite</span>(<span class=\"params\">&#123; canvasId, images, width, height &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.getElementById(canvasId);</span><br><span class=\"line\">  canvas.setAttribute(<span class=\"string\">\"width\"</span>, width);</span><br><span class=\"line\">  canvas.setAttribute(<span class=\"string\">\"height\"</span>, height);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> initX = <span class=\"number\">0</span>;</span><br><span class=\"line\">  images.forEach(<span class=\"function\">(<span class=\"params\">ele, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">    ctx.drawImage(ele, initX + <span class=\"number\">50</span> * index, <span class=\"number\">0</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  canvas.toBlob(<span class=\"function\"><span class=\"params\">blob</span> =&gt;</span> &#123;</span><br><span class=\"line\">    saveAs(blob, <span class=\"string\">\"sprite.png\"</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>预览：</p>\n<p><a href=\"https://canace22.github.io/Demos/#/\" target=\"_blank\" rel=\"noopener\">Demos</a> =&gt; canvas 绘图 =&gt; 合成雪碧图</p>\n<p>三、扩展</p>\n<p>如果觉得这样还不够好用的话，可以学习 smithSprite，把对应图片的 css 坐标样式也导出来</p>"},{"title":"CSS3 动画 vs Js 动画","comments":1,"date":"2019-05-19T05:09:35.000Z","_content":"\n之前被问到过，css3 动画与 js 动画孰优孰劣，脑袋的第一反应就是性能上肯定 css3 动画会好很多，但别人说不对，我就在想，不对？难道还有别的原因吗？答案是肯定的。先来看看二者实现动画的原理吧。\n\n<!--more-->\n\n## css3 动画原理\n\ncss3 动画本质上是一直视觉上的动画，并未去触碰 DOM，换句话说，用 css3 实现的动画，原来的 DOM 的位置是不曾被改变的。\n\n## js 动画原理\n\njs 动画是通过控制 DOM 的位置，来达到动的效果，是 DOM 一点点位移的结果，每一次的位移都要等待上一次的位移结束，而且因为频繁的操作 DOM，会带来频繁的重绘，所以会出现卡顿的现象。\n\n## 孰优孰劣？\n\n通过上面的分析，我们知道 css3 相比 js 实现的动画，会更流畅。我们还知道，过多的 js 脚本，页面的加载速度会受到影响，所以这在一定程度上肯定会影响到页面的性能。因此，推荐使用 css3 动画，而不建议使用 js 动画。\n","source":"_posts/css3动画-vs-js动画.md","raw":"---\ntitle: CSS3 动画 vs js 动画\ncomments: true\ndate: 2019-05-19 13:09:35\ncategories: web\ntags: css\n---\n\n之前被问到过，css3 动画与 js 动画孰优孰劣，脑袋的第一反应就是性能上肯定 css3 动画会好很多，但别人说不对，我就在想，不对？难道还有别的原因吗？答案是肯定的。先来看看二者实现动画的原理吧。\n\n<!--more-->\n\n## css3 动画原理\n\ncss3 动画本质上是一直视觉上的动画，并未去触碰 DOM，换句话说，用 css3 实现的动画，原来的 DOM 的位置是不曾被改变的。\n\n## js 动画原理\n\njs 动画是通过控制 DOM 的位置，来达到动的效果，是 DOM 一点点位移的结果，每一次的位移都要等待上一次的位移结束，而且因为频繁的操作 DOM，会带来频繁的重绘，所以会出现卡顿的现象。\n\n## 孰优孰劣？\n\n通过上面的分析，我们知道 css3 相比 js 实现的动画，会更流畅。我们还知道，过多的 js 脚本，页面的加载速度会受到影响，所以这在一定程度上肯定会影响到页面的性能。因此，推荐使用 css3 动画，而不建议使用 js 动画。\n","slug":"css3动画-vs-js动画","published":1,"updated":"2019-11-13T12:10:13.511Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9500158ex0uukp7ql0","content":"<p>之前被问到过，css3 动画与 js 动画孰优孰劣，脑袋的第一反应就是性能上肯定 css3 动画会好很多，但别人说不对，我就在想，不对？难道还有别的原因吗？答案是肯定的。先来看看二者实现动画的原理吧。</p>\n<a id=\"more\"></a>\n<h2 id=\"css3-动画原理\"><a href=\"#css3-动画原理\" class=\"headerlink\" title=\"css3 动画原理\"></a>css3 动画原理</h2><p>css3 动画本质上是一直视觉上的动画，并未去触碰 DOM，换句话说，用 css3 实现的动画，原来的 DOM 的位置是不曾被改变的。</p>\n<h2 id=\"js-动画原理\"><a href=\"#js-动画原理\" class=\"headerlink\" title=\"js 动画原理\"></a>js 动画原理</h2><p>js 动画是通过控制 DOM 的位置，来达到动的效果，是 DOM 一点点位移的结果，每一次的位移都要等待上一次的位移结束，而且因为频繁的操作 DOM，会带来频繁的重绘，所以会出现卡顿的现象。</p>\n<h2 id=\"孰优孰劣？\"><a href=\"#孰优孰劣？\" class=\"headerlink\" title=\"孰优孰劣？\"></a>孰优孰劣？</h2><p>通过上面的分析，我们知道 css3 相比 js 实现的动画，会更流畅。我们还知道，过多的 js 脚本，页面的加载速度会受到影响，所以这在一定程度上肯定会影响到页面的性能。因此，推荐使用 css3 动画，而不建议使用 js 动画。</p>\n","site":{"data":{}},"excerpt":"<p>之前被问到过，css3 动画与 js 动画孰优孰劣，脑袋的第一反应就是性能上肯定 css3 动画会好很多，但别人说不对，我就在想，不对？难道还有别的原因吗？答案是肯定的。先来看看二者实现动画的原理吧。</p>","more":"<h2 id=\"css3-动画原理\"><a href=\"#css3-动画原理\" class=\"headerlink\" title=\"css3 动画原理\"></a>css3 动画原理</h2><p>css3 动画本质上是一直视觉上的动画，并未去触碰 DOM，换句话说，用 css3 实现的动画，原来的 DOM 的位置是不曾被改变的。</p>\n<h2 id=\"js-动画原理\"><a href=\"#js-动画原理\" class=\"headerlink\" title=\"js 动画原理\"></a>js 动画原理</h2><p>js 动画是通过控制 DOM 的位置，来达到动的效果，是 DOM 一点点位移的结果，每一次的位移都要等待上一次的位移结束，而且因为频繁的操作 DOM，会带来频繁的重绘，所以会出现卡顿的现象。</p>\n<h2 id=\"孰优孰劣？\"><a href=\"#孰优孰劣？\" class=\"headerlink\" title=\"孰优孰劣？\"></a>孰优孰劣？</h2><p>通过上面的分析，我们知道 css3 相比 js 实现的动画，会更流畅。我们还知道，过多的 js 脚本，页面的加载速度会受到影响，所以这在一定程度上肯定会影响到页面的性能。因此，推荐使用 css3 动画，而不建议使用 js 动画。</p>"},{"title":"Egg","comments":1,"date":"2019-08-04T04:35:16.000Z","_content":"\negg 笔记\n\n<!--more-->\n\n## 一、入门\n\n### 1、初始化项目\n\n```js\n// 利用脚手架初始化项目\nmkdir egg-example\ncd egg-example\nnpm init egg --type=simple\nnpm i\nyarn dev\n```\n\n### 2、 安装并配置模板引擎插件\n\n(1)、安装：`npm i egg-view-nunjucks --save`\n\n(2)、开启插件：\n\n```js\n// config/plugin.js\nexports.nunjucks = {\n  enable: true,\n  package: \"egg-view-nunjucks\"\n};\n```\n\n```js\n// config/config.default.js\nconfig.view = {\n  defaultViewEngine: \"nunjucks\",\n  mapping: {\n    \".tpl\": \"nunjucks\"\n  }\n};\n```\n\n### 3、创建模板文件\n\n```html\n<!-- app/view/news/list.tpl -->\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"/public/css/news.css\" />\n  </head>\n  <body>\n    <ul class=\"news-view view\">\n      {% for item in list %}\n      <li class=\"item\">\n        <a href=\"{{ item.url }}\">{{ item.title }}</a>\n      </li>\n      {% endfor %}\n    </ul>\n  </body>\n</html>\n```\n\n### 4、创建静态资源文件 news.css 到 public/css\n\n```css\nul {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.item {\n  margin: 10px 0;\n}\n\n.link {\n  color: orange;\n  text-decoration: none;\n  transform: translateY(10px);\n}\n\n.link:hover {\n  color: rgb(136, 131, 131);\n}\n\n.time {\n  color: rgb(136, 131, 131);\n  margin-left: 20px;\n}\n```\n\n### 5、添加 Controller 和 Router\n\n(1)、新建 news.js 到 //app/controller\n\n```js\n// app/controller/news.js\nconst Controller = require(\"egg\").Controller;\n\nclass NewsController extends Controller {\n  async list() {\n    const dataList = {\n      list: [\n        {\n          id: 1,\n          title: \"this is news 1\",\n          url: \"/news/1\"\n        },\n        {\n          id: 2,\n          title: \"this is news 2\",\n          url: \"/news/2\"\n        }\n      ]\n    };\n    await this.ctx.render(\"news/list.tpl\", dataList);\n  }\n}\n\nmodule.exports = NewsController;\n```\n\n(2)、router.js 添加语句：`router.get('/news', controller.news.list);`\n\n(3)、查看效果：`yarn dev` => 打开 http://127.0.0.1:7002/news\n\n### 6、编写业务逻辑,爬取 hacker-news 数据\n\n(1) 新建目录：// app/service/news.js，这里请求时设置了 proxy，是因为 hacker-news 的 api 被墙了\n\n```js\n\"use strict\";\nconst Service = require(\"egg\").Service;\n\nclass NewsService extends Service {\n  async list(page = 1) {\n    // read config\n    const { serverUrl, pageSize } = this.config.news;\n    // use build-in http client to GET hacker-news api\n    const { data: idList } = await this.ctx.curl(\n      `${serverUrl}/topstories.json`,\n      {\n        enableProxy: true,\n        proxy: \"http://127.0.0.1:1080\",\n        data: {\n          orderBy: '\"$key\"',\n          startAt: `\"${pageSize * (page - 1)}\"`,\n          endAt: `\"${pageSize * page - 1}\"`\n        },\n        dataType: \"json\"\n      }\n    );\n\n    // parallel GET detail\n    const newsList = await Promise.all(\n      Object.keys(idList).map(key => {\n        const url = `${serverUrl}/item/${idList[key]}.json`;\n\n        return this.ctx.curl(url, {\n          enableProxy: true,\n          proxy: \"http://127.0.0.1:1080\",\n          dataType: \"json\"\n        });\n      })\n    );\n    return newsList.map(res => res.data);\n  }\n}\n\nmodule.exports = NewsService;\n```\n\n(2) // app/controller/news.js 修改语句\n\n```js\nasync list() {\n  const ctx = this.ctx;\n  const page = ctx.query.page || 1;\n  const newsList = await ctx.service.news.list(page);\n  await ctx.render('news/list.tpl', { list: newsList });\n}\n```\n\n(3) // config/config.default.js 添加下面代码\n\n```js\nconfig.news = {\n  pageSize: 5,\n  serverUrl: \"https://hacker-news.firebaseio.com/v0\"\n};\n```\n\n### 7、编写扩展插件 moment，美化时间\n\n```js\n// 下载 moment 插件\nnpm i moment --save\n```\n\n```js\n// app/extend/helper.js\n\"use strict\";\nconst moment = require(\"moment\");\n\nexports.relativeTime = time => moment(new Date(time * 1000)).fromNow();\n```\n\n```html\n// views/news/list.tpl\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"/public/css/news.css\" />\n  </head>\n  <body>\n    <ul class=\"news-view view\">\n      {% for item in list %}\n      <li class=\"item\">\n        <a class=\"link\" href=\"{{ item.url }}\">{{ item.title }}</a>\n        <span class=\"time\">{{ helper.relativeTime(item.time) }}</span>\n      </li>\n      {% endfor %}\n    </ul>\n  </body>\n</html>\n```\n\n### 8、站点禁止百度爬虫访问\n\n(1) app/middleware/robot.js\n\n```js\n\"use strict\";\n// options === app.config.robot\nmodule.exports = (options, app) => {\n  return async function robotMiddleware(ctx, next) {\n    const source = ctx.get(\"user-agent\") || \"\";\n    const match = options.ua.some(ua => ua.test(source));\n    if (match) {\n      ctx.status = 403;\n      ctx.message = \"Go away, robot.\";\n    } else {\n      await next();\n    }\n  };\n};\n```\n\n(2) config/config.default.js 添加如下代码\n\n```js\n// add middleware robot\nconfig.middleware = [\"robot\"];\n// robot's configurations\nconfig.robot = {\n  ua: [/Baiduspider/i]\n};\n```\n\n## 9、单元测试\n\n(1) // test/app/middleware/robot.test.js\n\n```js\n\"use strict\";\nconst { app, mock, assert } = require(\"egg-mock/bootstrap\");\n\ndescribe(\"test/app/middleware/robot.test.js\", () => {\n  it(\"should block robot\", () => {\n    return app\n      .httpRequest()\n      .get(\"/\")\n      .set(\"User-Agent\", \"Baiduspider\")\n      .expect(403);\n  });\n});\n```\n\n(2) 执行测试脚本 `yarn test-local`\n","source":"_posts/egg.md","raw":"---\ntitle: egg\ncomments: true\ndate: 2019-08-04 12:35:16\ncategories: web\ntags: egg\n---\n\negg 笔记\n\n<!--more-->\n\n## 一、入门\n\n### 1、初始化项目\n\n```js\n// 利用脚手架初始化项目\nmkdir egg-example\ncd egg-example\nnpm init egg --type=simple\nnpm i\nyarn dev\n```\n\n### 2、 安装并配置模板引擎插件\n\n(1)、安装：`npm i egg-view-nunjucks --save`\n\n(2)、开启插件：\n\n```js\n// config/plugin.js\nexports.nunjucks = {\n  enable: true,\n  package: \"egg-view-nunjucks\"\n};\n```\n\n```js\n// config/config.default.js\nconfig.view = {\n  defaultViewEngine: \"nunjucks\",\n  mapping: {\n    \".tpl\": \"nunjucks\"\n  }\n};\n```\n\n### 3、创建模板文件\n\n```html\n<!-- app/view/news/list.tpl -->\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"/public/css/news.css\" />\n  </head>\n  <body>\n    <ul class=\"news-view view\">\n      {% for item in list %}\n      <li class=\"item\">\n        <a href=\"{{ item.url }}\">{{ item.title }}</a>\n      </li>\n      {% endfor %}\n    </ul>\n  </body>\n</html>\n```\n\n### 4、创建静态资源文件 news.css 到 public/css\n\n```css\nul {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n.item {\n  margin: 10px 0;\n}\n\n.link {\n  color: orange;\n  text-decoration: none;\n  transform: translateY(10px);\n}\n\n.link:hover {\n  color: rgb(136, 131, 131);\n}\n\n.time {\n  color: rgb(136, 131, 131);\n  margin-left: 20px;\n}\n```\n\n### 5、添加 Controller 和 Router\n\n(1)、新建 news.js 到 //app/controller\n\n```js\n// app/controller/news.js\nconst Controller = require(\"egg\").Controller;\n\nclass NewsController extends Controller {\n  async list() {\n    const dataList = {\n      list: [\n        {\n          id: 1,\n          title: \"this is news 1\",\n          url: \"/news/1\"\n        },\n        {\n          id: 2,\n          title: \"this is news 2\",\n          url: \"/news/2\"\n        }\n      ]\n    };\n    await this.ctx.render(\"news/list.tpl\", dataList);\n  }\n}\n\nmodule.exports = NewsController;\n```\n\n(2)、router.js 添加语句：`router.get('/news', controller.news.list);`\n\n(3)、查看效果：`yarn dev` => 打开 http://127.0.0.1:7002/news\n\n### 6、编写业务逻辑,爬取 hacker-news 数据\n\n(1) 新建目录：// app/service/news.js，这里请求时设置了 proxy，是因为 hacker-news 的 api 被墙了\n\n```js\n\"use strict\";\nconst Service = require(\"egg\").Service;\n\nclass NewsService extends Service {\n  async list(page = 1) {\n    // read config\n    const { serverUrl, pageSize } = this.config.news;\n    // use build-in http client to GET hacker-news api\n    const { data: idList } = await this.ctx.curl(\n      `${serverUrl}/topstories.json`,\n      {\n        enableProxy: true,\n        proxy: \"http://127.0.0.1:1080\",\n        data: {\n          orderBy: '\"$key\"',\n          startAt: `\"${pageSize * (page - 1)}\"`,\n          endAt: `\"${pageSize * page - 1}\"`\n        },\n        dataType: \"json\"\n      }\n    );\n\n    // parallel GET detail\n    const newsList = await Promise.all(\n      Object.keys(idList).map(key => {\n        const url = `${serverUrl}/item/${idList[key]}.json`;\n\n        return this.ctx.curl(url, {\n          enableProxy: true,\n          proxy: \"http://127.0.0.1:1080\",\n          dataType: \"json\"\n        });\n      })\n    );\n    return newsList.map(res => res.data);\n  }\n}\n\nmodule.exports = NewsService;\n```\n\n(2) // app/controller/news.js 修改语句\n\n```js\nasync list() {\n  const ctx = this.ctx;\n  const page = ctx.query.page || 1;\n  const newsList = await ctx.service.news.list(page);\n  await ctx.render('news/list.tpl', { list: newsList });\n}\n```\n\n(3) // config/config.default.js 添加下面代码\n\n```js\nconfig.news = {\n  pageSize: 5,\n  serverUrl: \"https://hacker-news.firebaseio.com/v0\"\n};\n```\n\n### 7、编写扩展插件 moment，美化时间\n\n```js\n// 下载 moment 插件\nnpm i moment --save\n```\n\n```js\n// app/extend/helper.js\n\"use strict\";\nconst moment = require(\"moment\");\n\nexports.relativeTime = time => moment(new Date(time * 1000)).fromNow();\n```\n\n```html\n// views/news/list.tpl\n<html>\n  <head>\n    <title>Hacker News</title>\n    <link rel=\"stylesheet\" href=\"/public/css/news.css\" />\n  </head>\n  <body>\n    <ul class=\"news-view view\">\n      {% for item in list %}\n      <li class=\"item\">\n        <a class=\"link\" href=\"{{ item.url }}\">{{ item.title }}</a>\n        <span class=\"time\">{{ helper.relativeTime(item.time) }}</span>\n      </li>\n      {% endfor %}\n    </ul>\n  </body>\n</html>\n```\n\n### 8、站点禁止百度爬虫访问\n\n(1) app/middleware/robot.js\n\n```js\n\"use strict\";\n// options === app.config.robot\nmodule.exports = (options, app) => {\n  return async function robotMiddleware(ctx, next) {\n    const source = ctx.get(\"user-agent\") || \"\";\n    const match = options.ua.some(ua => ua.test(source));\n    if (match) {\n      ctx.status = 403;\n      ctx.message = \"Go away, robot.\";\n    } else {\n      await next();\n    }\n  };\n};\n```\n\n(2) config/config.default.js 添加如下代码\n\n```js\n// add middleware robot\nconfig.middleware = [\"robot\"];\n// robot's configurations\nconfig.robot = {\n  ua: [/Baiduspider/i]\n};\n```\n\n## 9、单元测试\n\n(1) // test/app/middleware/robot.test.js\n\n```js\n\"use strict\";\nconst { app, mock, assert } = require(\"egg-mock/bootstrap\");\n\ndescribe(\"test/app/middleware/robot.test.js\", () => {\n  it(\"should block robot\", () => {\n    return app\n      .httpRequest()\n      .get(\"/\")\n      .set(\"User-Agent\", \"Baiduspider\")\n      .expect(403);\n  });\n});\n```\n\n(2) 执行测试脚本 `yarn test-local`\n","slug":"egg","published":1,"updated":"2019-11-13T12:06:32.955Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9600188ex0fgz7wvrg","content":"<p>egg 笔记</p>\n<a id=\"more\"></a>\n<h2 id=\"一、入门\"><a href=\"#一、入门\" class=\"headerlink\" title=\"一、入门\"></a>一、入门</h2><h3 id=\"1、初始化项目\"><a href=\"#1、初始化项目\" class=\"headerlink\" title=\"1、初始化项目\"></a>1、初始化项目</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用脚手架初始化项目</span></span><br><span class=\"line\">mkdir egg-example</span><br><span class=\"line\">cd egg-example</span><br><span class=\"line\">npm init egg --type=simple</span><br><span class=\"line\">npm i</span><br><span class=\"line\">yarn dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、-安装并配置模板引擎插件\"><a href=\"#2、-安装并配置模板引擎插件\" class=\"headerlink\" title=\"2、 安装并配置模板引擎插件\"></a>2、 安装并配置模板引擎插件</h3><p>(1)、安装：<code>npm i egg-view-nunjucks --save</code></p>\n<p>(2)、开启插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/plugin.js</span></span><br><span class=\"line\">exports.nunjucks = &#123;</span><br><span class=\"line\">  enable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  package: <span class=\"string\">\"egg-view-nunjucks\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/config.default.js</span></span><br><span class=\"line\">config.view = &#123;</span><br><span class=\"line\">  defaultViewEngine: <span class=\"string\">\"nunjucks\"</span>,</span><br><span class=\"line\">  mapping: &#123;</span><br><span class=\"line\">    <span class=\"string\">\".tpl\"</span>: <span class=\"string\">\"nunjucks\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、创建模板文件\"><a href=\"#3、创建模板文件\" class=\"headerlink\" title=\"3、创建模板文件\"></a>3、创建模板文件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app/view/news/list.tpl --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hacker News<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/public/css/news.css\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"news-view view\"</span>&gt;</span></span><br><span class=\"line\">      &#123;% for item in list %&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; item.url &#125;&#125;\"</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      &#123;% endfor %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4、创建静态资源文件-news-css-到-public-css\"><a href=\"#4、创建静态资源文件-news-css-到-public-css\" class=\"headerlink\" title=\"4、创建静态资源文件 news.css 到 public/css\"></a>4、创建静态资源文件 news.css 到 public/css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.link</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(10px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.link</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(136, 131, 131);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.time</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(136, 131, 131);</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、添加-Controller-和-Router\"><a href=\"#5、添加-Controller-和-Router\" class=\"headerlink\" title=\"5、添加 Controller 和 Router\"></a>5、添加 Controller 和 Router</h3><p>(1)、新建 news.js 到 //app/controller</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/controller/news.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Controller = <span class=\"built_in\">require</span>(<span class=\"string\">\"egg\"</span>).Controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> list() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dataList = &#123;</span><br><span class=\"line\">      list: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          id: <span class=\"number\">1</span>,</span><br><span class=\"line\">          title: <span class=\"string\">\"this is news 1\"</span>,</span><br><span class=\"line\">          url: <span class=\"string\">\"/news/1\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          id: <span class=\"number\">2</span>,</span><br><span class=\"line\">          title: <span class=\"string\">\"this is news 2\"</span>,</span><br><span class=\"line\">          url: <span class=\"string\">\"/news/2\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.ctx.render(<span class=\"string\">\"news/list.tpl\"</span>, dataList);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = NewsController;</span><br></pre></td></tr></table></figure>\n<p>(2)、router.js 添加语句：<code>router.get(&#39;/news&#39;, controller.news.list);</code></p>\n<p>(3)、查看效果：<code>yarn dev</code> =&gt; 打开 <a href=\"http://127.0.0.1:7002/news\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7002/news</a></p>\n<h3 id=\"6、编写业务逻辑-爬取-hacker-news-数据\"><a href=\"#6、编写业务逻辑-爬取-hacker-news-数据\" class=\"headerlink\" title=\"6、编写业务逻辑,爬取 hacker-news 数据\"></a>6、编写业务逻辑,爬取 hacker-news 数据</h3><p>(1) 新建目录：// app/service/news.js，这里请求时设置了 proxy，是因为 hacker-news 的 api 被墙了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Service = <span class=\"built_in\">require</span>(<span class=\"string\">\"egg\"</span>).Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> list(page = <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// read config</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; serverUrl, pageSize &#125; = <span class=\"keyword\">this</span>.config.news;</span><br><span class=\"line\">    <span class=\"comment\">// use build-in http client to GET hacker-news api</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; <span class=\"attr\">data</span>: idList &#125; = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.ctx.curl(</span><br><span class=\"line\">      <span class=\"string\">`<span class=\"subst\">$&#123;serverUrl&#125;</span>/topstories.json`</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        enableProxy: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        proxy: <span class=\"string\">\"http://127.0.0.1:1080\"</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">          orderBy: <span class=\"string\">'\"$key\"'</span>,</span><br><span class=\"line\">          startAt: <span class=\"string\">`\"<span class=\"subst\">$&#123;pageSize * (page - <span class=\"number\">1</span>)&#125;</span>\"`</span>,</span><br><span class=\"line\">          endAt: <span class=\"string\">`\"<span class=\"subst\">$&#123;pageSize * page - <span class=\"number\">1</span>&#125;</span>\"`</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        dataType: <span class=\"string\">\"json\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// parallel GET detail</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newsList = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.keys(idList).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;serverUrl&#125;</span>/item/<span class=\"subst\">$&#123;idList[key]&#125;</span>.json`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ctx.curl(url, &#123;</span><br><span class=\"line\">          enableProxy: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          proxy: <span class=\"string\">\"http://127.0.0.1:1080\"</span>,</span><br><span class=\"line\">          dataType: <span class=\"string\">\"json\"</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newsList.map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = NewsService;</span><br></pre></td></tr></table></figure>\n<p>(2) // app/controller/news.js 修改语句</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> list() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = <span class=\"keyword\">this</span>.ctx;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> page = ctx.query.page || <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newsList = <span class=\"keyword\">await</span> ctx.service.news.list(page);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'news/list.tpl'</span>, &#123; <span class=\"attr\">list</span>: newsList &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3) // config/config.default.js 添加下面代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.news = &#123;</span><br><span class=\"line\">  pageSize: <span class=\"number\">5</span>,</span><br><span class=\"line\">  serverUrl: <span class=\"string\">\"https://hacker-news.firebaseio.com/v0\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7、编写扩展插件-moment，美化时间\"><a href=\"#7、编写扩展插件-moment，美化时间\" class=\"headerlink\" title=\"7、编写扩展插件 moment，美化时间\"></a>7、编写扩展插件 moment，美化时间</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载 moment 插件</span></span><br><span class=\"line\">npm i moment --save</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/extend/helper.js</span></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">\"moment\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">exports.relativeTime = <span class=\"function\"><span class=\"params\">time</span> =&gt;</span> moment(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time * <span class=\"number\">1000</span>)).fromNow();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// views/news/list.tpl</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hacker News<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/public/css/news.css\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"news-view view\"</span>&gt;</span></span><br><span class=\"line\">      &#123;% for item in list %&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; item.url &#125;&#125;\"</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"time\"</span>&gt;</span>&#123;&#123; helper.relativeTime(item.time) &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      &#123;% endfor %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8、站点禁止百度爬虫访问\"><a href=\"#8、站点禁止百度爬虫访问\" class=\"headerlink\" title=\"8、站点禁止百度爬虫访问\"></a>8、站点禁止百度爬虫访问</h3><p>(1) app/middleware/robot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// options === app.config.robot</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">options, app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">robotMiddleware</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> source = ctx.get(<span class=\"string\">\"user-agent\"</span>) || <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = options.ua.some(<span class=\"function\"><span class=\"params\">ua</span> =&gt;</span> ua.test(source));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (match) &#123;</span><br><span class=\"line\">      ctx.status = <span class=\"number\">403</span>;</span><br><span class=\"line\">      ctx.message = <span class=\"string\">\"Go away, robot.\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>(2) config/config.default.js 添加如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add middleware robot</span></span><br><span class=\"line\">config.middleware = [<span class=\"string\">\"robot\"</span>];</span><br><span class=\"line\"><span class=\"comment\">// robot's configurations</span></span><br><span class=\"line\">config.robot = &#123;</span><br><span class=\"line\">  ua: [<span class=\"regexp\">/Baiduspider/i</span>]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9、单元测试\"><a href=\"#9、单元测试\" class=\"headerlink\" title=\"9、单元测试\"></a>9、单元测试</h2><p>(1) // test/app/middleware/robot.test.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; app, mock, assert &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"egg-mock/bootstrap\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">\"test/app/middleware/robot.test.js\"</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">\"should block robot\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app</span><br><span class=\"line\">      .httpRequest()</span><br><span class=\"line\">      .get(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">      .set(<span class=\"string\">\"User-Agent\"</span>, <span class=\"string\">\"Baiduspider\"</span>)</span><br><span class=\"line\">      .expect(<span class=\"number\">403</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>(2) 执行测试脚本 <code>yarn test-local</code></p>\n","site":{"data":{}},"excerpt":"<p>egg 笔记</p>","more":"<h2 id=\"一、入门\"><a href=\"#一、入门\" class=\"headerlink\" title=\"一、入门\"></a>一、入门</h2><h3 id=\"1、初始化项目\"><a href=\"#1、初始化项目\" class=\"headerlink\" title=\"1、初始化项目\"></a>1、初始化项目</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用脚手架初始化项目</span></span><br><span class=\"line\">mkdir egg-example</span><br><span class=\"line\">cd egg-example</span><br><span class=\"line\">npm init egg --type=simple</span><br><span class=\"line\">npm i</span><br><span class=\"line\">yarn dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、-安装并配置模板引擎插件\"><a href=\"#2、-安装并配置模板引擎插件\" class=\"headerlink\" title=\"2、 安装并配置模板引擎插件\"></a>2、 安装并配置模板引擎插件</h3><p>(1)、安装：<code>npm i egg-view-nunjucks --save</code></p>\n<p>(2)、开启插件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/plugin.js</span></span><br><span class=\"line\">exports.nunjucks = &#123;</span><br><span class=\"line\">  enable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  package: <span class=\"string\">\"egg-view-nunjucks\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// config/config.default.js</span></span><br><span class=\"line\">config.view = &#123;</span><br><span class=\"line\">  defaultViewEngine: <span class=\"string\">\"nunjucks\"</span>,</span><br><span class=\"line\">  mapping: &#123;</span><br><span class=\"line\">    <span class=\"string\">\".tpl\"</span>: <span class=\"string\">\"nunjucks\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、创建模板文件\"><a href=\"#3、创建模板文件\" class=\"headerlink\" title=\"3、创建模板文件\"></a>3、创建模板文件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- app/view/news/list.tpl --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hacker News<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/public/css/news.css\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"news-view view\"</span>&gt;</span></span><br><span class=\"line\">      &#123;% for item in list %&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; item.url &#125;&#125;\"</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      &#123;% endfor %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4、创建静态资源文件-news-css-到-public-css\"><a href=\"#4、创建静态资源文件-news-css-到-public-css\" class=\"headerlink\" title=\"4、创建静态资源文件 news.css 到 public/css\"></a>4、创建静态资源文件 news.css 到 public/css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">list-style</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.link</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(10px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.link</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(136, 131, 131);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.time</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(136, 131, 131);</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、添加-Controller-和-Router\"><a href=\"#5、添加-Controller-和-Router\" class=\"headerlink\" title=\"5、添加 Controller 和 Router\"></a>5、添加 Controller 和 Router</h3><p>(1)、新建 news.js 到 //app/controller</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/controller/news.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Controller = <span class=\"built_in\">require</span>(<span class=\"string\">\"egg\"</span>).Controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> list() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dataList = &#123;</span><br><span class=\"line\">      list: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          id: <span class=\"number\">1</span>,</span><br><span class=\"line\">          title: <span class=\"string\">\"this is news 1\"</span>,</span><br><span class=\"line\">          url: <span class=\"string\">\"/news/1\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          id: <span class=\"number\">2</span>,</span><br><span class=\"line\">          title: <span class=\"string\">\"this is news 2\"</span>,</span><br><span class=\"line\">          url: <span class=\"string\">\"/news/2\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.ctx.render(<span class=\"string\">\"news/list.tpl\"</span>, dataList);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = NewsController;</span><br></pre></td></tr></table></figure>\n<p>(2)、router.js 添加语句：<code>router.get(&#39;/news&#39;, controller.news.list);</code></p>\n<p>(3)、查看效果：<code>yarn dev</code> =&gt; 打开 <a href=\"http://127.0.0.1:7002/news\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:7002/news</a></p>\n<h3 id=\"6、编写业务逻辑-爬取-hacker-news-数据\"><a href=\"#6、编写业务逻辑-爬取-hacker-news-数据\" class=\"headerlink\" title=\"6、编写业务逻辑,爬取 hacker-news 数据\"></a>6、编写业务逻辑,爬取 hacker-news 数据</h3><p>(1) 新建目录：// app/service/news.js，这里请求时设置了 proxy，是因为 hacker-news 的 api 被墙了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Service = <span class=\"built_in\">require</span>(<span class=\"string\">\"egg\"</span>).Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewsService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> list(page = <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// read config</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; serverUrl, pageSize &#125; = <span class=\"keyword\">this</span>.config.news;</span><br><span class=\"line\">    <span class=\"comment\">// use build-in http client to GET hacker-news api</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; <span class=\"attr\">data</span>: idList &#125; = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.ctx.curl(</span><br><span class=\"line\">      <span class=\"string\">`<span class=\"subst\">$&#123;serverUrl&#125;</span>/topstories.json`</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        enableProxy: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        proxy: <span class=\"string\">\"http://127.0.0.1:1080\"</span>,</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">          orderBy: <span class=\"string\">'\"$key\"'</span>,</span><br><span class=\"line\">          startAt: <span class=\"string\">`\"<span class=\"subst\">$&#123;pageSize * (page - <span class=\"number\">1</span>)&#125;</span>\"`</span>,</span><br><span class=\"line\">          endAt: <span class=\"string\">`\"<span class=\"subst\">$&#123;pageSize * page - <span class=\"number\">1</span>&#125;</span>\"`</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        dataType: <span class=\"string\">\"json\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// parallel GET detail</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> newsList = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.keys(idList).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> url = <span class=\"string\">`<span class=\"subst\">$&#123;serverUrl&#125;</span>/item/<span class=\"subst\">$&#123;idList[key]&#125;</span>.json`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ctx.curl(url, &#123;</span><br><span class=\"line\">          enableProxy: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          proxy: <span class=\"string\">\"http://127.0.0.1:1080\"</span>,</span><br><span class=\"line\">          dataType: <span class=\"string\">\"json\"</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newsList.map(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = NewsService;</span><br></pre></td></tr></table></figure>\n<p>(2) // app/controller/news.js 修改语句</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> list() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = <span class=\"keyword\">this</span>.ctx;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> page = ctx.query.page || <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newsList = <span class=\"keyword\">await</span> ctx.service.news.list(page);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> ctx.render(<span class=\"string\">'news/list.tpl'</span>, &#123; <span class=\"attr\">list</span>: newsList &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3) // config/config.default.js 添加下面代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config.news = &#123;</span><br><span class=\"line\">  pageSize: <span class=\"number\">5</span>,</span><br><span class=\"line\">  serverUrl: <span class=\"string\">\"https://hacker-news.firebaseio.com/v0\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7、编写扩展插件-moment，美化时间\"><a href=\"#7、编写扩展插件-moment，美化时间\" class=\"headerlink\" title=\"7、编写扩展插件 moment，美化时间\"></a>7、编写扩展插件 moment，美化时间</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下载 moment 插件</span></span><br><span class=\"line\">npm i moment --save</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/extend/helper.js</span></span><br><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> moment = <span class=\"built_in\">require</span>(<span class=\"string\">\"moment\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">exports.relativeTime = <span class=\"function\"><span class=\"params\">time</span> =&gt;</span> moment(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(time * <span class=\"number\">1000</span>)).fromNow();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// views/news/list.tpl</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hacker News<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/public/css/news.css\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"news-view view\"</span>&gt;</span></span><br><span class=\"line\">      &#123;% for item in list %&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"link\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; item.url &#125;&#125;\"</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"time\"</span>&gt;</span>&#123;&#123; helper.relativeTime(item.time) &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">      &#123;% endfor %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"8、站点禁止百度爬虫访问\"><a href=\"#8、站点禁止百度爬虫访问\" class=\"headerlink\" title=\"8、站点禁止百度爬虫访问\"></a>8、站点禁止百度爬虫访问</h3><p>(1) app/middleware/robot.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// options === app.config.robot</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">options, app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">robotMiddleware</span>(<span class=\"params\">ctx, next</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> source = ctx.get(<span class=\"string\">\"user-agent\"</span>) || <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> match = options.ua.some(<span class=\"function\"><span class=\"params\">ua</span> =&gt;</span> ua.test(source));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (match) &#123;</span><br><span class=\"line\">      ctx.status = <span class=\"number\">403</span>;</span><br><span class=\"line\">      ctx.message = <span class=\"string\">\"Go away, robot.\"</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>(2) config/config.default.js 添加如下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// add middleware robot</span></span><br><span class=\"line\">config.middleware = [<span class=\"string\">\"robot\"</span>];</span><br><span class=\"line\"><span class=\"comment\">// robot's configurations</span></span><br><span class=\"line\">config.robot = &#123;</span><br><span class=\"line\">  ua: [<span class=\"regexp\">/Baiduspider/i</span>]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"9、单元测试\"><a href=\"#9、单元测试\" class=\"headerlink\" title=\"9、单元测试\"></a>9、单元测试</h2><p>(1) // test/app/middleware/robot.test.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; app, mock, assert &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"egg-mock/bootstrap\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">\"test/app/middleware/robot.test.js\"</span>, () =&gt; &#123;</span><br><span class=\"line\">  it(<span class=\"string\">\"should block robot\"</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> app</span><br><span class=\"line\">      .httpRequest()</span><br><span class=\"line\">      .get(<span class=\"string\">\"/\"</span>)</span><br><span class=\"line\">      .set(<span class=\"string\">\"User-Agent\"</span>, <span class=\"string\">\"Baiduspider\"</span>)</span><br><span class=\"line\">      .expect(<span class=\"number\">403</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>(2) 执行测试脚本 <code>yarn test-local</code></p>"},{"title":"Github+travis自动构建vue项目到gitpage","comments":1,"date":"2019-08-04T04:27:25.000Z","_content":"\ngithub + travis 自动构建 vue 项目到 gitpage\n\n<!--more-->\n\n### 一、设置 vue.config.js，my-project 对应的是 github 上的项目名称\n\n```js\nmodule.exports = {\n  publicPath: process.env.NODE_ENV === \"production\" ? \"/my-project/\" : \"/\"\n};\n```\n\n### 二、创建脚本文件 deploy.sh\n\n```bash\n#!/usr/bin/env sh\n\n# abort on errors\nset -e\n\n# build\nnpm run build\n\n# navigate into the build output directory\ncd dist\n\n# if you are deploying to a custom domain\n# echo 'www.example.com' > CNAME\n\ngit init\ngit add -A\ngit commit -m 'deploy'\n\n# if you are deploying to https://<USERNAME>.github.io\n# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master\n\n# if you are deploying to https://<USERNAME>.github.io/<REPO>\n# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages\n\ncd -\n\n# 运行： .\\deploy.sh args\n```\n\n### 三、配置 travis，这方面的文章很多，自行搜索即可\n\n### 四、创建 .traivs.yml 文件\n\n```\nlanguage: node_js\nnode_js:\n - \"node\"\n\ncache: npm\n\nscript: npm run build\n\ndeploy:\n provider: pages\n skip_cleanup: true\n github_token: $GH_TOKEN\n local_dir: dist\n on:\n   branch: master\n```\n\n### 五、上传项目代码到 GitHub\n","source":"_posts/github-travis自动构建vue项目到gitpage.md","raw":"---\ntitle: github+travis自动构建vue项目到gitpage\ncomments: true\ndate: 2019-08-04 12:27:25\ncategories: 项目管理\ntags: ci\n---\n\ngithub + travis 自动构建 vue 项目到 gitpage\n\n<!--more-->\n\n### 一、设置 vue.config.js，my-project 对应的是 github 上的项目名称\n\n```js\nmodule.exports = {\n  publicPath: process.env.NODE_ENV === \"production\" ? \"/my-project/\" : \"/\"\n};\n```\n\n### 二、创建脚本文件 deploy.sh\n\n```bash\n#!/usr/bin/env sh\n\n# abort on errors\nset -e\n\n# build\nnpm run build\n\n# navigate into the build output directory\ncd dist\n\n# if you are deploying to a custom domain\n# echo 'www.example.com' > CNAME\n\ngit init\ngit add -A\ngit commit -m 'deploy'\n\n# if you are deploying to https://<USERNAME>.github.io\n# git push -f git@github.com:<USERNAME>/<USERNAME>.github.io.git master\n\n# if you are deploying to https://<USERNAME>.github.io/<REPO>\n# git push -f git@github.com:<USERNAME>/<REPO>.git master:gh-pages\n\ncd -\n\n# 运行： .\\deploy.sh args\n```\n\n### 三、配置 travis，这方面的文章很多，自行搜索即可\n\n### 四、创建 .traivs.yml 文件\n\n```\nlanguage: node_js\nnode_js:\n - \"node\"\n\ncache: npm\n\nscript: npm run build\n\ndeploy:\n provider: pages\n skip_cleanup: true\n github_token: $GH_TOKEN\n local_dir: dist\n on:\n   branch: master\n```\n\n### 五、上传项目代码到 GitHub\n","slug":"github-travis自动构建vue项目到gitpage","published":1,"updated":"2019-11-13T12:08:37.119Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu97001c8ex0odgccqbw","content":"<p>github + travis 自动构建 vue 项目到 gitpage</p>\n<a id=\"more\"></a>\n<h3 id=\"一、设置-vue-config-js，my-project-对应的是-github-上的项目名称\"><a href=\"#一、设置-vue-config-js，my-project-对应的是-github-上的项目名称\" class=\"headerlink\" title=\"一、设置 vue.config.js，my-project 对应的是 github 上的项目名称\"></a>一、设置 vue.config.js，my-project 对应的是 github 上的项目名称</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  publicPath: process.env.NODE_ENV === <span class=\"string\">\"production\"</span> ? <span class=\"string\">\"/my-project/\"</span> : <span class=\"string\">\"/\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、创建脚本文件-deploy-sh\"><a href=\"#二、创建脚本文件-deploy-sh\" class=\"headerlink\" title=\"二、创建脚本文件 deploy.sh\"></a>二、创建脚本文件 deploy.sh</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># abort on errors</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># build</span></span><br><span class=\"line\">npm run build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># navigate into the build output directory</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> dist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if you are deploying to a custom domain</span></span><br><span class=\"line\"><span class=\"comment\"># echo 'www.example.com' &gt; CNAME</span></span><br><span class=\"line\"></span><br><span class=\"line\">git init</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">'deploy'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if you are deploying to https://&lt;USERNAME&gt;.github.io</span></span><br><span class=\"line\"><span class=\"comment\"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if you are deploying to https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行： .\\deploy.sh args</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、配置-travis，这方面的文章很多，自行搜索即可\"><a href=\"#三、配置-travis，这方面的文章很多，自行搜索即可\" class=\"headerlink\" title=\"三、配置 travis，这方面的文章很多，自行搜索即可\"></a>三、配置 travis，这方面的文章很多，自行搜索即可</h3><h3 id=\"四、创建-traivs-yml-文件\"><a href=\"#四、创建-traivs-yml-文件\" class=\"headerlink\" title=\"四、创建 .traivs.yml 文件\"></a>四、创建 .traivs.yml 文件</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">\"node\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">cache:</span> <span class=\"string\">npm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">script:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\"> provider:</span> <span class=\"string\">pages</span></span><br><span class=\"line\"><span class=\"attr\"> skip_cleanup:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\"> github_token:</span> <span class=\"string\">$GH_TOKEN</span></span><br><span class=\"line\"><span class=\"attr\"> local_dir:</span> <span class=\"string\">dist</span></span><br><span class=\"line\"><span class=\"attr\"> on:</span></span><br><span class=\"line\"><span class=\"attr\">   branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"五、上传项目代码到-GitHub\"><a href=\"#五、上传项目代码到-GitHub\" class=\"headerlink\" title=\"五、上传项目代码到 GitHub\"></a>五、上传项目代码到 GitHub</h3>","site":{"data":{}},"excerpt":"<p>github + travis 自动构建 vue 项目到 gitpage</p>","more":"<h3 id=\"一、设置-vue-config-js，my-project-对应的是-github-上的项目名称\"><a href=\"#一、设置-vue-config-js，my-project-对应的是-github-上的项目名称\" class=\"headerlink\" title=\"一、设置 vue.config.js，my-project 对应的是 github 上的项目名称\"></a>一、设置 vue.config.js，my-project 对应的是 github 上的项目名称</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  publicPath: process.env.NODE_ENV === <span class=\"string\">\"production\"</span> ? <span class=\"string\">\"/my-project/\"</span> : <span class=\"string\">\"/\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、创建脚本文件-deploy-sh\"><a href=\"#二、创建脚本文件-deploy-sh\" class=\"headerlink\" title=\"二、创建脚本文件 deploy.sh\"></a>二、创建脚本文件 deploy.sh</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/usr/bin/env sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># abort on errors</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># build</span></span><br><span class=\"line\">npm run build</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># navigate into the build output directory</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> dist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if you are deploying to a custom domain</span></span><br><span class=\"line\"><span class=\"comment\"># echo 'www.example.com' &gt; CNAME</span></span><br><span class=\"line\"></span><br><span class=\"line\">git init</span><br><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">'deploy'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if you are deploying to https://&lt;USERNAME&gt;.github.io</span></span><br><span class=\"line\"><span class=\"comment\"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># if you are deploying to https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span><br><span class=\"line\"><span class=\"comment\"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> -</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行： .\\deploy.sh args</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、配置-travis，这方面的文章很多，自行搜索即可\"><a href=\"#三、配置-travis，这方面的文章很多，自行搜索即可\" class=\"headerlink\" title=\"三、配置 travis，这方面的文章很多，自行搜索即可\"></a>三、配置 travis，这方面的文章很多，自行搜索即可</h3><h3 id=\"四、创建-traivs-yml-文件\"><a href=\"#四、创建-traivs-yml-文件\" class=\"headerlink\" title=\"四、创建 .traivs.yml 文件\"></a>四、创建 .traivs.yml 文件</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span></span><br><span class=\"line\"><span class=\"bullet\"> -</span> <span class=\"string\">\"node\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">cache:</span> <span class=\"string\">npm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">script:</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\"><span class=\"attr\"> provider:</span> <span class=\"string\">pages</span></span><br><span class=\"line\"><span class=\"attr\"> skip_cleanup:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\"> github_token:</span> <span class=\"string\">$GH_TOKEN</span></span><br><span class=\"line\"><span class=\"attr\"> local_dir:</span> <span class=\"string\">dist</span></span><br><span class=\"line\"><span class=\"attr\"> on:</span></span><br><span class=\"line\"><span class=\"attr\">   branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"五、上传项目代码到-GitHub\"><a href=\"#五、上传项目代码到-GitHub\" class=\"headerlink\" title=\"五、上传项目代码到 GitHub\"></a>五、上传项目代码到 GitHub</h3>"},{"title":"Gitlab Ci 配置模板","comments":1,"date":"2018-10-22T11:29:20.000Z","_content":"\ngitlab ci 配置模板\n\n<!--more-->\n\n```yml\nbuild site:\n  image: node:latest\n  stage: build\n  script:\n    - npm install && npm run build\n  artifacts:\n    expire_in: 1 week\n    paths:\n      - dist\n\npages:\n  stage: deploy\n  script:\n    - rm -rf public\n    - mkdir public\n    - mv dist/* public\n  artifacts:\n    expire_in: 3 days\n    paths:\n      - public\n  only:\n    - develop\n```\n","source":"_posts/gitlab-ci配置模板.md","raw":"---\ntitle: gitlab ci 配置模板\ncomments: true\ndate: 2018-10-22 19:29:20\ncategories: 项目管理\ntags: git\n---\n\ngitlab ci 配置模板\n\n<!--more-->\n\n```yml\nbuild site:\n  image: node:latest\n  stage: build\n  script:\n    - npm install && npm run build\n  artifacts:\n    expire_in: 1 week\n    paths:\n      - dist\n\npages:\n  stage: deploy\n  script:\n    - rm -rf public\n    - mkdir public\n    - mv dist/* public\n  artifacts:\n    expire_in: 3 days\n    paths:\n      - public\n  only:\n    - develop\n```\n","slug":"gitlab-ci配置模板","published":1,"updated":"2019-11-13T12:10:50.944Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu98001f8ex08gn4qvet","content":"<p>gitlab ci 配置模板</p>\n<a id=\"more\"></a>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">build</span> <span class=\"attr\">site:</span></span><br><span class=\"line\"><span class=\"attr\">  image:</span> <span class=\"attr\">node:latest</span></span><br><span class=\"line\"><span class=\"attr\">  stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\"><span class=\"attr\">  script:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\"><span class=\"attr\">  artifacts:</span></span><br><span class=\"line\"><span class=\"attr\">    expire_in:</span> <span class=\"number\">1</span> <span class=\"string\">week</span></span><br><span class=\"line\"><span class=\"attr\">    paths:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">dist</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">pages:</span></span><br><span class=\"line\"><span class=\"attr\">  stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"><span class=\"attr\">  script:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">rm</span> <span class=\"bullet\">-rf</span> <span class=\"string\">public</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">mkdir</span> <span class=\"string\">public</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">mv</span> <span class=\"string\">dist/*</span> <span class=\"string\">public</span></span><br><span class=\"line\"><span class=\"attr\">  artifacts:</span></span><br><span class=\"line\"><span class=\"attr\">    expire_in:</span> <span class=\"number\">3</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">    paths:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">public</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">develop</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>gitlab ci 配置模板</p>","more":"<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">build</span> <span class=\"attr\">site:</span></span><br><span class=\"line\"><span class=\"attr\">  image:</span> <span class=\"attr\">node:latest</span></span><br><span class=\"line\"><span class=\"attr\">  stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\"><span class=\"attr\">  script:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"string\">build</span></span><br><span class=\"line\"><span class=\"attr\">  artifacts:</span></span><br><span class=\"line\"><span class=\"attr\">    expire_in:</span> <span class=\"number\">1</span> <span class=\"string\">week</span></span><br><span class=\"line\"><span class=\"attr\">    paths:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">dist</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">pages:</span></span><br><span class=\"line\"><span class=\"attr\">  stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"><span class=\"attr\">  script:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">rm</span> <span class=\"bullet\">-rf</span> <span class=\"string\">public</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">mkdir</span> <span class=\"string\">public</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">mv</span> <span class=\"string\">dist/*</span> <span class=\"string\">public</span></span><br><span class=\"line\"><span class=\"attr\">  artifacts:</span></span><br><span class=\"line\"><span class=\"attr\">    expire_in:</span> <span class=\"number\">3</span> <span class=\"string\">days</span></span><br><span class=\"line\"><span class=\"attr\">    paths:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">public</span></span><br><span class=\"line\"><span class=\"attr\">  only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">develop</span></span><br></pre></td></tr></table></figure>"},{"layout":"git","title":"Gitpage+hexo","date":"2018-05-20T08:58:02.000Z","comments":1,"_content":"\n大半天，一边折腾，一边查找各种文档，写出的这篇文档，不知道有没有把程序表示得足够简明，有不足之处望指明。\n\n<!--more-->\n\n1. 前提：已安装好 nodeJS 和 git。\n\n2. 桌面右击进入 gitbash，输入 npm install -g hexo 安装 hexo，关闭 gitbash。\n\n3. 在电脑中建立一个名为【hexo】的文件夹，新建的文件夹右击打开 gitbash，输入 hexo init 命令，命令执行完后，根据提示接着执行 npm install 命令。\n\n4. 运行 hexo server 命令，出现 running 字样说明 Hexo Server 已经启动了，在浏览器中打开http://localhost:4000/，可以看到生成的博客，按ctrl+C可以停止server；。\n\n5. 新打开一个 git bash 命令行窗口，cd 到/D/hexo 下，执行 hexo new “My New Post” 命令,可以生成一篇新的文章 “My New Post”，打开http://localhost:4000/ 可以预览到新生成的文章。\n\n6. 执行 hexo generate 命令可以将 markdown 文章生成静态网页，该命令执行完后，会在 D:\\Hexo\\public\\ 目录下生成一系列 html，css 等文件。\n\n7. hexo new “My NewPost”会在 D:\\Hexo\\source\\ \\_posts 目录下生成一个 markdown 文件：My-New-Post.md，可以使用一个支持 markdown 语法的编辑器（比如 Sublime Text 2）来编辑该文件。\n\n8. 部署博客到 github\n\n(1) 部署到 Github 前需要配置\\_config.yml 文件，首先找到下面的内容\n\n    ```\n                deploy:\n                type:\n    ```\n\n(2) 然后将它们修改为\n\n    ```\n           deploy:\n           type: git（新版本的hexo必须用git，不然会出错）\n           repository:git@github.com:zhchnchn/zhchnchn.git（新版本用SSH不然会出错）\n           branch: gh-pages\n    ```\n\n(3) 执行 npm install hexo-deployer-git –save 命令（hexo3.0 以上的版本必须在执行此命令后才能部署到 git 上）\n\n    A. 执行 hexo clean，清除缓存\n\n    B. 执行 hexo generate 更新生成静态网页\n\n    C. 执行hexo deploy 命令部署博客到github上；\n\n    D. 部署完成后，在浏览器中打开http://zhchnchn.github.io/（https://zhchnchn.github.io/） ，正常显示网页，表明部署成功。\n\n### 注意两大坑:\n\n1. deploy 不了，3.0 版本以上要执行这个命令： npm install hexo-deployer-git\n   –save，切记！不然可能一直 error\n\n2. 然后部署到 git 上记得修改 url，不然可能发布之后有些 js 和 css 文件路径找不到！\n","source":"_posts/gitpage-hexo.md","raw":"---\nlayout: git\ntitle: gitpage+hexo\ndate: 2018-05-20 16:58:02\ncategories: 项目管理\ntags: git\ncomments: true\n---\n\n大半天，一边折腾，一边查找各种文档，写出的这篇文档，不知道有没有把程序表示得足够简明，有不足之处望指明。\n\n<!--more-->\n\n1. 前提：已安装好 nodeJS 和 git。\n\n2. 桌面右击进入 gitbash，输入 npm install -g hexo 安装 hexo，关闭 gitbash。\n\n3. 在电脑中建立一个名为【hexo】的文件夹，新建的文件夹右击打开 gitbash，输入 hexo init 命令，命令执行完后，根据提示接着执行 npm install 命令。\n\n4. 运行 hexo server 命令，出现 running 字样说明 Hexo Server 已经启动了，在浏览器中打开http://localhost:4000/，可以看到生成的博客，按ctrl+C可以停止server；。\n\n5. 新打开一个 git bash 命令行窗口，cd 到/D/hexo 下，执行 hexo new “My New Post” 命令,可以生成一篇新的文章 “My New Post”，打开http://localhost:4000/ 可以预览到新生成的文章。\n\n6. 执行 hexo generate 命令可以将 markdown 文章生成静态网页，该命令执行完后，会在 D:\\Hexo\\public\\ 目录下生成一系列 html，css 等文件。\n\n7. hexo new “My NewPost”会在 D:\\Hexo\\source\\ \\_posts 目录下生成一个 markdown 文件：My-New-Post.md，可以使用一个支持 markdown 语法的编辑器（比如 Sublime Text 2）来编辑该文件。\n\n8. 部署博客到 github\n\n(1) 部署到 Github 前需要配置\\_config.yml 文件，首先找到下面的内容\n\n    ```\n                deploy:\n                type:\n    ```\n\n(2) 然后将它们修改为\n\n    ```\n           deploy:\n           type: git（新版本的hexo必须用git，不然会出错）\n           repository:git@github.com:zhchnchn/zhchnchn.git（新版本用SSH不然会出错）\n           branch: gh-pages\n    ```\n\n(3) 执行 npm install hexo-deployer-git –save 命令（hexo3.0 以上的版本必须在执行此命令后才能部署到 git 上）\n\n    A. 执行 hexo clean，清除缓存\n\n    B. 执行 hexo generate 更新生成静态网页\n\n    C. 执行hexo deploy 命令部署博客到github上；\n\n    D. 部署完成后，在浏览器中打开http://zhchnchn.github.io/（https://zhchnchn.github.io/） ，正常显示网页，表明部署成功。\n\n### 注意两大坑:\n\n1. deploy 不了，3.0 版本以上要执行这个命令： npm install hexo-deployer-git\n   –save，切记！不然可能一直 error\n\n2. 然后部署到 git 上记得修改 url，不然可能发布之后有些 js 和 css 文件路径找不到！\n","slug":"gitpage-hexo","published":1,"updated":"2019-11-13T12:10:58.344Z","photos":[],"link":"","_id":"ck5dbgu99001k8ex0g7lzdzau","content":"<p>大半天，一边折腾，一边查找各种文档，写出的这篇文档，不知道有没有把程序表示得足够简明，有不足之处望指明。</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>前提：已安装好 nodeJS 和 git。</p>\n</li>\n<li><p>桌面右击进入 gitbash，输入 npm install -g hexo 安装 hexo，关闭 gitbash。</p>\n</li>\n<li><p>在电脑中建立一个名为【hexo】的文件夹，新建的文件夹右击打开 gitbash，输入 hexo init 命令，命令执行完后，根据提示接着执行 npm install 命令。</p>\n</li>\n<li><p>运行 hexo server 命令，出现 running 字样说明 Hexo Server 已经启动了，在浏览器中打开<a href=\"http://localhost:4000/，可以看到生成的博客，按ctrl+C可以停止server；。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/，可以看到生成的博客，按ctrl+C可以停止server；。</a></p>\n</li>\n<li><p>新打开一个 git bash 命令行窗口，cd 到/D/hexo 下，执行 hexo new “My New Post” 命令,可以生成一篇新的文章 “My New Post”，打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 可以预览到新生成的文章。</p>\n</li>\n<li><p>执行 hexo generate 命令可以将 markdown 文章生成静态网页，该命令执行完后，会在 D:\\Hexo\\public\\ 目录下生成一系列 html，css 等文件。</p>\n</li>\n<li><p>hexo new “My NewPost”会在 D:\\Hexo\\source\\ _posts 目录下生成一个 markdown 文件：My-New-Post.md，可以使用一个支持 markdown 语法的编辑器（比如 Sublime Text 2）来编辑该文件。</p>\n</li>\n<li><p>部署博客到 github</p>\n</li>\n</ol>\n<p>(1) 部署到 Github 前需要配置_config.yml 文件，首先找到下面的内容</p>\n<pre><code><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">deploy:</span></span><br><span class=\"line\"><span class=\"symbol\">type:</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>(2) 然后将它们修改为</p>\n<pre><code><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\"><span class=\"attribute\">type</span>: git（新版本的hexo必须用git，不然会出错）</span><br><span class=\"line\"><span class=\"attribute\">repository</span>:git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:zhchnchn/zhchnchn.git（新版本用SSH不然会出错）</span><br><span class=\"line\"><span class=\"attribute\">branch</span>: gh-pages</span><br></pre></td></tr></table></figure>\n</code></pre><p>(3) 执行 npm install hexo-deployer-git –save 命令（hexo3.0 以上的版本必须在执行此命令后才能部署到 git 上）</p>\n<pre><code>A. 执行 hexo clean，清除缓存\n\nB. 执行 hexo generate 更新生成静态网页\n\nC. 执行hexo deploy 命令部署博客到github上；\n\nD. 部署完成后，在浏览器中打开http://zhchnchn.github.io/（https://zhchnchn.github.io/） ，正常显示网页，表明部署成功。\n</code></pre><h3 id=\"注意两大坑\"><a href=\"#注意两大坑\" class=\"headerlink\" title=\"注意两大坑:\"></a>注意两大坑:</h3><ol>\n<li><p>deploy 不了，3.0 版本以上要执行这个命令： npm install hexo-deployer-git<br>–save，切记！不然可能一直 error</p>\n</li>\n<li><p>然后部署到 git 上记得修改 url，不然可能发布之后有些 js 和 css 文件路径找不到！</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>大半天，一边折腾，一边查找各种文档，写出的这篇文档，不知道有没有把程序表示得足够简明，有不足之处望指明。</p>","more":"<ol>\n<li><p>前提：已安装好 nodeJS 和 git。</p>\n</li>\n<li><p>桌面右击进入 gitbash，输入 npm install -g hexo 安装 hexo，关闭 gitbash。</p>\n</li>\n<li><p>在电脑中建立一个名为【hexo】的文件夹，新建的文件夹右击打开 gitbash，输入 hexo init 命令，命令执行完后，根据提示接着执行 npm install 命令。</p>\n</li>\n<li><p>运行 hexo server 命令，出现 running 字样说明 Hexo Server 已经启动了，在浏览器中打开<a href=\"http://localhost:4000/，可以看到生成的博客，按ctrl+C可以停止server；。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/，可以看到生成的博客，按ctrl+C可以停止server；。</a></p>\n</li>\n<li><p>新打开一个 git bash 命令行窗口，cd 到/D/hexo 下，执行 hexo new “My New Post” 命令,可以生成一篇新的文章 “My New Post”，打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 可以预览到新生成的文章。</p>\n</li>\n<li><p>执行 hexo generate 命令可以将 markdown 文章生成静态网页，该命令执行完后，会在 D:\\Hexo\\public\\ 目录下生成一系列 html，css 等文件。</p>\n</li>\n<li><p>hexo new “My NewPost”会在 D:\\Hexo\\source\\ _posts 目录下生成一个 markdown 文件：My-New-Post.md，可以使用一个支持 markdown 语法的编辑器（比如 Sublime Text 2）来编辑该文件。</p>\n</li>\n<li><p>部署博客到 github</p>\n</li>\n</ol>\n<p>(1) 部署到 Github 前需要配置_config.yml 文件，首先找到下面的内容</p>\n<pre><code><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">deploy:</span></span><br><span class=\"line\"><span class=\"symbol\">type:</span></span><br></pre></td></tr></table></figure>\n</code></pre><p>(2) 然后将它们修改为</p>\n<pre><code><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\"><span class=\"attribute\">type</span>: git（新版本的hexo必须用git，不然会出错）</span><br><span class=\"line\"><span class=\"attribute\">repository</span>:git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:zhchnchn/zhchnchn.git（新版本用SSH不然会出错）</span><br><span class=\"line\"><span class=\"attribute\">branch</span>: gh-pages</span><br></pre></td></tr></table></figure>\n</code></pre><p>(3) 执行 npm install hexo-deployer-git –save 命令（hexo3.0 以上的版本必须在执行此命令后才能部署到 git 上）</p>\n<pre><code>A. 执行 hexo clean，清除缓存\n\nB. 执行 hexo generate 更新生成静态网页\n\nC. 执行hexo deploy 命令部署博客到github上；\n\nD. 部署完成后，在浏览器中打开http://zhchnchn.github.io/（https://zhchnchn.github.io/） ，正常显示网页，表明部署成功。\n</code></pre><h3 id=\"注意两大坑\"><a href=\"#注意两大坑\" class=\"headerlink\" title=\"注意两大坑:\"></a>注意两大坑:</h3><ol>\n<li><p>deploy 不了，3.0 版本以上要执行这个命令： npm install hexo-deployer-git<br>–save，切记！不然可能一直 error</p>\n</li>\n<li><p>然后部署到 git 上记得修改 url，不然可能发布之后有些 js 和 css 文件路径找不到！</p>\n</li>\n</ol>"},{"title":"CSS 布局篇","comments":1,"date":"2019-08-11T02:45:33.000Z","_content":"\ncss 基本布局介绍，包括元素的水平、垂直居中，单列布局、三列布局等，文章分析了多种情况下的布局方案，参考自知乎《css 十八般武艺全在这里了》。\n\n<!--more-->\n\n一、布局\n\n1、居中\n\n(1) 水平居中\n\nA、子元素行内元素\n\n```html\n<div class=\"parent\">\n  <span class=\"child\">子元素为行内元素</span>\n</div>\n```\n\n```css\n.parent {\n  text-align: center;\n  width: 200px;\n  height: 100px;\n  border: 1px solid purple;\n}\n```\n\nB、子元素为定宽块状元素\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">定宽子元素</div>\n</div>\n```\n\n```css\n.parent {\n  width: 200px;\n  height: 100px;\n  border: 1px solid purple;\n}\n.child {\n  width: 100px;\n  height: 20px;\n  margin: auto;\n}\n```\n\nC、子元素为不定宽块状元素\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">子元素为不定宽块状元素</div>\n</div>\n```\n\n```css\n.parent {\n  text-align: center;\n  width: 200px;\n  height: 100px;\n  border: 1px solid purple;\n}\n.child {\n  display: inline;\n}\n```\n\nD、flex 布局\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">flex 布局</div>\n</div>\n```\n\n```css\n.parent {\n  display: flex;\n  justify-content: center;\n}\n```\n\n(2) 垂直居中\n\nA、父元素一定，子元素为单行内联文本\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">父元素一定，子元素为单行内联文本</div>\n</div>\n```\n\n```css\n.parent {\n  width: 260px;\n  height: 100px;\n  line-height: 100px;\n  border: 1px solid purple;\n}\n```\n\nB、父元素一定，子元素为多行内联文本\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">\n    父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本\n  </div>\n</div>\n```\n\n```css\n.parent {\n  display: table-cell;\n  vertical-align: middle;\n  width: 260px;\n  height: 100px;\n  border: 1px solid purple;\n}\n```\n\nC、子元素为块级元素\n\n```html\n<div class=\"parent\">\n  <div class=\"child\"></div>\n</div>\n```\n\n```css\n.parent {\n  width: 500px;\n  height: 500px;\n  border: 1px solid purple;\n}\n\n.child {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100px;\n  height: 100px;\n  margin: auto;\n  border: 1px solid purple;\n}\n```\n\nD、flex 布局\n\n```html\n<div class=\"parent\">\n  <div class=\"child\"></div>\n</div>\n```\n\n```css\n.parent {\n  display: flex;\n  align-item: center;\n  width: 500px;\n  height: 500px;\n  border: 1px solid purple;\n}\n```\n\n2、单列布局\n\n(1) header、content、footer 宽度相同\n\n```html\n<div class=\"layout\">\n  <div class=\"header\">头部</div>\n  <div class=\"content\">内容</div>\n  <div class=\"footer\">尾部</div>\n</div>\n```\n\n```css\n.layout {\n  /*   width: 960px; */\n  /*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*/\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n.header {\n  width: 100%;\n  height: 72px;\n  background: palegoldenrod;\n}\n\n.content {\n  width: 100%;\n  height: calc(100% - 144px);\n  background: rgb(27, 27, 26);\n}\n\n.footer {\n  width: 100%;\n  height: 72px;\n  background: rgb(211, 211, 75);\n}\n```\n\n(2) header、footer 宽度为浏览器宽度，content 宽度小于浏览器宽度居中\n\n```html\n<div class=\"header\">\n  <div class=\"layout\">头部</div>\n</div>\n<div class=\"content\" class=\"layout\">内容</div>\n<div class=\"footer\">\n  <div class=\"layout\">尾部</div>\n</div>\n```\n\n```css\n.layout {\n  /*   width: 960px; */\n  /*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*/\n  max-width: 960px;\n  height: 100%;\n  margin: 0 auto;\n}\n\n.header,\n.footer {\n  width: 100%;\n  height: 72px;\n  background: rgb(211, 211, 75);\n}\n\n.content {\n  width: 960px;\n  height: calc(100% - 144px);\n  background: rgb(27, 27, 26);\n  margin: auto;\n}\n```\n\n3、三列布局\n\n(1) float + margin，要点两边元素固定宽度，中间元素的 margin-left、margin-right 对应左右元素的宽，先写两侧栏，再写主面板\n\n```html\n<div class=\"content\">\n  <div class=\"sub\">sub</div>\n  <div class=\"extra\">extra</div>\n  <div class=\"main\">main</div>\n</div>\n```\n\n```css\n.content {\n  width: 100%;\n  height: 100%;\n}\n\n.sub {\n  float: left;\n  width: 20%;\n  height: 100%;\n  background: rgb(56, 165, 238);\n}\n\n.extra {\n  float: right;\n  width: 10%;\n  height: 100%;\n  background: rgb(56, 165, 238);\n}\n\n.main {\n  margin-left: 20%;\n  margin-right: 10%;\n}\n```\n\n(2) position + margin，左右元素绝对定位，中间元素的 margin-left、margin-right 对应左右元素的宽度\n\n```html\n<div class=\"sub\">left</div>\n<div class=\"main\">main</div>\n<div class=\"extra\">right</div>\n```\n\n```css\n.sub,\n.extra {\n  position: absolute;\n  top: 0;\n  width: 200px;\n  height: 100%;\n  background: rgb(56, 165, 238);\n}\n\n.sub {\n  left: 0;\n}\n\n.extra {\n  right: 0;\n}\n\n.main {\n  margin: 0 200px;\n}\n```\n\n(3) flex\n\n```html\n<div class=\"layout\">\n  <aside class=\"aside\">侧边栏宽度固定</aside>\n  <div class=\"main\">主内容栏宽度自适应</div>\n</div>\n<div class=\"layout\">\n  <div class=\"main\">主内容栏宽度自适应</div>\n  <aside class=\"aside\">侧边栏宽度固定</aside>\n</div>\n<div class=\"layout\">\n  <aside class=\"aside\">左侧边栏宽度固定</aside>\n  <div class=\"main\">主内容栏宽度自适应</div>\n  <aside class=\"aside\">右侧边栏宽度固定</aside>\n</div>\n<div class=\"layout\">\n  <aside class=\"aside\">第1个侧边栏宽度固定</aside>\n  <aside class=\"aside\">第2个侧边栏宽度固定</aside>\n  <div class=\"main\">主内容栏宽度自适应</div>\n</div>\n<div class=\"layout\">\n  <div class=\"main\">主内容栏宽度自适应</div>\n  <aside class=\"aside\">第1个侧边栏宽度固定</aside>\n  <aside class=\"aside\">第2个侧边栏宽度固定</aside>\n</div>\n```\n\n```css\n.layout {\n  display: flex;\n}\n\n.main {\n  flex: 1;\n}\n\n.aside {\n  width: 200px;\n}\n```\n","source":"_posts/css布局篇.md","raw":"---\ntitle: CSS 布局篇\ncomments: true\ndate: 2019-08-11 10:45:33\ncategories: web\ntags: css\n---\n\ncss 基本布局介绍，包括元素的水平、垂直居中，单列布局、三列布局等，文章分析了多种情况下的布局方案，参考自知乎《css 十八般武艺全在这里了》。\n\n<!--more-->\n\n一、布局\n\n1、居中\n\n(1) 水平居中\n\nA、子元素行内元素\n\n```html\n<div class=\"parent\">\n  <span class=\"child\">子元素为行内元素</span>\n</div>\n```\n\n```css\n.parent {\n  text-align: center;\n  width: 200px;\n  height: 100px;\n  border: 1px solid purple;\n}\n```\n\nB、子元素为定宽块状元素\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">定宽子元素</div>\n</div>\n```\n\n```css\n.parent {\n  width: 200px;\n  height: 100px;\n  border: 1px solid purple;\n}\n.child {\n  width: 100px;\n  height: 20px;\n  margin: auto;\n}\n```\n\nC、子元素为不定宽块状元素\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">子元素为不定宽块状元素</div>\n</div>\n```\n\n```css\n.parent {\n  text-align: center;\n  width: 200px;\n  height: 100px;\n  border: 1px solid purple;\n}\n.child {\n  display: inline;\n}\n```\n\nD、flex 布局\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">flex 布局</div>\n</div>\n```\n\n```css\n.parent {\n  display: flex;\n  justify-content: center;\n}\n```\n\n(2) 垂直居中\n\nA、父元素一定，子元素为单行内联文本\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">父元素一定，子元素为单行内联文本</div>\n</div>\n```\n\n```css\n.parent {\n  width: 260px;\n  height: 100px;\n  line-height: 100px;\n  border: 1px solid purple;\n}\n```\n\nB、父元素一定，子元素为多行内联文本\n\n```html\n<div class=\"parent\">\n  <div class=\"child\">\n    父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本\n  </div>\n</div>\n```\n\n```css\n.parent {\n  display: table-cell;\n  vertical-align: middle;\n  width: 260px;\n  height: 100px;\n  border: 1px solid purple;\n}\n```\n\nC、子元素为块级元素\n\n```html\n<div class=\"parent\">\n  <div class=\"child\"></div>\n</div>\n```\n\n```css\n.parent {\n  width: 500px;\n  height: 500px;\n  border: 1px solid purple;\n}\n\n.child {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100px;\n  height: 100px;\n  margin: auto;\n  border: 1px solid purple;\n}\n```\n\nD、flex 布局\n\n```html\n<div class=\"parent\">\n  <div class=\"child\"></div>\n</div>\n```\n\n```css\n.parent {\n  display: flex;\n  align-item: center;\n  width: 500px;\n  height: 500px;\n  border: 1px solid purple;\n}\n```\n\n2、单列布局\n\n(1) header、content、footer 宽度相同\n\n```html\n<div class=\"layout\">\n  <div class=\"header\">头部</div>\n  <div class=\"content\">内容</div>\n  <div class=\"footer\">尾部</div>\n</div>\n```\n\n```css\n.layout {\n  /*   width: 960px; */\n  /*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*/\n  max-width: 960px;\n  margin: 0 auto;\n}\n\n.header {\n  width: 100%;\n  height: 72px;\n  background: palegoldenrod;\n}\n\n.content {\n  width: 100%;\n  height: calc(100% - 144px);\n  background: rgb(27, 27, 26);\n}\n\n.footer {\n  width: 100%;\n  height: 72px;\n  background: rgb(211, 211, 75);\n}\n```\n\n(2) header、footer 宽度为浏览器宽度，content 宽度小于浏览器宽度居中\n\n```html\n<div class=\"header\">\n  <div class=\"layout\">头部</div>\n</div>\n<div class=\"content\" class=\"layout\">内容</div>\n<div class=\"footer\">\n  <div class=\"layout\">尾部</div>\n</div>\n```\n\n```css\n.layout {\n  /*   width: 960px; */\n  /*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*/\n  max-width: 960px;\n  height: 100%;\n  margin: 0 auto;\n}\n\n.header,\n.footer {\n  width: 100%;\n  height: 72px;\n  background: rgb(211, 211, 75);\n}\n\n.content {\n  width: 960px;\n  height: calc(100% - 144px);\n  background: rgb(27, 27, 26);\n  margin: auto;\n}\n```\n\n3、三列布局\n\n(1) float + margin，要点两边元素固定宽度，中间元素的 margin-left、margin-right 对应左右元素的宽，先写两侧栏，再写主面板\n\n```html\n<div class=\"content\">\n  <div class=\"sub\">sub</div>\n  <div class=\"extra\">extra</div>\n  <div class=\"main\">main</div>\n</div>\n```\n\n```css\n.content {\n  width: 100%;\n  height: 100%;\n}\n\n.sub {\n  float: left;\n  width: 20%;\n  height: 100%;\n  background: rgb(56, 165, 238);\n}\n\n.extra {\n  float: right;\n  width: 10%;\n  height: 100%;\n  background: rgb(56, 165, 238);\n}\n\n.main {\n  margin-left: 20%;\n  margin-right: 10%;\n}\n```\n\n(2) position + margin，左右元素绝对定位，中间元素的 margin-left、margin-right 对应左右元素的宽度\n\n```html\n<div class=\"sub\">left</div>\n<div class=\"main\">main</div>\n<div class=\"extra\">right</div>\n```\n\n```css\n.sub,\n.extra {\n  position: absolute;\n  top: 0;\n  width: 200px;\n  height: 100%;\n  background: rgb(56, 165, 238);\n}\n\n.sub {\n  left: 0;\n}\n\n.extra {\n  right: 0;\n}\n\n.main {\n  margin: 0 200px;\n}\n```\n\n(3) flex\n\n```html\n<div class=\"layout\">\n  <aside class=\"aside\">侧边栏宽度固定</aside>\n  <div class=\"main\">主内容栏宽度自适应</div>\n</div>\n<div class=\"layout\">\n  <div class=\"main\">主内容栏宽度自适应</div>\n  <aside class=\"aside\">侧边栏宽度固定</aside>\n</div>\n<div class=\"layout\">\n  <aside class=\"aside\">左侧边栏宽度固定</aside>\n  <div class=\"main\">主内容栏宽度自适应</div>\n  <aside class=\"aside\">右侧边栏宽度固定</aside>\n</div>\n<div class=\"layout\">\n  <aside class=\"aside\">第1个侧边栏宽度固定</aside>\n  <aside class=\"aside\">第2个侧边栏宽度固定</aside>\n  <div class=\"main\">主内容栏宽度自适应</div>\n</div>\n<div class=\"layout\">\n  <div class=\"main\">主内容栏宽度自适应</div>\n  <aside class=\"aside\">第1个侧边栏宽度固定</aside>\n  <aside class=\"aside\">第2个侧边栏宽度固定</aside>\n</div>\n```\n\n```css\n.layout {\n  display: flex;\n}\n\n.main {\n  flex: 1;\n}\n\n.aside {\n  width: 200px;\n}\n```\n","slug":"css布局篇","published":1,"updated":"2019-11-13T12:10:18.109Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9a001n8ex09pb891cu","content":"<p>css 基本布局介绍，包括元素的水平、垂直居中，单列布局、三列布局等，文章分析了多种情况下的布局方案，参考自知乎《css 十八般武艺全在这里了》。</p>\n<a id=\"more\"></a>\n<p>一、布局</p>\n<p>1、居中</p>\n<p>(1) 水平居中</p>\n<p>A、子元素行内元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span>子元素为行内元素<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>B、子元素为定宽块状元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span>定宽子元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>C、子元素为不定宽块状元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span>子元素为不定宽块状元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>D、flex 布局</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span>flex 布局<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) 垂直居中</p>\n<p>A、父元素一定，子元素为单行内联文本</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span>父元素一定，子元素为单行内联文本<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">260px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>B、父元素一定，子元素为多行内联文本</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span></span><br><span class=\"line\">    父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">260px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>C、子元素为块级元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>D、flex 布局</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-item</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、单列布局</p>\n<p>(1) header、content、footer 宽度相同</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span>尾部<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.layout</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*   width: 960px; */</span></span><br><span class=\"line\">  <span class=\"comment\">/*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*/</span></span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: palegoldenrod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"built_in\">calc</span>(100% - 144px);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(27, 27, 26);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(211, 211, 75);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) header、footer 宽度为浏览器宽度，content 宽度小于浏览器宽度居中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span>尾部<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.layout</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*   width: 960px; */</span></span><br><span class=\"line\">  <span class=\"comment\">/*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*/</span></span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.header</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(211, 211, 75);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"built_in\">calc</span>(100% - 144px);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(27, 27, 26);</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、三列布局</p>\n<p>(1) float + margin，要点两边元素固定宽度，中间元素的 margin-left、margin-right 对应左右元素的宽，先写两侧栏，再写主面板</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span>sub<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"extra\"</span>&gt;</span>extra<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(56, 165, 238);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(56, 165, 238);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">10%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) position + margin，左右元素绝对定位，中间元素的 margin-left、margin-right 对应左右元素的宽度</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"extra\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sub</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(56, 165, 238);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3) flex</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主内容栏宽度自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主内容栏宽度自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>左侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主内容栏宽度自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>右侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>第1个侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>第2个侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主内容栏宽度自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主内容栏宽度自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>第1个侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>第2个侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.layout</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.aside</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>css 基本布局介绍，包括元素的水平、垂直居中，单列布局、三列布局等，文章分析了多种情况下的布局方案，参考自知乎《css 十八般武艺全在这里了》。</p>","more":"<p>一、布局</p>\n<p>1、居中</p>\n<p>(1) 水平居中</p>\n<p>A、子元素行内元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span>子元素为行内元素<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>B、子元素为定宽块状元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span>定宽子元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>C、子元素为不定宽块状元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span>子元素为不定宽块状元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>D、flex 布局</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span>flex 布局<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) 垂直居中</p>\n<p>A、父元素一定，子元素为单行内联文本</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span>父元素一定，子元素为单行内联文本<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">260px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>B、父元素一定，子元素为多行内联文本</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span></span><br><span class=\"line\">    父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">260px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>C、子元素为块级元素</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.child</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>D、flex 布局</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-item</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid purple;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、单列布局</p>\n<p>(1) header、content、footer 宽度相同</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span>尾部<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.layout</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*   width: 960px; */</span></span><br><span class=\"line\">  <span class=\"comment\">/*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*/</span></span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: palegoldenrod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"built_in\">calc</span>(100% - 144px);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(27, 27, 26);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(211, 211, 75);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) header、footer 宽度为浏览器宽度，content 宽度小于浏览器宽度居中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span>头部<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span>内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"footer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span>尾部<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.layout</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*   width: 960px; */</span></span><br><span class=\"line\">  <span class=\"comment\">/*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*/</span></span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.header</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">72px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(211, 211, 75);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"built_in\">calc</span>(100% - 144px);</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(27, 27, 26);</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、三列布局</p>\n<p>(1) float + margin，要点两边元素固定宽度，中间元素的 margin-left、margin-right 对应左右元素的宽，先写两侧栏，再写主面板</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span>sub<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"extra\"</span>&gt;</span>extra<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(56, 165, 238);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(56, 165, 238);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-right</span>: <span class=\"number\">10%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) position + margin，左右元素绝对定位，中间元素的 margin-left、margin-right 对应左右元素的宽度</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sub\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>main<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"extra\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sub</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgb</span>(56, 165, 238);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.sub</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.extra</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3) flex</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主内容栏宽度自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主内容栏宽度自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>左侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主内容栏宽度自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>右侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>第1个侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>第2个侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主内容栏宽度自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layout\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span>主内容栏宽度自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>第1个侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">aside</span> <span class=\"attr\">class</span>=<span class=\"string\">\"aside\"</span>&gt;</span>第2个侧边栏宽度固定<span class=\"tag\">&lt;/<span class=\"name\">aside</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.layout</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.aside</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"git","title":"Git环境配置","date":"2017-05-09T08:58:31.000Z","comments":1,"_content":"\n结合了一些网上的方法，结合自己配置的实际情况写的文档。\n\n<!--more-->\n\n1. 下载 git 主程序，下载地址：https://git-scm.com/downloads， 双击安装包，一路 next 就行；\n\n2. 对于技术小白的我来说，命令行神马的太复杂了，所以就需要一个 git 界面画的软件来帮助我啦，这个软件就是 TortoiseGit，下载地址：https://tortoisegit.org/download/， 分为 32 位版和 64 位版，下载时要选好，安装的时候也是一路 next；\n\n3. 接下来就是解决怎么把本地项目关联发布到 git 上的问题了；\n\n(1) 首先打开 git 上的项目，复制 git 的 HTTP 地址；\n\n(2) 然后创打开硬盘里的一个目录，最好是专门开发用的目录，点右键，选择“Git Clone…”，将地址复制进去，点击 OK；\n(3) 出现 Success 提示，就代表 clone 成功了，close 掉对话框，然后就出现了名为 git 项目的文件夹了；\n\n4. 本地改动保存为一个版本，我们以新建文件为例；\n\n(1) 首先，打开刚才生成文件夹，新建一个名为 readme.txt 的空文件；\n\n(2) 然后在这里鼠标右击，选择 Git Commit -> “master”…，会弹出一个对话框（注意：这里可能会提醒设置用户名、密码 和邮箱，点击确定，填写 git 账户的用户名和注册邮箱以及密码即可）；\n","source":"_posts/git环境配置.md","raw":"---\nlayout: git\ntitle: git环境配置\ndate: 2017-05-09 16:58:31\ncategories: 项目管理\ntags: git\ncomments: true\n---\n\n结合了一些网上的方法，结合自己配置的实际情况写的文档。\n\n<!--more-->\n\n1. 下载 git 主程序，下载地址：https://git-scm.com/downloads， 双击安装包，一路 next 就行；\n\n2. 对于技术小白的我来说，命令行神马的太复杂了，所以就需要一个 git 界面画的软件来帮助我啦，这个软件就是 TortoiseGit，下载地址：https://tortoisegit.org/download/， 分为 32 位版和 64 位版，下载时要选好，安装的时候也是一路 next；\n\n3. 接下来就是解决怎么把本地项目关联发布到 git 上的问题了；\n\n(1) 首先打开 git 上的项目，复制 git 的 HTTP 地址；\n\n(2) 然后创打开硬盘里的一个目录，最好是专门开发用的目录，点右键，选择“Git Clone…”，将地址复制进去，点击 OK；\n(3) 出现 Success 提示，就代表 clone 成功了，close 掉对话框，然后就出现了名为 git 项目的文件夹了；\n\n4. 本地改动保存为一个版本，我们以新建文件为例；\n\n(1) 首先，打开刚才生成文件夹，新建一个名为 readme.txt 的空文件；\n\n(2) 然后在这里鼠标右击，选择 Git Commit -> “master”…，会弹出一个对话框（注意：这里可能会提醒设置用户名、密码 和邮箱，点击确定，填写 git 账户的用户名和注册邮箱以及密码即可）；\n","slug":"git环境配置","published":1,"updated":"2019-11-13T12:12:08.464Z","photos":[],"link":"","_id":"ck5dbgu9b001q8ex0vwd9ia2n","content":"<p>结合了一些网上的方法，结合自己配置的实际情况写的文档。</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>下载 git 主程序，下载地址：<a href=\"https://git-scm.com/downloads，\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads，</a> 双击安装包，一路 next 就行；</p>\n</li>\n<li><p>对于技术小白的我来说，命令行神马的太复杂了，所以就需要一个 git 界面画的软件来帮助我啦，这个软件就是 TortoiseGit，下载地址：<a href=\"https://tortoisegit.org/download/，\" target=\"_blank\" rel=\"noopener\">https://tortoisegit.org/download/，</a> 分为 32 位版和 64 位版，下载时要选好，安装的时候也是一路 next；</p>\n</li>\n<li><p>接下来就是解决怎么把本地项目关联发布到 git 上的问题了；</p>\n</li>\n</ol>\n<p>(1) 首先打开 git 上的项目，复制 git 的 HTTP 地址；</p>\n<p>(2) 然后创打开硬盘里的一个目录，最好是专门开发用的目录，点右键，选择“Git Clone…”，将地址复制进去，点击 OK；<br>(3) 出现 Success 提示，就代表 clone 成功了，close 掉对话框，然后就出现了名为 git 项目的文件夹了；</p>\n<ol start=\"4\">\n<li>本地改动保存为一个版本，我们以新建文件为例；</li>\n</ol>\n<p>(1) 首先，打开刚才生成文件夹，新建一个名为 readme.txt 的空文件；</p>\n<p>(2) 然后在这里鼠标右击，选择 Git Commit -&gt; “master”…，会弹出一个对话框（注意：这里可能会提醒设置用户名、密码 和邮箱，点击确定，填写 git 账户的用户名和注册邮箱以及密码即可）；</p>\n","site":{"data":{}},"excerpt":"<p>结合了一些网上的方法，结合自己配置的实际情况写的文档。</p>","more":"<ol>\n<li><p>下载 git 主程序，下载地址：<a href=\"https://git-scm.com/downloads，\" target=\"_blank\" rel=\"noopener\">https://git-scm.com/downloads，</a> 双击安装包，一路 next 就行；</p>\n</li>\n<li><p>对于技术小白的我来说，命令行神马的太复杂了，所以就需要一个 git 界面画的软件来帮助我啦，这个软件就是 TortoiseGit，下载地址：<a href=\"https://tortoisegit.org/download/，\" target=\"_blank\" rel=\"noopener\">https://tortoisegit.org/download/，</a> 分为 32 位版和 64 位版，下载时要选好，安装的时候也是一路 next；</p>\n</li>\n<li><p>接下来就是解决怎么把本地项目关联发布到 git 上的问题了；</p>\n</li>\n</ol>\n<p>(1) 首先打开 git 上的项目，复制 git 的 HTTP 地址；</p>\n<p>(2) 然后创打开硬盘里的一个目录，最好是专门开发用的目录，点右键，选择“Git Clone…”，将地址复制进去，点击 OK；<br>(3) 出现 Success 提示，就代表 clone 成功了，close 掉对话框，然后就出现了名为 git 项目的文件夹了；</p>\n<ol start=\"4\">\n<li>本地改动保存为一个版本，我们以新建文件为例；</li>\n</ol>\n<p>(1) 首先，打开刚才生成文件夹，新建一个名为 readme.txt 的空文件；</p>\n<p>(2) 然后在这里鼠标右击，选择 Git Commit -&gt; “master”…，会弹出一个对话框（注意：这里可能会提醒设置用户名、密码 和邮箱，点击确定，填写 git 账户的用户名和注册邮箱以及密码即可）；</p>"},{"title":"Git常用命令","comments":1,"date":"2018-07-08T11:08:12.000Z","_content":"\ngit 常用命令\n\n<!--more-->\n\n1. 添加配置信息: `git config <配置信息名>`\n\n2. 删除配置信息: `git config unset <配置信息名>`\n\n3. 查看配置信息: `git config -l`\n\n4. 提交代码: `git status`查看状态 => `git add <文件名>` => `git commit -m <描述>` => `git pull origin <远程主机名> :<远程分支名>` => `git push <分支>`\n\n5. 初始化 git 项目\n\n   ```git\n   cd existing_folder\n   git init\n   git remote add origin git@gitlab.dreamdev.cn:ebag/flash-experiment.git\n   git add .\n   git commit -m \"Initial commit\"\n   ```\n\n6. 改变 git 远程仓库\n\n   ```git\n   git remote set-url origin git@gitlab.dreamdev.cn:ebag/live-experiment.git\n   git remote -v\n   git branch --set-upstream-to=origin/develop develop\n   git branch --set-upstream-to=origin/master master\n   ```\n\n7. 推送不了代码可能的原因：远程仓库已更新，本地代码没有及时更新，git pull 更新一下代码试试，不行就强推（不建议）\n\n8. 删除本地分支：`git branch -d <BranchName>`\n\n9. 删除远程分支：`git push origin --delete <BranchName>`\n\n10. 查看 log 树状图：`git log --oneline --graph --decorate --all`\n\n11. 版本回退：`git reset --hard <head>` => `git push -f`\n\n12. 创建远程分支：`git push origin develop:develop`\n\n13. 远程分支打版本标签：`git tag -a <版本号> -m <描述信息>` => `git push origin <版本号>`\n\n14. 代码写错分支，暂存，转到其他分支: `git stash -u -> git stash pop`\n\n15. 删除误传的远程文件或文件夹：`git rm -r --cached file/folder name` => `git commit` => `git push`\n\n16. 新的分支推送到远程： `git push --set-upstream origin <branch>`\n","source":"_posts/git常用命令.md","raw":"---\ntitle: git常用命令\ncomments: true\ndate: 2018-07-08 19:08:12\ncategories: 项目管理\ntags: git\n---\n\ngit 常用命令\n\n<!--more-->\n\n1. 添加配置信息: `git config <配置信息名>`\n\n2. 删除配置信息: `git config unset <配置信息名>`\n\n3. 查看配置信息: `git config -l`\n\n4. 提交代码: `git status`查看状态 => `git add <文件名>` => `git commit -m <描述>` => `git pull origin <远程主机名> :<远程分支名>` => `git push <分支>`\n\n5. 初始化 git 项目\n\n   ```git\n   cd existing_folder\n   git init\n   git remote add origin git@gitlab.dreamdev.cn:ebag/flash-experiment.git\n   git add .\n   git commit -m \"Initial commit\"\n   ```\n\n6. 改变 git 远程仓库\n\n   ```git\n   git remote set-url origin git@gitlab.dreamdev.cn:ebag/live-experiment.git\n   git remote -v\n   git branch --set-upstream-to=origin/develop develop\n   git branch --set-upstream-to=origin/master master\n   ```\n\n7. 推送不了代码可能的原因：远程仓库已更新，本地代码没有及时更新，git pull 更新一下代码试试，不行就强推（不建议）\n\n8. 删除本地分支：`git branch -d <BranchName>`\n\n9. 删除远程分支：`git push origin --delete <BranchName>`\n\n10. 查看 log 树状图：`git log --oneline --graph --decorate --all`\n\n11. 版本回退：`git reset --hard <head>` => `git push -f`\n\n12. 创建远程分支：`git push origin develop:develop`\n\n13. 远程分支打版本标签：`git tag -a <版本号> -m <描述信息>` => `git push origin <版本号>`\n\n14. 代码写错分支，暂存，转到其他分支: `git stash -u -> git stash pop`\n\n15. 删除误传的远程文件或文件夹：`git rm -r --cached file/folder name` => `git commit` => `git push`\n\n16. 新的分支推送到远程： `git push --set-upstream origin <branch>`\n","slug":"git常用命令","published":1,"updated":"2020-01-08T01:00:24.546Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9d001u8ex0prui6y94","content":"<p>git 常用命令</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>添加配置信息: <code>git config &lt;配置信息名&gt;</code></p>\n</li>\n<li><p>删除配置信息: <code>git config unset &lt;配置信息名&gt;</code></p>\n</li>\n<li><p>查看配置信息: <code>git config -l</code></p>\n</li>\n<li><p>提交代码: <code>git status</code>查看状态 =&gt; <code>git add &lt;文件名&gt;</code> =&gt; <code>git commit -m &lt;描述&gt;</code> =&gt; <code>git pull origin &lt;远程主机名&gt; :&lt;远程分支名&gt;</code> =&gt; <code>git push &lt;分支&gt;</code></p>\n</li>\n<li><p>初始化 git 项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd existing_folder</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin git@gitlab.dreamdev.cn:ebag/flash-experiment.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;Initial commit&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改变 git 远程仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin git@gitlab.dreamdev.cn:ebag/live-experiment.git</span><br><span class=\"line\">git remote -v</span><br><span class=\"line\">git branch --set-upstream-to=origin/develop develop</span><br><span class=\"line\">git branch --set-upstream-to=origin/master master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送不了代码可能的原因：远程仓库已更新，本地代码没有及时更新，git pull 更新一下代码试试，不行就强推（不建议）</p>\n</li>\n<li><p>删除本地分支：<code>git branch -d &lt;BranchName&gt;</code></p>\n</li>\n<li><p>删除远程分支：<code>git push origin --delete &lt;BranchName&gt;</code></p>\n</li>\n<li><p>查看 log 树状图：<code>git log --oneline --graph --decorate --all</code></p>\n</li>\n<li><p>版本回退：<code>git reset --hard &lt;head&gt;</code> =&gt; <code>git push -f</code></p>\n</li>\n<li><p>创建远程分支：<code>git push origin develop:develop</code></p>\n</li>\n<li><p>远程分支打版本标签：<code>git tag -a &lt;版本号&gt; -m &lt;描述信息&gt;</code> =&gt; <code>git push origin &lt;版本号&gt;</code></p>\n</li>\n<li><p>代码写错分支，暂存，转到其他分支: <code>git stash -u -&gt; git stash pop</code></p>\n</li>\n<li><p>删除误传的远程文件或文件夹：<code>git rm -r --cached file/folder name</code> =&gt; <code>git commit</code> =&gt; <code>git push</code></p>\n</li>\n<li><p>新的分支推送到远程： <code>git push --set-upstream origin &lt;branch&gt;</code></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>git 常用命令</p>","more":"<ol>\n<li><p>添加配置信息: <code>git config &lt;配置信息名&gt;</code></p>\n</li>\n<li><p>删除配置信息: <code>git config unset &lt;配置信息名&gt;</code></p>\n</li>\n<li><p>查看配置信息: <code>git config -l</code></p>\n</li>\n<li><p>提交代码: <code>git status</code>查看状态 =&gt; <code>git add &lt;文件名&gt;</code> =&gt; <code>git commit -m &lt;描述&gt;</code> =&gt; <code>git pull origin &lt;远程主机名&gt; :&lt;远程分支名&gt;</code> =&gt; <code>git push &lt;分支&gt;</code></p>\n</li>\n<li><p>初始化 git 项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd existing_folder</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin git@gitlab.dreamdev.cn:ebag/flash-experiment.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;Initial commit&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>改变 git 远程仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin git@gitlab.dreamdev.cn:ebag/live-experiment.git</span><br><span class=\"line\">git remote -v</span><br><span class=\"line\">git branch --set-upstream-to=origin/develop develop</span><br><span class=\"line\">git branch --set-upstream-to=origin/master master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推送不了代码可能的原因：远程仓库已更新，本地代码没有及时更新，git pull 更新一下代码试试，不行就强推（不建议）</p>\n</li>\n<li><p>删除本地分支：<code>git branch -d &lt;BranchName&gt;</code></p>\n</li>\n<li><p>删除远程分支：<code>git push origin --delete &lt;BranchName&gt;</code></p>\n</li>\n<li><p>查看 log 树状图：<code>git log --oneline --graph --decorate --all</code></p>\n</li>\n<li><p>版本回退：<code>git reset --hard &lt;head&gt;</code> =&gt; <code>git push -f</code></p>\n</li>\n<li><p>创建远程分支：<code>git push origin develop:develop</code></p>\n</li>\n<li><p>远程分支打版本标签：<code>git tag -a &lt;版本号&gt; -m &lt;描述信息&gt;</code> =&gt; <code>git push origin &lt;版本号&gt;</code></p>\n</li>\n<li><p>代码写错分支，暂存，转到其他分支: <code>git stash -u -&gt; git stash pop</code></p>\n</li>\n<li><p>删除误传的远程文件或文件夹：<code>git rm -r --cached file/folder name</code> =&gt; <code>git commit</code> =&gt; <code>git push</code></p>\n</li>\n<li><p>新的分支推送到远程： <code>git push --set-upstream origin &lt;branch&gt;</code></p>\n</li>\n</ol>"},{"title":"Git 安装配置及基本使用","comments":1,"date":"2018-07-11T13:03:11.000Z","_content":"\ngit 安装配置基本说明\n\n<!--more-->\n\n1. 从官网下载安装包，手动完成安装。\n\n2. 打开 Git Bash 命令行工具，执行命令 ssh-keygen -t rsa -C Email-Addresss 生成一个密钥对。\n\n3. 登录到 GitLab，点击右上角你的用户头像，点击 Edit Profile settings，点击 SSH Keys，点击 Add SSH Key，填写 Title 栏，复制用户目录下.ssh/id_rsa.pub 文件的内容到 Key，点击 Add Key。\n\n4. 点击右上角的 New project，填写完成后点击 Create project 新建一个仓库，点击 Activity，点击 SSH 后复制 SSH 边上栏里的地址。\n\n5. 打开 Git Bash 命令行工具，切换到一个合适的目录，使用命令 git clone 刚才复制的 URL 克隆创建的仓库。\n\n6. 进入目录 cd 仓库名，执行命令 git config --global user.email your-email， git config --global user.name your-name，设置你的个人信息。\n\n7. 执行命令：\n\n   echo \"#Description\" > README.md，添加一个文件\n\n   git status，查看当前状态，发现有未跟踪文件\n\n   git add .，当前目录所有文件添加到暂存区\n\n   git diff，比较当前工作区和暂存区有何不同\n\n   git status，查看当前状态，发现有文件未提交\n\n   git commit -m \"注释\"，把暂存区内容提交到本地仓库\n\n   git push -u origin master，把本地仓库的提交推送到远程仓库\n\n   git log，查看提交日志\n\n---\n\n### Git 本地分支管理\n\n1. 分支的创建、合并、删除\n\n   git branch，显示所有分支\n\n   git branch b1，从当前分支创建一个叫 b1 的分支\n\n   git checkout b1，切换到 b1 分支\n\n   git checkout -b b1，相当于以上两条命令的组合\n\n   git checkout master，切换到 master 主分支\n\n   git merge b1，把 b1 分支的代码合并到 master 上\n\n   git branch -d b1，删除 b1 分支，不能在被删除分支上执行\n\n---\n\n### Git Tag 标签管理\n\n1. 标签的创建、删除\n\n   git tag t1，从当前分支创建一个名为 t1 的标签\n\n   git tag -d t1，删除名为 t1 的标签\n\n---\n\n### GitLib 权限管理\n\n- Owner 项目所有者，拥有所有的操作权限\n\n- Master 项目的管理者，除更改、删除项目元信息外其它操作均可\n\n- Developer 项目的开发人员，做一些开发工作，对受保护内容无权限\n\n- Reporter 项目的报告者，只有项目的读权限，可以创建代码片断\n\n- Guest 项目的游客，只能提交问题和评论内容\n\n  具体参见 GitLab 权限，为项目添加成员时可指定成员的身份权限。\n\n---\n\n### 为什么要有分支\n\n建立分支的原因是 git 因为是分布式的，所以其核心就是分支，分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到 master 分支，master 分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。还有这样，以自己名字建立一个分支比如 xiancai，这个分支是已经做好的功能，随时可以合并到 master 上线，开发的时候，建立一个带功能前缀的分支，比如 xiancai-ninghao 、xiancai-ninghao 等等，开发完之后在合并到 xiancai，每次上线，把 xiancai 合并到 master 。总之分支的做重要的意义就是提高效率！！！ 这样方便团队开发，并且不会导致混乱。\n\n### 分支有如下几条：\n\n1. Master 主分支\n\n2. Develop 分支\n\n3. Feature 功能分支\n\n4. Release 预发布分支\n\n5. Hotfix（或者 Fixbug） 分支\n\n其中对于 Feature 功能分支有:\n\n- 从哪个分支分离开来：develop\n\n- 必须要合并到哪个分支上：develop\n\n- 分支的命名规范：除了 master，develop，release-，或者 hotfix- 以外的名字都可以比如可以用 feature-\\*的方式命名。\n\n  其中对于 Release 预发布分支有：\n\n- 从哪个分支分离开来： develop\n\n- 必须要合并到哪个分支上：develop 与 master\n\n- 分支的命名规范： release-\\*\n\n  其中对于 Hotfix（或者 Fixbug） 分支有；\n\n- 从哪个分支分离开来：master\n\n- 必须要合并到哪个分支上：develop 与 master\n\n- 分支的命名规范：hotfix-_ 或者 fixbug-_\n\n### 主分支\n\n### Master 主分支\n\n    首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。Git 主分支的名字，默认叫做 Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。\n\n### Develop 分支\n\n    主分支只用来发布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做 Develop。\n\n    创建分支\n\n    git branch develop              #只创建分支\n\n    git checkout develop  #创建并切换到 develop 分支\n\n    合并分支\n\n    git checkout master         #切换到主分支\n\n    git merge --no-ff develop   #把 develop 合并到 master 分支，no-ff 选项的作用是保留原分支记录\n\n    git branch -d develop       #删除 develop 分支\n\n    这里稍微解释一下，上一条命令的--no-ff参数是什么意思。默认情况下，Git执行\"快进式合并\"（fast-farward merge），会直接将Master分支指向Develop分支。\n\n### 次分支\n\n    除了 master 与 develop 这两个主分支，在开发时还可以创建一些次分支，目的是让团队不同的成员之间可以平行开发，更容易跟踪功能，准备为生产的发行版，快速修复生产上的问题等等。这些分支生命周期有限，可以在用完以后删掉他们。\n\n### Feature 功能分支\n\n    Feature（功能） 分支，有时候也叫 Topic 分支。在这种分支上去开发新的功能。当开发功能的时候，这个功能属于哪个目标发行还不知道。功能如果一直在开发，对应的这个功能分支就可以一直存在，不过到最后还是要合并到 develop 分支上，或者如果不想要开发的这个功能了，可以直接扔掉它。\n\n    功能名字的命名已经在上文中有提到。\n\n    创建一个功能分支：\n\n    git checkout -b feature-x develop\n\n    开发完成后，将功能分支合并到develop分支：\n\n    git checkout develop\n\n    git merge --no-ff feature-x\n\n    删除feature分支：\n\n    git branch -d feature-x## Release 预发布分支\n\n    它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。\n\n    创建一个预发布分支：\n\n    git checkout -b release-1.2 develop\n\n    确认没有问题后，合并到master分支：\n\n    git checkout master\n\n    git merge --no-ff release-1.2\n\n# 对合并生成的新节点，做一个标签\n\n    git tag -a 1.2\n\n    再合并到develop分支：\n\n    git checkout develop\n\n    git merge --no-ff release-1.2\n\n    最后，删除预发布分支：\n\n    git branch -d release-1.2\n\n    Fixbug 修补bug分支\n\n    最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。 修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。\n\n    创建一个修补bug分支：\n\n    git checkout -b fixbug-0.1 master\n\n    修补结束后，合并到master分支：\n\n    git checkout master\n\n    git merge --no-ff fixbug-0.1\n\n    git tag -a 0.1.1\n\n    再合并到develop分支：\n\n    git checkout develop\n\n    git merge --no-ff fixbug-0.1\n\n    最后，删除\"修补bug分支\"：\n\n    git branch -d fixbug-0.1\n","source":"_posts/git使用指南.md","raw":"---\ntitle: Git 安装配置及基本使用\ncomments: true\ndate: 2018-07-11 21:03:11\ncategories: 项目管理\ntags: git\n---\n\ngit 安装配置基本说明\n\n<!--more-->\n\n1. 从官网下载安装包，手动完成安装。\n\n2. 打开 Git Bash 命令行工具，执行命令 ssh-keygen -t rsa -C Email-Addresss 生成一个密钥对。\n\n3. 登录到 GitLab，点击右上角你的用户头像，点击 Edit Profile settings，点击 SSH Keys，点击 Add SSH Key，填写 Title 栏，复制用户目录下.ssh/id_rsa.pub 文件的内容到 Key，点击 Add Key。\n\n4. 点击右上角的 New project，填写完成后点击 Create project 新建一个仓库，点击 Activity，点击 SSH 后复制 SSH 边上栏里的地址。\n\n5. 打开 Git Bash 命令行工具，切换到一个合适的目录，使用命令 git clone 刚才复制的 URL 克隆创建的仓库。\n\n6. 进入目录 cd 仓库名，执行命令 git config --global user.email your-email， git config --global user.name your-name，设置你的个人信息。\n\n7. 执行命令：\n\n   echo \"#Description\" > README.md，添加一个文件\n\n   git status，查看当前状态，发现有未跟踪文件\n\n   git add .，当前目录所有文件添加到暂存区\n\n   git diff，比较当前工作区和暂存区有何不同\n\n   git status，查看当前状态，发现有文件未提交\n\n   git commit -m \"注释\"，把暂存区内容提交到本地仓库\n\n   git push -u origin master，把本地仓库的提交推送到远程仓库\n\n   git log，查看提交日志\n\n---\n\n### Git 本地分支管理\n\n1. 分支的创建、合并、删除\n\n   git branch，显示所有分支\n\n   git branch b1，从当前分支创建一个叫 b1 的分支\n\n   git checkout b1，切换到 b1 分支\n\n   git checkout -b b1，相当于以上两条命令的组合\n\n   git checkout master，切换到 master 主分支\n\n   git merge b1，把 b1 分支的代码合并到 master 上\n\n   git branch -d b1，删除 b1 分支，不能在被删除分支上执行\n\n---\n\n### Git Tag 标签管理\n\n1. 标签的创建、删除\n\n   git tag t1，从当前分支创建一个名为 t1 的标签\n\n   git tag -d t1，删除名为 t1 的标签\n\n---\n\n### GitLib 权限管理\n\n- Owner 项目所有者，拥有所有的操作权限\n\n- Master 项目的管理者，除更改、删除项目元信息外其它操作均可\n\n- Developer 项目的开发人员，做一些开发工作，对受保护内容无权限\n\n- Reporter 项目的报告者，只有项目的读权限，可以创建代码片断\n\n- Guest 项目的游客，只能提交问题和评论内容\n\n  具体参见 GitLab 权限，为项目添加成员时可指定成员的身份权限。\n\n---\n\n### 为什么要有分支\n\n建立分支的原因是 git 因为是分布式的，所以其核心就是分支，分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到 master 分支，master 分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。还有这样，以自己名字建立一个分支比如 xiancai，这个分支是已经做好的功能，随时可以合并到 master 上线，开发的时候，建立一个带功能前缀的分支，比如 xiancai-ninghao 、xiancai-ninghao 等等，开发完之后在合并到 xiancai，每次上线，把 xiancai 合并到 master 。总之分支的做重要的意义就是提高效率！！！ 这样方便团队开发，并且不会导致混乱。\n\n### 分支有如下几条：\n\n1. Master 主分支\n\n2. Develop 分支\n\n3. Feature 功能分支\n\n4. Release 预发布分支\n\n5. Hotfix（或者 Fixbug） 分支\n\n其中对于 Feature 功能分支有:\n\n- 从哪个分支分离开来：develop\n\n- 必须要合并到哪个分支上：develop\n\n- 分支的命名规范：除了 master，develop，release-，或者 hotfix- 以外的名字都可以比如可以用 feature-\\*的方式命名。\n\n  其中对于 Release 预发布分支有：\n\n- 从哪个分支分离开来： develop\n\n- 必须要合并到哪个分支上：develop 与 master\n\n- 分支的命名规范： release-\\*\n\n  其中对于 Hotfix（或者 Fixbug） 分支有；\n\n- 从哪个分支分离开来：master\n\n- 必须要合并到哪个分支上：develop 与 master\n\n- 分支的命名规范：hotfix-_ 或者 fixbug-_\n\n### 主分支\n\n### Master 主分支\n\n    首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。Git 主分支的名字，默认叫做 Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。\n\n### Develop 分支\n\n    主分支只用来发布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做 Develop。\n\n    创建分支\n\n    git branch develop              #只创建分支\n\n    git checkout develop  #创建并切换到 develop 分支\n\n    合并分支\n\n    git checkout master         #切换到主分支\n\n    git merge --no-ff develop   #把 develop 合并到 master 分支，no-ff 选项的作用是保留原分支记录\n\n    git branch -d develop       #删除 develop 分支\n\n    这里稍微解释一下，上一条命令的--no-ff参数是什么意思。默认情况下，Git执行\"快进式合并\"（fast-farward merge），会直接将Master分支指向Develop分支。\n\n### 次分支\n\n    除了 master 与 develop 这两个主分支，在开发时还可以创建一些次分支，目的是让团队不同的成员之间可以平行开发，更容易跟踪功能，准备为生产的发行版，快速修复生产上的问题等等。这些分支生命周期有限，可以在用完以后删掉他们。\n\n### Feature 功能分支\n\n    Feature（功能） 分支，有时候也叫 Topic 分支。在这种分支上去开发新的功能。当开发功能的时候，这个功能属于哪个目标发行还不知道。功能如果一直在开发，对应的这个功能分支就可以一直存在，不过到最后还是要合并到 develop 分支上，或者如果不想要开发的这个功能了，可以直接扔掉它。\n\n    功能名字的命名已经在上文中有提到。\n\n    创建一个功能分支：\n\n    git checkout -b feature-x develop\n\n    开发完成后，将功能分支合并到develop分支：\n\n    git checkout develop\n\n    git merge --no-ff feature-x\n\n    删除feature分支：\n\n    git branch -d feature-x## Release 预发布分支\n\n    它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。\n\n    创建一个预发布分支：\n\n    git checkout -b release-1.2 develop\n\n    确认没有问题后，合并到master分支：\n\n    git checkout master\n\n    git merge --no-ff release-1.2\n\n# 对合并生成的新节点，做一个标签\n\n    git tag -a 1.2\n\n    再合并到develop分支：\n\n    git checkout develop\n\n    git merge --no-ff release-1.2\n\n    最后，删除预发布分支：\n\n    git branch -d release-1.2\n\n    Fixbug 修补bug分支\n\n    最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。 修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。\n\n    创建一个修补bug分支：\n\n    git checkout -b fixbug-0.1 master\n\n    修补结束后，合并到master分支：\n\n    git checkout master\n\n    git merge --no-ff fixbug-0.1\n\n    git tag -a 0.1.1\n\n    再合并到develop分支：\n\n    git checkout develop\n\n    git merge --no-ff fixbug-0.1\n\n    最后，删除\"修补bug分支\"：\n\n    git branch -d fixbug-0.1\n","slug":"git使用指南","published":1,"updated":"2019-11-13T12:11:27.274Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9e001y8ex0mg9lwdoh","content":"<p>git 安装配置基本说明</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>从官网下载安装包，手动完成安装。</p>\n</li>\n<li><p>打开 Git Bash 命令行工具，执行命令 ssh-keygen -t rsa -C Email-Addresss 生成一个密钥对。</p>\n</li>\n<li><p>登录到 GitLab，点击右上角你的用户头像，点击 Edit Profile settings，点击 SSH Keys，点击 Add SSH Key，填写 Title 栏，复制用户目录下.ssh/id_rsa.pub 文件的内容到 Key，点击 Add Key。</p>\n</li>\n<li><p>点击右上角的 New project，填写完成后点击 Create project 新建一个仓库，点击 Activity，点击 SSH 后复制 SSH 边上栏里的地址。</p>\n</li>\n<li><p>打开 Git Bash 命令行工具，切换到一个合适的目录，使用命令 git clone 刚才复制的 URL 克隆创建的仓库。</p>\n</li>\n<li><p>进入目录 cd 仓库名，执行命令 git config –global user.email your-email， git config –global user.name your-name，设置你的个人信息。</p>\n</li>\n<li><p>执行命令：</p>\n<p>echo “#Description” &gt; README.md，添加一个文件</p>\n<p>git status，查看当前状态，发现有未跟踪文件</p>\n<p>git add .，当前目录所有文件添加到暂存区</p>\n<p>git diff，比较当前工作区和暂存区有何不同</p>\n<p>git status，查看当前状态，发现有文件未提交</p>\n<p>git commit -m “注释”，把暂存区内容提交到本地仓库</p>\n<p>git push -u origin master，把本地仓库的提交推送到远程仓库</p>\n<p>git log，查看提交日志</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"Git-本地分支管理\"><a href=\"#Git-本地分支管理\" class=\"headerlink\" title=\"Git 本地分支管理\"></a>Git 本地分支管理</h3><ol>\n<li><p>分支的创建、合并、删除</p>\n<p>git branch，显示所有分支</p>\n<p>git branch b1，从当前分支创建一个叫 b1 的分支</p>\n<p>git checkout b1，切换到 b1 分支</p>\n<p>git checkout -b b1，相当于以上两条命令的组合</p>\n<p>git checkout master，切换到 master 主分支</p>\n<p>git merge b1，把 b1 分支的代码合并到 master 上</p>\n<p>git branch -d b1，删除 b1 分支，不能在被删除分支上执行</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"Git-Tag-标签管理\"><a href=\"#Git-Tag-标签管理\" class=\"headerlink\" title=\"Git Tag 标签管理\"></a>Git Tag 标签管理</h3><ol>\n<li><p>标签的创建、删除</p>\n<p>git tag t1，从当前分支创建一个名为 t1 的标签</p>\n<p>git tag -d t1，删除名为 t1 的标签</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"GitLib-权限管理\"><a href=\"#GitLib-权限管理\" class=\"headerlink\" title=\"GitLib 权限管理\"></a>GitLib 权限管理</h3><ul>\n<li><p>Owner 项目所有者，拥有所有的操作权限</p>\n</li>\n<li><p>Master 项目的管理者，除更改、删除项目元信息外其它操作均可</p>\n</li>\n<li><p>Developer 项目的开发人员，做一些开发工作，对受保护内容无权限</p>\n</li>\n<li><p>Reporter 项目的报告者，只有项目的读权限，可以创建代码片断</p>\n</li>\n<li><p>Guest 项目的游客，只能提交问题和评论内容</p>\n<p>具体参见 GitLab 权限，为项目添加成员时可指定成员的身份权限。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"为什么要有分支\"><a href=\"#为什么要有分支\" class=\"headerlink\" title=\"为什么要有分支\"></a>为什么要有分支</h3><p>建立分支的原因是 git 因为是分布式的，所以其核心就是分支，分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到 master 分支，master 分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。还有这样，以自己名字建立一个分支比如 xiancai，这个分支是已经做好的功能，随时可以合并到 master 上线，开发的时候，建立一个带功能前缀的分支，比如 xiancai-ninghao 、xiancai-ninghao 等等，开发完之后在合并到 xiancai，每次上线，把 xiancai 合并到 master 。总之分支的做重要的意义就是提高效率！！！ 这样方便团队开发，并且不会导致混乱。</p>\n<h3 id=\"分支有如下几条：\"><a href=\"#分支有如下几条：\" class=\"headerlink\" title=\"分支有如下几条：\"></a>分支有如下几条：</h3><ol>\n<li><p>Master 主分支</p>\n</li>\n<li><p>Develop 分支</p>\n</li>\n<li><p>Feature 功能分支</p>\n</li>\n<li><p>Release 预发布分支</p>\n</li>\n<li><p>Hotfix（或者 Fixbug） 分支</p>\n</li>\n</ol>\n<p>其中对于 Feature 功能分支有:</p>\n<ul>\n<li><p>从哪个分支分离开来：develop</p>\n</li>\n<li><p>必须要合并到哪个分支上：develop</p>\n</li>\n<li><p>分支的命名规范：除了 master，develop，release-，或者 hotfix- 以外的名字都可以比如可以用 feature-*的方式命名。</p>\n<p>其中对于 Release 预发布分支有：</p>\n</li>\n<li><p>从哪个分支分离开来： develop</p>\n</li>\n<li><p>必须要合并到哪个分支上：develop 与 master</p>\n</li>\n<li><p>分支的命名规范： release-*</p>\n<p>其中对于 Hotfix（或者 Fixbug） 分支有；</p>\n</li>\n<li><p>从哪个分支分离开来：master</p>\n</li>\n<li><p>必须要合并到哪个分支上：develop 与 master</p>\n</li>\n<li><p>分支的命名规范：hotfix-_ 或者 fixbug-_</p>\n</li>\n</ul>\n<h3 id=\"主分支\"><a href=\"#主分支\" class=\"headerlink\" title=\"主分支\"></a>主分支</h3><h3 id=\"Master-主分支\"><a href=\"#Master-主分支\" class=\"headerlink\" title=\"Master 主分支\"></a>Master 主分支</h3><pre><code>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。Git 主分支的名字，默认叫做 Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。\n</code></pre><h3 id=\"Develop-分支\"><a href=\"#Develop-分支\" class=\"headerlink\" title=\"Develop 分支\"></a>Develop 分支</h3><pre><code>主分支只用来发布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做 Develop。\n\n创建分支\n\ngit branch develop              #只创建分支\n\ngit checkout develop  #创建并切换到 develop 分支\n\n合并分支\n\ngit checkout master         #切换到主分支\n\ngit merge --no-ff develop   #把 develop 合并到 master 分支，no-ff 选项的作用是保留原分支记录\n\ngit branch -d develop       #删除 develop 分支\n\n这里稍微解释一下，上一条命令的--no-ff参数是什么意思。默认情况下，Git执行&quot;快进式合并&quot;（fast-farward merge），会直接将Master分支指向Develop分支。\n</code></pre><h3 id=\"次分支\"><a href=\"#次分支\" class=\"headerlink\" title=\"次分支\"></a>次分支</h3><pre><code>除了 master 与 develop 这两个主分支，在开发时还可以创建一些次分支，目的是让团队不同的成员之间可以平行开发，更容易跟踪功能，准备为生产的发行版，快速修复生产上的问题等等。这些分支生命周期有限，可以在用完以后删掉他们。\n</code></pre><h3 id=\"Feature-功能分支\"><a href=\"#Feature-功能分支\" class=\"headerlink\" title=\"Feature 功能分支\"></a>Feature 功能分支</h3><pre><code>Feature（功能） 分支，有时候也叫 Topic 分支。在这种分支上去开发新的功能。当开发功能的时候，这个功能属于哪个目标发行还不知道。功能如果一直在开发，对应的这个功能分支就可以一直存在，不过到最后还是要合并到 develop 分支上，或者如果不想要开发的这个功能了，可以直接扔掉它。\n\n功能名字的命名已经在上文中有提到。\n\n创建一个功能分支：\n\ngit checkout -b feature-x develop\n\n开发完成后，将功能分支合并到develop分支：\n\ngit checkout develop\n\ngit merge --no-ff feature-x\n\n删除feature分支：\n\ngit branch -d feature-x## Release 预发布分支\n\n它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。\n\n创建一个预发布分支：\n\ngit checkout -b release-1.2 develop\n\n确认没有问题后，合并到master分支：\n\ngit checkout master\n\ngit merge --no-ff release-1.2\n</code></pre><h1 id=\"对合并生成的新节点，做一个标签\"><a href=\"#对合并生成的新节点，做一个标签\" class=\"headerlink\" title=\"对合并生成的新节点，做一个标签\"></a>对合并生成的新节点，做一个标签</h1><pre><code>git tag -a 1.2\n\n再合并到develop分支：\n\ngit checkout develop\n\ngit merge --no-ff release-1.2\n\n最后，删除预发布分支：\n\ngit branch -d release-1.2\n\nFixbug 修补bug分支\n\n最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。 修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。\n\n创建一个修补bug分支：\n\ngit checkout -b fixbug-0.1 master\n\n修补结束后，合并到master分支：\n\ngit checkout master\n\ngit merge --no-ff fixbug-0.1\n\ngit tag -a 0.1.1\n\n再合并到develop分支：\n\ngit checkout develop\n\ngit merge --no-ff fixbug-0.1\n\n最后，删除&quot;修补bug分支&quot;：\n\ngit branch -d fixbug-0.1\n</code></pre>","site":{"data":{}},"excerpt":"<p>git 安装配置基本说明</p>","more":"<ol>\n<li><p>从官网下载安装包，手动完成安装。</p>\n</li>\n<li><p>打开 Git Bash 命令行工具，执行命令 ssh-keygen -t rsa -C Email-Addresss 生成一个密钥对。</p>\n</li>\n<li><p>登录到 GitLab，点击右上角你的用户头像，点击 Edit Profile settings，点击 SSH Keys，点击 Add SSH Key，填写 Title 栏，复制用户目录下.ssh/id_rsa.pub 文件的内容到 Key，点击 Add Key。</p>\n</li>\n<li><p>点击右上角的 New project，填写完成后点击 Create project 新建一个仓库，点击 Activity，点击 SSH 后复制 SSH 边上栏里的地址。</p>\n</li>\n<li><p>打开 Git Bash 命令行工具，切换到一个合适的目录，使用命令 git clone 刚才复制的 URL 克隆创建的仓库。</p>\n</li>\n<li><p>进入目录 cd 仓库名，执行命令 git config –global user.email your-email， git config –global user.name your-name，设置你的个人信息。</p>\n</li>\n<li><p>执行命令：</p>\n<p>echo “#Description” &gt; README.md，添加一个文件</p>\n<p>git status，查看当前状态，发现有未跟踪文件</p>\n<p>git add .，当前目录所有文件添加到暂存区</p>\n<p>git diff，比较当前工作区和暂存区有何不同</p>\n<p>git status，查看当前状态，发现有文件未提交</p>\n<p>git commit -m “注释”，把暂存区内容提交到本地仓库</p>\n<p>git push -u origin master，把本地仓库的提交推送到远程仓库</p>\n<p>git log，查看提交日志</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"Git-本地分支管理\"><a href=\"#Git-本地分支管理\" class=\"headerlink\" title=\"Git 本地分支管理\"></a>Git 本地分支管理</h3><ol>\n<li><p>分支的创建、合并、删除</p>\n<p>git branch，显示所有分支</p>\n<p>git branch b1，从当前分支创建一个叫 b1 的分支</p>\n<p>git checkout b1，切换到 b1 分支</p>\n<p>git checkout -b b1，相当于以上两条命令的组合</p>\n<p>git checkout master，切换到 master 主分支</p>\n<p>git merge b1，把 b1 分支的代码合并到 master 上</p>\n<p>git branch -d b1，删除 b1 分支，不能在被删除分支上执行</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"Git-Tag-标签管理\"><a href=\"#Git-Tag-标签管理\" class=\"headerlink\" title=\"Git Tag 标签管理\"></a>Git Tag 标签管理</h3><ol>\n<li><p>标签的创建、删除</p>\n<p>git tag t1，从当前分支创建一个名为 t1 的标签</p>\n<p>git tag -d t1，删除名为 t1 的标签</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"GitLib-权限管理\"><a href=\"#GitLib-权限管理\" class=\"headerlink\" title=\"GitLib 权限管理\"></a>GitLib 权限管理</h3><ul>\n<li><p>Owner 项目所有者，拥有所有的操作权限</p>\n</li>\n<li><p>Master 项目的管理者，除更改、删除项目元信息外其它操作均可</p>\n</li>\n<li><p>Developer 项目的开发人员，做一些开发工作，对受保护内容无权限</p>\n</li>\n<li><p>Reporter 项目的报告者，只有项目的读权限，可以创建代码片断</p>\n</li>\n<li><p>Guest 项目的游客，只能提交问题和评论内容</p>\n<p>具体参见 GitLab 权限，为项目添加成员时可指定成员的身份权限。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"为什么要有分支\"><a href=\"#为什么要有分支\" class=\"headerlink\" title=\"为什么要有分支\"></a>为什么要有分支</h3><p>建立分支的原因是 git 因为是分布式的，所以其核心就是分支，分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并改分支到 master 分支，master 分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。还有这样，以自己名字建立一个分支比如 xiancai，这个分支是已经做好的功能，随时可以合并到 master 上线，开发的时候，建立一个带功能前缀的分支，比如 xiancai-ninghao 、xiancai-ninghao 等等，开发完之后在合并到 xiancai，每次上线，把 xiancai 合并到 master 。总之分支的做重要的意义就是提高效率！！！ 这样方便团队开发，并且不会导致混乱。</p>\n<h3 id=\"分支有如下几条：\"><a href=\"#分支有如下几条：\" class=\"headerlink\" title=\"分支有如下几条：\"></a>分支有如下几条：</h3><ol>\n<li><p>Master 主分支</p>\n</li>\n<li><p>Develop 分支</p>\n</li>\n<li><p>Feature 功能分支</p>\n</li>\n<li><p>Release 预发布分支</p>\n</li>\n<li><p>Hotfix（或者 Fixbug） 分支</p>\n</li>\n</ol>\n<p>其中对于 Feature 功能分支有:</p>\n<ul>\n<li><p>从哪个分支分离开来：develop</p>\n</li>\n<li><p>必须要合并到哪个分支上：develop</p>\n</li>\n<li><p>分支的命名规范：除了 master，develop，release-，或者 hotfix- 以外的名字都可以比如可以用 feature-*的方式命名。</p>\n<p>其中对于 Release 预发布分支有：</p>\n</li>\n<li><p>从哪个分支分离开来： develop</p>\n</li>\n<li><p>必须要合并到哪个分支上：develop 与 master</p>\n</li>\n<li><p>分支的命名规范： release-*</p>\n<p>其中对于 Hotfix（或者 Fixbug） 分支有；</p>\n</li>\n<li><p>从哪个分支分离开来：master</p>\n</li>\n<li><p>必须要合并到哪个分支上：develop 与 master</p>\n</li>\n<li><p>分支的命名规范：hotfix-_ 或者 fixbug-_</p>\n</li>\n</ul>\n<h3 id=\"主分支\"><a href=\"#主分支\" class=\"headerlink\" title=\"主分支\"></a>主分支</h3><h3 id=\"Master-主分支\"><a href=\"#Master-主分支\" class=\"headerlink\" title=\"Master 主分支\"></a>Master 主分支</h3><pre><code>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。Git 主分支的名字，默认叫做 Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。\n</code></pre><h3 id=\"Develop-分支\"><a href=\"#Develop-分支\" class=\"headerlink\" title=\"Develop 分支\"></a>Develop 分支</h3><pre><code>主分支只用来发布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做 Develop。\n\n创建分支\n\ngit branch develop              #只创建分支\n\ngit checkout develop  #创建并切换到 develop 分支\n\n合并分支\n\ngit checkout master         #切换到主分支\n\ngit merge --no-ff develop   #把 develop 合并到 master 分支，no-ff 选项的作用是保留原分支记录\n\ngit branch -d develop       #删除 develop 分支\n\n这里稍微解释一下，上一条命令的--no-ff参数是什么意思。默认情况下，Git执行&quot;快进式合并&quot;（fast-farward merge），会直接将Master分支指向Develop分支。\n</code></pre><h3 id=\"次分支\"><a href=\"#次分支\" class=\"headerlink\" title=\"次分支\"></a>次分支</h3><pre><code>除了 master 与 develop 这两个主分支，在开发时还可以创建一些次分支，目的是让团队不同的成员之间可以平行开发，更容易跟踪功能，准备为生产的发行版，快速修复生产上的问题等等。这些分支生命周期有限，可以在用完以后删掉他们。\n</code></pre><h3 id=\"Feature-功能分支\"><a href=\"#Feature-功能分支\" class=\"headerlink\" title=\"Feature 功能分支\"></a>Feature 功能分支</h3><pre><code>Feature（功能） 分支，有时候也叫 Topic 分支。在这种分支上去开发新的功能。当开发功能的时候，这个功能属于哪个目标发行还不知道。功能如果一直在开发，对应的这个功能分支就可以一直存在，不过到最后还是要合并到 develop 分支上，或者如果不想要开发的这个功能了，可以直接扔掉它。\n\n功能名字的命名已经在上文中有提到。\n\n创建一个功能分支：\n\ngit checkout -b feature-x develop\n\n开发完成后，将功能分支合并到develop分支：\n\ngit checkout develop\n\ngit merge --no-ff feature-x\n\n删除feature分支：\n\ngit branch -d feature-x## Release 预发布分支\n\n它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进Develop和Master分支。它的命名，可以采用release-*的形式。\n\n创建一个预发布分支：\n\ngit checkout -b release-1.2 develop\n\n确认没有问题后，合并到master分支：\n\ngit checkout master\n\ngit merge --no-ff release-1.2\n</code></pre><h1 id=\"对合并生成的新节点，做一个标签\"><a href=\"#对合并生成的新节点，做一个标签\" class=\"headerlink\" title=\"对合并生成的新节点，做一个标签\"></a>对合并生成的新节点，做一个标签</h1><pre><code>git tag -a 1.2\n\n再合并到develop分支：\n\ngit checkout develop\n\ngit merge --no-ff release-1.2\n\n最后，删除预发布分支：\n\ngit branch -d release-1.2\n\nFixbug 修补bug分支\n\n最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。 修补bug分支是从Master分支上面分出来的。修补结束以后，再合并进Master和Develop分支。它的命名，可以采用fixbug-*的形式。\n\n创建一个修补bug分支：\n\ngit checkout -b fixbug-0.1 master\n\n修补结束后，合并到master分支：\n\ngit checkout master\n\ngit merge --no-ff fixbug-0.1\n\ngit tag -a 0.1.1\n\n再合并到develop分支：\n\ngit checkout develop\n\ngit merge --no-ff fixbug-0.1\n\n最后，删除&quot;修补bug分支&quot;：\n\ngit branch -d fixbug-0.1\n</code></pre>"},{"layout":"git","title":"Git域名配置","date":"2017-05-09T08:58:31.000Z","comments":1,"_content":"\ngit 域名配置\n\n<!--more-->\n\n1. 在 Godaddy 购买的域名；\n\n2. 查找 DNSpod 解析域名，没什么难度，就是添加一条记录，保存而已，记得在添加域名到 DNSpod 之后，复制两个 NS 地址到 godaddy 的域名服务器下；\n\n3. Git 项目根目录下创建 CNAME 文件，把域名填进去，push 就行了。\n","source":"_posts/git域名配置.md","raw":"---\nlayout: git\ntitle: git域名配置\ndate: 2017-05-09 16:58:31\ncategories: 项目管理\ntags: git\ncomments: true\n---\n\ngit 域名配置\n\n<!--more-->\n\n1. 在 Godaddy 购买的域名；\n\n2. 查找 DNSpod 解析域名，没什么难度，就是添加一条记录，保存而已，记得在添加域名到 DNSpod 之后，复制两个 NS 地址到 godaddy 的域名服务器下；\n\n3. Git 项目根目录下创建 CNAME 文件，把域名填进去，push 就行了。\n","slug":"git域名配置","published":1,"updated":"2019-11-13T12:11:40.974Z","photos":[],"link":"","_id":"ck5dbgu9f00228ex0i6lvy1ly","content":"<p>git 域名配置</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>在 Godaddy 购买的域名；</p>\n</li>\n<li><p>查找 DNSpod 解析域名，没什么难度，就是添加一条记录，保存而已，记得在添加域名到 DNSpod 之后，复制两个 NS 地址到 godaddy 的域名服务器下；</p>\n</li>\n<li><p>Git 项目根目录下创建 CNAME 文件，把域名填进去，push 就行了。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>git 域名配置</p>","more":"<ol>\n<li><p>在 Godaddy 购买的域名；</p>\n</li>\n<li><p>查找 DNSpod 解析域名，没什么难度，就是添加一条记录，保存而已，记得在添加域名到 DNSpod 之后，复制两个 NS 地址到 godaddy 的域名服务器下；</p>\n</li>\n<li><p>Git 项目根目录下创建 CNAME 文件，把域名填进去，push 就行了。</p>\n</li>\n</ol>"},{"title":"Hexo 博客迁移","comments":1,"date":"2018-07-29T08:13:33.000Z","_content":"\nhexo 博客迁移\n\n<!--more-->\n\n1.  更新 node 和 npm：`sudo npm install -g n` => `sudo n stable` => `sudo npm install npm -g`\n\n2.  安装 hexo：`sudo npm install -g hexo`\n\n3.  安装依赖包：`sudo npm i`\n\n4.  复制以下文件到新建的 blog 文件夹里：package.json、source、scaffolds、themes、\n    \\_config.yml、.gitignore\n\n5.  在 home 目录下新建一个 .ssh 文件：`ssh-keygen -t rsa -C <邮箱>`\n\n6.  `sudo gedit .ssh/id_rsa.pub`，复制秘钥到 github 中\n\n7.  `git init`，初始化空仓库\n\n8.  配置 git：`git config -–global user.name <name>` => `git config --global user.email <email>`\n\n9.  生成新的 public 文件：`hexo g`\n\n10. 下载必要的插件：`sudo npm install hexo-deployer-git --save`\n\n11. 上传博客到 git： `hexo d`\n","source":"_posts/hexo-博客迁移.md","raw":"---\ntitle: hexo 博客迁移\ncomments: true\ndate: 2018-07-29 16:13:33\ncategories: 博客\ntags: hexo\n---\n\nhexo 博客迁移\n\n<!--more-->\n\n1.  更新 node 和 npm：`sudo npm install -g n` => `sudo n stable` => `sudo npm install npm -g`\n\n2.  安装 hexo：`sudo npm install -g hexo`\n\n3.  安装依赖包：`sudo npm i`\n\n4.  复制以下文件到新建的 blog 文件夹里：package.json、source、scaffolds、themes、\n    \\_config.yml、.gitignore\n\n5.  在 home 目录下新建一个 .ssh 文件：`ssh-keygen -t rsa -C <邮箱>`\n\n6.  `sudo gedit .ssh/id_rsa.pub`，复制秘钥到 github 中\n\n7.  `git init`，初始化空仓库\n\n8.  配置 git：`git config -–global user.name <name>` => `git config --global user.email <email>`\n\n9.  生成新的 public 文件：`hexo g`\n\n10. 下载必要的插件：`sudo npm install hexo-deployer-git --save`\n\n11. 上传博客到 git： `hexo d`\n","slug":"hexo-博客迁移","published":1,"updated":"2019-11-13T12:15:52.645Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9g00248ex0fe84fgt8","content":"<p>hexo 博客迁移</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>更新 node 和 npm：<code>sudo npm install -g n</code> =&gt; <code>sudo n stable</code> =&gt; <code>sudo npm install npm -g</code></p>\n</li>\n<li><p>安装 hexo：<code>sudo npm install -g hexo</code></p>\n</li>\n<li><p>安装依赖包：<code>sudo npm i</code></p>\n</li>\n<li><p>复制以下文件到新建的 blog 文件夹里：package.json、source、scaffolds、themes、<br>_config.yml、.gitignore</p>\n</li>\n<li><p>在 home 目录下新建一个 .ssh 文件：<code>ssh-keygen -t rsa -C &lt;邮箱&gt;</code></p>\n</li>\n<li><p><code>sudo gedit .ssh/id_rsa.pub</code>，复制秘钥到 github 中</p>\n</li>\n<li><p><code>git init</code>，初始化空仓库</p>\n</li>\n<li><p>配置 git：<code>git config -–global user.name &lt;name&gt;</code> =&gt; <code>git config --global user.email &lt;email&gt;</code></p>\n</li>\n<li><p>生成新的 public 文件：<code>hexo g</code></p>\n</li>\n<li><p>下载必要的插件：<code>sudo npm install hexo-deployer-git --save</code></p>\n</li>\n<li><p>上传博客到 git： <code>hexo d</code></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>hexo 博客迁移</p>","more":"<ol>\n<li><p>更新 node 和 npm：<code>sudo npm install -g n</code> =&gt; <code>sudo n stable</code> =&gt; <code>sudo npm install npm -g</code></p>\n</li>\n<li><p>安装 hexo：<code>sudo npm install -g hexo</code></p>\n</li>\n<li><p>安装依赖包：<code>sudo npm i</code></p>\n</li>\n<li><p>复制以下文件到新建的 blog 文件夹里：package.json、source、scaffolds、themes、<br>_config.yml、.gitignore</p>\n</li>\n<li><p>在 home 目录下新建一个 .ssh 文件：<code>ssh-keygen -t rsa -C &lt;邮箱&gt;</code></p>\n</li>\n<li><p><code>sudo gedit .ssh/id_rsa.pub</code>，复制秘钥到 github 中</p>\n</li>\n<li><p><code>git init</code>，初始化空仓库</p>\n</li>\n<li><p>配置 git：<code>git config -–global user.name &lt;name&gt;</code> =&gt; <code>git config --global user.email &lt;email&gt;</code></p>\n</li>\n<li><p>生成新的 public 文件：<code>hexo g</code></p>\n</li>\n<li><p>下载必要的插件：<code>sudo npm install hexo-deployer-git --save</code></p>\n</li>\n<li><p>上传博客到 git： <code>hexo d</code></p>\n</li>\n</ol>"},{"title":"Hexo 使用指南","date":"2018-05-20T08:41:48.000Z","comments":1,"_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hexo入门.md","raw":"---\ntitle: hexo 使用指南\ndate: 2018-05-20 16:41:48\ncategories: 博客\ntags: hexo\ncomments: true\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hexo入门","published":1,"updated":"2019-11-13T12:16:08.156Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9h00288ex0azut27a0","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"Html 笔记","comments":1,"date":"2019-01-22T05:58:20.000Z","_content":"\nhtml 笔记\n\n<!--more-->\n\n## 一、html 是什么？\n\n1. html 是使用标记标签来描述网页的一种标记语言。\n\n2. html 文档 = 网页。\n\n3. 除了空元素，其他元素都要闭合\n\n4. 推荐使用小写\n\n5. 大多数元素具有以下属性：class、id、style、title\n\n## 二、常用元素：\n\n1. 标题：h\n\n2. 段落：p\n\n3. 图形：img、canvas\n\n4. 链接：a\n\n   A. 新的浏览器中打开链接（target=“\\_blank”)\n\n   B. 链接到同一个页面的不同位置：\n\n   ```\n   <a href=\"#C4\">查看 Chapter 4。</a>\n   <a name=\"C4\">Chapter 4</a>\n   ```\n\n   C. 创建邮件链接：\n\n   ```\n   <a href=\"mailto:someone@microsoft.com?subject=Hello%20again\">发送邮件</a>\n   ```\n\n5. 水平线：hr\n\n6. 折行：br\n\n7. 文本格式化：b（粗体）、em（强调）、i（斜体）、small（小号）、strong（加重语气）、sub（下标字）、sup（上标字）、ins（插入字）、del（删除字）\n\n8. 预格式文本：pre\n\n9. 地址：address\n\n10. 块引用：blockquote\n\n11. 著作标题：cite\n\n12. 表格：table、caption（标题）、tr（行）、th（表头）、td（单元格）、colspan（跨行属性）、rowspan（跨列属性）、cellpadding（单元格间距）、\n\n13. 列表：ul（无序列表，type：disc、circle、square）、ol（有序列表，type：A、a、I、i）、li（列表项）\n\n14. 语义元素：header（页眉）、nav（导航链接的容器）、section（章节）、article（独立的文章）、aside（侧栏）、footer（页脚）\n\n15. 表单：form(action、method, target)、[input]('http://www.w3school.com.cn/html/html_form_input_types.asp')(name、value、输入限制、输入类型)、select、option（selected）、textarea、button、datalist\n\n16. 媒体元素：audio、embed、video\n\n17. 其他：div、span\n\n## 三、元素分类：\n\n1. 块级元素：在浏览器显示时，通常会以新行来开始和结束\n\n2. 内联元素：内联元素在显示时通常不会以新行开始\n\n## 四、url 组成：scheme://host.domain:port/path/filename\n\n1. scheme - 因特网服务的类型。最常见的类型是 http， 还包括：https、ftp、file\n\n2. host - 域主机（http 的默认主机是 www）\n\n3. domain - 域名，比如 w3school.com.cn\n\n4. :port - 端口号（http 的默认端口号是 80）\n\n5. path - 服务器上的路径（如果省略，则文档必须位于网站的根目录中）。\n\n6. filename - 文档/资源的名称\n\n## 五、HTML 图形\n\n1. canvas：\n\n   (1) 本质：创建画布，使用 JavaScript 画布上绘制图像，本身不具备绘图功能。\n\n   (2) 绘图步骤：获取元素(getContext(\"2d\")) => 设置形状、样式等\n\n   (3) 常用属性：fillStyle、\n\n   (4) 常用事件：getContext、fillRect、moveTo、lineTo、stroke、beginPath、arc、closePath、fill、createLinearGradient、drawImageaddColorStop\n\n2. svg：\n\n   (1) 本质：可伸缩的矢量图形\n\n   (2) 图形创建方式：使用 xml 定义\n\n   (3) 特性：图像在放大或改变尺寸的情况下其图形质量不变\n\n## 其他\n\n1. 响应式 web 设计（RWD，Responsive Web Design）， 是能够以可变尺寸传递网页的一种网页布局模式。\n\n2. 实体符号：[http://www.w3school.com.cn/html/html_entities.asp](http://www.w3school.com.cn/html/html_entities.asp)\n","source":"_posts/html-笔记.md","raw":"---\ntitle: html 笔记\ncomments: true\ndate: 2019-01-22 13:58:20\ncategories: web\ntags: html\n---\n\nhtml 笔记\n\n<!--more-->\n\n## 一、html 是什么？\n\n1. html 是使用标记标签来描述网页的一种标记语言。\n\n2. html 文档 = 网页。\n\n3. 除了空元素，其他元素都要闭合\n\n4. 推荐使用小写\n\n5. 大多数元素具有以下属性：class、id、style、title\n\n## 二、常用元素：\n\n1. 标题：h\n\n2. 段落：p\n\n3. 图形：img、canvas\n\n4. 链接：a\n\n   A. 新的浏览器中打开链接（target=“\\_blank”)\n\n   B. 链接到同一个页面的不同位置：\n\n   ```\n   <a href=\"#C4\">查看 Chapter 4。</a>\n   <a name=\"C4\">Chapter 4</a>\n   ```\n\n   C. 创建邮件链接：\n\n   ```\n   <a href=\"mailto:someone@microsoft.com?subject=Hello%20again\">发送邮件</a>\n   ```\n\n5. 水平线：hr\n\n6. 折行：br\n\n7. 文本格式化：b（粗体）、em（强调）、i（斜体）、small（小号）、strong（加重语气）、sub（下标字）、sup（上标字）、ins（插入字）、del（删除字）\n\n8. 预格式文本：pre\n\n9. 地址：address\n\n10. 块引用：blockquote\n\n11. 著作标题：cite\n\n12. 表格：table、caption（标题）、tr（行）、th（表头）、td（单元格）、colspan（跨行属性）、rowspan（跨列属性）、cellpadding（单元格间距）、\n\n13. 列表：ul（无序列表，type：disc、circle、square）、ol（有序列表，type：A、a、I、i）、li（列表项）\n\n14. 语义元素：header（页眉）、nav（导航链接的容器）、section（章节）、article（独立的文章）、aside（侧栏）、footer（页脚）\n\n15. 表单：form(action、method, target)、[input]('http://www.w3school.com.cn/html/html_form_input_types.asp')(name、value、输入限制、输入类型)、select、option（selected）、textarea、button、datalist\n\n16. 媒体元素：audio、embed、video\n\n17. 其他：div、span\n\n## 三、元素分类：\n\n1. 块级元素：在浏览器显示时，通常会以新行来开始和结束\n\n2. 内联元素：内联元素在显示时通常不会以新行开始\n\n## 四、url 组成：scheme://host.domain:port/path/filename\n\n1. scheme - 因特网服务的类型。最常见的类型是 http， 还包括：https、ftp、file\n\n2. host - 域主机（http 的默认主机是 www）\n\n3. domain - 域名，比如 w3school.com.cn\n\n4. :port - 端口号（http 的默认端口号是 80）\n\n5. path - 服务器上的路径（如果省略，则文档必须位于网站的根目录中）。\n\n6. filename - 文档/资源的名称\n\n## 五、HTML 图形\n\n1. canvas：\n\n   (1) 本质：创建画布，使用 JavaScript 画布上绘制图像，本身不具备绘图功能。\n\n   (2) 绘图步骤：获取元素(getContext(\"2d\")) => 设置形状、样式等\n\n   (3) 常用属性：fillStyle、\n\n   (4) 常用事件：getContext、fillRect、moveTo、lineTo、stroke、beginPath、arc、closePath、fill、createLinearGradient、drawImageaddColorStop\n\n2. svg：\n\n   (1) 本质：可伸缩的矢量图形\n\n   (2) 图形创建方式：使用 xml 定义\n\n   (3) 特性：图像在放大或改变尺寸的情况下其图形质量不变\n\n## 其他\n\n1. 响应式 web 设计（RWD，Responsive Web Design）， 是能够以可变尺寸传递网页的一种网页布局模式。\n\n2. 实体符号：[http://www.w3school.com.cn/html/html_entities.asp](http://www.w3school.com.cn/html/html_entities.asp)\n","slug":"html-笔记","published":1,"updated":"2019-11-13T12:16:03.114Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9i002b8ex0gc6428qj","content":"<p>html 笔记</p>\n<a id=\"more\"></a>\n<h2 id=\"一、html-是什么？\"><a href=\"#一、html-是什么？\" class=\"headerlink\" title=\"一、html 是什么？\"></a>一、html 是什么？</h2><ol>\n<li><p>html 是使用标记标签来描述网页的一种标记语言。</p>\n</li>\n<li><p>html 文档 = 网页。</p>\n</li>\n<li><p>除了空元素，其他元素都要闭合</p>\n</li>\n<li><p>推荐使用小写</p>\n</li>\n<li><p>大多数元素具有以下属性：class、id、style、title</p>\n</li>\n</ol>\n<h2 id=\"二、常用元素：\"><a href=\"#二、常用元素：\" class=\"headerlink\" title=\"二、常用元素：\"></a>二、常用元素：</h2><ol>\n<li><p>标题：h</p>\n</li>\n<li><p>段落：p</p>\n</li>\n<li><p>图形：img、canvas</p>\n</li>\n<li><p>链接：a</p>\n<p>A. 新的浏览器中打开链接（target=“_blank”)</p>\n<p>B. 链接到同一个页面的不同位置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#C4\"</span>&gt;</span>查看 Chapter 4。<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"C4\"</span>&gt;</span>Chapter 4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>C. 创建邮件链接：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:someone@microsoft.com?subject=Hello%20again\"</span>&gt;</span>发送邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>水平线：hr</p>\n</li>\n<li><p>折行：br</p>\n</li>\n<li><p>文本格式化：b（粗体）、em（强调）、i（斜体）、small（小号）、strong（加重语气）、sub（下标字）、sup（上标字）、ins（插入字）、del（删除字）</p>\n</li>\n<li><p>预格式文本：pre</p>\n</li>\n<li><p>地址：address</p>\n</li>\n<li><p>块引用：blockquote</p>\n</li>\n<li><p>著作标题：cite</p>\n</li>\n<li><p>表格：table、caption（标题）、tr（行）、th（表头）、td（单元格）、colspan（跨行属性）、rowspan（跨列属性）、cellpadding（单元格间距）、</p>\n</li>\n<li><p>列表：ul（无序列表，type：disc、circle、square）、ol（有序列表，type：A、a、I、i）、li（列表项）</p>\n</li>\n<li><p>语义元素：header（页眉）、nav（导航链接的容器）、section（章节）、article（独立的文章）、aside（侧栏）、footer（页脚）</p>\n</li>\n<li><p>表单：form(action、method, target)、<a href=\"&#39;http://www.w3school.com.cn/html/html_form_input_types.asp&#39;\">input</a>(name、value、输入限制、输入类型)、select、option（selected）、textarea、button、datalist</p>\n</li>\n<li><p>媒体元素：audio、embed、video</p>\n</li>\n<li><p>其他：div、span</p>\n</li>\n</ol>\n<h2 id=\"三、元素分类：\"><a href=\"#三、元素分类：\" class=\"headerlink\" title=\"三、元素分类：\"></a>三、元素分类：</h2><ol>\n<li><p>块级元素：在浏览器显示时，通常会以新行来开始和结束</p>\n</li>\n<li><p>内联元素：内联元素在显示时通常不会以新行开始</p>\n</li>\n</ol>\n<h2 id=\"四、url-组成：scheme-host-domain-port-path-filename\"><a href=\"#四、url-组成：scheme-host-domain-port-path-filename\" class=\"headerlink\" title=\"四、url 组成：scheme://host.domain:port/path/filename\"></a>四、url 组成：scheme://host.domain:port/path/filename</h2><ol>\n<li><p>scheme - 因特网服务的类型。最常见的类型是 http， 还包括：https、ftp、file</p>\n</li>\n<li><p>host - 域主机（http 的默认主机是 www）</p>\n</li>\n<li><p>domain - 域名，比如 w3school.com.cn</p>\n</li>\n<li><p>:port - 端口号（http 的默认端口号是 80）</p>\n</li>\n<li><p>path - 服务器上的路径（如果省略，则文档必须位于网站的根目录中）。</p>\n</li>\n<li><p>filename - 文档/资源的名称</p>\n</li>\n</ol>\n<h2 id=\"五、HTML-图形\"><a href=\"#五、HTML-图形\" class=\"headerlink\" title=\"五、HTML 图形\"></a>五、HTML 图形</h2><ol>\n<li><p>canvas：</p>\n<p>(1) 本质：创建画布，使用 JavaScript 画布上绘制图像，本身不具备绘图功能。</p>\n<p>(2) 绘图步骤：获取元素(getContext(“2d”)) =&gt; 设置形状、样式等</p>\n<p>(3) 常用属性：fillStyle、</p>\n<p>(4) 常用事件：getContext、fillRect、moveTo、lineTo、stroke、beginPath、arc、closePath、fill、createLinearGradient、drawImageaddColorStop</p>\n</li>\n<li><p>svg：</p>\n<p>(1) 本质：可伸缩的矢量图形</p>\n<p>(2) 图形创建方式：使用 xml 定义</p>\n<p>(3) 特性：图像在放大或改变尺寸的情况下其图形质量不变</p>\n</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li><p>响应式 web 设计（RWD，Responsive Web Design）， 是能够以可变尺寸传递网页的一种网页布局模式。</p>\n</li>\n<li><p>实体符号：<a href=\"http://www.w3school.com.cn/html/html_entities.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/html/html_entities.asp</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>html 笔记</p>","more":"<h2 id=\"一、html-是什么？\"><a href=\"#一、html-是什么？\" class=\"headerlink\" title=\"一、html 是什么？\"></a>一、html 是什么？</h2><ol>\n<li><p>html 是使用标记标签来描述网页的一种标记语言。</p>\n</li>\n<li><p>html 文档 = 网页。</p>\n</li>\n<li><p>除了空元素，其他元素都要闭合</p>\n</li>\n<li><p>推荐使用小写</p>\n</li>\n<li><p>大多数元素具有以下属性：class、id、style、title</p>\n</li>\n</ol>\n<h2 id=\"二、常用元素：\"><a href=\"#二、常用元素：\" class=\"headerlink\" title=\"二、常用元素：\"></a>二、常用元素：</h2><ol>\n<li><p>标题：h</p>\n</li>\n<li><p>段落：p</p>\n</li>\n<li><p>图形：img、canvas</p>\n</li>\n<li><p>链接：a</p>\n<p>A. 新的浏览器中打开链接（target=“_blank”)</p>\n<p>B. 链接到同一个页面的不同位置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#C4\"</span>&gt;</span>查看 Chapter 4。<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">name</span>=<span class=\"string\">\"C4\"</span>&gt;</span>Chapter 4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>C. 创建邮件链接：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:someone@microsoft.com?subject=Hello%20again\"</span>&gt;</span>发送邮件<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>水平线：hr</p>\n</li>\n<li><p>折行：br</p>\n</li>\n<li><p>文本格式化：b（粗体）、em（强调）、i（斜体）、small（小号）、strong（加重语气）、sub（下标字）、sup（上标字）、ins（插入字）、del（删除字）</p>\n</li>\n<li><p>预格式文本：pre</p>\n</li>\n<li><p>地址：address</p>\n</li>\n<li><p>块引用：blockquote</p>\n</li>\n<li><p>著作标题：cite</p>\n</li>\n<li><p>表格：table、caption（标题）、tr（行）、th（表头）、td（单元格）、colspan（跨行属性）、rowspan（跨列属性）、cellpadding（单元格间距）、</p>\n</li>\n<li><p>列表：ul（无序列表，type：disc、circle、square）、ol（有序列表，type：A、a、I、i）、li（列表项）</p>\n</li>\n<li><p>语义元素：header（页眉）、nav（导航链接的容器）、section（章节）、article（独立的文章）、aside（侧栏）、footer（页脚）</p>\n</li>\n<li><p>表单：form(action、method, target)、<a href=\"&#39;http://www.w3school.com.cn/html/html_form_input_types.asp&#39;\">input</a>(name、value、输入限制、输入类型)、select、option（selected）、textarea、button、datalist</p>\n</li>\n<li><p>媒体元素：audio、embed、video</p>\n</li>\n<li><p>其他：div、span</p>\n</li>\n</ol>\n<h2 id=\"三、元素分类：\"><a href=\"#三、元素分类：\" class=\"headerlink\" title=\"三、元素分类：\"></a>三、元素分类：</h2><ol>\n<li><p>块级元素：在浏览器显示时，通常会以新行来开始和结束</p>\n</li>\n<li><p>内联元素：内联元素在显示时通常不会以新行开始</p>\n</li>\n</ol>\n<h2 id=\"四、url-组成：scheme-host-domain-port-path-filename\"><a href=\"#四、url-组成：scheme-host-domain-port-path-filename\" class=\"headerlink\" title=\"四、url 组成：scheme://host.domain:port/path/filename\"></a>四、url 组成：scheme://host.domain:port/path/filename</h2><ol>\n<li><p>scheme - 因特网服务的类型。最常见的类型是 http， 还包括：https、ftp、file</p>\n</li>\n<li><p>host - 域主机（http 的默认主机是 www）</p>\n</li>\n<li><p>domain - 域名，比如 w3school.com.cn</p>\n</li>\n<li><p>:port - 端口号（http 的默认端口号是 80）</p>\n</li>\n<li><p>path - 服务器上的路径（如果省略，则文档必须位于网站的根目录中）。</p>\n</li>\n<li><p>filename - 文档/资源的名称</p>\n</li>\n</ol>\n<h2 id=\"五、HTML-图形\"><a href=\"#五、HTML-图形\" class=\"headerlink\" title=\"五、HTML 图形\"></a>五、HTML 图形</h2><ol>\n<li><p>canvas：</p>\n<p>(1) 本质：创建画布，使用 JavaScript 画布上绘制图像，本身不具备绘图功能。</p>\n<p>(2) 绘图步骤：获取元素(getContext(“2d”)) =&gt; 设置形状、样式等</p>\n<p>(3) 常用属性：fillStyle、</p>\n<p>(4) 常用事件：getContext、fillRect、moveTo、lineTo、stroke、beginPath、arc、closePath、fill、createLinearGradient、drawImageaddColorStop</p>\n</li>\n<li><p>svg：</p>\n<p>(1) 本质：可伸缩的矢量图形</p>\n<p>(2) 图形创建方式：使用 xml 定义</p>\n<p>(3) 特性：图像在放大或改变尺寸的情况下其图形质量不变</p>\n</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li><p>响应式 web 设计（RWD，Responsive Web Design）， 是能够以可变尺寸传递网页的一种网页布局模式。</p>\n</li>\n<li><p>实体符号：<a href=\"http://www.w3school.com.cn/html/html_entities.asp\" target=\"_blank\" rel=\"noopener\">http://www.w3school.com.cn/html/html_entities.asp</a></p>\n</li>\n</ol>"},{"title":"Js-Html转文本","comments":1,"date":"2018-08-25T02:40:58.000Z","_content":"\n最近在折腾用 js 实现 html 转文本的东东，包括 html 转 docx、doc 以及 pdf 等文档，首选当然是用别人造好的轮子啦。\n\n<!--more-->\n\nhtml 转 pdf 用的轮子是 jsPdf，这东西好用是好用，但是有一个很大的缺点，对中文的支持太差了，我用的是 fromhtml 方法，研究文档研究了几天，还是没发现对中文支持的方法，尝试了各种奇技淫巧（换字体，解码等）后，发现它这个方法根本就不支持中文，当然他官方就声明了不支持中文。不过他的 addhtml 方法勉强实现了我的需求，但是因为是采用截图方式，断页很不智能，甚至会出现文字被生生的拦腰截断的情况，加之生成的 pdf 像素实在惨不忍睹，决定还是放弃了。具体的实现，网上有很多的文档，大家可以自行查阅，我也是根据自己的需求定制了而已，所以源码示例就不做过多分享了。\n\nhtml 转 word 文档，选的轮子是 html-docx，关于这个轮子的资料很少，不过看一下源码及实例还是很快上手的，网上说什么缺点是要用在线编辑器什么的，感觉就是没有自己动脑想过，直接抄官方示例的。官方示例摆出来的虽然是要用一个在线编辑器，但是我们可以根据自己的需求进行改良，比如我的需求是根据选定网页的不同区域，下载不同内容的 word 文档，就不容许出现什么在线编辑器啦，好吧，没什么要说了，看代码吧。\n\n```\npublic downloadDocx(printArea: any, outputName: string) {\n    // +++++++ 样式定制 +++++++\n    const styles = `\n        //code here\n    `;\n\n    // 样式加载\n    let styleTagInnerHtml = '<style>';\n    styleTagInnerHtml += styles;\n    styleTagInnerHtml += '</style>';\n\n    const content = '<!DOCTYPE html><html>' +\n      '<head>' + styleTagInnerHtml + '</head>' +\n      '<body><div>' printArea.outerHTML + '</div>';\n\n    // +++++++ html 转 word +++++++\n    const converted = htmlDocx.asBlob(content);\n    saveAs(converted, outputName + '.docx');\n  }\n```\n\n上面的代码是我写的示例，当然涉及业务需求更加复杂的逻辑就不展示了，上面的示例代码分为三部分。\n\n第一部分是样式的定制，因为这个轮子要转 word 需要重新写一份 html 文档，而这份文档是检索不到我们在外面写的 css 的，只能检索得到 html 文档的 style 标签里的 css，所以需要根据自己的需求重新生成一份 css 文件，放到 html 文档里面。还有一个坑就是，word 并不是支持所有 css 属性的，一些比较新的属性建议还是不要用了，用老一点的方法实现吧。\n\n第二部分是 css 文档部分，这部分主要是生成新的文档，用于转换成 word 文档。\n\n第三部分是用轮子转换编码格式并保存为 word 文档的部分，这里其实是用了两个轮子：html-docx 和 file-saver，html-docx 这个轮子用于转换编码格式，file-saver 用于保存文档，后缀可以根据自己的需求改，但是要记得编码格式要对应上。\n\n当然，我这里只是一个简单的示例，切无生搬硬套，可以根据自己的需求进行定制。\n","source":"_posts/html转文本(js).md","raw":"---\ntitle: js-html转文本\ncomments: true\ndate: 2018-08-25 10:40:58\ncategories: web\ntags: 文本转换\n---\n\n最近在折腾用 js 实现 html 转文本的东东，包括 html 转 docx、doc 以及 pdf 等文档，首选当然是用别人造好的轮子啦。\n\n<!--more-->\n\nhtml 转 pdf 用的轮子是 jsPdf，这东西好用是好用，但是有一个很大的缺点，对中文的支持太差了，我用的是 fromhtml 方法，研究文档研究了几天，还是没发现对中文支持的方法，尝试了各种奇技淫巧（换字体，解码等）后，发现它这个方法根本就不支持中文，当然他官方就声明了不支持中文。不过他的 addhtml 方法勉强实现了我的需求，但是因为是采用截图方式，断页很不智能，甚至会出现文字被生生的拦腰截断的情况，加之生成的 pdf 像素实在惨不忍睹，决定还是放弃了。具体的实现，网上有很多的文档，大家可以自行查阅，我也是根据自己的需求定制了而已，所以源码示例就不做过多分享了。\n\nhtml 转 word 文档，选的轮子是 html-docx，关于这个轮子的资料很少，不过看一下源码及实例还是很快上手的，网上说什么缺点是要用在线编辑器什么的，感觉就是没有自己动脑想过，直接抄官方示例的。官方示例摆出来的虽然是要用一个在线编辑器，但是我们可以根据自己的需求进行改良，比如我的需求是根据选定网页的不同区域，下载不同内容的 word 文档，就不容许出现什么在线编辑器啦，好吧，没什么要说了，看代码吧。\n\n```\npublic downloadDocx(printArea: any, outputName: string) {\n    // +++++++ 样式定制 +++++++\n    const styles = `\n        //code here\n    `;\n\n    // 样式加载\n    let styleTagInnerHtml = '<style>';\n    styleTagInnerHtml += styles;\n    styleTagInnerHtml += '</style>';\n\n    const content = '<!DOCTYPE html><html>' +\n      '<head>' + styleTagInnerHtml + '</head>' +\n      '<body><div>' printArea.outerHTML + '</div>';\n\n    // +++++++ html 转 word +++++++\n    const converted = htmlDocx.asBlob(content);\n    saveAs(converted, outputName + '.docx');\n  }\n```\n\n上面的代码是我写的示例，当然涉及业务需求更加复杂的逻辑就不展示了，上面的示例代码分为三部分。\n\n第一部分是样式的定制，因为这个轮子要转 word 需要重新写一份 html 文档，而这份文档是检索不到我们在外面写的 css 的，只能检索得到 html 文档的 style 标签里的 css，所以需要根据自己的需求重新生成一份 css 文件，放到 html 文档里面。还有一个坑就是，word 并不是支持所有 css 属性的，一些比较新的属性建议还是不要用了，用老一点的方法实现吧。\n\n第二部分是 css 文档部分，这部分主要是生成新的文档，用于转换成 word 文档。\n\n第三部分是用轮子转换编码格式并保存为 word 文档的部分，这里其实是用了两个轮子：html-docx 和 file-saver，html-docx 这个轮子用于转换编码格式，file-saver 用于保存文档，后缀可以根据自己的需求改，但是要记得编码格式要对应上。\n\n当然，我这里只是一个简单的示例，切无生搬硬套，可以根据自己的需求进行定制。\n","slug":"html转文本(js)","published":1,"updated":"2019-11-13T12:16:20.437Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9j002f8ex030bt3a0l","content":"<p>最近在折腾用 js 实现 html 转文本的东东，包括 html 转 docx、doc 以及 pdf 等文档，首选当然是用别人造好的轮子啦。</p>\n<a id=\"more\"></a>\n<p>html 转 pdf 用的轮子是 jsPdf，这东西好用是好用，但是有一个很大的缺点，对中文的支持太差了，我用的是 fromhtml 方法，研究文档研究了几天，还是没发现对中文支持的方法，尝试了各种奇技淫巧（换字体，解码等）后，发现它这个方法根本就不支持中文，当然他官方就声明了不支持中文。不过他的 addhtml 方法勉强实现了我的需求，但是因为是采用截图方式，断页很不智能，甚至会出现文字被生生的拦腰截断的情况，加之生成的 pdf 像素实在惨不忍睹，决定还是放弃了。具体的实现，网上有很多的文档，大家可以自行查阅，我也是根据自己的需求定制了而已，所以源码示例就不做过多分享了。</p>\n<p>html 转 word 文档，选的轮子是 html-docx，关于这个轮子的资料很少，不过看一下源码及实例还是很快上手的，网上说什么缺点是要用在线编辑器什么的，感觉就是没有自己动脑想过，直接抄官方示例的。官方示例摆出来的虽然是要用一个在线编辑器，但是我们可以根据自己的需求进行改良，比如我的需求是根据选定网页的不同区域，下载不同内容的 word 文档，就不容许出现什么在线编辑器啦，好吧，没什么要说了，看代码吧。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public downloadDocx(printArea: any, outputName: string) &#123;</span><br><span class=\"line\">    // +++++++ 样式定制 +++++++</span><br><span class=\"line\">    const styles = `</span><br><span class=\"line\">        //code here</span><br><span class=\"line\">    `;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 样式加载</span><br><span class=\"line\">    let styleTagInnerHtml = '<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span>';</span><br><span class=\"line\">    styleTagInnerHtml += styles;</span><br><span class=\"line\">    styleTagInnerHtml += '<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>';</span><br><span class=\"line\"></span><br><span class=\"line\">    const content = '<span class=\"meta\">&lt;!DOCTYPE html&gt;</span><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>' +</span><br><span class=\"line\">      '<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>' + styleTagInnerHtml + '<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>' +</span><br><span class=\"line\">      '<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>' printArea.outerHTML + '<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>';</span><br><span class=\"line\"></span><br><span class=\"line\">    // +++++++ html 转 word +++++++</span><br><span class=\"line\">    const converted = htmlDocx.asBlob(content);</span><br><span class=\"line\">    saveAs(converted, outputName + '.docx');</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码是我写的示例，当然涉及业务需求更加复杂的逻辑就不展示了，上面的示例代码分为三部分。</p>\n<p>第一部分是样式的定制，因为这个轮子要转 word 需要重新写一份 html 文档，而这份文档是检索不到我们在外面写的 css 的，只能检索得到 html 文档的 style 标签里的 css，所以需要根据自己的需求重新生成一份 css 文件，放到 html 文档里面。还有一个坑就是，word 并不是支持所有 css 属性的，一些比较新的属性建议还是不要用了，用老一点的方法实现吧。</p>\n<p>第二部分是 css 文档部分，这部分主要是生成新的文档，用于转换成 word 文档。</p>\n<p>第三部分是用轮子转换编码格式并保存为 word 文档的部分，这里其实是用了两个轮子：html-docx 和 file-saver，html-docx 这个轮子用于转换编码格式，file-saver 用于保存文档，后缀可以根据自己的需求改，但是要记得编码格式要对应上。</p>\n<p>当然，我这里只是一个简单的示例，切无生搬硬套，可以根据自己的需求进行定制。</p>\n","site":{"data":{}},"excerpt":"<p>最近在折腾用 js 实现 html 转文本的东东，包括 html 转 docx、doc 以及 pdf 等文档，首选当然是用别人造好的轮子啦。</p>","more":"<p>html 转 pdf 用的轮子是 jsPdf，这东西好用是好用，但是有一个很大的缺点，对中文的支持太差了，我用的是 fromhtml 方法，研究文档研究了几天，还是没发现对中文支持的方法，尝试了各种奇技淫巧（换字体，解码等）后，发现它这个方法根本就不支持中文，当然他官方就声明了不支持中文。不过他的 addhtml 方法勉强实现了我的需求，但是因为是采用截图方式，断页很不智能，甚至会出现文字被生生的拦腰截断的情况，加之生成的 pdf 像素实在惨不忍睹，决定还是放弃了。具体的实现，网上有很多的文档，大家可以自行查阅，我也是根据自己的需求定制了而已，所以源码示例就不做过多分享了。</p>\n<p>html 转 word 文档，选的轮子是 html-docx，关于这个轮子的资料很少，不过看一下源码及实例还是很快上手的，网上说什么缺点是要用在线编辑器什么的，感觉就是没有自己动脑想过，直接抄官方示例的。官方示例摆出来的虽然是要用一个在线编辑器，但是我们可以根据自己的需求进行改良，比如我的需求是根据选定网页的不同区域，下载不同内容的 word 文档，就不容许出现什么在线编辑器啦，好吧，没什么要说了，看代码吧。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public downloadDocx(printArea: any, outputName: string) &#123;</span><br><span class=\"line\">    // +++++++ 样式定制 +++++++</span><br><span class=\"line\">    const styles = `</span><br><span class=\"line\">        //code here</span><br><span class=\"line\">    `;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 样式加载</span><br><span class=\"line\">    let styleTagInnerHtml = '<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span>';</span><br><span class=\"line\">    styleTagInnerHtml += styles;</span><br><span class=\"line\">    styleTagInnerHtml += '<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>';</span><br><span class=\"line\"></span><br><span class=\"line\">    const content = '<span class=\"meta\">&lt;!DOCTYPE html&gt;</span><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>' +</span><br><span class=\"line\">      '<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>' + styleTagInnerHtml + '<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>' +</span><br><span class=\"line\">      '<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>' printArea.outerHTML + '<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>';</span><br><span class=\"line\"></span><br><span class=\"line\">    // +++++++ html 转 word +++++++</span><br><span class=\"line\">    const converted = htmlDocx.asBlob(content);</span><br><span class=\"line\">    saveAs(converted, outputName + '.docx');</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码是我写的示例，当然涉及业务需求更加复杂的逻辑就不展示了，上面的示例代码分为三部分。</p>\n<p>第一部分是样式的定制，因为这个轮子要转 word 需要重新写一份 html 文档，而这份文档是检索不到我们在外面写的 css 的，只能检索得到 html 文档的 style 标签里的 css，所以需要根据自己的需求重新生成一份 css 文件，放到 html 文档里面。还有一个坑就是，word 并不是支持所有 css 属性的，一些比较新的属性建议还是不要用了，用老一点的方法实现吧。</p>\n<p>第二部分是 css 文档部分，这部分主要是生成新的文档，用于转换成 word 文档。</p>\n<p>第三部分是用轮子转换编码格式并保存为 word 文档的部分，这里其实是用了两个轮子：html-docx 和 file-saver，html-docx 这个轮子用于转换编码格式，file-saver 用于保存文档，后缀可以根据自己的需求改，但是要记得编码格式要对应上。</p>\n<p>当然，我这里只是一个简单的示例，切无生搬硬套，可以根据自己的需求进行定制。</p>"},{"title":"Key 值在 Vue 组件中的作用","comments":1,"date":"2019-02-19T00:38:54.000Z","_content":"\nkey 值在 vue 组件的作用\n\n<!--more-->\n\n1. key 值在 vue 组件中的作用：\n\n   高效利用 dom\n\n2. 分析：\n\n   vue 生成 dom 的过程大致是：model -> vn -> diff -> patch -> dom， 这里在生成真实 dom 之前会先生成虚拟 dom，每次 dom 的改变不是直接生成新的 dom 的，因为每次改变都重新生成新的 dom，效率太低，消耗太大。在每次改变 dom 之时，会经历以下过程，diff 函数对比新旧 vn，包括属性值等，确认哪一项变了，则生成一个新的 patch，将改变的项目插入到 dom 中。\n\n   在执行 diff 函数之时，会判断 key 值是否存在，若存在，则采用 map 映射的方式，查找相应的 vn，若不存在则会一个个去遍历 vn，直到找到相应的改变项，由于直接遍历的速度比 map 映射查找的速度慢，所以在最好在 vue dom 中加上 key 值。\n","source":"_posts/key值在vue组件中的作用.md","raw":"---\ntitle: key 值在 vue 组件中的作用\ncomments: true\ndate: 2019-02-19 08:38:54\ncategories: web\ntags: vue\n---\n\nkey 值在 vue 组件的作用\n\n<!--more-->\n\n1. key 值在 vue 组件中的作用：\n\n   高效利用 dom\n\n2. 分析：\n\n   vue 生成 dom 的过程大致是：model -> vn -> diff -> patch -> dom， 这里在生成真实 dom 之前会先生成虚拟 dom，每次 dom 的改变不是直接生成新的 dom 的，因为每次改变都重新生成新的 dom，效率太低，消耗太大。在每次改变 dom 之时，会经历以下过程，diff 函数对比新旧 vn，包括属性值等，确认哪一项变了，则生成一个新的 patch，将改变的项目插入到 dom 中。\n\n   在执行 diff 函数之时，会判断 key 值是否存在，若存在，则采用 map 映射的方式，查找相应的 vn，若不存在则会一个个去遍历 vn，直到找到相应的改变项，由于直接遍历的速度比 map 映射查找的速度慢，所以在最好在 vue dom 中加上 key 值。\n","slug":"key值在vue组件中的作用","published":1,"updated":"2019-11-13T12:18:19.634Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9j002h8ex0mycguqhm","content":"<p>key 值在 vue 组件的作用</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>key 值在 vue 组件中的作用：</p>\n<p>高效利用 dom</p>\n</li>\n<li><p>分析：</p>\n<p>vue 生成 dom 的过程大致是：model -&gt; vn -&gt; diff -&gt; patch -&gt; dom， 这里在生成真实 dom 之前会先生成虚拟 dom，每次 dom 的改变不是直接生成新的 dom 的，因为每次改变都重新生成新的 dom，效率太低，消耗太大。在每次改变 dom 之时，会经历以下过程，diff 函数对比新旧 vn，包括属性值等，确认哪一项变了，则生成一个新的 patch，将改变的项目插入到 dom 中。</p>\n<p>在执行 diff 函数之时，会判断 key 值是否存在，若存在，则采用 map 映射的方式，查找相应的 vn，若不存在则会一个个去遍历 vn，直到找到相应的改变项，由于直接遍历的速度比 map 映射查找的速度慢，所以在最好在 vue dom 中加上 key 值。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>key 值在 vue 组件的作用</p>","more":"<ol>\n<li><p>key 值在 vue 组件中的作用：</p>\n<p>高效利用 dom</p>\n</li>\n<li><p>分析：</p>\n<p>vue 生成 dom 的过程大致是：model -&gt; vn -&gt; diff -&gt; patch -&gt; dom， 这里在生成真实 dom 之前会先生成虚拟 dom，每次 dom 的改变不是直接生成新的 dom 的，因为每次改变都重新生成新的 dom，效率太低，消耗太大。在每次改变 dom 之时，会经历以下过程，diff 函数对比新旧 vn，包括属性值等，确认哪一项变了，则生成一个新的 patch，将改变的项目插入到 dom 中。</p>\n<p>在执行 diff 函数之时，会判断 key 值是否存在，若存在，则采用 map 映射的方式，查找相应的 vn，若不存在则会一个个去遍历 vn，直到找到相应的改变项，由于直接遍历的速度比 map 映射查找的速度慢，所以在最好在 vue dom 中加上 key 值。</p>\n</li>\n</ol>"},{"title":"javaScript-Promise","comments":1,"date":"2018-10-22T11:50:42.000Z","_content":"\npromise 对于管理异步状态很有用，可以串行执行异步任务，也可以并行执行异步任务，下面是一个简单的串行执行一步步任务的例子：\n\n<!--more-->\n\n```js\nlet steps = [\"第一步\", \"第二步\", \"第三步\", \"最后\"];\n\nfunction showStep1(step1) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve => {\n      console.log(step1);\n    }, 500);\n  });\n}\n\nfunction showStep2(step2) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve => {\n      console.log(step2);\n    }, 2000);\n  });\n}\n\nlet test = new Promise((resolve, reject) => {\n  resolve();\n});\n\ntest.then(showStep1(steps[0]));\ntest.then(showStep2(steps[1]));\n```\n","source":"_posts/javaScript-promise.md","raw":"---\ntitle: javaScript-promise\ncomments: true\ndate: 2018-10-22 19:50:42\ncategories: web\ntags: js\n---\n\npromise 对于管理异步状态很有用，可以串行执行异步任务，也可以并行执行异步任务，下面是一个简单的串行执行一步步任务的例子：\n\n<!--more-->\n\n```js\nlet steps = [\"第一步\", \"第二步\", \"第三步\", \"最后\"];\n\nfunction showStep1(step1) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve => {\n      console.log(step1);\n    }, 500);\n  });\n}\n\nfunction showStep2(step2) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve => {\n      console.log(step2);\n    }, 2000);\n  });\n}\n\nlet test = new Promise((resolve, reject) => {\n  resolve();\n});\n\ntest.then(showStep1(steps[0]));\ntest.then(showStep2(steps[1]));\n```\n","slug":"javaScript-promise","published":1,"updated":"2019-11-13T12:16:29.807Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9k002l8ex08stm87e1","content":"<p>promise 对于管理异步状态很有用，可以串行执行异步任务，也可以并行执行异步任务，下面是一个简单的串行执行一步步任务的例子：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> steps = [<span class=\"string\">\"第一步\"</span>, <span class=\"string\">\"第二步\"</span>, <span class=\"string\">\"第三步\"</span>, <span class=\"string\">\"最后\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showStep1</span>(<span class=\"params\">step1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(step1);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showStep2</span>(<span class=\"params\">step2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(step2);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test.then(showStep1(steps[<span class=\"number\">0</span>]));</span><br><span class=\"line\">test.then(showStep2(steps[<span class=\"number\">1</span>]));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>promise 对于管理异步状态很有用，可以串行执行异步任务，也可以并行执行异步任务，下面是一个简单的串行执行一步步任务的例子：</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> steps = [<span class=\"string\">\"第一步\"</span>, <span class=\"string\">\"第二步\"</span>, <span class=\"string\">\"第三步\"</span>, <span class=\"string\">\"最后\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showStep1</span>(<span class=\"params\">step1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(step1);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showStep2</span>(<span class=\"params\">step2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(step2);</span><br><span class=\"line\">    &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  resolve();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test.then(showStep1(steps[<span class=\"number\">0</span>]));</span><br><span class=\"line\">test.then(showStep2(steps[<span class=\"number\">1</span>]));</span><br></pre></td></tr></table></figure>"},{"title":"Linux后台执行脚本","comments":1,"date":"2019-03-20T00:57:29.000Z","_content":"\n最近在弄自己的 OA 系统，需要把 api 处理脚本部署到 linux 服务器上，在配置好环境，在服务器上成功运行代码后，发现一个问题，当我退出命令窗口时，程序就没在执行了，这没有达到永久可以连接 api 的目的，google 了一下之后，了解到要让程序永久运行，可以让程序在后台执行，主要的方法有 nohub、screen、开机启动等，其中 nohub 在关闭命令窗口之时，会关掉程序，去除，开机启动要修改系统配置，个人不太喜欢用这种方法，剩下 screen 了，它是可以让不同的程序在不同的命令窗口中执行，有屏幕分离的模式，会给每个屏幕创建不同的进程，只要不杀死进程，即使离开当前命令窗口，也不会停止程序的运行，所以使用 screen 是最好的方案了。\n\n<!--more-->\n\nscreen 的用法：\n\n```shell\n# 创建并跳转到一个窗口\nscreen -S name\n# 执行程序\npython test.py\n# 退出当前窗口\nctrl a d\n```\n","source":"_posts/linux后台执行脚本.md","raw":"---\ntitle: linux后台执行脚本\ncomments: true\ndate: 2019-03-20 08:57:29\ncategories: 系统\ntags: linux\n---\n\n最近在弄自己的 OA 系统，需要把 api 处理脚本部署到 linux 服务器上，在配置好环境，在服务器上成功运行代码后，发现一个问题，当我退出命令窗口时，程序就没在执行了，这没有达到永久可以连接 api 的目的，google 了一下之后，了解到要让程序永久运行，可以让程序在后台执行，主要的方法有 nohub、screen、开机启动等，其中 nohub 在关闭命令窗口之时，会关掉程序，去除，开机启动要修改系统配置，个人不太喜欢用这种方法，剩下 screen 了，它是可以让不同的程序在不同的命令窗口中执行，有屏幕分离的模式，会给每个屏幕创建不同的进程，只要不杀死进程，即使离开当前命令窗口，也不会停止程序的运行，所以使用 screen 是最好的方案了。\n\n<!--more-->\n\nscreen 的用法：\n\n```shell\n# 创建并跳转到一个窗口\nscreen -S name\n# 执行程序\npython test.py\n# 退出当前窗口\nctrl a d\n```\n","slug":"linux后台执行脚本","published":1,"updated":"2019-11-13T12:18:44.956Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9l002o8ex0kggjfizv","content":"<p>最近在弄自己的 OA 系统，需要把 api 处理脚本部署到 linux 服务器上，在配置好环境，在服务器上成功运行代码后，发现一个问题，当我退出命令窗口时，程序就没在执行了，这没有达到永久可以连接 api 的目的，google 了一下之后，了解到要让程序永久运行，可以让程序在后台执行，主要的方法有 nohub、screen、开机启动等，其中 nohub 在关闭命令窗口之时，会关掉程序，去除，开机启动要修改系统配置，个人不太喜欢用这种方法，剩下 screen 了，它是可以让不同的程序在不同的命令窗口中执行，有屏幕分离的模式，会给每个屏幕创建不同的进程，只要不杀死进程，即使离开当前命令窗口，也不会停止程序的运行，所以使用 screen 是最好的方案了。</p>\n<a id=\"more\"></a>\n<p>screen 的用法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建并跳转到一个窗口</span></span><br><span class=\"line\">screen -S name</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行程序</span></span><br><span class=\"line\">python test.py</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 退出当前窗口</span></span><br><span class=\"line\">ctrl a d</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>最近在弄自己的 OA 系统，需要把 api 处理脚本部署到 linux 服务器上，在配置好环境，在服务器上成功运行代码后，发现一个问题，当我退出命令窗口时，程序就没在执行了，这没有达到永久可以连接 api 的目的，google 了一下之后，了解到要让程序永久运行，可以让程序在后台执行，主要的方法有 nohub、screen、开机启动等，其中 nohub 在关闭命令窗口之时，会关掉程序，去除，开机启动要修改系统配置，个人不太喜欢用这种方法，剩下 screen 了，它是可以让不同的程序在不同的命令窗口中执行，有屏幕分离的模式，会给每个屏幕创建不同的进程，只要不杀死进程，即使离开当前命令窗口，也不会停止程序的运行，所以使用 screen 是最好的方案了。</p>","more":"<p>screen 的用法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建并跳转到一个窗口</span></span><br><span class=\"line\">screen -S name</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 执行程序</span></span><br><span class=\"line\">python test.py</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 退出当前窗口</span></span><br><span class=\"line\">ctrl a d</span><br></pre></td></tr></table></figure>"},{"title":"N * N 阶矩阵算法 ","comments":1,"date":"2018-07-30T13:42:14.000Z","_content":"\nn \\* n 阶矩阵的解法有几种方式，分而治之、暴力破解等，我这里用的方法就是暴力破解的方法，时间和空间复杂度肯定是比较差的，不过能快速获得结果而已\n\n<!--more-->\n\nn \\* n 阶矩阵的解法有几种方式，分而治之、暴力破解等，我这里用的方法就是暴力破解的方法，时间和空间复杂度肯定是比较差的，不过能快速获得结果而已，用 js 的实现代码如下：\n\n````js\nfunction matrix(A, B) {\n    var n = A.length;\n    var C = [];\n    for ( var i = 0; i < n; i++ ){\n        C[i] = [];\n        for( var j = 0; j < n; j++ ){\n            C[i][j] = 0;\n            for( var k = 0; k < n; k++ ){\n                C[i][j] += A[i][k] * B[k][j];\n            }\n        }\n    }\n    console.log(C);\n}\nmatrix([[1,2], [3, 4]], [[3, 2], [1, 4]]);\n//[ [ 5, 10 ], [ 13, 22 ] ]\n```\n````\n","source":"_posts/n-n-阶矩阵算法.md","raw":"---\ntitle: \"n * n 阶矩阵算法 \"\ncomments: true\ndate: 2018-07-30 21:42:14\ncategories: 算法\ntags: 矩阵\n---\n\nn \\* n 阶矩阵的解法有几种方式，分而治之、暴力破解等，我这里用的方法就是暴力破解的方法，时间和空间复杂度肯定是比较差的，不过能快速获得结果而已\n\n<!--more-->\n\nn \\* n 阶矩阵的解法有几种方式，分而治之、暴力破解等，我这里用的方法就是暴力破解的方法，时间和空间复杂度肯定是比较差的，不过能快速获得结果而已，用 js 的实现代码如下：\n\n````js\nfunction matrix(A, B) {\n    var n = A.length;\n    var C = [];\n    for ( var i = 0; i < n; i++ ){\n        C[i] = [];\n        for( var j = 0; j < n; j++ ){\n            C[i][j] = 0;\n            for( var k = 0; k < n; k++ ){\n                C[i][j] += A[i][k] * B[k][j];\n            }\n        }\n    }\n    console.log(C);\n}\nmatrix([[1,2], [3, 4]], [[3, 2], [1, 4]]);\n//[ [ 5, 10 ], [ 13, 22 ] ]\n```\n````\n","slug":"n-n-阶矩阵算法","published":1,"updated":"2019-11-13T12:19:49.415Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9m002s8ex05t26z5h2","content":"<p>n * n 阶矩阵的解法有几种方式，分而治之、暴力破解等，我这里用的方法就是暴力破解的方法，时间和空间复杂度肯定是比较差的，不过能快速获得结果而已</p>\n<a id=\"more\"></a>\n<p>n * n 阶矩阵的解法有几种方式，分而治之、暴力破解等，我这里用的方法就是暴力破解的方法，时间和空间复杂度肯定是比较差的，不过能快速获得结果而已，用 js 的实现代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matrix</span>(<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = A.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> C = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++ )&#123;</span><br><span class=\"line\">        C[i] = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; n; j++ )&#123;</span><br><span class=\"line\">            C[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; n; k++ )&#123;</span><br><span class=\"line\">                C[i][j] += A[i][k] * B[k][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(C);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">matrix([[<span class=\"number\">1</span>,<span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]], [[<span class=\"number\">3</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">4</span>]]);</span><br><span class=\"line\"><span class=\"comment\">//[ [ 5, 10 ], [ 13, 22 ] ]</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>n * n 阶矩阵的解法有几种方式，分而治之、暴力破解等，我这里用的方法就是暴力破解的方法，时间和空间复杂度肯定是比较差的，不过能快速获得结果而已</p>","more":"<p>n * n 阶矩阵的解法有几种方式，分而治之、暴力破解等，我这里用的方法就是暴力破解的方法，时间和空间复杂度肯定是比较差的，不过能快速获得结果而已，用 js 的实现代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">matrix</span>(<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> n = A.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> C = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n; i++ )&#123;</span><br><span class=\"line\">        C[i] = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; n; j++ )&#123;</span><br><span class=\"line\">            C[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; n; k++ )&#123;</span><br><span class=\"line\">                C[i][j] += A[i][k] * B[k][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(C);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">matrix([[<span class=\"number\">1</span>,<span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]], [[<span class=\"number\">3</span>, <span class=\"number\">2</span>], [<span class=\"number\">1</span>, <span class=\"number\">4</span>]]);</span><br><span class=\"line\"><span class=\"comment\">//[ [ 5, 10 ], [ 13, 22 ] ]</span></span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>"},{"title":"javaScript 函数","comments":1,"date":"2018-10-22T11:51:48.000Z","_content":"\njs 函数概述\n\n<!--more-->\n\n1. **箭头函数**： 相当于匿名函数的简写，不同之处在于及箭头函数的 this 指向的是当前的词法作用域，也就是说省去了写 `var that = this` 的过程，可以直接使用 this；\n\n2. **generator**：类似 python 的生成器，不同的是，python 的生成器一般是写在 list 里，而 es6 的 generator 是写在函数里，形如：function\\*() {}，yield 在 generator 里可以多次返回函数值，而不用像 functoin 一样进行多次调用；\n\n   ```js\n   //裴波那契数列\n   function* fib(max) {\n     var t,\n       a = 0,\n       b = 1,\n       n = 0;\n     while (n < max) {\n       yield a;\n       [a, b] = [b, a + b];\n       n++;\n     }\n     return;\n   }\n\n   for (var x of fib(10)) {\n     console.log(x);\n   }\n   ```\n\n3. **解构赋值**：简化代码的一种手段，可以同时对多个变量进行赋值操作，上面的代码 `[a, b] = [b, a + b]` 就用到了解构赋值，再把上面的示例代码用解构赋值改一下，得到如下代码：\n\n   ```js\n   function* fib(max) {\n     var t;\n     var [a, b, n] = [0, 1, 0];\n     while (n < max) {\n       yield a;\n       [a, b] = [b, a + b];\n       n++;\n     }\n     return;\n   }\n\n   for (var x of fib(10)) {\n     console.log(x);\n   }\n   ```\n\n4. **闭包**: 通常别人都会说闭包是用来延长函数作用域链的，但是听到这个词往往会使人一脸蒙蔽，廖雪峰的 js 教程中说闭包有以下功用：延迟执行函数、 多参数的函数变成单参数的函数、封装私有变量，个人感觉还是比较通俗易懂的，下面是相关代码示例：\n\n   ```js\n   // 闭包 | 延迟执行函数\n   function lazy_sum(arr) {\n     let sum = function() {\n       return arr.reduce((x, y) => x + y);\n     };\n     return sum;\n   }\n   let f = lazy_sum([1, 2, 3, 4, 5]);\n   // console.log(f);\n   // console.log(f());\n\n   // 闭包 | 多参数的函数变成单参数的函数\n   function make_pow(n) {\n     return function(x) {\n       return Math.pow(x, n);\n     };\n   }\n   let pow2 = make_pow(2);\n   let pow3 = make_pow(3);\n   // console.log(pow2(5));\n   // console.log(pow3(7));\n\n   // 闭包 | 封装私有变量（可以考虑用这种方法进行状态管理）\n   function create_counter(innitial) {\n     let x = innitial || 0;\n     return {\n       inc: () => {\n         x += 1;\n         return x;\n       }\n     };\n   }\n   let c1 = create_counter();\n   for (let i = 0; i < 5; i++) {\n     let x = c1.inc();\n     //   console.log(x);\n   }\n   let c2 = create_counter(10);\n   for (let i = 0; i < 5; i++) {\n     let x = c2.inc();\n     //   console.log(x);\n   }\n   ```\n\n5. **map**: 将一个函数作用在一个数组上，接收带一个参数的函数，是 array 的一个方法，可以方便快捷的对数组进行运算，省略循环过程，示例代码如下：\n   ```js\n   function pow(x) {\n     return Math.pow(x, 2);\n   }\n   let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n   let results = arr.map(pow);\n   console.log(results);\n   ```\n6. **reduce**: 将一个函数作用在一个数组上，接收带两个参数的函数，对函数的结果做累积计算，可以方便快捷的对数组进行运算，省略循环过程，示例代码如下:\n   ```js\n   let arr1 = [1, 3, 5, 7, 9];\n   let mul = arr1.reduce((x, y) => x * y);\n   console.log(mul);\n   ```\n7. **filter**: 过滤数组元素，接收一个函数作为参数，函数内容为过滤条件。filter 的回调函数可以接收多个参数，element 参数返回的是数组的元素，index 返回数组元素的索引，self 参数返回整个数组，相关示例代码如下：\n   ```js\n   // 过滤偶元素\n   let arr2 = [1, 2, 4, 5, 6, 9, 10, 15];\n   let r = arr2.filter(x => x % 2 !== 0);\n   // console.log(r);\n   // 过滤空字符串\n   let arr3 = [\"A\", \"B\", null, undefined, \"C\", \"\"];\n   let r1 = arr3.filter(s => s && s.trim());\n   // console.log(r1);\n   // 利用回调函数去除数组中的重复元素\n   let arr4 = [\n     \"apple\",\n     \"strawberry\",\n     \"banana\",\n     \"pear\",\n     \"apple\",\n     \"orange\",\n     \"orange\",\n     \"strawberry\"\n   ];\n   let r2 = arr4.filter((element, index, self) => {\n     return self.indexOf(element) === index;\n   });\n   // console.log(r2);\n   ```\n8. **sort**：排序方法，直接修改原来的数组，默认是把数组元素转换为字符串进行排序，接收有一个函数作为参数，函数内容是排序规则，示例代码如下：\n   ```js\n   // 数字按从大到小排序\n   let nums = [10, 20, 1, 2];\n   nums.sort((x, y) => {\n     if (x < y) {\n       return -1;\n     }\n     if (x > y) {\n       return 1;\n     }\n     return 0;\n   });\n   console.log(nums);\n   ```\n","source":"_posts/javaScript函数.md","raw":"---\ntitle: javaScript 函数\ncomments: true\ndate: 2018-10-22 19:51:48\ncategories: web\ntags: js\n---\n\njs 函数概述\n\n<!--more-->\n\n1. **箭头函数**： 相当于匿名函数的简写，不同之处在于及箭头函数的 this 指向的是当前的词法作用域，也就是说省去了写 `var that = this` 的过程，可以直接使用 this；\n\n2. **generator**：类似 python 的生成器，不同的是，python 的生成器一般是写在 list 里，而 es6 的 generator 是写在函数里，形如：function\\*() {}，yield 在 generator 里可以多次返回函数值，而不用像 functoin 一样进行多次调用；\n\n   ```js\n   //裴波那契数列\n   function* fib(max) {\n     var t,\n       a = 0,\n       b = 1,\n       n = 0;\n     while (n < max) {\n       yield a;\n       [a, b] = [b, a + b];\n       n++;\n     }\n     return;\n   }\n\n   for (var x of fib(10)) {\n     console.log(x);\n   }\n   ```\n\n3. **解构赋值**：简化代码的一种手段，可以同时对多个变量进行赋值操作，上面的代码 `[a, b] = [b, a + b]` 就用到了解构赋值，再把上面的示例代码用解构赋值改一下，得到如下代码：\n\n   ```js\n   function* fib(max) {\n     var t;\n     var [a, b, n] = [0, 1, 0];\n     while (n < max) {\n       yield a;\n       [a, b] = [b, a + b];\n       n++;\n     }\n     return;\n   }\n\n   for (var x of fib(10)) {\n     console.log(x);\n   }\n   ```\n\n4. **闭包**: 通常别人都会说闭包是用来延长函数作用域链的，但是听到这个词往往会使人一脸蒙蔽，廖雪峰的 js 教程中说闭包有以下功用：延迟执行函数、 多参数的函数变成单参数的函数、封装私有变量，个人感觉还是比较通俗易懂的，下面是相关代码示例：\n\n   ```js\n   // 闭包 | 延迟执行函数\n   function lazy_sum(arr) {\n     let sum = function() {\n       return arr.reduce((x, y) => x + y);\n     };\n     return sum;\n   }\n   let f = lazy_sum([1, 2, 3, 4, 5]);\n   // console.log(f);\n   // console.log(f());\n\n   // 闭包 | 多参数的函数变成单参数的函数\n   function make_pow(n) {\n     return function(x) {\n       return Math.pow(x, n);\n     };\n   }\n   let pow2 = make_pow(2);\n   let pow3 = make_pow(3);\n   // console.log(pow2(5));\n   // console.log(pow3(7));\n\n   // 闭包 | 封装私有变量（可以考虑用这种方法进行状态管理）\n   function create_counter(innitial) {\n     let x = innitial || 0;\n     return {\n       inc: () => {\n         x += 1;\n         return x;\n       }\n     };\n   }\n   let c1 = create_counter();\n   for (let i = 0; i < 5; i++) {\n     let x = c1.inc();\n     //   console.log(x);\n   }\n   let c2 = create_counter(10);\n   for (let i = 0; i < 5; i++) {\n     let x = c2.inc();\n     //   console.log(x);\n   }\n   ```\n\n5. **map**: 将一个函数作用在一个数组上，接收带一个参数的函数，是 array 的一个方法，可以方便快捷的对数组进行运算，省略循环过程，示例代码如下：\n   ```js\n   function pow(x) {\n     return Math.pow(x, 2);\n   }\n   let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n   let results = arr.map(pow);\n   console.log(results);\n   ```\n6. **reduce**: 将一个函数作用在一个数组上，接收带两个参数的函数，对函数的结果做累积计算，可以方便快捷的对数组进行运算，省略循环过程，示例代码如下:\n   ```js\n   let arr1 = [1, 3, 5, 7, 9];\n   let mul = arr1.reduce((x, y) => x * y);\n   console.log(mul);\n   ```\n7. **filter**: 过滤数组元素，接收一个函数作为参数，函数内容为过滤条件。filter 的回调函数可以接收多个参数，element 参数返回的是数组的元素，index 返回数组元素的索引，self 参数返回整个数组，相关示例代码如下：\n   ```js\n   // 过滤偶元素\n   let arr2 = [1, 2, 4, 5, 6, 9, 10, 15];\n   let r = arr2.filter(x => x % 2 !== 0);\n   // console.log(r);\n   // 过滤空字符串\n   let arr3 = [\"A\", \"B\", null, undefined, \"C\", \"\"];\n   let r1 = arr3.filter(s => s && s.trim());\n   // console.log(r1);\n   // 利用回调函数去除数组中的重复元素\n   let arr4 = [\n     \"apple\",\n     \"strawberry\",\n     \"banana\",\n     \"pear\",\n     \"apple\",\n     \"orange\",\n     \"orange\",\n     \"strawberry\"\n   ];\n   let r2 = arr4.filter((element, index, self) => {\n     return self.indexOf(element) === index;\n   });\n   // console.log(r2);\n   ```\n8. **sort**：排序方法，直接修改原来的数组，默认是把数组元素转换为字符串进行排序，接收有一个函数作为参数，函数内容是排序规则，示例代码如下：\n   ```js\n   // 数字按从大到小排序\n   let nums = [10, 20, 1, 2];\n   nums.sort((x, y) => {\n     if (x < y) {\n       return -1;\n     }\n     if (x > y) {\n       return 1;\n     }\n     return 0;\n   });\n   console.log(nums);\n   ```\n","slug":"javaScript函数","published":1,"updated":"2019-11-13T12:16:47.987Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9n002v8ex0pte2p72e","content":"<p>js 函数概述</p>\n<a id=\"more\"></a>\n<ol>\n<li><p><strong>箭头函数</strong>： 相当于匿名函数的简写，不同之处在于及箭头函数的 this 指向的是当前的词法作用域，也就是说省去了写 <code>var that = this</code> 的过程，可以直接使用 this；</p>\n</li>\n<li><p><strong>generator</strong>：类似 python 的生成器，不同的是，python 的生成器一般是写在 list 里，而 es6 的 generator 是写在函数里，形如：function*() {}，yield 在 generator 里可以多次返回函数值，而不用像 functoin 一样进行多次调用；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//裴波那契数列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fib</span>(<span class=\"params\">max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t,</span><br><span class=\"line\">    a = <span class=\"number\">0</span>,</span><br><span class=\"line\">    b = <span class=\"number\">1</span>,</span><br><span class=\"line\">    n = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n &lt; max) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;</span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">    n++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> fib(<span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>解构赋值</strong>：简化代码的一种手段，可以同时对多个变量进行赋值操作，上面的代码 <code>[a, b] = [b, a + b]</code> 就用到了解构赋值，再把上面的示例代码用解构赋值改一下，得到如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fib</span>(<span class=\"params\">max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> [a, b, n] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n &lt; max) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;</span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">    n++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> fib(<span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>闭包</strong>: 通常别人都会说闭包是用来延长函数作用域链的，但是听到这个词往往会使人一脸蒙蔽，廖雪峰的 js 教程中说闭包有以下功用：延迟执行函数、 多参数的函数变成单参数的函数、封装私有变量，个人感觉还是比较通俗易懂的，下面是相关代码示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包 | 延迟执行函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lazy_sum</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> f = lazy_sum([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"><span class=\"comment\">// console.log(f);</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(f());</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 闭包 | 多参数的函数变成单参数的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">make_pow</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.pow(x, n);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pow2 = make_pow(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> pow3 = make_pow(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// console.log(pow2(5));</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(pow3(7));</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 闭包 | 封装私有变量（可以考虑用这种方法进行状态管理）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create_counter</span>(<span class=\"params\">innitial</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = innitial || <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    inc: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      x += <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c1 = create_counter();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = c1.inc();</span><br><span class=\"line\">  <span class=\"comment\">//   console.log(x);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c2 = create_counter(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = c2.inc();</span><br><span class=\"line\">  <span class=\"comment\">//   console.log(x);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>map</strong>: 将一个函数作用在一个数组上，接收带一个参数的函数，是 array 的一个方法，可以方便快捷的对数组进行运算，省略循环过程，示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pow</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.pow(x, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> results = arr.map(pow);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(results);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>reduce</strong>: 将一个函数作用在一个数组上，接收带两个参数的函数，对函数的结果做累积计算，可以方便快捷的对数组进行运算，省略循环过程，示例代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> mul = arr1.reduce(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x * y);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mul);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>filter</strong>: 过滤数组元素，接收一个函数作为参数，函数内容为过滤条件。filter 的回调函数可以接收多个参数，element 参数返回的是数组的元素，index 返回数组元素的索引，self 参数返回整个数组，相关示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 过滤偶元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> r = arr2.filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> !== <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// console.log(r);</span></span><br><span class=\"line\"><span class=\"comment\">// 过滤空字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = [<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = arr3.filter(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s &amp;&amp; s.trim());</span><br><span class=\"line\"><span class=\"comment\">// console.log(r1);</span></span><br><span class=\"line\"><span class=\"comment\">// 利用回调函数去除数组中的重复元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = [</span><br><span class=\"line\">  <span class=\"string\">\"apple\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"strawberry\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"banana\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"pear\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"apple\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"orange\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"orange\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"strawberry\"</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">let</span> r2 = arr4.filter(<span class=\"function\">(<span class=\"params\">element, index, self</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> self.indexOf(element) === index;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// console.log(r2);</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>sort</strong>：排序方法，直接修改原来的数组，默认是把数组元素转换为字符串进行排序，接收有一个函数作为参数，函数内容是排序规则，示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数字按从大到小排序</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nums = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">nums.sort(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nums);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>js 函数概述</p>","more":"<ol>\n<li><p><strong>箭头函数</strong>： 相当于匿名函数的简写，不同之处在于及箭头函数的 this 指向的是当前的词法作用域，也就是说省去了写 <code>var that = this</code> 的过程，可以直接使用 this；</p>\n</li>\n<li><p><strong>generator</strong>：类似 python 的生成器，不同的是，python 的生成器一般是写在 list 里，而 es6 的 generator 是写在函数里，形如：function*() {}，yield 在 generator 里可以多次返回函数值，而不用像 functoin 一样进行多次调用；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//裴波那契数列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fib</span>(<span class=\"params\">max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t,</span><br><span class=\"line\">    a = <span class=\"number\">0</span>,</span><br><span class=\"line\">    b = <span class=\"number\">1</span>,</span><br><span class=\"line\">    n = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n &lt; max) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;</span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">    n++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> fib(<span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>解构赋值</strong>：简化代码的一种手段，可以同时对多个变量进行赋值操作，上面的代码 <code>[a, b] = [b, a + b]</code> 就用到了解构赋值，再把上面的示例代码用解构赋值改一下，得到如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fib</span>(<span class=\"params\">max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> [a, b, n] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (n &lt; max) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;</span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">    n++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x <span class=\"keyword\">of</span> fib(<span class=\"number\">10</span>)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>闭包</strong>: 通常别人都会说闭包是用来延长函数作用域链的，但是听到这个词往往会使人一脸蒙蔽，廖雪峰的 js 教程中说闭包有以下功用：延迟执行函数、 多参数的函数变成单参数的函数、封装私有变量，个人感觉还是比较通俗易懂的，下面是相关代码示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 闭包 | 延迟执行函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lazy_sum</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x + y);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> f = lazy_sum([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"><span class=\"comment\">// console.log(f);</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(f());</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 闭包 | 多参数的函数变成单参数的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">make_pow</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.pow(x, n);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pow2 = make_pow(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> pow3 = make_pow(<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"comment\">// console.log(pow2(5));</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(pow3(7));</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 闭包 | 封装私有变量（可以考虑用这种方法进行状态管理）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create_counter</span>(<span class=\"params\">innitial</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = innitial || <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    inc: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      x += <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c1 = create_counter();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = c1.inc();</span><br><span class=\"line\">  <span class=\"comment\">//   console.log(x);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c2 = create_counter(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = c2.inc();</span><br><span class=\"line\">  <span class=\"comment\">//   console.log(x);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>map</strong>: 将一个函数作用在一个数组上，接收带一个参数的函数，是 array 的一个方法，可以方便快捷的对数组进行运算，省略循环过程，示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pow</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.pow(x, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> results = arr.map(pow);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(results);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>reduce</strong>: 将一个函数作用在一个数组上，接收带两个参数的函数，对函数的结果做累积计算，可以方便快捷的对数组进行运算，省略循环过程，示例代码如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> mul = arr1.reduce(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> x * y);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mul);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>filter</strong>: 过滤数组元素，接收一个函数作为参数，函数内容为过滤条件。filter 的回调函数可以接收多个参数，element 参数返回的是数组的元素，index 返回数组元素的索引，self 参数返回整个数组，相关示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 过滤偶元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> r = arr2.filter(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x % <span class=\"number\">2</span> !== <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// console.log(r);</span></span><br><span class=\"line\"><span class=\"comment\">// 过滤空字符串</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = [<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"literal\">null</span>, <span class=\"literal\">undefined</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> r1 = arr3.filter(<span class=\"function\"><span class=\"params\">s</span> =&gt;</span> s &amp;&amp; s.trim());</span><br><span class=\"line\"><span class=\"comment\">// console.log(r1);</span></span><br><span class=\"line\"><span class=\"comment\">// 利用回调函数去除数组中的重复元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = [</span><br><span class=\"line\">  <span class=\"string\">\"apple\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"strawberry\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"banana\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"pear\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"apple\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"orange\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"orange\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"strawberry\"</span></span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">let</span> r2 = arr4.filter(<span class=\"function\">(<span class=\"params\">element, index, self</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> self.indexOf(element) === index;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// console.log(r2);</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>sort</strong>：排序方法，直接修改原来的数组，默认是把数组元素转换为字符串进行排序，接收有一个函数作为参数，函数内容是排序规则，示例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数字按从大到小排序</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nums = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">nums.sort(<span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(nums);</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"javaScript 面向对象编程","comments":1,"date":"2018-10-22T11:52:57.000Z","_content":"\njs 面向对象编程概述\n\n<!--more-->\n\n1. **构造函数创建、继承和扩展类**：为了区分普通函数与构造函数，构造函数首字母大写，构造函数创建类，并进行类的继承和派生，相比于接下来要说的 class 创建、继承和派生类而言，略显得复杂。\n\n   - **构造函数创建类**：通过一个构造函数创建一个原始类 => 给原始类定义基本属性和原型方法，通过 new 构造函数，初始化一个新的类；\n\n     ```js\n     function Student(props) {\n       this.name = props.name || \"匿名\";\n       this.grade = props.grade || 1;\n     }\n     Student.prototype.hello = function() {\n       console.log(`Hello ${this.name}!`);\n     };\n\n     function createStudent(props) {\n       return new Student(props || {});\n     }\n     let xiaoming = createStudent({\n       name: \"小明\"\n     });\n     // console.log(xiaoming.grade);\n     // xiaoming.hello()\n     ```\n\n     ```\n\n     ```\n\n   - **构造函数继承类**：属性的继承，利用函数的 call 方法，调用上一个构造函数创建的类，参数传入相应的属性以及 this 值，原型方法的继承，通过创建一个空的对象原型作为中介，把父类的原型方法传递给子类，实现子类继承父类的目的；\n\n     ```js\n     // 原型继承\n     function inherits(Child, Parent) {\n       let F = function() {};\n       F.prototype = Parent.prototype;\n       Child.prototype = new F();\n       Child.constructor = Child;\n     }\n\n     function Student(props) {\n       this.name = props.name || \"Unnamed\";\n     }\n\n     Student.prototype.hello = function() {\n       console.log(`Hello ${this.name}!`);\n     };\n\n     function PrimaryStudent(props) {\n       // 继承 student name\n       Student.call(this, props);\n       this.grade = props.grade || 1;\n     }\n     // 原型方法继承\n     inherits(PrimaryStudent, Student);\n     ```\n\n     ```\n\n     ```\n\n   - **构造函数扩展类**：在原型上添加新的方法，即可；\n\n     ```js\n     PrimaryStudent.prototype.getGrade = function() {\n       return this.grade;\n     };\n     ```\n\n     ```\n\n     ```\n\n2. **class 关键字创建、继承和派生类**：class 关键字是 es6 提出来的，极大的便利了 javaScript 类的操作，实例代码如下：\n   ```js\n   // 创建类\n   class Teacher {\n     constructor(name) {\n       this.name = name;\n     }\n     hello() {\n       console.log(`Hello ${this.name}!`);\n     }\n   }\n   let xiaojun = new Teacher(\"小君\");\n   xiaojun.hello();\n   // 类派生\n   class PrimaryTeacher extends Teacher {\n     constructor(name, grade) {\n       // 调用父类的构造函数\n       super(name);\n       this.grade = grade;\n     }\n     myGrade() {\n       console.log(`I am at grade ${this.grade}!`);\n     }\n   }\n   let xiaohong = new PrimaryTeacher(\"小红\", 3);\n   xiaohong.myGrade();\n   ```\n","source":"_posts/javaScript面向对象编程.md","raw":"---\ntitle: javaScript 面向对象编程\ncomments: true\ndate: 2018-10-22 19:52:57\ncategories: web\ntags: js\n---\n\njs 面向对象编程概述\n\n<!--more-->\n\n1. **构造函数创建、继承和扩展类**：为了区分普通函数与构造函数，构造函数首字母大写，构造函数创建类，并进行类的继承和派生，相比于接下来要说的 class 创建、继承和派生类而言，略显得复杂。\n\n   - **构造函数创建类**：通过一个构造函数创建一个原始类 => 给原始类定义基本属性和原型方法，通过 new 构造函数，初始化一个新的类；\n\n     ```js\n     function Student(props) {\n       this.name = props.name || \"匿名\";\n       this.grade = props.grade || 1;\n     }\n     Student.prototype.hello = function() {\n       console.log(`Hello ${this.name}!`);\n     };\n\n     function createStudent(props) {\n       return new Student(props || {});\n     }\n     let xiaoming = createStudent({\n       name: \"小明\"\n     });\n     // console.log(xiaoming.grade);\n     // xiaoming.hello()\n     ```\n\n     ```\n\n     ```\n\n   - **构造函数继承类**：属性的继承，利用函数的 call 方法，调用上一个构造函数创建的类，参数传入相应的属性以及 this 值，原型方法的继承，通过创建一个空的对象原型作为中介，把父类的原型方法传递给子类，实现子类继承父类的目的；\n\n     ```js\n     // 原型继承\n     function inherits(Child, Parent) {\n       let F = function() {};\n       F.prototype = Parent.prototype;\n       Child.prototype = new F();\n       Child.constructor = Child;\n     }\n\n     function Student(props) {\n       this.name = props.name || \"Unnamed\";\n     }\n\n     Student.prototype.hello = function() {\n       console.log(`Hello ${this.name}!`);\n     };\n\n     function PrimaryStudent(props) {\n       // 继承 student name\n       Student.call(this, props);\n       this.grade = props.grade || 1;\n     }\n     // 原型方法继承\n     inherits(PrimaryStudent, Student);\n     ```\n\n     ```\n\n     ```\n\n   - **构造函数扩展类**：在原型上添加新的方法，即可；\n\n     ```js\n     PrimaryStudent.prototype.getGrade = function() {\n       return this.grade;\n     };\n     ```\n\n     ```\n\n     ```\n\n2. **class 关键字创建、继承和派生类**：class 关键字是 es6 提出来的，极大的便利了 javaScript 类的操作，实例代码如下：\n   ```js\n   // 创建类\n   class Teacher {\n     constructor(name) {\n       this.name = name;\n     }\n     hello() {\n       console.log(`Hello ${this.name}!`);\n     }\n   }\n   let xiaojun = new Teacher(\"小君\");\n   xiaojun.hello();\n   // 类派生\n   class PrimaryTeacher extends Teacher {\n     constructor(name, grade) {\n       // 调用父类的构造函数\n       super(name);\n       this.grade = grade;\n     }\n     myGrade() {\n       console.log(`I am at grade ${this.grade}!`);\n     }\n   }\n   let xiaohong = new PrimaryTeacher(\"小红\", 3);\n   xiaohong.myGrade();\n   ```\n","slug":"javaScript面向对象编程","published":1,"updated":"2019-11-13T12:17:09.678Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9o002y8ex0dppuxsqg","content":"<p>js 面向对象编程概述</p>\n<a id=\"more\"></a>\n<ol>\n<li><p><strong>构造函数创建、继承和扩展类</strong>：为了区分普通函数与构造函数，构造函数首字母大写，构造函数创建类，并进行类的继承和派生，相比于接下来要说的 class 创建、继承和派生类而言，略显得复杂。</p>\n<ul>\n<li><p><strong>构造函数创建类</strong>：通过一个构造函数创建一个原始类 =&gt; 给原始类定义基本属性和原型方法，通过 new 构造函数，初始化一个新的类；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = props.name || <span class=\"string\">\"匿名\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grade = props.grade || <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Student.prototype.hello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>!`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStudent</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Student(props || &#123;&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xiaoming = createStudent(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"小明\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// console.log(xiaoming.grade);</span></span><br><span class=\"line\"><span class=\"comment\">// xiaoming.hello()</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>构造函数继承类</strong>：属性的继承，利用函数的 call 方法，调用上一个构造函数创建的类，参数传入相应的属性以及 this 值，原型方法的继承，通过创建一个空的对象原型作为中介，把父类的原型方法传递给子类，实现子类继承父类的目的；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原型继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherits</span>(<span class=\"params\">Child, Parent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  F.prototype = Parent.prototype;</span><br><span class=\"line\">  Child.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">  Child.constructor = Child;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = props.name || <span class=\"string\">\"Unnamed\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype.hello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>!`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PrimaryStudent</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 继承 student name</span></span><br><span class=\"line\">  Student.call(<span class=\"keyword\">this</span>, props);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grade = props.grade || <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 原型方法继承</span></span><br><span class=\"line\">inherits(PrimaryStudent, Student);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>构造函数扩展类</strong>：在原型上添加新的方法，即可；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PrimaryStudent.prototype.getGrade = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.grade;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>class 关键字创建、继承和派生类</strong>：class 关键字是 es6 提出来的，极大的便利了 javaScript 类的操作，实例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hello() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xiaojun = <span class=\"keyword\">new</span> Teacher(<span class=\"string\">\"小君\"</span>);</span><br><span class=\"line\">xiaojun.hello();</span><br><span class=\"line\"><span class=\"comment\">// 类派生</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimaryTeacher</span> <span class=\"keyword\">extends</span> <span class=\"title\">Teacher</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, grade) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用父类的构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.grade = grade;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  myGrade() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`I am at grade <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.grade&#125;</span>!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xiaohong = <span class=\"keyword\">new</span> PrimaryTeacher(<span class=\"string\">\"小红\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">xiaohong.myGrade();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>js 面向对象编程概述</p>","more":"<ol>\n<li><p><strong>构造函数创建、继承和扩展类</strong>：为了区分普通函数与构造函数，构造函数首字母大写，构造函数创建类，并进行类的继承和派生，相比于接下来要说的 class 创建、继承和派生类而言，略显得复杂。</p>\n<ul>\n<li><p><strong>构造函数创建类</strong>：通过一个构造函数创建一个原始类 =&gt; 给原始类定义基本属性和原型方法，通过 new 构造函数，初始化一个新的类；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = props.name || <span class=\"string\">\"匿名\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grade = props.grade || <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Student.prototype.hello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>!`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createStudent</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Student(props || &#123;&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xiaoming = createStudent(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"小明\"</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// console.log(xiaoming.grade);</span></span><br><span class=\"line\"><span class=\"comment\">// xiaoming.hello()</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>构造函数继承类</strong>：属性的继承，利用函数的 call 方法，调用上一个构造函数创建的类，参数传入相应的属性以及 this 值，原型方法的继承，通过创建一个空的对象原型作为中介，把父类的原型方法传递给子类，实现子类继承父类的目的；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原型继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inherits</span>(<span class=\"params\">Child, Parent</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> F = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  F.prototype = Parent.prototype;</span><br><span class=\"line\">  Child.prototype = <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">  Child.constructor = Child;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = props.name || <span class=\"string\">\"Unnamed\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Student.prototype.hello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>!`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PrimaryStudent</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 继承 student name</span></span><br><span class=\"line\">  Student.call(<span class=\"keyword\">this</span>, props);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grade = props.grade || <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 原型方法继承</span></span><br><span class=\"line\">inherits(PrimaryStudent, Student);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>构造函数扩展类</strong>：在原型上添加新的方法，即可；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PrimaryStudent.prototype.getGrade = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.grade;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>class 关键字创建、继承和派生类</strong>：class 关键字是 es6 提出来的，极大的便利了 javaScript 类的操作，实例代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Teacher</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  hello() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.name&#125;</span>!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xiaojun = <span class=\"keyword\">new</span> Teacher(<span class=\"string\">\"小君\"</span>);</span><br><span class=\"line\">xiaojun.hello();</span><br><span class=\"line\"><span class=\"comment\">// 类派生</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PrimaryTeacher</span> <span class=\"keyword\">extends</span> <span class=\"title\">Teacher</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(name, grade) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用父类的构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.grade = grade;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  myGrade() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`I am at grade <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.grade&#125;</span>!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> xiaohong = <span class=\"keyword\">new</span> PrimaryTeacher(<span class=\"string\">\"小红\"</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">xiaohong.myGrade();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"nodeJs 配置","date":"2017-05-09T08:56:44.000Z","comments":1,"_content":"\nnodeJs 配置\n\n<!--more-->\n\n1. 下载 node.js 安装包，下载地址： https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi， 双击安装包，开始安装，一路 next 就行；\n\n2. 检测 PATH 环境变量是否配置了 node.js，进入 cmd 界面，输入 path 命令，结果中环境变量出现了 nodeJS 字眼，说明环境变量配置成功了；\n\n3. 运行 node -v 命令，检测 node.js 版本，查看是否安装成功；\n\n4. 运行 npm -v 命令，检测 npm 版本，查看是否安装成功；\n","source":"_posts/nodeJs配置.md","raw":"---\ntitle: nodeJs 配置\ndate: 2017-05-09 16:56:44\ncategories: web\ntags: nodeJs\ncomments: true\n---\n\nnodeJs 配置\n\n<!--more-->\n\n1. 下载 node.js 安装包，下载地址： https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi， 双击安装包，开始安装，一路 next 就行；\n\n2. 检测 PATH 环境变量是否配置了 node.js，进入 cmd 界面，输入 path 命令，结果中环境变量出现了 nodeJS 字眼，说明环境变量配置成功了；\n\n3. 运行 node -v 命令，检测 node.js 版本，查看是否安装成功；\n\n4. 运行 npm -v 命令，检测 npm 版本，查看是否安装成功；\n","slug":"nodeJs配置","published":1,"updated":"2019-11-13T12:20:46.965Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9p00318ex02hl0ykgj","content":"<p>nodeJs 配置</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>下载 node.js 安装包，下载地址： <a href=\"https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi，\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi，</a> 双击安装包，开始安装，一路 next 就行；</p>\n</li>\n<li><p>检测 PATH 环境变量是否配置了 node.js，进入 cmd 界面，输入 path 命令，结果中环境变量出现了 nodeJS 字眼，说明环境变量配置成功了；</p>\n</li>\n<li><p>运行 node -v 命令，检测 node.js 版本，查看是否安装成功；</p>\n</li>\n<li><p>运行 npm -v 命令，检测 npm 版本，查看是否安装成功；</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>nodeJs 配置</p>","more":"<ol>\n<li><p>下载 node.js 安装包，下载地址： <a href=\"https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi，\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi，</a> 双击安装包，开始安装，一路 next 就行；</p>\n</li>\n<li><p>检测 PATH 环境变量是否配置了 node.js，进入 cmd 界面，输入 path 命令，结果中环境变量出现了 nodeJS 字眼，说明环境变量配置成功了；</p>\n</li>\n<li><p>运行 node -v 命令，检测 node.js 版本，查看是否安装成功；</p>\n</li>\n<li><p>运行 npm -v 命令，检测 npm 版本，查看是否安装成功；</p>\n</li>\n</ol>"},{"title":"nodeJs","comments":1,"date":"2019-08-11T02:38:41.000Z","_content":"\nnodeJS 模块化编程指的是将一些通用的功能转移到不同的文件里，每个文件作为一个模块，暴露给其他文件使用。这样可以使代码更容易维护，更具通用性。\n\n<!--more-->\n\n## 一、模块化编程\n\nnodeJS 模块化编程指的是将一些通用的功能转移到不同的文件里，每个文件作为一个模块，暴露给其他文件使用。这样可以使代码更容易维护，更具通用性。\n\nnodeJS 模块导出的方式有两种：module.exports 和 exports，前者可以直接被赋值，后者不能。 通过模块导出的函数所声明的全局变量不会污染其他全局变量的原因是：module.exports 和 exports 实际上都是作为 load 函数的属性存在的，每次引入，源模块中的全局变量就是函数内的变量了，所以各模块全局变量间不会互相污染。\n\nnodeJS 引入模块的方式是 require。\n\n## 二、nodeJS 内置模块\n\n1、fs 模块\n\n(1) 文件读取\n\nA、异步读取文件\n\n- 文本文件读取\n\n  ```js\n  \"use strict\";\n\n  const fs = require(\"fs\");\n\n  // 读取普通文本文件\n  fs.readFile(\"sample.txt\", \"utf-8\", function(err, data) {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log(data);\n    }\n  });\n  ```\n\n- 二进制文件读取\n\n  ```js\n  \"use strict\";\n\n  const fs = require(\"fs\");\n  // 读取二进制文件\n  fs.readFile(\"sample.png\", function(err, data) {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log(data);\n      console.log(data.length + \" bytes\");\n    }\n  });\n  ```\n\nB、同步读取文件\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n// 同步读取文件\ntry {\n  const data = fs.readFileSync(\"sample.txt\", \"utf-8\");\n  console.log(data);\n} catch (err) {\n  // 出错了\n  console.log(err);\n}\n```\n\n(2) 文件写入\n\nA、异步写入\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n\nconst data = \"Hello, Node.js\";\nfs.writeFile(\"output.txt\", data, function(err) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(\"ok.\");\n  }\n});\n```\n\nB、同步写入\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n\nconst data = \"Hello, Node.js\";\nfs.writeFileSync(\"output.txt\", data);\n```\n\n(3) 获取文件或目录的详细信息\n\nA、同步获取\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n// 获取文件详情\nfs.stat(\"sample.txt\", function(err, stat) {\n  if (err) {\n    console.log(err);\n  } else {\n    // 是否是文件:\n    console.log(\"isFile: \" + stat.isFile());\n    // 是否是目录:\n    console.log(\"isDirectory: \" + stat.isDirectory());\n    if (stat.isFile()) {\n      // 文件大小:\n      console.log(\"size: \" + stat.size);\n      // 创建时间, Date对象:\n      console.log(\"birth time: \" + stat.birthtime);\n      // 修改时间, Date对象:\n      console.log(\"modified time: \" + stat.mtime);\n    }\n  }\n});\n```\n\nB、异步获取\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n\nfs.statSync(\"sample.txt\", stat);\n```\n\nps：在启动和结束时只执行一次的读写程序，可以用同步，其他情况用异步。\n\n2、stream 模块\n\n(1) 利用 stream 模块读取文件\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n\n// 打开一个流:\nconst rs = fs.createReadStream(\"sample.txt\", \"utf-8\");\n\nrs.on(\"data\", function(chunk) {\n  console.log(\"DATA:\");\n  console.log(chunk);\n});\n\nrs.on(\"end\", function() {\n  console.log(\"END\");\n});\n\nrs.on(\"error\", function(err) {\n  console.log(\"ERROR: \" + err);\n});\n```\n\n(2) 利用 stream 模块写入数据\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n\nconst ws1 = fs.createWriteStream(\"output1.txt\", \"utf-8\");\nws1.write(\"使用Stream写入文本数据...\\n\");\nws1.write(\"END.\");\nws1.end();\n\nconst ws2 = fs.createWriteStream(\"output2.txt\");\nws2.write(new Buffer(\"使用Stream写入二进制数据...\\n\", \"utf-8\"));\nws2.write(new Buffer(\"END.\", \"utf-8\"));\nws2.end();\n```\n\n(3) 利用 pipe 串接流\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n\nconst rs = fs.createReadStream(\"sample.txt\");\nconst ws = fs.createWriteStream(\"copied.txt\", \"utf-8\");\n\nws.write(\"写入新数据\\n\");\nrs.pipe(ws);\n```\n\n3、http 模块\n\n(1) 第一个 HTTP 服务器程序\n\n```js\n\"use strict\";\n\n// 导入http模块:\nconst http = require(\"http\");\n\n// 创建http server，并传入回调函数:\nconst server = http.createServer(function(request, response) {\n  // 回调函数接收request和response对象,\n  // 获得HTTP请求的method和url:\n  console.log(request.method + \": \" + request.url);\n  // 将HTTP响应200写入response, 同时设置Content-Type: text/html:\n  response.writeHead(200, {\n    \"Content-Type\": \"text/html\"\n  });\n  // 将HTTP响应的HTML内容写入response:\n  response.end(\"<h1>Hello world!</h1>\");\n});\n\n// 让服务器监听8080端口:\nserver.listen(8080);\n\nconsole.log(\"Server is running at http://127.0.0.1:8080/\");\n```\n\n(2) 文件服务器\n\n```js\n\"use strict\";\n\nconst [fs, url, path, http] = [\n  require(\"fs\"),\n  require(\"url\"),\n  require(\"path\"),\n  require(\"http\")\n];\n\n// 从命令行参数获取root目录，默认是当前目录:\nconst root = path.resolve(process.argv[2] || \".\");\n\nconsole.log(\"Static root dir: \" + root);\n\n// 创建服务器:\nconst server = http.createServer(function(request, response) {\n  // 获得URL的path，类似 '/css/bootstrap.css':\n  const pathname = url.parse(request.url).pathname;\n  // 获得对应的本地文件路径，类似 '/srv/www/css/bootstrap.css':\n  const filepath = path.join(root, pathname);\n  // 获取文件状态:\n  fs.stat(filepath, function(err, stats) {\n    if (!err && stats.isFile()) {\n      // 没有出错并且文件存在:\n      console.log(\"200 \" + request.url);\n      // 发送200响应:\n      response.writeHead(200);\n      // 将文件流导向response:\n      fs.createReadStream(filepath).pipe(response);\n    } else {\n      // 出错了或者文件不存在:\n      console.log(\"404 \" + request.url);\n      // 发送404响应:\n      response.writeHead(404);\n      response.end(\"404 Not Found\");\n    }\n  });\n});\n\nserver.listen(8080);\n\nconsole.log(\"Server is running at http://172.16.1.83:8080/\");\n```\n\n4、crypto 模块\n\n(1) MD5 和 SHA1 ，每一次生成的都是一样的\n\n```js\nconst crypto = require(\"crypto\");\n\nconst hash = crypto.createHash(\"md5\");\n\n// 可任意多次调用update():\nhash.update(\"Hello, world!\");\nhash.update(\"Hello, nodejs!\");\n\nconsole.log(hash.digest(\"hex\"));\n```\n\n(2) Hmac ，根据秘钥改变\n\n```js\nconst crypto = require(\"crypto\");\n\nconst hmac = crypto.createHmac(\"sha256\", \"secret-key\");\n\nhmac.update(\"Hello, world!\");\nhmac.update(\"Hello, nodejs!\");\n\nconsole.log(hmac.digest(\"hex\"));\n```\n\n(3) AES，对称加密，含加解密过程\n\n```js\nconst crypto = require(\"crypto\");\n\nfunction aesEncrypt(data, key) {\n  const cipher = crypto.createCipher(\"aes192\", key);\n  var crypted = cipher.update(data, \"utf8\", \"hex\");\n  crypted += cipher.final(\"hex\");\n  return crypted;\n}\n\nfunction aesDecrypt(encrypted, key) {\n  const decipher = crypto.createDecipher(\"aes192\", key);\n  var decrypted = decipher.update(encrypted, \"hex\", \"utf8\");\n  decrypted += decipher.final(\"utf8\");\n  return decrypted;\n}\n\nconst data = \"Hello, this is a secret message!\";\nconst key = \"Password!\";\nconst encrypted = aesEncrypt(data, key);\nconst decrypted = aesDecrypt(encrypted, key);\n\nconsole.log(\"Plain text: \" + data);\nconsole.log(\"Encrypted text: \" + encrypted);\nconsole.log(\"Decrypted text: \" + decrypted);\n```\n\n(3) RSA 非对称加密\n","source":"_posts/nodeJs.md","raw":"---\ntitle: nodeJs\ncomments: true\ndate: 2019-08-11 10:38:41\ncategories: web\ntags: js\n---\n\nnodeJS 模块化编程指的是将一些通用的功能转移到不同的文件里，每个文件作为一个模块，暴露给其他文件使用。这样可以使代码更容易维护，更具通用性。\n\n<!--more-->\n\n## 一、模块化编程\n\nnodeJS 模块化编程指的是将一些通用的功能转移到不同的文件里，每个文件作为一个模块，暴露给其他文件使用。这样可以使代码更容易维护，更具通用性。\n\nnodeJS 模块导出的方式有两种：module.exports 和 exports，前者可以直接被赋值，后者不能。 通过模块导出的函数所声明的全局变量不会污染其他全局变量的原因是：module.exports 和 exports 实际上都是作为 load 函数的属性存在的，每次引入，源模块中的全局变量就是函数内的变量了，所以各模块全局变量间不会互相污染。\n\nnodeJS 引入模块的方式是 require。\n\n## 二、nodeJS 内置模块\n\n1、fs 模块\n\n(1) 文件读取\n\nA、异步读取文件\n\n- 文本文件读取\n\n  ```js\n  \"use strict\";\n\n  const fs = require(\"fs\");\n\n  // 读取普通文本文件\n  fs.readFile(\"sample.txt\", \"utf-8\", function(err, data) {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log(data);\n    }\n  });\n  ```\n\n- 二进制文件读取\n\n  ```js\n  \"use strict\";\n\n  const fs = require(\"fs\");\n  // 读取二进制文件\n  fs.readFile(\"sample.png\", function(err, data) {\n    if (err) {\n      console.log(err);\n    } else {\n      console.log(data);\n      console.log(data.length + \" bytes\");\n    }\n  });\n  ```\n\nB、同步读取文件\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n// 同步读取文件\ntry {\n  const data = fs.readFileSync(\"sample.txt\", \"utf-8\");\n  console.log(data);\n} catch (err) {\n  // 出错了\n  console.log(err);\n}\n```\n\n(2) 文件写入\n\nA、异步写入\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n\nconst data = \"Hello, Node.js\";\nfs.writeFile(\"output.txt\", data, function(err) {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log(\"ok.\");\n  }\n});\n```\n\nB、同步写入\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n\nconst data = \"Hello, Node.js\";\nfs.writeFileSync(\"output.txt\", data);\n```\n\n(3) 获取文件或目录的详细信息\n\nA、同步获取\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n// 获取文件详情\nfs.stat(\"sample.txt\", function(err, stat) {\n  if (err) {\n    console.log(err);\n  } else {\n    // 是否是文件:\n    console.log(\"isFile: \" + stat.isFile());\n    // 是否是目录:\n    console.log(\"isDirectory: \" + stat.isDirectory());\n    if (stat.isFile()) {\n      // 文件大小:\n      console.log(\"size: \" + stat.size);\n      // 创建时间, Date对象:\n      console.log(\"birth time: \" + stat.birthtime);\n      // 修改时间, Date对象:\n      console.log(\"modified time: \" + stat.mtime);\n    }\n  }\n});\n```\n\nB、异步获取\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n\nfs.statSync(\"sample.txt\", stat);\n```\n\nps：在启动和结束时只执行一次的读写程序，可以用同步，其他情况用异步。\n\n2、stream 模块\n\n(1) 利用 stream 模块读取文件\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n\n// 打开一个流:\nconst rs = fs.createReadStream(\"sample.txt\", \"utf-8\");\n\nrs.on(\"data\", function(chunk) {\n  console.log(\"DATA:\");\n  console.log(chunk);\n});\n\nrs.on(\"end\", function() {\n  console.log(\"END\");\n});\n\nrs.on(\"error\", function(err) {\n  console.log(\"ERROR: \" + err);\n});\n```\n\n(2) 利用 stream 模块写入数据\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n\nconst ws1 = fs.createWriteStream(\"output1.txt\", \"utf-8\");\nws1.write(\"使用Stream写入文本数据...\\n\");\nws1.write(\"END.\");\nws1.end();\n\nconst ws2 = fs.createWriteStream(\"output2.txt\");\nws2.write(new Buffer(\"使用Stream写入二进制数据...\\n\", \"utf-8\"));\nws2.write(new Buffer(\"END.\", \"utf-8\"));\nws2.end();\n```\n\n(3) 利用 pipe 串接流\n\n```js\n\"use strict\";\n\nconst fs = require(\"fs\");\n\nconst rs = fs.createReadStream(\"sample.txt\");\nconst ws = fs.createWriteStream(\"copied.txt\", \"utf-8\");\n\nws.write(\"写入新数据\\n\");\nrs.pipe(ws);\n```\n\n3、http 模块\n\n(1) 第一个 HTTP 服务器程序\n\n```js\n\"use strict\";\n\n// 导入http模块:\nconst http = require(\"http\");\n\n// 创建http server，并传入回调函数:\nconst server = http.createServer(function(request, response) {\n  // 回调函数接收request和response对象,\n  // 获得HTTP请求的method和url:\n  console.log(request.method + \": \" + request.url);\n  // 将HTTP响应200写入response, 同时设置Content-Type: text/html:\n  response.writeHead(200, {\n    \"Content-Type\": \"text/html\"\n  });\n  // 将HTTP响应的HTML内容写入response:\n  response.end(\"<h1>Hello world!</h1>\");\n});\n\n// 让服务器监听8080端口:\nserver.listen(8080);\n\nconsole.log(\"Server is running at http://127.0.0.1:8080/\");\n```\n\n(2) 文件服务器\n\n```js\n\"use strict\";\n\nconst [fs, url, path, http] = [\n  require(\"fs\"),\n  require(\"url\"),\n  require(\"path\"),\n  require(\"http\")\n];\n\n// 从命令行参数获取root目录，默认是当前目录:\nconst root = path.resolve(process.argv[2] || \".\");\n\nconsole.log(\"Static root dir: \" + root);\n\n// 创建服务器:\nconst server = http.createServer(function(request, response) {\n  // 获得URL的path，类似 '/css/bootstrap.css':\n  const pathname = url.parse(request.url).pathname;\n  // 获得对应的本地文件路径，类似 '/srv/www/css/bootstrap.css':\n  const filepath = path.join(root, pathname);\n  // 获取文件状态:\n  fs.stat(filepath, function(err, stats) {\n    if (!err && stats.isFile()) {\n      // 没有出错并且文件存在:\n      console.log(\"200 \" + request.url);\n      // 发送200响应:\n      response.writeHead(200);\n      // 将文件流导向response:\n      fs.createReadStream(filepath).pipe(response);\n    } else {\n      // 出错了或者文件不存在:\n      console.log(\"404 \" + request.url);\n      // 发送404响应:\n      response.writeHead(404);\n      response.end(\"404 Not Found\");\n    }\n  });\n});\n\nserver.listen(8080);\n\nconsole.log(\"Server is running at http://172.16.1.83:8080/\");\n```\n\n4、crypto 模块\n\n(1) MD5 和 SHA1 ，每一次生成的都是一样的\n\n```js\nconst crypto = require(\"crypto\");\n\nconst hash = crypto.createHash(\"md5\");\n\n// 可任意多次调用update():\nhash.update(\"Hello, world!\");\nhash.update(\"Hello, nodejs!\");\n\nconsole.log(hash.digest(\"hex\"));\n```\n\n(2) Hmac ，根据秘钥改变\n\n```js\nconst crypto = require(\"crypto\");\n\nconst hmac = crypto.createHmac(\"sha256\", \"secret-key\");\n\nhmac.update(\"Hello, world!\");\nhmac.update(\"Hello, nodejs!\");\n\nconsole.log(hmac.digest(\"hex\"));\n```\n\n(3) AES，对称加密，含加解密过程\n\n```js\nconst crypto = require(\"crypto\");\n\nfunction aesEncrypt(data, key) {\n  const cipher = crypto.createCipher(\"aes192\", key);\n  var crypted = cipher.update(data, \"utf8\", \"hex\");\n  crypted += cipher.final(\"hex\");\n  return crypted;\n}\n\nfunction aesDecrypt(encrypted, key) {\n  const decipher = crypto.createDecipher(\"aes192\", key);\n  var decrypted = decipher.update(encrypted, \"hex\", \"utf8\");\n  decrypted += decipher.final(\"utf8\");\n  return decrypted;\n}\n\nconst data = \"Hello, this is a secret message!\";\nconst key = \"Password!\";\nconst encrypted = aesEncrypt(data, key);\nconst decrypted = aesDecrypt(encrypted, key);\n\nconsole.log(\"Plain text: \" + data);\nconsole.log(\"Encrypted text: \" + encrypted);\nconsole.log(\"Decrypted text: \" + decrypted);\n```\n\n(3) RSA 非对称加密\n","slug":"nodeJs","published":1,"updated":"2020-01-08T01:00:24.546Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9q00358ex0tsrqdac4","content":"<p>nodeJS 模块化编程指的是将一些通用的功能转移到不同的文件里，每个文件作为一个模块，暴露给其他文件使用。这样可以使代码更容易维护，更具通用性。</p>\n<a id=\"more\"></a>\n<h2 id=\"一、模块化编程\"><a href=\"#一、模块化编程\" class=\"headerlink\" title=\"一、模块化编程\"></a>一、模块化编程</h2><p>nodeJS 模块化编程指的是将一些通用的功能转移到不同的文件里，每个文件作为一个模块，暴露给其他文件使用。这样可以使代码更容易维护，更具通用性。</p>\n<p>nodeJS 模块导出的方式有两种：module.exports 和 exports，前者可以直接被赋值，后者不能。 通过模块导出的函数所声明的全局变量不会污染其他全局变量的原因是：module.exports 和 exports 实际上都是作为 load 函数的属性存在的，每次引入，源模块中的全局变量就是函数内的变量了，所以各模块全局变量间不会互相污染。</p>\n<p>nodeJS 引入模块的方式是 require。</p>\n<h2 id=\"二、nodeJS-内置模块\"><a href=\"#二、nodeJS-内置模块\" class=\"headerlink\" title=\"二、nodeJS 内置模块\"></a>二、nodeJS 内置模块</h2><p>1、fs 模块</p>\n<p>(1) 文件读取</p>\n<p>A、异步读取文件</p>\n<ul>\n<li><p>文本文件读取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取普通文本文件</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">\"sample.txt\"</span>, <span class=\"string\">\"utf-8\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>二进制文件读取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 读取二进制文件</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">\"sample.png\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.length + <span class=\"string\">\" bytes\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>B、同步读取文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 同步读取文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = fs.readFileSync(<span class=\"string\">\"sample.txt\"</span>, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 出错了</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) 文件写入</p>\n<p>A、异步写入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"string\">\"Hello, Node.js\"</span>;</span><br><span class=\"line\">fs.writeFile(<span class=\"string\">\"output.txt\"</span>, data, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>B、同步写入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"string\">\"Hello, Node.js\"</span>;</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"output.txt\"</span>, data);</span><br></pre></td></tr></table></figure>\n<p>(3) 获取文件或目录的详细信息</p>\n<p>A、同步获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取文件详情</span></span><br><span class=\"line\">fs.stat(<span class=\"string\">\"sample.txt\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stat</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是否是文件:</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"isFile: \"</span> + stat.isFile());</span><br><span class=\"line\">    <span class=\"comment\">// 是否是目录:</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"isDirectory: \"</span> + stat.isDirectory());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stat.isFile()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 文件大小:</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"size: \"</span> + stat.size);</span><br><span class=\"line\">      <span class=\"comment\">// 创建时间, Date对象:</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"birth time: \"</span> + stat.birthtime);</span><br><span class=\"line\">      <span class=\"comment\">// 修改时间, Date对象:</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"modified time: \"</span> + stat.mtime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>B、异步获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.statSync(<span class=\"string\">\"sample.txt\"</span>, stat);</span><br></pre></td></tr></table></figure>\n<p>ps：在启动和结束时只执行一次的读写程序，可以用同步，其他情况用异步。</p>\n<p>2、stream 模块</p>\n<p>(1) 利用 stream 模块读取文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打开一个流:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rs = fs.createReadStream(<span class=\"string\">\"sample.txt\"</span>, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">rs.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"DATA:\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(chunk);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">rs.on(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"END\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">rs.on(<span class=\"string\">\"error\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ERROR: \"</span> + err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>(2) 利用 stream 模块写入数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ws1 = fs.createWriteStream(<span class=\"string\">\"output1.txt\"</span>, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">ws1.write(<span class=\"string\">\"使用Stream写入文本数据...\\n\"</span>);</span><br><span class=\"line\">ws1.write(<span class=\"string\">\"END.\"</span>);</span><br><span class=\"line\">ws1.end();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ws2 = fs.createWriteStream(<span class=\"string\">\"output2.txt\"</span>);</span><br><span class=\"line\">ws2.write(<span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"使用Stream写入二进制数据...\\n\"</span>, <span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">ws2.write(<span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"END.\"</span>, <span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">ws2.end();</span><br></pre></td></tr></table></figure>\n<p>(3) 利用 pipe 串接流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rs = fs.createReadStream(<span class=\"string\">\"sample.txt\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ws = fs.createWriteStream(<span class=\"string\">\"copied.txt\"</span>, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ws.write(<span class=\"string\">\"写入新数据\\n\"</span>);</span><br><span class=\"line\">rs.pipe(ws);</span><br></pre></td></tr></table></figure>\n<p>3、http 模块</p>\n<p>(1) 第一个 HTTP 服务器程序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入http模块:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建http server，并传入回调函数:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 回调函数接收request和response对象,</span></span><br><span class=\"line\">  <span class=\"comment\">// 获得HTTP请求的method和url:</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(request.method + <span class=\"string\">\": \"</span> + request.url);</span><br><span class=\"line\">  <span class=\"comment\">// 将HTTP响应200写入response, 同时设置Content-Type: text/html:</span></span><br><span class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 将HTTP响应的HTML内容写入response:</span></span><br><span class=\"line\">  response.end(<span class=\"string\">\"&lt;h1&gt;Hello world!&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让服务器监听8080端口:</span></span><br><span class=\"line\">server.listen(<span class=\"number\">8080</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server is running at http://127.0.0.1:8080/\"</span>);</span><br></pre></td></tr></table></figure>\n<p>(2) 文件服务器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [fs, url, path, http] = [</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>),</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>),</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>),</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>)</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从命令行参数获取root目录，默认是当前目录:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = path.resolve(process.argv[<span class=\"number\">2</span>] || <span class=\"string\">\".\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Static root dir: \"</span> + root);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建服务器:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获得URL的path，类似 '/css/bootstrap.css':</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> pathname = url.parse(request.url).pathname;</span><br><span class=\"line\">  <span class=\"comment\">// 获得对应的本地文件路径，类似 '/srv/www/css/bootstrap.css':</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> filepath = path.join(root, pathname);</span><br><span class=\"line\">  <span class=\"comment\">// 获取文件状态:</span></span><br><span class=\"line\">  fs.stat(filepath, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stats</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!err &amp;&amp; stats.isFile()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 没有出错并且文件存在:</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"200 \"</span> + request.url);</span><br><span class=\"line\">      <span class=\"comment\">// 发送200响应:</span></span><br><span class=\"line\">      response.writeHead(<span class=\"number\">200</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 将文件流导向response:</span></span><br><span class=\"line\">      fs.createReadStream(filepath).pipe(response);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 出错了或者文件不存在:</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"404 \"</span> + request.url);</span><br><span class=\"line\">      <span class=\"comment\">// 发送404响应:</span></span><br><span class=\"line\">      response.writeHead(<span class=\"number\">404</span>);</span><br><span class=\"line\">      response.end(<span class=\"string\">\"404 Not Found\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">8080</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server is running at http://172.16.1.83:8080/\"</span>);</span><br></pre></td></tr></table></figure>\n<p>4、crypto 模块</p>\n<p>(1) MD5 和 SHA1 ，每一次生成的都是一样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">\"crypto\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hash = crypto.createHash(<span class=\"string\">\"md5\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可任意多次调用update():</span></span><br><span class=\"line\">hash.update(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">hash.update(<span class=\"string\">\"Hello, nodejs!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hash.digest(<span class=\"string\">\"hex\"</span>));</span><br></pre></td></tr></table></figure>\n<p>(2) Hmac ，根据秘钥改变</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">\"crypto\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hmac = crypto.createHmac(<span class=\"string\">\"sha256\"</span>, <span class=\"string\">\"secret-key\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hmac.update(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">hmac.update(<span class=\"string\">\"Hello, nodejs!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hmac.digest(<span class=\"string\">\"hex\"</span>));</span><br></pre></td></tr></table></figure>\n<p>(3) AES，对称加密，含加解密过程</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">\"crypto\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aesEncrypt</span>(<span class=\"params\">data, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cipher = crypto.createCipher(<span class=\"string\">\"aes192\"</span>, key);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> crypted = cipher.update(data, <span class=\"string\">\"utf8\"</span>, <span class=\"string\">\"hex\"</span>);</span><br><span class=\"line\">  crypted += cipher.final(<span class=\"string\">\"hex\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> crypted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aesDecrypt</span>(<span class=\"params\">encrypted, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> decipher = crypto.createDecipher(<span class=\"string\">\"aes192\"</span>, key);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> decrypted = decipher.update(encrypted, <span class=\"string\">\"hex\"</span>, <span class=\"string\">\"utf8\"</span>);</span><br><span class=\"line\">  decrypted += decipher.final(<span class=\"string\">\"utf8\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> decrypted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"string\">\"Hello, this is a secret message!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"string\">\"Password!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> encrypted = aesEncrypt(data, key);</span><br><span class=\"line\"><span class=\"keyword\">const</span> decrypted = aesDecrypt(encrypted, key);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Plain text: \"</span> + data);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Encrypted text: \"</span> + encrypted);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Decrypted text: \"</span> + decrypted);</span><br></pre></td></tr></table></figure>\n<p>(3) RSA 非对称加密</p>\n","site":{"data":{}},"excerpt":"<p>nodeJS 模块化编程指的是将一些通用的功能转移到不同的文件里，每个文件作为一个模块，暴露给其他文件使用。这样可以使代码更容易维护，更具通用性。</p>","more":"<h2 id=\"一、模块化编程\"><a href=\"#一、模块化编程\" class=\"headerlink\" title=\"一、模块化编程\"></a>一、模块化编程</h2><p>nodeJS 模块化编程指的是将一些通用的功能转移到不同的文件里，每个文件作为一个模块，暴露给其他文件使用。这样可以使代码更容易维护，更具通用性。</p>\n<p>nodeJS 模块导出的方式有两种：module.exports 和 exports，前者可以直接被赋值，后者不能。 通过模块导出的函数所声明的全局变量不会污染其他全局变量的原因是：module.exports 和 exports 实际上都是作为 load 函数的属性存在的，每次引入，源模块中的全局变量就是函数内的变量了，所以各模块全局变量间不会互相污染。</p>\n<p>nodeJS 引入模块的方式是 require。</p>\n<h2 id=\"二、nodeJS-内置模块\"><a href=\"#二、nodeJS-内置模块\" class=\"headerlink\" title=\"二、nodeJS 内置模块\"></a>二、nodeJS 内置模块</h2><p>1、fs 模块</p>\n<p>(1) 文件读取</p>\n<p>A、异步读取文件</p>\n<ul>\n<li><p>文本文件读取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取普通文本文件</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">\"sample.txt\"</span>, <span class=\"string\">\"utf-8\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>二进制文件读取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 读取二进制文件</span></span><br><span class=\"line\">fs.readFile(<span class=\"string\">\"sample.png\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data.length + <span class=\"string\">\" bytes\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>B、同步读取文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 同步读取文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = fs.readFileSync(<span class=\"string\">\"sample.txt\"</span>, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 出错了</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) 文件写入</p>\n<p>A、异步写入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"string\">\"Hello, Node.js\"</span>;</span><br><span class=\"line\">fs.writeFile(<span class=\"string\">\"output.txt\"</span>, data, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>B、同步写入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"string\">\"Hello, Node.js\"</span>;</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"output.txt\"</span>, data);</span><br></pre></td></tr></table></figure>\n<p>(3) 获取文件或目录的详细信息</p>\n<p>A、同步获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取文件详情</span></span><br><span class=\"line\">fs.stat(<span class=\"string\">\"sample.txt\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stat</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是否是文件:</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"isFile: \"</span> + stat.isFile());</span><br><span class=\"line\">    <span class=\"comment\">// 是否是目录:</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"isDirectory: \"</span> + stat.isDirectory());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stat.isFile()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 文件大小:</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"size: \"</span> + stat.size);</span><br><span class=\"line\">      <span class=\"comment\">// 创建时间, Date对象:</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"birth time: \"</span> + stat.birthtime);</span><br><span class=\"line\">      <span class=\"comment\">// 修改时间, Date对象:</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"modified time: \"</span> + stat.mtime);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>B、异步获取</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.statSync(<span class=\"string\">\"sample.txt\"</span>, stat);</span><br></pre></td></tr></table></figure>\n<p>ps：在启动和结束时只执行一次的读写程序，可以用同步，其他情况用异步。</p>\n<p>2、stream 模块</p>\n<p>(1) 利用 stream 模块读取文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打开一个流:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> rs = fs.createReadStream(<span class=\"string\">\"sample.txt\"</span>, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">rs.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"DATA:\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(chunk);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">rs.on(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"END\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">rs.on(<span class=\"string\">\"error\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ERROR: \"</span> + err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>(2) 利用 stream 模块写入数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ws1 = fs.createWriteStream(<span class=\"string\">\"output1.txt\"</span>, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">ws1.write(<span class=\"string\">\"使用Stream写入文本数据...\\n\"</span>);</span><br><span class=\"line\">ws1.write(<span class=\"string\">\"END.\"</span>);</span><br><span class=\"line\">ws1.end();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ws2 = fs.createWriteStream(<span class=\"string\">\"output2.txt\"</span>);</span><br><span class=\"line\">ws2.write(<span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"使用Stream写入二进制数据...\\n\"</span>, <span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">ws2.write(<span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"END.\"</span>, <span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">ws2.end();</span><br></pre></td></tr></table></figure>\n<p>(3) 利用 pipe 串接流</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rs = fs.createReadStream(<span class=\"string\">\"sample.txt\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ws = fs.createWriteStream(<span class=\"string\">\"copied.txt\"</span>, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">ws.write(<span class=\"string\">\"写入新数据\\n\"</span>);</span><br><span class=\"line\">rs.pipe(ws);</span><br></pre></td></tr></table></figure>\n<p>3、http 模块</p>\n<p>(1) 第一个 HTTP 服务器程序</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导入http模块:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建http server，并传入回调函数:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 回调函数接收request和response对象,</span></span><br><span class=\"line\">  <span class=\"comment\">// 获得HTTP请求的method和url:</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(request.method + <span class=\"string\">\": \"</span> + request.url);</span><br><span class=\"line\">  <span class=\"comment\">// 将HTTP响应200写入response, 同时设置Content-Type: text/html:</span></span><br><span class=\"line\">  response.writeHead(<span class=\"number\">200</span>, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 将HTTP响应的HTML内容写入response:</span></span><br><span class=\"line\">  response.end(<span class=\"string\">\"&lt;h1&gt;Hello world!&lt;/h1&gt;\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 让服务器监听8080端口:</span></span><br><span class=\"line\">server.listen(<span class=\"number\">8080</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server is running at http://127.0.0.1:8080/\"</span>);</span><br></pre></td></tr></table></figure>\n<p>(2) 文件服务器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [fs, url, path, http] = [</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>),</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>),</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">\"path\"</span>),</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>)</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从命令行参数获取root目录，默认是当前目录:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> root = path.resolve(process.argv[<span class=\"number\">2</span>] || <span class=\"string\">\".\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Static root dir: \"</span> + root);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建服务器:</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获得URL的path，类似 '/css/bootstrap.css':</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> pathname = url.parse(request.url).pathname;</span><br><span class=\"line\">  <span class=\"comment\">// 获得对应的本地文件路径，类似 '/srv/www/css/bootstrap.css':</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> filepath = path.join(root, pathname);</span><br><span class=\"line\">  <span class=\"comment\">// 获取文件状态:</span></span><br><span class=\"line\">  fs.stat(filepath, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stats</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!err &amp;&amp; stats.isFile()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 没有出错并且文件存在:</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"200 \"</span> + request.url);</span><br><span class=\"line\">      <span class=\"comment\">// 发送200响应:</span></span><br><span class=\"line\">      response.writeHead(<span class=\"number\">200</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 将文件流导向response:</span></span><br><span class=\"line\">      fs.createReadStream(filepath).pipe(response);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 出错了或者文件不存在:</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"404 \"</span> + request.url);</span><br><span class=\"line\">      <span class=\"comment\">// 发送404响应:</span></span><br><span class=\"line\">      response.writeHead(<span class=\"number\">404</span>);</span><br><span class=\"line\">      response.end(<span class=\"string\">\"404 Not Found\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">server.listen(<span class=\"number\">8080</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server is running at http://172.16.1.83:8080/\"</span>);</span><br></pre></td></tr></table></figure>\n<p>4、crypto 模块</p>\n<p>(1) MD5 和 SHA1 ，每一次生成的都是一样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">\"crypto\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hash = crypto.createHash(<span class=\"string\">\"md5\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可任意多次调用update():</span></span><br><span class=\"line\">hash.update(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">hash.update(<span class=\"string\">\"Hello, nodejs!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hash.digest(<span class=\"string\">\"hex\"</span>));</span><br></pre></td></tr></table></figure>\n<p>(2) Hmac ，根据秘钥改变</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">\"crypto\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hmac = crypto.createHmac(<span class=\"string\">\"sha256\"</span>, <span class=\"string\">\"secret-key\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">hmac.update(<span class=\"string\">\"Hello, world!\"</span>);</span><br><span class=\"line\">hmac.update(<span class=\"string\">\"Hello, nodejs!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(hmac.digest(<span class=\"string\">\"hex\"</span>));</span><br></pre></td></tr></table></figure>\n<p>(3) AES，对称加密，含加解密过程</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> crypto = <span class=\"built_in\">require</span>(<span class=\"string\">\"crypto\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aesEncrypt</span>(<span class=\"params\">data, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cipher = crypto.createCipher(<span class=\"string\">\"aes192\"</span>, key);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> crypted = cipher.update(data, <span class=\"string\">\"utf8\"</span>, <span class=\"string\">\"hex\"</span>);</span><br><span class=\"line\">  crypted += cipher.final(<span class=\"string\">\"hex\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> crypted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">aesDecrypt</span>(<span class=\"params\">encrypted, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> decipher = crypto.createDecipher(<span class=\"string\">\"aes192\"</span>, key);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> decrypted = decipher.update(encrypted, <span class=\"string\">\"hex\"</span>, <span class=\"string\">\"utf8\"</span>);</span><br><span class=\"line\">  decrypted += decipher.final(<span class=\"string\">\"utf8\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> decrypted;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> data = <span class=\"string\">\"Hello, this is a secret message!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> key = <span class=\"string\">\"Password!\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> encrypted = aesEncrypt(data, key);</span><br><span class=\"line\"><span class=\"keyword\">const</span> decrypted = aesDecrypt(encrypted, key);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Plain text: \"</span> + data);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Encrypted text: \"</span> + encrypted);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Decrypted text: \"</span> + decrypted);</span><br></pre></td></tr></table></figure>\n<p>(3) RSA 非对称加密</p>"},{"title":"Npm 常用命令","comments":1,"date":"2019-08-17T05:53:16.000Z","_content":"\nnpm 常用命令\n\n<!--more-->\n\n1、安装\n\n```npm\nnpm i <package>\n\nnpm i <package> -g\n\nnpm i <package> --save-dev\n\nnpm install @myco/my-package\n```\n\n2、切换源\n\n```npm\n# 长久切换\nnpm config set registry <https://registry.npm.taobao.org>\n\n# 临时切换\nnpm --registry https://registry.npm.taobao.org install express\n```\n\n3、添加私有源\n\n```npm\n// 需要先登录\nnpm config set <@myco>:registry <http://reg.example.com>\n.npmrc\nregistry=https://registry.npmjs.org/\n//registry.npm.dreamdev.cn/:_password=<password>\n//registry.npm.dreamdev.cn/:username=<user>\n//registry.npm.dreamdev.cn/:email=<email>\n//registry.npm.dreamdev.cn/:always-auth=false\n@myco:registry= <http://reg.example.com>\nhttps://registry.npm.dreamdev.cn/=\n```\n","source":"_posts/npm常用命令.md","raw":"---\ntitle: npm 常用命令\ncomments: true\ndate: 2019-08-17 13:53:16\ncategories: 项目管理\ntags: npm\n---\n\nnpm 常用命令\n\n<!--more-->\n\n1、安装\n\n```npm\nnpm i <package>\n\nnpm i <package> -g\n\nnpm i <package> --save-dev\n\nnpm install @myco/my-package\n```\n\n2、切换源\n\n```npm\n# 长久切换\nnpm config set registry <https://registry.npm.taobao.org>\n\n# 临时切换\nnpm --registry https://registry.npm.taobao.org install express\n```\n\n3、添加私有源\n\n```npm\n// 需要先登录\nnpm config set <@myco>:registry <http://reg.example.com>\n.npmrc\nregistry=https://registry.npmjs.org/\n//registry.npm.dreamdev.cn/:_password=<password>\n//registry.npm.dreamdev.cn/:username=<user>\n//registry.npm.dreamdev.cn/:email=<email>\n//registry.npm.dreamdev.cn/:always-auth=false\n@myco:registry= <http://reg.example.com>\nhttps://registry.npm.dreamdev.cn/=\n```\n","slug":"npm常用命令","published":1,"updated":"2019-11-13T12:21:11.852Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9r00388ex0turu4t32","content":"<p>npm 常用命令</p>\n<a id=\"more\"></a>\n<p>1、安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i &lt;package&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">npm i &lt;package&gt; -g</span><br><span class=\"line\"></span><br><span class=\"line\">npm i &lt;package&gt; --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">npm install @myco/my-package</span><br></pre></td></tr></table></figure>\n<p>2、切换源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 长久切换</span><br><span class=\"line\">npm config set registry &lt;https://registry.npm.taobao.org&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 临时切换</span><br><span class=\"line\">npm --registry https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure>\n<p>3、添加私有源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 需要先登录</span><br><span class=\"line\">npm config set &lt;@myco&gt;:registry &lt;http://reg.example.com&gt;</span><br><span class=\"line\">.npmrc</span><br><span class=\"line\">registry=https://registry.npmjs.org/</span><br><span class=\"line\">//registry.npm.dreamdev.cn/:_password=&lt;password&gt;</span><br><span class=\"line\">//registry.npm.dreamdev.cn/:username=&lt;user&gt;</span><br><span class=\"line\">//registry.npm.dreamdev.cn/:email=&lt;email&gt;</span><br><span class=\"line\">//registry.npm.dreamdev.cn/:always-auth=false</span><br><span class=\"line\">@myco:registry= &lt;http://reg.example.com&gt;</span><br><span class=\"line\">https://registry.npm.dreamdev.cn/=</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>npm 常用命令</p>","more":"<p>1、安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i &lt;package&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">npm i &lt;package&gt; -g</span><br><span class=\"line\"></span><br><span class=\"line\">npm i &lt;package&gt; --save-dev</span><br><span class=\"line\"></span><br><span class=\"line\">npm install @myco/my-package</span><br></pre></td></tr></table></figure>\n<p>2、切换源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 长久切换</span><br><span class=\"line\">npm config set registry &lt;https://registry.npm.taobao.org&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 临时切换</span><br><span class=\"line\">npm --registry https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure>\n<p>3、添加私有源</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 需要先登录</span><br><span class=\"line\">npm config set &lt;@myco&gt;:registry &lt;http://reg.example.com&gt;</span><br><span class=\"line\">.npmrc</span><br><span class=\"line\">registry=https://registry.npmjs.org/</span><br><span class=\"line\">//registry.npm.dreamdev.cn/:_password=&lt;password&gt;</span><br><span class=\"line\">//registry.npm.dreamdev.cn/:username=&lt;user&gt;</span><br><span class=\"line\">//registry.npm.dreamdev.cn/:email=&lt;email&gt;</span><br><span class=\"line\">//registry.npm.dreamdev.cn/:always-auth=false</span><br><span class=\"line\">@myco:registry= &lt;http://reg.example.com&gt;</span><br><span class=\"line\">https://registry.npm.dreamdev.cn/=</span><br></pre></td></tr></table></figure>"},{"title":"Mac 安装 Mysql","comments":1,"date":"2019-11-13T00:42:51.000Z","_content":"\nmac mysql 安装和使用的基本步骤\n\n<!--more-->\n\n### 安装\n\n1、[下载](https://dev.mysql.com/downloads/mysql/)\n\n2、一路 next 之后，安装完成，会看到系统偏好栏多了一个 mysql 图标，点击可以进行一些基本的设置，也可以控制数据库的开关\n\n### 配置环境变量\n\n1、执行命令：`PATH=\"$PATH\":/usr/local/mysql/bin`，配置环境变量\n\n2、登录 mysql：`mysql -u root -p`\n\n3、查看数据库：`show databases;`\n\n### 安装数据库图形化工具 Navicat\n\n这里有可能会连接失败，使用 mysql 支持的加密方式改一下密码就好，比如：`ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '<psd>';`\n","source":"_posts/mac安装mysql.md","raw":"---\ntitle: mac 安装 mysql\ncomments: true\ndate: 2019-11-13 08:42:51\ncategories: 数据库\ntags: mysql\n---\n\nmac mysql 安装和使用的基本步骤\n\n<!--more-->\n\n### 安装\n\n1、[下载](https://dev.mysql.com/downloads/mysql/)\n\n2、一路 next 之后，安装完成，会看到系统偏好栏多了一个 mysql 图标，点击可以进行一些基本的设置，也可以控制数据库的开关\n\n### 配置环境变量\n\n1、执行命令：`PATH=\"$PATH\":/usr/local/mysql/bin`，配置环境变量\n\n2、登录 mysql：`mysql -u root -p`\n\n3、查看数据库：`show databases;`\n\n### 安装数据库图形化工具 Navicat\n\n这里有可能会连接失败，使用 mysql 支持的加密方式改一下密码就好，比如：`ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '<psd>';`\n","slug":"mac安装mysql","published":1,"updated":"2019-11-13T12:26:14.979Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9s003c8ex0ilre2tje","content":"<p>mac mysql 安装和使用的基本步骤</p>\n<a id=\"more\"></a>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>1、<a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n<p>2、一路 next 之后，安装完成，会看到系统偏好栏多了一个 mysql 图标，点击可以进行一些基本的设置，也可以控制数据库的开关</p>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>1、执行命令：<code>PATH=&quot;$PATH&quot;:/usr/local/mysql/bin</code>，配置环境变量</p>\n<p>2、登录 mysql：<code>mysql -u root -p</code></p>\n<p>3、查看数据库：<code>show databases;</code></p>\n<h3 id=\"安装数据库图形化工具-Navicat\"><a href=\"#安装数据库图形化工具-Navicat\" class=\"headerlink\" title=\"安装数据库图形化工具 Navicat\"></a>安装数据库图形化工具 Navicat</h3><p>这里有可能会连接失败，使用 mysql 支持的加密方式改一下密码就好，比如：<code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;&lt;psd&gt;&#39;;</code></p>\n","site":{"data":{}},"excerpt":"<p>mac mysql 安装和使用的基本步骤</p>","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>1、<a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener\">下载</a></p>\n<p>2、一路 next 之后，安装完成，会看到系统偏好栏多了一个 mysql 图标，点击可以进行一些基本的设置，也可以控制数据库的开关</p>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>1、执行命令：<code>PATH=&quot;$PATH&quot;:/usr/local/mysql/bin</code>，配置环境变量</p>\n<p>2、登录 mysql：<code>mysql -u root -p</code></p>\n<p>3、查看数据库：<code>show databases;</code></p>\n<h3 id=\"安装数据库图形化工具-Navicat\"><a href=\"#安装数据库图形化工具-Navicat\" class=\"headerlink\" title=\"安装数据库图形化工具 Navicat\"></a>安装数据库图形化工具 Navicat</h3><p>这里有可能会连接失败，使用 mysql 支持的加密方式改一下密码就好，比如：<code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;&lt;psd&gt;&#39;;</code></p>"},{"title":"Python3 安装","comments":1,"date":"2019-01-06T09:42:32.000Z","_content":"\npython3 安装指南\n\n<!--more-->\n\n### unbuntu\n\n1. `yum -y install openssl*` (pip 依赖 ssl 环境)\n\n2. 编译安装 python3：\n\n   - [下载地址](https://www.python.org/ftp/python/)\n\n   - 安装步骤： tar zxvf Python-3.5.2.tgz => cd Python-3.5.2 => ./configure => make && make install\n\n3. 安装 pip3: `sudo apt-get install python3-pip`\n\n### centOs\n\n1. 安装 yum-utils, 用于管理 repository 及扩展包: `sudo yum install yum-utils`\n\n2. 使用 yum-builddep 为 Python3 构建环境,安装缺失的软件依赖： `sudo yum-builddep python`\n\n3. 下载对应版本的 Python 包：`curl -O https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz`\n\n4. 解压 Python 包：`tar xf Python-3.5.0.tgz`\n\n5. 安装 Python: `cd Python-3.5.0` => `./configure` => `make` => `sudo make install`\n\n6. 检测 Python 是否安装完成：`python3 -V`\n\n7. 把 python3 作为默认版本：`vi /etc/profile.d/python.sh` => `alias python='/usr/local/bin/python3.5'`\n","source":"_posts/python3安装.md","raw":"---\ntitle: python3 安装\ncomments: true\ndate: 2019-01-06 17:42:32\ncategories: python\ntags: 笔记\n---\n\npython3 安装指南\n\n<!--more-->\n\n### unbuntu\n\n1. `yum -y install openssl*` (pip 依赖 ssl 环境)\n\n2. 编译安装 python3：\n\n   - [下载地址](https://www.python.org/ftp/python/)\n\n   - 安装步骤： tar zxvf Python-3.5.2.tgz => cd Python-3.5.2 => ./configure => make && make install\n\n3. 安装 pip3: `sudo apt-get install python3-pip`\n\n### centOs\n\n1. 安装 yum-utils, 用于管理 repository 及扩展包: `sudo yum install yum-utils`\n\n2. 使用 yum-builddep 为 Python3 构建环境,安装缺失的软件依赖： `sudo yum-builddep python`\n\n3. 下载对应版本的 Python 包：`curl -O https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz`\n\n4. 解压 Python 包：`tar xf Python-3.5.0.tgz`\n\n5. 安装 Python: `cd Python-3.5.0` => `./configure` => `make` => `sudo make install`\n\n6. 检测 Python 是否安装完成：`python3 -V`\n\n7. 把 python3 作为默认版本：`vi /etc/profile.d/python.sh` => `alias python='/usr/local/bin/python3.5'`\n","slug":"python3安装","published":1,"updated":"2019-11-13T12:21:51.863Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9v003f8ex0i1tb6tpq","content":"<p>python3 安装指南</p>\n<a id=\"more\"></a>\n<h3 id=\"unbuntu\"><a href=\"#unbuntu\" class=\"headerlink\" title=\"unbuntu\"></a>unbuntu</h3><ol>\n<li><p><code>yum -y install openssl*</code> (pip 依赖 ssl 环境)</p>\n</li>\n<li><p>编译安装 python3：</p>\n<ul>\n<li><p><a href=\"https://www.python.org/ftp/python/\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n</li>\n<li><p>安装步骤： tar zxvf Python-3.5.2.tgz =&gt; cd Python-3.5.2 =&gt; ./configure =&gt; make &amp;&amp; make install</p>\n</li>\n</ul>\n</li>\n<li><p>安装 pip3: <code>sudo apt-get install python3-pip</code></p>\n</li>\n</ol>\n<h3 id=\"centOs\"><a href=\"#centOs\" class=\"headerlink\" title=\"centOs\"></a>centOs</h3><ol>\n<li><p>安装 yum-utils, 用于管理 repository 及扩展包: <code>sudo yum install yum-utils</code></p>\n</li>\n<li><p>使用 yum-builddep 为 Python3 构建环境,安装缺失的软件依赖： <code>sudo yum-builddep python</code></p>\n</li>\n<li><p>下载对应版本的 Python 包：<code>curl -O https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz</code></p>\n</li>\n<li><p>解压 Python 包：<code>tar xf Python-3.5.0.tgz</code></p>\n</li>\n<li><p>安装 Python: <code>cd Python-3.5.0</code> =&gt; <code>./configure</code> =&gt; <code>make</code> =&gt; <code>sudo make install</code></p>\n</li>\n<li><p>检测 Python 是否安装完成：<code>python3 -V</code></p>\n</li>\n<li><p>把 python3 作为默认版本：<code>vi /etc/profile.d/python.sh</code> =&gt; <code>alias python=&#39;/usr/local/bin/python3.5&#39;</code></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>python3 安装指南</p>","more":"<h3 id=\"unbuntu\"><a href=\"#unbuntu\" class=\"headerlink\" title=\"unbuntu\"></a>unbuntu</h3><ol>\n<li><p><code>yum -y install openssl*</code> (pip 依赖 ssl 环境)</p>\n</li>\n<li><p>编译安装 python3：</p>\n<ul>\n<li><p><a href=\"https://www.python.org/ftp/python/\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n</li>\n<li><p>安装步骤： tar zxvf Python-3.5.2.tgz =&gt; cd Python-3.5.2 =&gt; ./configure =&gt; make &amp;&amp; make install</p>\n</li>\n</ul>\n</li>\n<li><p>安装 pip3: <code>sudo apt-get install python3-pip</code></p>\n</li>\n</ol>\n<h3 id=\"centOs\"><a href=\"#centOs\" class=\"headerlink\" title=\"centOs\"></a>centOs</h3><ol>\n<li><p>安装 yum-utils, 用于管理 repository 及扩展包: <code>sudo yum install yum-utils</code></p>\n</li>\n<li><p>使用 yum-builddep 为 Python3 构建环境,安装缺失的软件依赖： <code>sudo yum-builddep python</code></p>\n</li>\n<li><p>下载对应版本的 Python 包：<code>curl -O https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz</code></p>\n</li>\n<li><p>解压 Python 包：<code>tar xf Python-3.5.0.tgz</code></p>\n</li>\n<li><p>安装 Python: <code>cd Python-3.5.0</code> =&gt; <code>./configure</code> =&gt; <code>make</code> =&gt; <code>sudo make install</code></p>\n</li>\n<li><p>检测 Python 是否安装完成：<code>python3 -V</code></p>\n</li>\n<li><p>把 python3 作为默认版本：<code>vi /etc/profile.d/python.sh</code> =&gt; <code>alias python=&#39;/usr/local/bin/python3.5&#39;</code></p>\n</li>\n</ol>"},{"title":"Python2 => Python3 踩坑集合","comments":1,"date":"2018-06-08T01:47:51.000Z","_content":"\npython2 => python3 踩坑集合\n\n<!--more-->\n\n### 1. 报错内容：\n\nModuleNotFoundError: No module named 'md5'\n\n#### 解析：\n\n这是 python2 的库，python3 已经把它包含进 hashlib 库里了\n\n#### 解决方法\n\n直接把对 md5 库的引用语句注释掉，改为引用 hashlib 库\n\n### 2. 报错内容：\n\nAttributeError: module 'sys' has no attribute 'setdefaultencoding'\n\n#### 解析：\n\npython2 的默认字符编码为 ASCII 编码，所以有 setdefaultencoding 这个方法转换为 utf-8 编码，而 python3 的默认字符编码是 unicode 编码，这种编码本身支持汉字，所以就不存在上述方法了\n\n#### 解决方法\n\n直接把该语句注释掉\n\n### 3. 报错内容：\n\nModuleNotFoundError: No module named 'urlparse'\n\n#### 解析：\n\nurlparse 是 python2 的库，python3 已经把这个库重命名为 urllib.parse 了\n\n#### 解决方法\n\n把对 urlparse 库的引用语句注释掉，改为引用 urllib.parse 库\n\n### 4. 报错内容：\n\nModuleNotFoundError: No module named 'urlparse'\n\n#### 解析：\n\nurlparse 是 python2 的库，python3 已经把这个库重命名为 urllib.parse 了\n\n#### 解决方法\n\n把对 urlparse 库的引用语句注释掉，改为引用 multiprocessing 库里了\n\n### 5. 报错内容：\n\nModuleNotFoundError: No module named 'Queue'\n\n#### 解析：\n\nQueue 是 python2 的库，python3 已经把这个库加到 multiprocessing 里了\n\n#### 解决方法\n\n把对 Queue 库的引用语句注释掉，改为引用 `from multiprocessing import Queue`\n","source":"_posts/python采坑集合.md","raw":"---\ntitle: python2 => python3 踩坑集合\ncomments: true\ndate: 2018-06-08 09:47:51\ncategories: python\ntags: 笔记\n---\n\npython2 => python3 踩坑集合\n\n<!--more-->\n\n### 1. 报错内容：\n\nModuleNotFoundError: No module named 'md5'\n\n#### 解析：\n\n这是 python2 的库，python3 已经把它包含进 hashlib 库里了\n\n#### 解决方法\n\n直接把对 md5 库的引用语句注释掉，改为引用 hashlib 库\n\n### 2. 报错内容：\n\nAttributeError: module 'sys' has no attribute 'setdefaultencoding'\n\n#### 解析：\n\npython2 的默认字符编码为 ASCII 编码，所以有 setdefaultencoding 这个方法转换为 utf-8 编码，而 python3 的默认字符编码是 unicode 编码，这种编码本身支持汉字，所以就不存在上述方法了\n\n#### 解决方法\n\n直接把该语句注释掉\n\n### 3. 报错内容：\n\nModuleNotFoundError: No module named 'urlparse'\n\n#### 解析：\n\nurlparse 是 python2 的库，python3 已经把这个库重命名为 urllib.parse 了\n\n#### 解决方法\n\n把对 urlparse 库的引用语句注释掉，改为引用 urllib.parse 库\n\n### 4. 报错内容：\n\nModuleNotFoundError: No module named 'urlparse'\n\n#### 解析：\n\nurlparse 是 python2 的库，python3 已经把这个库重命名为 urllib.parse 了\n\n#### 解决方法\n\n把对 urlparse 库的引用语句注释掉，改为引用 multiprocessing 库里了\n\n### 5. 报错内容：\n\nModuleNotFoundError: No module named 'Queue'\n\n#### 解析：\n\nQueue 是 python2 的库，python3 已经把这个库加到 multiprocessing 里了\n\n#### 解决方法\n\n把对 Queue 库的引用语句注释掉，改为引用 `from multiprocessing import Queue`\n","slug":"python采坑集合","published":1,"updated":"2019-11-13T12:22:10.678Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9x003k8ex0nshj6fji","content":"<p>python2 =&gt; python3 踩坑集合</p>\n<a id=\"more\"></a>\n<h3 id=\"1-报错内容：\"><a href=\"#1-报错内容：\" class=\"headerlink\" title=\"1. 报错内容：\"></a>1. 报错内容：</h3><p>ModuleNotFoundError: No module named ‘md5’</p>\n<h4 id=\"解析：\"><a href=\"#解析：\" class=\"headerlink\" title=\"解析：\"></a>解析：</h4><p>这是 python2 的库，python3 已经把它包含进 hashlib 库里了</p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>直接把对 md5 库的引用语句注释掉，改为引用 hashlib 库</p>\n<h3 id=\"2-报错内容：\"><a href=\"#2-报错内容：\" class=\"headerlink\" title=\"2. 报错内容：\"></a>2. 报错内容：</h3><p>AttributeError: module ‘sys’ has no attribute ‘setdefaultencoding’</p>\n<h4 id=\"解析：-1\"><a href=\"#解析：-1\" class=\"headerlink\" title=\"解析：\"></a>解析：</h4><p>python2 的默认字符编码为 ASCII 编码，所以有 setdefaultencoding 这个方法转换为 utf-8 编码，而 python3 的默认字符编码是 unicode 编码，这种编码本身支持汉字，所以就不存在上述方法了</p>\n<h4 id=\"解决方法-1\"><a href=\"#解决方法-1\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>直接把该语句注释掉</p>\n<h3 id=\"3-报错内容：\"><a href=\"#3-报错内容：\" class=\"headerlink\" title=\"3. 报错内容：\"></a>3. 报错内容：</h3><p>ModuleNotFoundError: No module named ‘urlparse’</p>\n<h4 id=\"解析：-2\"><a href=\"#解析：-2\" class=\"headerlink\" title=\"解析：\"></a>解析：</h4><p>urlparse 是 python2 的库，python3 已经把这个库重命名为 urllib.parse 了</p>\n<h4 id=\"解决方法-2\"><a href=\"#解决方法-2\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>把对 urlparse 库的引用语句注释掉，改为引用 urllib.parse 库</p>\n<h3 id=\"4-报错内容：\"><a href=\"#4-报错内容：\" class=\"headerlink\" title=\"4. 报错内容：\"></a>4. 报错内容：</h3><p>ModuleNotFoundError: No module named ‘urlparse’</p>\n<h4 id=\"解析：-3\"><a href=\"#解析：-3\" class=\"headerlink\" title=\"解析：\"></a>解析：</h4><p>urlparse 是 python2 的库，python3 已经把这个库重命名为 urllib.parse 了</p>\n<h4 id=\"解决方法-3\"><a href=\"#解决方法-3\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>把对 urlparse 库的引用语句注释掉，改为引用 multiprocessing 库里了</p>\n<h3 id=\"5-报错内容：\"><a href=\"#5-报错内容：\" class=\"headerlink\" title=\"5. 报错内容：\"></a>5. 报错内容：</h3><p>ModuleNotFoundError: No module named ‘Queue’</p>\n<h4 id=\"解析：-4\"><a href=\"#解析：-4\" class=\"headerlink\" title=\"解析：\"></a>解析：</h4><p>Queue 是 python2 的库，python3 已经把这个库加到 multiprocessing 里了</p>\n<h4 id=\"解决方法-4\"><a href=\"#解决方法-4\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>把对 Queue 库的引用语句注释掉，改为引用 <code>from multiprocessing import Queue</code></p>\n","site":{"data":{}},"excerpt":"<p>python2 =&gt; python3 踩坑集合</p>","more":"<h3 id=\"1-报错内容：\"><a href=\"#1-报错内容：\" class=\"headerlink\" title=\"1. 报错内容：\"></a>1. 报错内容：</h3><p>ModuleNotFoundError: No module named ‘md5’</p>\n<h4 id=\"解析：\"><a href=\"#解析：\" class=\"headerlink\" title=\"解析：\"></a>解析：</h4><p>这是 python2 的库，python3 已经把它包含进 hashlib 库里了</p>\n<h4 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>直接把对 md5 库的引用语句注释掉，改为引用 hashlib 库</p>\n<h3 id=\"2-报错内容：\"><a href=\"#2-报错内容：\" class=\"headerlink\" title=\"2. 报错内容：\"></a>2. 报错内容：</h3><p>AttributeError: module ‘sys’ has no attribute ‘setdefaultencoding’</p>\n<h4 id=\"解析：-1\"><a href=\"#解析：-1\" class=\"headerlink\" title=\"解析：\"></a>解析：</h4><p>python2 的默认字符编码为 ASCII 编码，所以有 setdefaultencoding 这个方法转换为 utf-8 编码，而 python3 的默认字符编码是 unicode 编码，这种编码本身支持汉字，所以就不存在上述方法了</p>\n<h4 id=\"解决方法-1\"><a href=\"#解决方法-1\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>直接把该语句注释掉</p>\n<h3 id=\"3-报错内容：\"><a href=\"#3-报错内容：\" class=\"headerlink\" title=\"3. 报错内容：\"></a>3. 报错内容：</h3><p>ModuleNotFoundError: No module named ‘urlparse’</p>\n<h4 id=\"解析：-2\"><a href=\"#解析：-2\" class=\"headerlink\" title=\"解析：\"></a>解析：</h4><p>urlparse 是 python2 的库，python3 已经把这个库重命名为 urllib.parse 了</p>\n<h4 id=\"解决方法-2\"><a href=\"#解决方法-2\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>把对 urlparse 库的引用语句注释掉，改为引用 urllib.parse 库</p>\n<h3 id=\"4-报错内容：\"><a href=\"#4-报错内容：\" class=\"headerlink\" title=\"4. 报错内容：\"></a>4. 报错内容：</h3><p>ModuleNotFoundError: No module named ‘urlparse’</p>\n<h4 id=\"解析：-3\"><a href=\"#解析：-3\" class=\"headerlink\" title=\"解析：\"></a>解析：</h4><p>urlparse 是 python2 的库，python3 已经把这个库重命名为 urllib.parse 了</p>\n<h4 id=\"解决方法-3\"><a href=\"#解决方法-3\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>把对 urlparse 库的引用语句注释掉，改为引用 multiprocessing 库里了</p>\n<h3 id=\"5-报错内容：\"><a href=\"#5-报错内容：\" class=\"headerlink\" title=\"5. 报错内容：\"></a>5. 报错内容：</h3><p>ModuleNotFoundError: No module named ‘Queue’</p>\n<h4 id=\"解析：-4\"><a href=\"#解析：-4\" class=\"headerlink\" title=\"解析：\"></a>解析：</h4><p>Queue 是 python2 的库，python3 已经把这个库加到 multiprocessing 里了</p>\n<h4 id=\"解决方法-4\"><a href=\"#解决方法-4\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h4><p>把对 Queue 库的引用语句注释掉，改为引用 <code>from multiprocessing import Queue</code></p>"},{"title":"Sublime Text3 配置node.js环境","date":"2018-06-08T01:32:52.000Z","_content":"\n前提：windows 系统，你已经安装了 Sublime Text3，电脑已经有 node 环境。\n\n<!--more-->\n\n#### 步骤：\n\n- 下载 sublime 的 nodejs 插件，需是集成 Nodejs 插件到 sublime 中，下载地址：[https://github.com/tanepiper/SublimeText-Nodejs](https://github.com/tanepiper/SublimeText-Nodejs)\n- 解压 zip 文件， 并重命名文件夹“Nodejs”\n- 打开 sublime，操作\"preference\" --> \"Browse packages\", 打开一个目录，这个目录是众多语言 IDE 插件的存放地。\n  *  复制”Nodejs“文件夹到这个目录。 \n  *   打开 Nodejs 文件夹，找到文件“Nodejs.sublime-build”， 拖拽到 sublime，显示：       \n  <code>\n  {\n  \"cmd\": [\"node\", \"$file\"],\n  \"file*regex\": \"^[ ]\\_File \\\"(...*?)\\\", line ([0-9]\\*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"cp1252\",\n  \"windows\":\n  {\n  \"cmd\": [\"taskkill /F /IM node.exe & node\", \"$file\"]\n  },\n  \"linux\":\n  {\n  \"cmd\": [\"killall node; node\", \"$file\"]\n  }\n  }\n  </code>\n- 需要更改上面标注的地方， 要更改 encoding 为 GB2312 或者 utf8，如果不更改此属性可能导致 build nodejs 代码时终端显示乱码。\n- 要用 sublime 打开文件“Nodejs.sublime-settings” 或者 设置“preference” --》 “package settings” --》 “Nodejs”  --》“setting-default” 打开文件并 更改成：\n  <code>\n  {\n  // save before running commands\n  \"save_first\": true,\n  // if present, use this command instead of plain \"node\"\n  // e.g. \"/usr/bin/node\" or \"C:\\bin\\node.exe\"\n  \"node_command\": /usr/bin/nodejs,\n  // Same for NPM command\n  \"npm_command\": /usr/bin/npm,\n  // as 'NODE_PATH' environment variable for node runtime\n  \"node_path\": false,\n  \"expert_mode\": false,\n  \"ouput_to_new_tab\": false\n  }\n  </code>\n  到此，已经配置好了。\n","source":"_posts/sublime-text-nodeJS配置.md","raw":"---\ntitle: sublime text3 配置node.js环境\ndate: 2018-06-08 09:32:52\ncategories: web\ntags: 编辑器\n---\n\n前提：windows 系统，你已经安装了 Sublime Text3，电脑已经有 node 环境。\n\n<!--more-->\n\n#### 步骤：\n\n- 下载 sublime 的 nodejs 插件，需是集成 Nodejs 插件到 sublime 中，下载地址：[https://github.com/tanepiper/SublimeText-Nodejs](https://github.com/tanepiper/SublimeText-Nodejs)\n- 解压 zip 文件， 并重命名文件夹“Nodejs”\n- 打开 sublime，操作\"preference\" --> \"Browse packages\", 打开一个目录，这个目录是众多语言 IDE 插件的存放地。\n  *  复制”Nodejs“文件夹到这个目录。 \n  *   打开 Nodejs 文件夹，找到文件“Nodejs.sublime-build”， 拖拽到 sublime，显示：       \n  <code>\n  {\n  \"cmd\": [\"node\", \"$file\"],\n  \"file*regex\": \"^[ ]\\_File \\\"(...*?)\\\", line ([0-9]\\*)\",\n  \"selector\": \"source.js\",\n  \"shell\":true,\n  \"encoding\": \"cp1252\",\n  \"windows\":\n  {\n  \"cmd\": [\"taskkill /F /IM node.exe & node\", \"$file\"]\n  },\n  \"linux\":\n  {\n  \"cmd\": [\"killall node; node\", \"$file\"]\n  }\n  }\n  </code>\n- 需要更改上面标注的地方， 要更改 encoding 为 GB2312 或者 utf8，如果不更改此属性可能导致 build nodejs 代码时终端显示乱码。\n- 要用 sublime 打开文件“Nodejs.sublime-settings” 或者 设置“preference” --》 “package settings” --》 “Nodejs”  --》“setting-default” 打开文件并 更改成：\n  <code>\n  {\n  // save before running commands\n  \"save_first\": true,\n  // if present, use this command instead of plain \"node\"\n  // e.g. \"/usr/bin/node\" or \"C:\\bin\\node.exe\"\n  \"node_command\": /usr/bin/nodejs,\n  // Same for NPM command\n  \"npm_command\": /usr/bin/npm,\n  // as 'NODE_PATH' environment variable for node runtime\n  \"node_path\": false,\n  \"expert_mode\": false,\n  \"ouput_to_new_tab\": false\n  }\n  </code>\n  到此，已经配置好了。\n","slug":"sublime-text-nodeJS配置","published":1,"updated":"2019-11-13T12:22:40.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dbgu9y003n8ex0ket6scma","content":"<p>前提：windows 系统，你已经安装了 Sublime Text3，电脑已经有 node 环境。</p>\n<a id=\"more\"></a>\n<h4 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ul>\n<li>下载 sublime 的 nodejs 插件，需是集成 Nodejs 插件到 sublime 中，下载地址：<a href=\"https://github.com/tanepiper/SublimeText-Nodejs\" target=\"_blank\" rel=\"noopener\">https://github.com/tanepiper/SublimeText-Nodejs</a></li>\n<li>解压 zip 文件， 并重命名文件夹“Nodejs”</li>\n<li>打开 sublime，操作”preference” –&gt; “Browse packages”, 打开一个目录，这个目录是众多语言 IDE 插件的存放地。<ul>\n<li>复制”Nodejs“文件夹到这个目录。 </li>\n<li>打开 Nodejs 文件夹，找到文件“Nodejs.sublime-build”， 拖拽到 sublime，显示：<br><code><br>{<br>“cmd”: [“node”, “$file”],<br>“file<em>regex”: “^[ ]_File \\”(…</em>?)\\”, line ([0-9]*)”,<br>“selector”: “source.js”,<br>“shell”:true,<br>“encoding”: “cp1252”,<br>“windows”:<br>{<br>“cmd”: [“taskkill /F /IM node.exe &amp; node”, “$file”]<br>},<br>“linux”:<br>{<br>“cmd”: [“killall node; node”, “$file”]<br>}<br>}<br></code></li>\n</ul>\n</li>\n<li>需要更改上面标注的地方， 要更改 encoding 为 GB2312 或者 utf8，如果不更改此属性可能导致 build nodejs 代码时终端显示乱码。</li>\n<li>要用 sublime 打开文件“Nodejs.sublime-settings” 或者 设置“preference” –》 “package settings” –》 “Nodejs”  –》“setting-default” 打开文件并 更改成：<br><code><br>{<br>// save before running commands<br>“save_first”: true,<br>// if present, use this command instead of plain “node”<br>// e.g. “/usr/bin/node” or “C:\\bin\\node.exe”<br>“node_command”: /usr/bin/nodejs,<br>// Same for NPM command<br>“npm_command”: /usr/bin/npm,<br>// as ‘NODE_PATH’ environment variable for node runtime<br>“node_path”: false,<br>“expert_mode”: false,<br>“ouput_to_new_tab”: false<br>}<br></code><br>到此，已经配置好了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>前提：windows 系统，你已经安装了 Sublime Text3，电脑已经有 node 环境。</p>","more":"<h4 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><ul>\n<li>下载 sublime 的 nodejs 插件，需是集成 Nodejs 插件到 sublime 中，下载地址：<a href=\"https://github.com/tanepiper/SublimeText-Nodejs\" target=\"_blank\" rel=\"noopener\">https://github.com/tanepiper/SublimeText-Nodejs</a></li>\n<li>解压 zip 文件， 并重命名文件夹“Nodejs”</li>\n<li>打开 sublime，操作”preference” –&gt; “Browse packages”, 打开一个目录，这个目录是众多语言 IDE 插件的存放地。<ul>\n<li>复制”Nodejs“文件夹到这个目录。 </li>\n<li>打开 Nodejs 文件夹，找到文件“Nodejs.sublime-build”， 拖拽到 sublime，显示：<br><code><br>{<br>“cmd”: [“node”, “$file”],<br>“file<em>regex”: “^[ ]_File \\”(…</em>?)\\”, line ([0-9]*)”,<br>“selector”: “source.js”,<br>“shell”:true,<br>“encoding”: “cp1252”,<br>“windows”:<br>{<br>“cmd”: [“taskkill /F /IM node.exe &amp; node”, “$file”]<br>},<br>“linux”:<br>{<br>“cmd”: [“killall node; node”, “$file”]<br>}<br>}<br></code></li>\n</ul>\n</li>\n<li>需要更改上面标注的地方， 要更改 encoding 为 GB2312 或者 utf8，如果不更改此属性可能导致 build nodejs 代码时终端显示乱码。</li>\n<li>要用 sublime 打开文件“Nodejs.sublime-settings” 或者 设置“preference” –》 “package settings” –》 “Nodejs”  –》“setting-default” 打开文件并 更改成：<br><code><br>{<br>// save before running commands<br>“save_first”: true,<br>// if present, use this command instead of plain “node”<br>// e.g. “/usr/bin/node” or “C:\\bin\\node.exe”<br>“node_command”: /usr/bin/nodejs,<br>// Same for NPM command<br>“npm_command”: /usr/bin/npm,<br>// as ‘NODE_PATH’ environment variable for node runtime<br>“node_path”: false,<br>“expert_mode”: false,<br>“ouput_to_new_tab”: false<br>}<br></code><br>到此，已经配置好了。</li>\n</ul>"},{"title":"Table-Cell等分","comments":1,"date":"2019-03-20T02:43:51.000Z","_content":"\ntable 里面的元素等分，是经常遇到的需求，一般都会想所有宽度设为相同的应该就等分了，但是然并卵，今天就遇到了这种坑，就算设了宽度一致，还是没有等分，场景是这样的，一个 tr 里面第一个 th 的宽度跟其他不一样，table 宽度为 100%，最后实现等分的方法如下：\n\n<!--more-->\n\n```scss\ntable {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  display: table;\n  table-layout: fixed;\n  th,\n  td {\n    padding: 10px;\n    border: solid 1px #d9d9d9;\n    background-color: #f7f9fa;\n    text-align: center;\n    display: table-cell;\n    width: 2%;\n  }\n}\n```\n\n从上面的例子不难看出，实现等分的秘诀就在于设置了 `display: table; table-layout: fixed;` 和 `display: table-cell; width: 2%;`\n","source":"_posts/table-cell等分.md","raw":"---\ntitle: table-cell等分\ncomments: true\ndate: 2019-03-20 10:43:51\ncategories: web\ntags: css\n---\n\ntable 里面的元素等分，是经常遇到的需求，一般都会想所有宽度设为相同的应该就等分了，但是然并卵，今天就遇到了这种坑，就算设了宽度一致，还是没有等分，场景是这样的，一个 tr 里面第一个 th 的宽度跟其他不一样，table 宽度为 100%，最后实现等分的方法如下：\n\n<!--more-->\n\n```scss\ntable {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  display: table;\n  table-layout: fixed;\n  th,\n  td {\n    padding: 10px;\n    border: solid 1px #d9d9d9;\n    background-color: #f7f9fa;\n    text-align: center;\n    display: table-cell;\n    width: 2%;\n  }\n}\n```\n\n从上面的例子不难看出，实现等分的秘诀就在于设置了 `display: table; table-layout: fixed;` 和 `display: table-cell; width: 2%;`\n","slug":"table-cell等分","published":1,"updated":"2019-11-13T12:22:46.970Z","layout":"post","photos":[],"link":"","_id":"ck5dbgu9z003r8ex0d1l1wbmy","content":"<p>table 里面的元素等分，是经常遇到的需求，一般都会想所有宽度设为相同的应该就等分了，但是然并卵，今天就遇到了这种坑，就算设了宽度一致，还是没有等分，场景是这样的，一个 tr 里面第一个 th 的宽度跟其他不一样，table 宽度为 100%，最后实现等分的方法如下：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">  <span class=\"selector-tag\">table</span>-layout: fixed;</span><br><span class=\"line\">  <span class=\"selector-tag\">th</span>,</span><br><span class=\"line\">  <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#d9d9d9</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f7f9fa</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">2%</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的例子不难看出，实现等分的秘诀就在于设置了 <code>display: table; table-layout: fixed;</code> 和 <code>display: table-cell; width: 2%;</code></p>\n","site":{"data":{}},"excerpt":"<p>table 里面的元素等分，是经常遇到的需求，一般都会想所有宽度设为相同的应该就等分了，但是然并卵，今天就遇到了这种坑，就算设了宽度一致，还是没有等分，场景是这样的，一个 tr 里面第一个 th 的宽度跟其他不一样，table 宽度为 100%，最后实现等分的方法如下：</p>","more":"<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: table;</span><br><span class=\"line\">  <span class=\"selector-tag\">table</span>-layout: fixed;</span><br><span class=\"line\">  <span class=\"selector-tag\">th</span>,</span><br><span class=\"line\">  <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: solid <span class=\"number\">1px</span> <span class=\"number\">#d9d9d9</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#f7f9fa</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table-cell;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">2%</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的例子不难看出，实现等分的秘诀就在于设置了 <code>display: table; table-layout: fixed;</code> 和 <code>display: table-cell; width: 2%;</code></p>"},{"title":"Typescript 使用","comments":1,"date":"2019-02-18T00:39:39.000Z","_content":"\ntypescript 使用笔记\n\n<!--more-->\n\n1.  安装： `npm i -g typescript`\n\n2.  安装支持 typescript 的编辑器： vscode\n\n3.  项目中使用 typescript：`tsc --init` 创建 tsconfig.json 文件\n\n4.  编译 typescript：`tsc`\n\n5.  TypeScript 基本语法：\n\n    - 基本静态类型:\n\n      ```ts\n      // Boolean\n      let isAwesome: boolean = true;\n\n      // String\n      let name: string = \"Chris\";\n      let joke: string = `\n         Q: Why did the chicken cross the road?\n         A: ${punchline}\n      `;\n\n      // Number\n      let decimalNumber: number = 42;\n      let binaryNumber: number = 0b101010; // => 42\n      let octalNumber: number = 0o52; // => 42\n\n      // array\n      let myPetFamily: string[] = [\"rocket\", \"fluffly\", \"harry\"];\n      let myPetFamily: Array<string> = [\"rocket\", \"fluffly\", \"harry\"];\n\n      // tuple\n      let myFavoriteTuple: [string, number, boolean];\n      myFavoriteTuple = [\"chair\", 20, true];\n\n      // enum\n      enum Sizes {\n        Small = 1,\n        Medium,\n        Large\n      }\n      Sizes.Small; // => 1\n      Sizes.Medium; // => 2\n      Sizes.Large; // => 3\n      enum ThemeColors {\n        Primary = \"primary\",\n        Secondary = \"secondary\",\n        Dark = \"dark\",\n        DarkSecondary = \"darkSecondary\"\n      }\n      // any\n      let whoKnows: any = 4;\n\n      // void\n      const darkestPlaceOnEarth = (): void => {\n        console.log(\"Marianas Trench\");\n      };\n      ```\n\n\n    - 其他：\n\n        ```ts\n        // 接口\n        interface Animal {\n          kind: string;\n          weight: number;\n        }\n        let dog: Animal;\n        dog = {\n          kind: 'mammal',\n          weight: 10,\n        };\n\n        //内联注释\n        let dog: {\n          kind: string;\n          weight: number;\n        };\n        dog = {\n          kind: 'mammal',\n          weight: 10,\n        };\n\n        //泛型\n        const fillArray = <T>(len: number, elem: T) => {\n          return new Array<T>(len).fill(elem);\n        };\n        const newArray = fillArray<string>(3, 'hi');\n\n        //联合类型\n        const sayHappyBirthdayOnFacebook = (name: string | null) => {\n          if (name === null) {\n            console.log('Happy birthday!');\n          } else {\n            console.log(`Happy birthday ${name}!`);\n          }\n        };\n        sayHappyBirthdayOnFacebook(null); // => \"Happy birthday!\"\n        sayHappyBirthdayOnFacebook('Jeremy'); // => \"Happy birthday Jeremy!\"\n\n        //交集类型\n        type Student = {\n          id: string;\n          age: number;\n        };\n        type Employee = {\n          companyId: string;\n        };\n        let person: Student & Employee;\n        person.age = 21; // ✅\n        person.companyId = 'SP302334'; // ✅\n        person.id = '10033402'; // ✅\n        person.name = 'Henry'; // ❌ - name does not exist in Student & Employee\n\n        //可选类型\n        function callMom(message?: string) {\n          if (!message) {\n            console.log('Hi mom. Love you. Bye.');\n          } else {\n            console.log(message);\n          }\n        }\n        // Interface describing an object containing an optional property\n        interface Person {\n          name: string;\n          age: number;\n          favoriteColor?: string; // This property is optional\n        }\n        ```\n","source":"_posts/typescript环境配置.md","raw":"---\ntitle: typescript 使用\ncomments: true\ndate: 2019-02-18 08:39:39\ncategories: web\ntags: ts\n---\n\ntypescript 使用笔记\n\n<!--more-->\n\n1.  安装： `npm i -g typescript`\n\n2.  安装支持 typescript 的编辑器： vscode\n\n3.  项目中使用 typescript：`tsc --init` 创建 tsconfig.json 文件\n\n4.  编译 typescript：`tsc`\n\n5.  TypeScript 基本语法：\n\n    - 基本静态类型:\n\n      ```ts\n      // Boolean\n      let isAwesome: boolean = true;\n\n      // String\n      let name: string = \"Chris\";\n      let joke: string = `\n         Q: Why did the chicken cross the road?\n         A: ${punchline}\n      `;\n\n      // Number\n      let decimalNumber: number = 42;\n      let binaryNumber: number = 0b101010; // => 42\n      let octalNumber: number = 0o52; // => 42\n\n      // array\n      let myPetFamily: string[] = [\"rocket\", \"fluffly\", \"harry\"];\n      let myPetFamily: Array<string> = [\"rocket\", \"fluffly\", \"harry\"];\n\n      // tuple\n      let myFavoriteTuple: [string, number, boolean];\n      myFavoriteTuple = [\"chair\", 20, true];\n\n      // enum\n      enum Sizes {\n        Small = 1,\n        Medium,\n        Large\n      }\n      Sizes.Small; // => 1\n      Sizes.Medium; // => 2\n      Sizes.Large; // => 3\n      enum ThemeColors {\n        Primary = \"primary\",\n        Secondary = \"secondary\",\n        Dark = \"dark\",\n        DarkSecondary = \"darkSecondary\"\n      }\n      // any\n      let whoKnows: any = 4;\n\n      // void\n      const darkestPlaceOnEarth = (): void => {\n        console.log(\"Marianas Trench\");\n      };\n      ```\n\n\n    - 其他：\n\n        ```ts\n        // 接口\n        interface Animal {\n          kind: string;\n          weight: number;\n        }\n        let dog: Animal;\n        dog = {\n          kind: 'mammal',\n          weight: 10,\n        };\n\n        //内联注释\n        let dog: {\n          kind: string;\n          weight: number;\n        };\n        dog = {\n          kind: 'mammal',\n          weight: 10,\n        };\n\n        //泛型\n        const fillArray = <T>(len: number, elem: T) => {\n          return new Array<T>(len).fill(elem);\n        };\n        const newArray = fillArray<string>(3, 'hi');\n\n        //联合类型\n        const sayHappyBirthdayOnFacebook = (name: string | null) => {\n          if (name === null) {\n            console.log('Happy birthday!');\n          } else {\n            console.log(`Happy birthday ${name}!`);\n          }\n        };\n        sayHappyBirthdayOnFacebook(null); // => \"Happy birthday!\"\n        sayHappyBirthdayOnFacebook('Jeremy'); // => \"Happy birthday Jeremy!\"\n\n        //交集类型\n        type Student = {\n          id: string;\n          age: number;\n        };\n        type Employee = {\n          companyId: string;\n        };\n        let person: Student & Employee;\n        person.age = 21; // ✅\n        person.companyId = 'SP302334'; // ✅\n        person.id = '10033402'; // ✅\n        person.name = 'Henry'; // ❌ - name does not exist in Student & Employee\n\n        //可选类型\n        function callMom(message?: string) {\n          if (!message) {\n            console.log('Hi mom. Love you. Bye.');\n          } else {\n            console.log(message);\n          }\n        }\n        // Interface describing an object containing an optional property\n        interface Person {\n          name: string;\n          age: number;\n          favoriteColor?: string; // This property is optional\n        }\n        ```\n","slug":"typescript环境配置","published":1,"updated":"2019-11-13T12:23:31.567Z","layout":"post","photos":[],"link":"","_id":"ck5dbgua0003u8ex0cbq4e825","content":"<p>typescript 使用笔记</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>安装： <code>npm i -g typescript</code></p>\n</li>\n<li><p>安装支持 typescript 的编辑器： vscode</p>\n</li>\n<li><p>项目中使用 typescript：<code>tsc --init</code> 创建 tsconfig.json 文件</p>\n</li>\n<li><p>编译 typescript：<code>tsc</code></p>\n</li>\n<li><p>TypeScript 基本语法：</p>\n<ul>\n<li><p>基本静态类型:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Boolean</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isAwesome: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// String</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name: <span class=\"built_in\">string</span> = <span class=\"string\">\"Chris\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> joke: <span class=\"built_in\">string</span> = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">   Q: Why did the chicken cross the road?</span></span><br><span class=\"line\"><span class=\"string\">   A: <span class=\"subst\">$&#123;punchline&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> decimalNumber: <span class=\"built_in\">number</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryNumber: <span class=\"built_in\">number</span> = <span class=\"number\">0b101010</span>; <span class=\"comment\">// =&gt; 42</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> octalNumber: <span class=\"built_in\">number</span> = <span class=\"number\">0o52</span>; <span class=\"comment\">// =&gt; 42</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// array</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myPetFamily: <span class=\"built_in\">string</span>[] = [<span class=\"string\">\"rocket\"</span>, <span class=\"string\">\"fluffly\"</span>, <span class=\"string\">\"harry\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> myPetFamily: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt; = [<span class=\"string\">\"rocket\"</span>, <span class=\"string\">\"fluffly\"</span>, <span class=\"string\">\"harry\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tuple</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteTuple: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">boolean</span>];</span><br><span class=\"line\">myFavoriteTuple = [<span class=\"string\">\"chair\"</span>, <span class=\"number\">20</span>, <span class=\"literal\">true</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// enum</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> Sizes &#123;</span><br><span class=\"line\">  Small = <span class=\"number\">1</span>,</span><br><span class=\"line\">  Medium,</span><br><span class=\"line\">  Large</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Sizes.Small; <span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\">Sizes.Medium; <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">Sizes.Large; <span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> ThemeColors &#123;</span><br><span class=\"line\">  Primary = <span class=\"string\">\"primary\"</span>,</span><br><span class=\"line\">  Secondary = <span class=\"string\">\"secondary\"</span>,</span><br><span class=\"line\">  Dark = <span class=\"string\">\"dark\"</span>,</span><br><span class=\"line\">  DarkSecondary = <span class=\"string\">\"darkSecondary\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// any</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> whoKnows: <span class=\"built_in\">any</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// void</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkestPlaceOnEarth = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Marianas Trench\"</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他：</p>\n  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Animal &#123;</span><br><span class=\"line\">  kind: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  weight: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog: Animal;</span><br><span class=\"line\">dog = &#123;</span><br><span class=\"line\">  kind: <span class=\"string\">'mammal'</span>,</span><br><span class=\"line\">  weight: <span class=\"number\">10</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//内联注释</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog: &#123;</span><br><span class=\"line\">  kind: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  weight: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">dog = &#123;</span><br><span class=\"line\">  kind: <span class=\"string\">'mammal'</span>,</span><br><span class=\"line\">  weight: <span class=\"number\">10</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//泛型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fillArray = &lt;T&gt;<span class=\"function\">(<span class=\"params\">len: <span class=\"built_in\">number</span>, elem: T</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;T&gt;(len).fill(elem);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArray = fillArray&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"number\">3</span>, <span class=\"string\">'hi'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//联合类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sayHappyBirthdayOnFacebook = <span class=\"function\">(<span class=\"params\">name: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Happy birthday!'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Happy birthday <span class=\"subst\">$&#123;name&#125;</span>!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">sayHappyBirthdayOnFacebook(<span class=\"literal\">null</span>); <span class=\"comment\">// =&gt; \"Happy birthday!\"</span></span><br><span class=\"line\">sayHappyBirthdayOnFacebook(<span class=\"string\">'Jeremy'</span>); <span class=\"comment\">// =&gt; \"Happy birthday Jeremy!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//交集类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student = &#123;</span><br><span class=\"line\">  id: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  age: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Employee = &#123;</span><br><span class=\"line\">  companyId: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person: Student &amp; Employee;</span><br><span class=\"line\">person.age = <span class=\"number\">21</span>; <span class=\"comment\">// ✅</span></span><br><span class=\"line\">person.companyId = <span class=\"string\">'SP302334'</span>; <span class=\"comment\">// ✅</span></span><br><span class=\"line\">person.id = <span class=\"string\">'10033402'</span>; <span class=\"comment\">// ✅</span></span><br><span class=\"line\">person.name = <span class=\"string\">'Henry'</span>; <span class=\"comment\">// ❌ - name does not exist in Student &amp; Employee</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可选类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callMom</span>(<span class=\"params\">message?: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!message) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi mom. Love you. Bye.'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Interface describing an object containing an optional property</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Person &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  age: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  favoriteColor?: <span class=\"built_in\">string</span>; <span class=\"comment\">// This property is optional</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>typescript 使用笔记</p>","more":"<ol>\n<li><p>安装： <code>npm i -g typescript</code></p>\n</li>\n<li><p>安装支持 typescript 的编辑器： vscode</p>\n</li>\n<li><p>项目中使用 typescript：<code>tsc --init</code> 创建 tsconfig.json 文件</p>\n</li>\n<li><p>编译 typescript：<code>tsc</code></p>\n</li>\n<li><p>TypeScript 基本语法：</p>\n<ul>\n<li><p>基本静态类型:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Boolean</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isAwesome: <span class=\"built_in\">boolean</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// String</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name: <span class=\"built_in\">string</span> = <span class=\"string\">\"Chris\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> joke: <span class=\"built_in\">string</span> = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">   Q: Why did the chicken cross the road?</span></span><br><span class=\"line\"><span class=\"string\">   A: <span class=\"subst\">$&#123;punchline&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Number</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> decimalNumber: <span class=\"built_in\">number</span> = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> binaryNumber: <span class=\"built_in\">number</span> = <span class=\"number\">0b101010</span>; <span class=\"comment\">// =&gt; 42</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> octalNumber: <span class=\"built_in\">number</span> = <span class=\"number\">0o52</span>; <span class=\"comment\">// =&gt; 42</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// array</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myPetFamily: <span class=\"built_in\">string</span>[] = [<span class=\"string\">\"rocket\"</span>, <span class=\"string\">\"fluffly\"</span>, <span class=\"string\">\"harry\"</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> myPetFamily: <span class=\"built_in\">Array</span>&lt;<span class=\"built_in\">string</span>&gt; = [<span class=\"string\">\"rocket\"</span>, <span class=\"string\">\"fluffly\"</span>, <span class=\"string\">\"harry\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// tuple</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteTuple: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">boolean</span>];</span><br><span class=\"line\">myFavoriteTuple = [<span class=\"string\">\"chair\"</span>, <span class=\"number\">20</span>, <span class=\"literal\">true</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// enum</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> Sizes &#123;</span><br><span class=\"line\">  Small = <span class=\"number\">1</span>,</span><br><span class=\"line\">  Medium,</span><br><span class=\"line\">  Large</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Sizes.Small; <span class=\"comment\">// =&gt; 1</span></span><br><span class=\"line\">Sizes.Medium; <span class=\"comment\">// =&gt; 2</span></span><br><span class=\"line\">Sizes.Large; <span class=\"comment\">// =&gt; 3</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> ThemeColors &#123;</span><br><span class=\"line\">  Primary = <span class=\"string\">\"primary\"</span>,</span><br><span class=\"line\">  Secondary = <span class=\"string\">\"secondary\"</span>,</span><br><span class=\"line\">  Dark = <span class=\"string\">\"dark\"</span>,</span><br><span class=\"line\">  DarkSecondary = <span class=\"string\">\"darkSecondary\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// any</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> whoKnows: <span class=\"built_in\">any</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// void</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkestPlaceOnEarth = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Marianas Trench\"</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其他：</p>\n  <figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Animal &#123;</span><br><span class=\"line\">  kind: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  weight: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> dog: Animal;</span><br><span class=\"line\">dog = &#123;</span><br><span class=\"line\">  kind: <span class=\"string\">'mammal'</span>,</span><br><span class=\"line\">  weight: <span class=\"number\">10</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//内联注释</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog: &#123;</span><br><span class=\"line\">  kind: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  weight: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">dog = &#123;</span><br><span class=\"line\">  kind: <span class=\"string\">'mammal'</span>,</span><br><span class=\"line\">  weight: <span class=\"number\">10</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//泛型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fillArray = &lt;T&gt;<span class=\"function\">(<span class=\"params\">len: <span class=\"built_in\">number</span>, elem: T</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>&lt;T&gt;(len).fill(elem);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> newArray = fillArray&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"number\">3</span>, <span class=\"string\">'hi'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//联合类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sayHappyBirthdayOnFacebook = <span class=\"function\">(<span class=\"params\">name: <span class=\"built_in\">string</span> | <span class=\"literal\">null</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Happy birthday!'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Happy birthday <span class=\"subst\">$&#123;name&#125;</span>!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">sayHappyBirthdayOnFacebook(<span class=\"literal\">null</span>); <span class=\"comment\">// =&gt; \"Happy birthday!\"</span></span><br><span class=\"line\">sayHappyBirthdayOnFacebook(<span class=\"string\">'Jeremy'</span>); <span class=\"comment\">// =&gt; \"Happy birthday Jeremy!\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//交集类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Student = &#123;</span><br><span class=\"line\">  id: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  age: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Employee = &#123;</span><br><span class=\"line\">  companyId: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person: Student &amp; Employee;</span><br><span class=\"line\">person.age = <span class=\"number\">21</span>; <span class=\"comment\">// ✅</span></span><br><span class=\"line\">person.companyId = <span class=\"string\">'SP302334'</span>; <span class=\"comment\">// ✅</span></span><br><span class=\"line\">person.id = <span class=\"string\">'10033402'</span>; <span class=\"comment\">// ✅</span></span><br><span class=\"line\">person.name = <span class=\"string\">'Henry'</span>; <span class=\"comment\">// ❌ - name does not exist in Student &amp; Employee</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可选类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callMom</span>(<span class=\"params\">message?: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!message) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hi mom. Love you. Bye.'</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Interface describing an object containing an optional property</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Person &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  age: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  favoriteColor?: <span class=\"built_in\">string</span>; <span class=\"comment\">// This property is optional</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>"},{"title":"Ubuntu 下 Tensorflow CPU Release 版安装","date":"2018-05-27T01:48:31.000Z","comments":1,"_content":"\nubuntu 下 tensorflow CPU release 版安装步骤\n\n<!--more-->\n\n### 安装 anaconda：\n\n1. 下载[anaconda3-4.2.0 linux 版本](https://repo.continuum.io/archive/)\n\n2. 到 anaconda 的下载目录下执行一下命令：`bash Anaconda3-4.2.0-Linux-x86_64.sh`\n\n3. 接下来就是按照提示一步步的往下就行了，会自动安装各种包，直到结束\n\n4. `echo 'export PATH=\"/home/canace/anaconda3/bin:$PATH\"'>> ~/.bashrc`>>`source ~/.bashrc`启用 anaconda\n\n### tensorflow 环境配置：\n\n1. tensorflow 安装：\n   `conda install tensorflow`（不要连代理，因为连了代理很可能装不成功）\n\n#### PS:\n\n##### conda 常用命令：\n\nconda list：可以显示已经安装好的库。\n\nconda install 库名 ：可以直接安装想要的库。如：conda install tensorflow\n\nconda update 库名：升级库\n","source":"_posts/ubuntu下安装tensorflow.md","raw":"---\ntitle: ubuntu 下 tensorflow CPU release 版安装\ndate: 2018-05-27 09:48:31\ncategories: 深度学习\ntags: tensorflow\ncomments: true\n---\n\nubuntu 下 tensorflow CPU release 版安装步骤\n\n<!--more-->\n\n### 安装 anaconda：\n\n1. 下载[anaconda3-4.2.0 linux 版本](https://repo.continuum.io/archive/)\n\n2. 到 anaconda 的下载目录下执行一下命令：`bash Anaconda3-4.2.0-Linux-x86_64.sh`\n\n3. 接下来就是按照提示一步步的往下就行了，会自动安装各种包，直到结束\n\n4. `echo 'export PATH=\"/home/canace/anaconda3/bin:$PATH\"'>> ~/.bashrc`>>`source ~/.bashrc`启用 anaconda\n\n### tensorflow 环境配置：\n\n1. tensorflow 安装：\n   `conda install tensorflow`（不要连代理，因为连了代理很可能装不成功）\n\n#### PS:\n\n##### conda 常用命令：\n\nconda list：可以显示已经安装好的库。\n\nconda install 库名 ：可以直接安装想要的库。如：conda install tensorflow\n\nconda update 库名：升级库\n","slug":"ubuntu下安装tensorflow","published":1,"updated":"2019-11-13T12:24:01.589Z","layout":"post","photos":[],"link":"","_id":"ck5dbgua1003y8ex0p8sam9ix","content":"<p>ubuntu 下 tensorflow CPU release 版安装步骤</p>\n<a id=\"more\"></a>\n<h3 id=\"安装-anaconda：\"><a href=\"#安装-anaconda：\" class=\"headerlink\" title=\"安装 anaconda：\"></a>安装 anaconda：</h3><ol>\n<li><p>下载<a href=\"https://repo.continuum.io/archive/\" target=\"_blank\" rel=\"noopener\">anaconda3-4.2.0 linux 版本</a></p>\n</li>\n<li><p>到 anaconda 的下载目录下执行一下命令：<code>bash Anaconda3-4.2.0-Linux-x86_64.sh</code></p>\n</li>\n<li><p>接下来就是按照提示一步步的往下就行了，会自动安装各种包，直到结束</p>\n</li>\n<li><p><code>echo &#39;export PATH=&quot;/home/canace/anaconda3/bin:$PATH&quot;&#39;&gt;&gt; ~/.bashrc</code>&gt;&gt;<code>source ~/.bashrc</code>启用 anaconda</p>\n</li>\n</ol>\n<h3 id=\"tensorflow-环境配置：\"><a href=\"#tensorflow-环境配置：\" class=\"headerlink\" title=\"tensorflow 环境配置：\"></a>tensorflow 环境配置：</h3><ol>\n<li>tensorflow 安装：<br><code>conda install tensorflow</code>（不要连代理，因为连了代理很可能装不成功）</li>\n</ol>\n<h4 id=\"PS\"><a href=\"#PS\" class=\"headerlink\" title=\"PS:\"></a>PS:</h4><h5 id=\"conda-常用命令：\"><a href=\"#conda-常用命令：\" class=\"headerlink\" title=\"conda 常用命令：\"></a>conda 常用命令：</h5><p>conda list：可以显示已经安装好的库。</p>\n<p>conda install 库名 ：可以直接安装想要的库。如：conda install tensorflow</p>\n<p>conda update 库名：升级库</p>\n","site":{"data":{}},"excerpt":"<p>ubuntu 下 tensorflow CPU release 版安装步骤</p>","more":"<h3 id=\"安装-anaconda：\"><a href=\"#安装-anaconda：\" class=\"headerlink\" title=\"安装 anaconda：\"></a>安装 anaconda：</h3><ol>\n<li><p>下载<a href=\"https://repo.continuum.io/archive/\" target=\"_blank\" rel=\"noopener\">anaconda3-4.2.0 linux 版本</a></p>\n</li>\n<li><p>到 anaconda 的下载目录下执行一下命令：<code>bash Anaconda3-4.2.0-Linux-x86_64.sh</code></p>\n</li>\n<li><p>接下来就是按照提示一步步的往下就行了，会自动安装各种包，直到结束</p>\n</li>\n<li><p><code>echo &#39;export PATH=&quot;/home/canace/anaconda3/bin:$PATH&quot;&#39;&gt;&gt; ~/.bashrc</code>&gt;&gt;<code>source ~/.bashrc</code>启用 anaconda</p>\n</li>\n</ol>\n<h3 id=\"tensorflow-环境配置：\"><a href=\"#tensorflow-环境配置：\" class=\"headerlink\" title=\"tensorflow 环境配置：\"></a>tensorflow 环境配置：</h3><ol>\n<li>tensorflow 安装：<br><code>conda install tensorflow</code>（不要连代理，因为连了代理很可能装不成功）</li>\n</ol>\n<h4 id=\"PS\"><a href=\"#PS\" class=\"headerlink\" title=\"PS:\"></a>PS:</h4><h5 id=\"conda-常用命令：\"><a href=\"#conda-常用命令：\" class=\"headerlink\" title=\"conda 常用命令：\"></a>conda 常用命令：</h5><p>conda list：可以显示已经安装好的库。</p>\n<p>conda install 库名 ：可以直接安装想要的库。如：conda install tensorflow</p>\n<p>conda update 库名：升级库</p>"},{"title":"Ubuntu 下配置Ss","date":"2018-05-27T01:49:30.000Z","comments":1,"_content":"\nubuntu 下配置 ss 步骤\n\n<!--more-->\n\n1. pip install shadowshocks\n\n2. 创建 json 文件，内容如下：\n\n```\n    {\n    \"server\":\"ip\",\n    \"server_port\":3002,\n    \"local_port\":1080,\n    \"password\":\"psd\",\n    \"timeout\":600,\n    \"method\":\"加密方法\"\n    }\n```\n\n3. 系统设置>>网络设置>>网络代理>>手动，填写 socks 主机和端口信息：127.0.0.1：1080\n\n4. sslocal -c /home/canace/文档/ss.json 开启全局 ss\n","source":"_posts/ubuntu下配置ss.md","raw":"---\ntitle: ubuntu 下配置ss\ndate: 2018-05-27 09:49:30\ncategories: 系统\ntags: 科学上网\ncomments: true\n---\n\nubuntu 下配置 ss 步骤\n\n<!--more-->\n\n1. pip install shadowshocks\n\n2. 创建 json 文件，内容如下：\n\n```\n    {\n    \"server\":\"ip\",\n    \"server_port\":3002,\n    \"local_port\":1080,\n    \"password\":\"psd\",\n    \"timeout\":600,\n    \"method\":\"加密方法\"\n    }\n```\n\n3. 系统设置>>网络设置>>网络代理>>手动，填写 socks 主机和端口信息：127.0.0.1：1080\n\n4. sslocal -c /home/canace/文档/ss.json 开启全局 ss\n","slug":"ubuntu下配置ss","published":1,"updated":"2019-11-13T12:24:32.304Z","layout":"post","photos":[],"link":"","_id":"ck5dbgua100418ex03w3gsw0w","content":"<p>ubuntu 下配置 ss 步骤</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>pip install shadowshocks</p>\n</li>\n<li><p>创建 json 文件，内容如下：</p>\n</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"server\"</span>:<span class=\"string\">\"ip\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"server_port\"</span>:<span class=\"number\">3002</span>,</span><br><span class=\"line\"><span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\"><span class=\"attr\">\"password\"</span>:<span class=\"string\">\"psd\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</span><br><span class=\"line\"><span class=\"attr\">\"method\"</span>:<span class=\"string\">\"加密方法\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>系统设置&gt;&gt;网络设置&gt;&gt;网络代理&gt;&gt;手动，填写 socks 主机和端口信息：127.0.0.1：1080</p>\n</li>\n<li><p>sslocal -c /home/canace/文档/ss.json 开启全局 ss</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>ubuntu 下配置 ss 步骤</p>","more":"<ol>\n<li><p>pip install shadowshocks</p>\n</li>\n<li><p>创建 json 文件，内容如下：</p>\n</li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">\"server\"</span>:<span class=\"string\">\"ip\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"server_port\"</span>:<span class=\"number\">3002</span>,</span><br><span class=\"line\"><span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\"><span class=\"attr\">\"password\"</span>:<span class=\"string\">\"psd\"</span>,</span><br><span class=\"line\"><span class=\"attr\">\"timeout\"</span>:<span class=\"number\">600</span>,</span><br><span class=\"line\"><span class=\"attr\">\"method\"</span>:<span class=\"string\">\"加密方法\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><p>系统设置&gt;&gt;网络设置&gt;&gt;网络代理&gt;&gt;手动，填写 socks 主机和端口信息：127.0.0.1：1080</p>\n</li>\n<li><p>sslocal -c /home/canace/文档/ss.json 开启全局 ss</p>\n</li>\n</ol>"},{"title":"Ubuntu 配置前端环境","comments":1,"date":"2018-07-08T10:56:11.000Z","_content":"\nubuntu 配置前端环境\n\n<!--more-->\n\n1. 下载 sougou 输入法，直接下载安装包双击就行;\n\n2. 下载配置 ` sublime text ：\n\n   (1) `sudo add-apt-repository ppa:webupd8team/sublime-text-3`\n\n   (2) `sudo apt-get update`\n\n   (3) `sudo apt-get install sublime-text-installer`\n\n   (4) `subl`\n\n   (5) 安装 package control：\n\n   ````\n   import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n   ```\n\n   (6)破解码\n   ```\n   —– BEGIN LICENSE —–\n   Michael Barnes\n   Single User License\n   EA7E-821385\n   8A353C41 872A0D5C DF9B2950 AFF6F667\n   C458EA6D 8EA3C286 98D1D650 131A97AB\n   AA919AEC EF20E143 B361B1E7 4C8B7F04\n   B085E65E 2F5F5360 8489D422 FB8FC1AA\n   93F6323C FD7F7544 3F39C318 D95E6480\n   FCCC7561 8A4A1741 68FA4223 ADCEDE07\n   200C25BE DBBC4855 C4CFB774 C5EC138C\n   0FEC1CEF D9DCECEC D3A5DAD1 01316C36\n   —— END LICENSE ——\n   ```\n\n   ````\n\n3. 配置前端环境：\n\n   (1) 安装 node: `curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -` => `sudo apt-get install -y nodejs`\n\n   (2) 更新 node 和 npm: `sudo npm install -g n` => `sudo n stable` => `sudo npm install npm -g`\n\n   (3) 安装淘宝 npm 镜像: ' sudo npm install cnpm -g `\n\n   (4) 安装 webpack : `npm install webpack -g`\n\n   (5) 安装 vue 脚手架: `sudo npm install vue-cli -g`\n\n   (6) 安装 angular 脚手架：`sudo npm i -g @angular/cli`\n\n4. 安装 git: `sudo apt-get intall git`\n\n5. 查看软件位置：ex. `whereis node`、`whereis npm`\n\n6. 安装 vscode 及其[插件](https://blog.csdn.net/win7583362/article/details/79315055)\n","source":"_posts/ubuntu配置前端环境.md","raw":"---\ntitle: ubuntu 配置前端环境\ncomments: true\ndate: 2018-07-08 18:56:11\ncategories: web\ntags: 环境配置\n---\n\nubuntu 配置前端环境\n\n<!--more-->\n\n1. 下载 sougou 输入法，直接下载安装包双击就行;\n\n2. 下载配置 ` sublime text ：\n\n   (1) `sudo add-apt-repository ppa:webupd8team/sublime-text-3`\n\n   (2) `sudo apt-get update`\n\n   (3) `sudo apt-get install sublime-text-installer`\n\n   (4) `subl`\n\n   (5) 安装 package control：\n\n   ````\n   import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n   ```\n\n   (6)破解码\n   ```\n   —– BEGIN LICENSE —–\n   Michael Barnes\n   Single User License\n   EA7E-821385\n   8A353C41 872A0D5C DF9B2950 AFF6F667\n   C458EA6D 8EA3C286 98D1D650 131A97AB\n   AA919AEC EF20E143 B361B1E7 4C8B7F04\n   B085E65E 2F5F5360 8489D422 FB8FC1AA\n   93F6323C FD7F7544 3F39C318 D95E6480\n   FCCC7561 8A4A1741 68FA4223 ADCEDE07\n   200C25BE DBBC4855 C4CFB774 C5EC138C\n   0FEC1CEF D9DCECEC D3A5DAD1 01316C36\n   —— END LICENSE ——\n   ```\n\n   ````\n\n3. 配置前端环境：\n\n   (1) 安装 node: `curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -` => `sudo apt-get install -y nodejs`\n\n   (2) 更新 node 和 npm: `sudo npm install -g n` => `sudo n stable` => `sudo npm install npm -g`\n\n   (3) 安装淘宝 npm 镜像: ' sudo npm install cnpm -g `\n\n   (4) 安装 webpack : `npm install webpack -g`\n\n   (5) 安装 vue 脚手架: `sudo npm install vue-cli -g`\n\n   (6) 安装 angular 脚手架：`sudo npm i -g @angular/cli`\n\n4. 安装 git: `sudo apt-get intall git`\n\n5. 查看软件位置：ex. `whereis node`、`whereis npm`\n\n6. 安装 vscode 及其[插件](https://blog.csdn.net/win7583362/article/details/79315055)\n","slug":"ubuntu配置前端环境","published":1,"updated":"2019-11-13T12:24:51.057Z","layout":"post","photos":[],"link":"","_id":"ck5dbgua200448ex0go64cbws","content":"<p>ubuntu 配置前端环境</p>\n<a id=\"more\"></a>\n<ol>\n<li><p>下载 sougou 输入法，直接下载安装包双击就行;</p>\n</li>\n<li><p>下载配置 ` sublime text ：</p>\n<p>(1) <code>sudo add-apt-repository ppa:webupd8team/sublime-text-3</code></p>\n<p>(2) <code>sudo apt-get update</code></p>\n<p>(3) <code>sudo apt-get install sublime-text-installer</code></p>\n<p>(4) <code>subl</code></p>\n<p>(5) 安装 package control：</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">'6f4c264a24d933ce70df5dedcf1dcaee'</span> + <span class=\"string\">'ebe013ee18cced0ef93d5f746d80ef60'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class=\"keyword\">by</span> = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(<span class=\"keyword\">by</span>).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.<span class=\"keyword\">join</span>( ipp, pf), <span class=\"string\">'wb'</span> ).write(<span class=\"keyword\">by</span>)</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">(6)破解码</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span></span><br><span class=\"line\">—– BEGIN LICENSE —–</span><br><span class=\"line\">Michael Barnes</span><br><span class=\"line\">Single User License</span><br><span class=\"line\">EA7E<span class=\"number\">-821385</span></span><br><span class=\"line\"><span class=\"number\">8</span>A353C41 <span class=\"number\">872</span>A0D5C DF9B2950 AFF6F667</span><br><span class=\"line\">C458EA6D <span class=\"number\">8</span>EA3C286 <span class=\"number\">98</span>D1D650 <span class=\"number\">131</span>A97AB</span><br><span class=\"line\">AA919AEC EF20E143 B361B1E7 <span class=\"number\">4</span>C8B7F04</span><br><span class=\"line\">B085E65E <span class=\"number\">2</span>F5F5360 <span class=\"number\">8489</span>D422 FB8FC1AA</span><br><span class=\"line\"><span class=\"number\">93</span>F6323C FD7F7544 <span class=\"number\">3</span>F39C318 D95E6480</span><br><span class=\"line\">FCCC7561 <span class=\"number\">8</span>A4A1741 <span class=\"number\">68</span>FA4223 ADCEDE07</span><br><span class=\"line\"><span class=\"number\">200</span>C25BE DBBC4855 C4CFB774 C5EC138C</span><br><span class=\"line\"><span class=\"number\">0</span>FEC1CEF D9DCECEC D3A5DAD1 <span class=\"number\">01316</span>C36</span><br><span class=\"line\">—— END LICENSE ——</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置前端环境：</p>\n<p>(1) 安装 node: <code>curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -</code> =&gt; <code>sudo apt-get install -y nodejs</code></p>\n<p>(2) 更新 node 和 npm: <code>sudo npm install -g n</code> =&gt; <code>sudo n stable</code> =&gt; <code>sudo npm install npm -g</code></p>\n<p>(3) 安装淘宝 npm 镜像: ‘ sudo npm install cnpm -g `</p>\n<p>(4) 安装 webpack : <code>npm install webpack -g</code></p>\n<p>(5) 安装 vue 脚手架: <code>sudo npm install vue-cli -g</code></p>\n<p>(6) 安装 angular 脚手架：<code>sudo npm i -g @angular/cli</code></p>\n</li>\n<li><p>安装 git: <code>sudo apt-get intall git</code></p>\n</li>\n<li><p>查看软件位置：ex. <code>whereis node</code>、<code>whereis npm</code></p>\n</li>\n<li><p>安装 vscode 及其<a href=\"https://blog.csdn.net/win7583362/article/details/79315055\" target=\"_blank\" rel=\"noopener\">插件</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>ubuntu 配置前端环境</p>","more":"<ol>\n<li><p>下载 sougou 输入法，直接下载安装包双击就行;</p>\n</li>\n<li><p>下载配置 ` sublime text ：</p>\n<p>(1) <code>sudo add-apt-repository ppa:webupd8team/sublime-text-3</code></p>\n<p>(2) <code>sudo apt-get update</code></p>\n<p>(3) <code>sudo apt-get install sublime-text-installer</code></p>\n<p>(4) <code>subl</code></p>\n<p>(5) 安装 package control：</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">'6f4c264a24d933ce70df5dedcf1dcaee'</span> + <span class=\"string\">'ebe013ee18cced0ef93d5f746d80ef60'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class=\"keyword\">by</span> = urllib.request.urlopen( <span class=\"string\">'http://packagecontrol.io/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(<span class=\"keyword\">by</span>).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.<span class=\"keyword\">join</span>( ipp, pf), <span class=\"string\">'wb'</span> ).write(<span class=\"keyword\">by</span>)</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">(6)破解码</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span></span><br><span class=\"line\">—– BEGIN LICENSE —–</span><br><span class=\"line\">Michael Barnes</span><br><span class=\"line\">Single User License</span><br><span class=\"line\">EA7E<span class=\"number\">-821385</span></span><br><span class=\"line\"><span class=\"number\">8</span>A353C41 <span class=\"number\">872</span>A0D5C DF9B2950 AFF6F667</span><br><span class=\"line\">C458EA6D <span class=\"number\">8</span>EA3C286 <span class=\"number\">98</span>D1D650 <span class=\"number\">131</span>A97AB</span><br><span class=\"line\">AA919AEC EF20E143 B361B1E7 <span class=\"number\">4</span>C8B7F04</span><br><span class=\"line\">B085E65E <span class=\"number\">2</span>F5F5360 <span class=\"number\">8489</span>D422 FB8FC1AA</span><br><span class=\"line\"><span class=\"number\">93</span>F6323C FD7F7544 <span class=\"number\">3</span>F39C318 D95E6480</span><br><span class=\"line\">FCCC7561 <span class=\"number\">8</span>A4A1741 <span class=\"number\">68</span>FA4223 ADCEDE07</span><br><span class=\"line\"><span class=\"number\">200</span>C25BE DBBC4855 C4CFB774 C5EC138C</span><br><span class=\"line\"><span class=\"number\">0</span>FEC1CEF D9DCECEC D3A5DAD1 <span class=\"number\">01316</span>C36</span><br><span class=\"line\">—— END LICENSE ——</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置前端环境：</p>\n<p>(1) 安装 node: <code>curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -</code> =&gt; <code>sudo apt-get install -y nodejs</code></p>\n<p>(2) 更新 node 和 npm: <code>sudo npm install -g n</code> =&gt; <code>sudo n stable</code> =&gt; <code>sudo npm install npm -g</code></p>\n<p>(3) 安装淘宝 npm 镜像: ‘ sudo npm install cnpm -g `</p>\n<p>(4) 安装 webpack : <code>npm install webpack -g</code></p>\n<p>(5) 安装 vue 脚手架: <code>sudo npm install vue-cli -g</code></p>\n<p>(6) 安装 angular 脚手架：<code>sudo npm i -g @angular/cli</code></p>\n</li>\n<li><p>安装 git: <code>sudo apt-get intall git</code></p>\n</li>\n<li><p>查看软件位置：ex. <code>whereis node</code>、<code>whereis npm</code></p>\n</li>\n<li><p>安装 vscode 及其<a href=\"https://blog.csdn.net/win7583362/article/details/79315055\" target=\"_blank\" rel=\"noopener\">插件</a></p>\n</li>\n</ol>"},{"title":"Pixi 极简教程","comments":1,"date":"2019-11-12T00:36:10.000Z","_content":"\npixi.js 是比较常用的 canvas 库，用来展示 2d 的平面图，相比 canvas，封装了更多的功能，也更简单容易上手，但是其官网的文档写得极其的简陋，可阅读性很差，综合了一些其他的文档，写出了这份极简教程，让小白也可以拿来即用。\n\n<!--more-->\n\n### 一、创建画布\n\n```js\n//创建别名\nlet Application = PIXI.Application,\n  loader = PIXI.Loader.shared,\n  resources = PIXI.Loader.shared.resources,\n  Texture = PIXI.Texture,\n  TextureCache = PIXI.utils.TextureCache,\n  Rectangle = PIXI.Rectangle,\n  Sprite = PIXI.Sprite;\n\n// 创建一张 canvas 画布\nlet app = new Application({\n  width: 256,\n  height: 256,\n  antialiasing: true,\n  transparent: false,\n  resolution: 1\n});\n// 把新创建的 canvas 画布挂载到对应的节点上\nthis.$refs.container.appendChild(app.view);\n```\n\n### 二、画布设置\n\n```js\n//canvas 全屏样式\napp.renderer.view.style.position = \"absolute\";\napp.renderer.view.style.width = window.innerWidth + \"px\";\napp.renderer.view.style.height = window.innerHeight + \"px\";\napp.renderer.view.style.display = \"block\";\n\n//`renderer.view` 代表原始的 `<canvas>`标签.\n//给 canvas 加条虚线，就像平常操作 canvas 一样\napp.renderer.view.style.border = \"1px dashed black\";\n\n//重置画布大小\napp.renderer.resize(512, 512);\n\n//改变画布背颜色，颜色使用的是十六进制色\napp.renderer.backgroundColor = 0x000000;\n```\n\n### 三、显示图片\n\n1、texture 方法创建精灵\n\n```js\n// 创建一个 cat 精灵\nconst texture = Texture.from(\"./img/pixi/cat.png\");\nconst cat = new Sprite(texture);\n// 把新创建的精灵加到舞台上\napp.stage.addChild(cat);\n```\n\n2、loder 方法创建精灵\n\n```js\nloader\n  .add([\"./img/pixi/cat.png\", \"./img/pixi/blob.png\", \"./img/pixi/explorer.png\"])\n  .load(() => {\n    //创建精灵\n    let cat = new Sprite(resources[\"./img/pixi/cat.png\"].texture),\n      blob = new Sprite(resources[\"./img/pixi/blob.png\"].texture),\n      explorer = new Sprite(resources[\"./img/pixi/explorer.png\"].texture);\n\n    //把新创建的精灵加到舞台上\n    app.stage.addChild(cat);\n    app.stage.addChild(blob);\n    app.stage.addChild(explorer);\n    loader.reset();\n  });\n```\n\n3、改变精灵的属性\n\n```js\n//改变精灵位置\nblob.position.set(82, 82);\nexplorer.position.set(128, 128);\n// 改变精灵大小\ncat.scale.set(1.2, 1.2);\n//旋转精灵\ncat.rotation = 0.5;\n// 设置旋转的中心点\ncat.anchor.set(0, 0);\n// 精灵显示情况控制\ncat.visible = false;\n```\n\n4、加载雪碧图\n\n```js\nloader.add(\"./img/pixi/tileset.png\").load(() => {\n  let texture = TextureCache[\"./img/pixi/tileset.png\"];\n\n  // 图片在雪碧图上的位置截取 new Rectangle(x, y, w, h)\n  let rectangle = new Rectangle(192, 128, 64, 64);\n\n  // 告诉 texture 使用截取的区域\n  texture.frame = rectangle;\n\n  let rocket = new Sprite(texture);\n\n  rocket.position.set(32, 32);\n  app.stage.addChild(rocket);\n  loader.reset();\n});\n```\n\n5、加载 json 贴图数据集\n\n```js\nLoader.add({\n  name: \"treasure\",\n  url: \"./img/pixi/treasureHunter.json\"\n}).load((loader, resources) => {\n  let dungeon, explorer, treasure, door;\n  const things = resources[\"treasure\"].textures;\n\n  dungeon = new Sprite(things[\"dungeon.png\"]);\n  app.stage.addChild(dungeon);\n\n  explorer = new Sprite(things[\"explorer.png\"]);\n  app.stage.addChild(explorer);\n\n  treasure = new Sprite(things[\"treasure.png\"]);\n  app.stage.addChild(treasure);\n\n  loader.reset();\n});\n```\n\njson 数据长这样：\n\n```json\n{\n  \"frames\": {\n    \"blob.png\": {\n      \"frame\": { \"x\": 55, \"y\": 2, \"w\": 32, \"h\": 24 },\n      \"rotated\": false,\n      \"trimmed\": false,\n      \"spriteSourceSize\": { \"x\": 0, \"y\": 0, \"w\": 32, \"h\": 24 },\n      \"sourceSize\": { \"w\": 32, \"h\": 24 },\n      \"pivot\": { \"x\": 0.5, \"y\": 0.5 }\n    },\n    \"door.png\": {\n      \"frame\": { \"x\": 89, \"y\": 2, \"w\": 32, \"h\": 32 },\n      \"rotated\": false,\n      \"trimmed\": false,\n      \"spriteSourceSize\": { \"x\": 0, \"y\": 0, \"w\": 32, \"h\": 32 },\n      \"sourceSize\": { \"w\": 32, \"h\": 32 },\n      \"pivot\": { \"x\": 0.5, \"y\": 0.5 }\n    },\n    \"dungeon.png\": {\n      \"frame\": { \"x\": 2, \"y\": 36, \"w\": 512, \"h\": 512 },\n      \"rotated\": false,\n      \"trimmed\": false,\n      \"spriteSourceSize\": { \"x\": 0, \"y\": 0, \"w\": 512, \"h\": 512 },\n      \"sourceSize\": { \"w\": 512, \"h\": 512 },\n      \"pivot\": { \"x\": 0.5, \"y\": 0.5 }\n    },\n    \"explorer.png\": {\n      \"frame\": { \"x\": 2, \"y\": 2, \"w\": 21, \"h\": 32 },\n      \"rotated\": false,\n      \"trimmed\": false,\n      \"spriteSourceSize\": { \"x\": 0, \"y\": 0, \"w\": 21, \"h\": 32 },\n      \"sourceSize\": { \"w\": 21, \"h\": 32 },\n      \"pivot\": { \"x\": 0.5, \"y\": 0.5 }\n    },\n    \"treasure.png\": {\n      \"frame\": { \"x\": 25, \"y\": 2, \"w\": 28, \"h\": 24 },\n      \"rotated\": false,\n      \"trimmed\": false,\n      \"spriteSourceSize\": { \"x\": 0, \"y\": 0, \"w\": 28, \"h\": 24 },\n      \"sourceSize\": { \"w\": 28, \"h\": 24 },\n      \"pivot\": { \"x\": 0.5, \"y\": 0.5 }\n    }\n  },\n  \"meta\": {\n    \"app\": \"http://www.codeandweb.com/texturepacker\",\n    \"version\": \"1.0\",\n    \"image\": \"treasureHunter.png\",\n    \"format\": \"RGBA8888\",\n    \"size\": { \"w\": 516, \"h\": 550 },\n    \"scale\": \"1\",\n    \"smartupdate\": \"$TexturePacker:SmartUpdate:51ede84c7a85e4d6aeb31a6020a20858:3923663e59fb40b578d66a492a2cda2d:9995f8b4db1ac3cb75651b1542df8ee2$\"\n  }\n}\n```\n\n看着很复杂，不像人写的是吧？确实，可以自动生成的，你需要 TexturePacker 这个神奇，生成雪碧图的同时，可以到处 json 数据集，有专门针对 pixi 的拿来即用的版本。\n","source":"_posts/pixi基础.md","raw":"---\ntitle: pixi 极简教程\ncomments: true\ndate: 2019-11-12 08:36:10\ncategories: web\ntags: 2D\n---\n\npixi.js 是比较常用的 canvas 库，用来展示 2d 的平面图，相比 canvas，封装了更多的功能，也更简单容易上手，但是其官网的文档写得极其的简陋，可阅读性很差，综合了一些其他的文档，写出了这份极简教程，让小白也可以拿来即用。\n\n<!--more-->\n\n### 一、创建画布\n\n```js\n//创建别名\nlet Application = PIXI.Application,\n  loader = PIXI.Loader.shared,\n  resources = PIXI.Loader.shared.resources,\n  Texture = PIXI.Texture,\n  TextureCache = PIXI.utils.TextureCache,\n  Rectangle = PIXI.Rectangle,\n  Sprite = PIXI.Sprite;\n\n// 创建一张 canvas 画布\nlet app = new Application({\n  width: 256,\n  height: 256,\n  antialiasing: true,\n  transparent: false,\n  resolution: 1\n});\n// 把新创建的 canvas 画布挂载到对应的节点上\nthis.$refs.container.appendChild(app.view);\n```\n\n### 二、画布设置\n\n```js\n//canvas 全屏样式\napp.renderer.view.style.position = \"absolute\";\napp.renderer.view.style.width = window.innerWidth + \"px\";\napp.renderer.view.style.height = window.innerHeight + \"px\";\napp.renderer.view.style.display = \"block\";\n\n//`renderer.view` 代表原始的 `<canvas>`标签.\n//给 canvas 加条虚线，就像平常操作 canvas 一样\napp.renderer.view.style.border = \"1px dashed black\";\n\n//重置画布大小\napp.renderer.resize(512, 512);\n\n//改变画布背颜色，颜色使用的是十六进制色\napp.renderer.backgroundColor = 0x000000;\n```\n\n### 三、显示图片\n\n1、texture 方法创建精灵\n\n```js\n// 创建一个 cat 精灵\nconst texture = Texture.from(\"./img/pixi/cat.png\");\nconst cat = new Sprite(texture);\n// 把新创建的精灵加到舞台上\napp.stage.addChild(cat);\n```\n\n2、loder 方法创建精灵\n\n```js\nloader\n  .add([\"./img/pixi/cat.png\", \"./img/pixi/blob.png\", \"./img/pixi/explorer.png\"])\n  .load(() => {\n    //创建精灵\n    let cat = new Sprite(resources[\"./img/pixi/cat.png\"].texture),\n      blob = new Sprite(resources[\"./img/pixi/blob.png\"].texture),\n      explorer = new Sprite(resources[\"./img/pixi/explorer.png\"].texture);\n\n    //把新创建的精灵加到舞台上\n    app.stage.addChild(cat);\n    app.stage.addChild(blob);\n    app.stage.addChild(explorer);\n    loader.reset();\n  });\n```\n\n3、改变精灵的属性\n\n```js\n//改变精灵位置\nblob.position.set(82, 82);\nexplorer.position.set(128, 128);\n// 改变精灵大小\ncat.scale.set(1.2, 1.2);\n//旋转精灵\ncat.rotation = 0.5;\n// 设置旋转的中心点\ncat.anchor.set(0, 0);\n// 精灵显示情况控制\ncat.visible = false;\n```\n\n4、加载雪碧图\n\n```js\nloader.add(\"./img/pixi/tileset.png\").load(() => {\n  let texture = TextureCache[\"./img/pixi/tileset.png\"];\n\n  // 图片在雪碧图上的位置截取 new Rectangle(x, y, w, h)\n  let rectangle = new Rectangle(192, 128, 64, 64);\n\n  // 告诉 texture 使用截取的区域\n  texture.frame = rectangle;\n\n  let rocket = new Sprite(texture);\n\n  rocket.position.set(32, 32);\n  app.stage.addChild(rocket);\n  loader.reset();\n});\n```\n\n5、加载 json 贴图数据集\n\n```js\nLoader.add({\n  name: \"treasure\",\n  url: \"./img/pixi/treasureHunter.json\"\n}).load((loader, resources) => {\n  let dungeon, explorer, treasure, door;\n  const things = resources[\"treasure\"].textures;\n\n  dungeon = new Sprite(things[\"dungeon.png\"]);\n  app.stage.addChild(dungeon);\n\n  explorer = new Sprite(things[\"explorer.png\"]);\n  app.stage.addChild(explorer);\n\n  treasure = new Sprite(things[\"treasure.png\"]);\n  app.stage.addChild(treasure);\n\n  loader.reset();\n});\n```\n\njson 数据长这样：\n\n```json\n{\n  \"frames\": {\n    \"blob.png\": {\n      \"frame\": { \"x\": 55, \"y\": 2, \"w\": 32, \"h\": 24 },\n      \"rotated\": false,\n      \"trimmed\": false,\n      \"spriteSourceSize\": { \"x\": 0, \"y\": 0, \"w\": 32, \"h\": 24 },\n      \"sourceSize\": { \"w\": 32, \"h\": 24 },\n      \"pivot\": { \"x\": 0.5, \"y\": 0.5 }\n    },\n    \"door.png\": {\n      \"frame\": { \"x\": 89, \"y\": 2, \"w\": 32, \"h\": 32 },\n      \"rotated\": false,\n      \"trimmed\": false,\n      \"spriteSourceSize\": { \"x\": 0, \"y\": 0, \"w\": 32, \"h\": 32 },\n      \"sourceSize\": { \"w\": 32, \"h\": 32 },\n      \"pivot\": { \"x\": 0.5, \"y\": 0.5 }\n    },\n    \"dungeon.png\": {\n      \"frame\": { \"x\": 2, \"y\": 36, \"w\": 512, \"h\": 512 },\n      \"rotated\": false,\n      \"trimmed\": false,\n      \"spriteSourceSize\": { \"x\": 0, \"y\": 0, \"w\": 512, \"h\": 512 },\n      \"sourceSize\": { \"w\": 512, \"h\": 512 },\n      \"pivot\": { \"x\": 0.5, \"y\": 0.5 }\n    },\n    \"explorer.png\": {\n      \"frame\": { \"x\": 2, \"y\": 2, \"w\": 21, \"h\": 32 },\n      \"rotated\": false,\n      \"trimmed\": false,\n      \"spriteSourceSize\": { \"x\": 0, \"y\": 0, \"w\": 21, \"h\": 32 },\n      \"sourceSize\": { \"w\": 21, \"h\": 32 },\n      \"pivot\": { \"x\": 0.5, \"y\": 0.5 }\n    },\n    \"treasure.png\": {\n      \"frame\": { \"x\": 25, \"y\": 2, \"w\": 28, \"h\": 24 },\n      \"rotated\": false,\n      \"trimmed\": false,\n      \"spriteSourceSize\": { \"x\": 0, \"y\": 0, \"w\": 28, \"h\": 24 },\n      \"sourceSize\": { \"w\": 28, \"h\": 24 },\n      \"pivot\": { \"x\": 0.5, \"y\": 0.5 }\n    }\n  },\n  \"meta\": {\n    \"app\": \"http://www.codeandweb.com/texturepacker\",\n    \"version\": \"1.0\",\n    \"image\": \"treasureHunter.png\",\n    \"format\": \"RGBA8888\",\n    \"size\": { \"w\": 516, \"h\": 550 },\n    \"scale\": \"1\",\n    \"smartupdate\": \"$TexturePacker:SmartUpdate:51ede84c7a85e4d6aeb31a6020a20858:3923663e59fb40b578d66a492a2cda2d:9995f8b4db1ac3cb75651b1542df8ee2$\"\n  }\n}\n```\n\n看着很复杂，不像人写的是吧？确实，可以自动生成的，你需要 TexturePacker 这个神奇，生成雪碧图的同时，可以到处 json 数据集，有专门针对 pixi 的拿来即用的版本。\n","slug":"pixi基础","published":1,"updated":"2019-11-13T13:30:31.334Z","layout":"post","photos":[],"link":"","_id":"ck5dbgua300488ex0ajnpp945","content":"<p>pixi.js 是比较常用的 canvas 库，用来展示 2d 的平面图，相比 canvas，封装了更多的功能，也更简单容易上手，但是其官网的文档写得极其的简陋，可阅读性很差，综合了一些其他的文档，写出了这份极简教程，让小白也可以拿来即用。</p>\n<a id=\"more\"></a>\n<h3 id=\"一、创建画布\"><a href=\"#一、创建画布\" class=\"headerlink\" title=\"一、创建画布\"></a>一、创建画布</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建别名</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Application = PIXI.Application,</span><br><span class=\"line\">  loader = PIXI.Loader.shared,</span><br><span class=\"line\">  resources = PIXI.Loader.shared.resources,</span><br><span class=\"line\">  Texture = PIXI.Texture,</span><br><span class=\"line\">  TextureCache = PIXI.utils.TextureCache,</span><br><span class=\"line\">  Rectangle = PIXI.Rectangle,</span><br><span class=\"line\">  Sprite = PIXI.Sprite;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一张 canvas 画布</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Application(&#123;</span><br><span class=\"line\">  width: <span class=\"number\">256</span>,</span><br><span class=\"line\">  height: <span class=\"number\">256</span>,</span><br><span class=\"line\">  antialiasing: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  transparent: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  resolution: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 把新创建的 canvas 画布挂载到对应的节点上</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$refs.container.appendChild(app.view);</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、画布设置\"><a href=\"#二、画布设置\" class=\"headerlink\" title=\"二、画布设置\"></a>二、画布设置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//canvas 全屏样式</span></span><br><span class=\"line\">app.renderer.view.style.position = <span class=\"string\">\"absolute\"</span>;</span><br><span class=\"line\">app.renderer.view.style.width = <span class=\"built_in\">window</span>.innerWidth + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">app.renderer.view.style.height = <span class=\"built_in\">window</span>.innerHeight + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">app.renderer.view.style.display = <span class=\"string\">\"block\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//`renderer.view` 代表原始的 `&lt;canvas&gt;`标签.</span></span><br><span class=\"line\"><span class=\"comment\">//给 canvas 加条虚线，就像平常操作 canvas 一样</span></span><br><span class=\"line\">app.renderer.view.style.border = <span class=\"string\">\"1px dashed black\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//重置画布大小</span></span><br><span class=\"line\">app.renderer.resize(<span class=\"number\">512</span>, <span class=\"number\">512</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//改变画布背颜色，颜色使用的是十六进制色</span></span><br><span class=\"line\">app.renderer.backgroundColor = <span class=\"number\">0x000000</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、显示图片\"><a href=\"#三、显示图片\" class=\"headerlink\" title=\"三、显示图片\"></a>三、显示图片</h3><p>1、texture 方法创建精灵</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个 cat 精灵</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> texture = Texture.from(<span class=\"string\">\"./img/pixi/cat.png\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cat = <span class=\"keyword\">new</span> Sprite(texture);</span><br><span class=\"line\"><span class=\"comment\">// 把新创建的精灵加到舞台上</span></span><br><span class=\"line\">app.stage.addChild(cat);</span><br></pre></td></tr></table></figure>\n<p>2、loder 方法创建精灵</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader</span><br><span class=\"line\">  .add([<span class=\"string\">\"./img/pixi/cat.png\"</span>, <span class=\"string\">\"./img/pixi/blob.png\"</span>, <span class=\"string\">\"./img/pixi/explorer.png\"</span>])</span><br><span class=\"line\">  .load(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建精灵</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cat = <span class=\"keyword\">new</span> Sprite(resources[<span class=\"string\">\"./img/pixi/cat.png\"</span>].texture),</span><br><span class=\"line\">      blob = <span class=\"keyword\">new</span> Sprite(resources[<span class=\"string\">\"./img/pixi/blob.png\"</span>].texture),</span><br><span class=\"line\">      explorer = <span class=\"keyword\">new</span> Sprite(resources[<span class=\"string\">\"./img/pixi/explorer.png\"</span>].texture);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//把新创建的精灵加到舞台上</span></span><br><span class=\"line\">    app.stage.addChild(cat);</span><br><span class=\"line\">    app.stage.addChild(blob);</span><br><span class=\"line\">    app.stage.addChild(explorer);</span><br><span class=\"line\">    loader.reset();</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>3、改变精灵的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//改变精灵位置</span></span><br><span class=\"line\">blob.position.set(<span class=\"number\">82</span>, <span class=\"number\">82</span>);</span><br><span class=\"line\">explorer.position.set(<span class=\"number\">128</span>, <span class=\"number\">128</span>);</span><br><span class=\"line\"><span class=\"comment\">// 改变精灵大小</span></span><br><span class=\"line\">cat.scale.set(<span class=\"number\">1.2</span>, <span class=\"number\">1.2</span>);</span><br><span class=\"line\"><span class=\"comment\">//旋转精灵</span></span><br><span class=\"line\">cat.rotation = <span class=\"number\">0.5</span>;</span><br><span class=\"line\"><span class=\"comment\">// 设置旋转的中心点</span></span><br><span class=\"line\">cat.anchor.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 精灵显示情况控制</span></span><br><span class=\"line\">cat.visible = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<p>4、加载雪碧图</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader.add(<span class=\"string\">\"./img/pixi/tileset.png\"</span>).load(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> texture = TextureCache[<span class=\"string\">\"./img/pixi/tileset.png\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 图片在雪碧图上的位置截取 new Rectangle(x, y, w, h)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rectangle = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">192</span>, <span class=\"number\">128</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 告诉 texture 使用截取的区域</span></span><br><span class=\"line\">  texture.frame = rectangle;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rocket = <span class=\"keyword\">new</span> Sprite(texture);</span><br><span class=\"line\"></span><br><span class=\"line\">  rocket.position.set(<span class=\"number\">32</span>, <span class=\"number\">32</span>);</span><br><span class=\"line\">  app.stage.addChild(rocket);</span><br><span class=\"line\">  loader.reset();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>5、加载 json 贴图数据集</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loader.add(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"treasure\"</span>,</span><br><span class=\"line\">  url: <span class=\"string\">\"./img/pixi/treasureHunter.json\"</span></span><br><span class=\"line\">&#125;).load(<span class=\"function\">(<span class=\"params\">loader, resources</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dungeon, explorer, treasure, door;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> things = resources[<span class=\"string\">\"treasure\"</span>].textures;</span><br><span class=\"line\"></span><br><span class=\"line\">  dungeon = <span class=\"keyword\">new</span> Sprite(things[<span class=\"string\">\"dungeon.png\"</span>]);</span><br><span class=\"line\">  app.stage.addChild(dungeon);</span><br><span class=\"line\"></span><br><span class=\"line\">  explorer = <span class=\"keyword\">new</span> Sprite(things[<span class=\"string\">\"explorer.png\"</span>]);</span><br><span class=\"line\">  app.stage.addChild(explorer);</span><br><span class=\"line\"></span><br><span class=\"line\">  treasure = <span class=\"keyword\">new</span> Sprite(things[<span class=\"string\">\"treasure.png\"</span>]);</span><br><span class=\"line\">  app.stage.addChild(treasure);</span><br><span class=\"line\"></span><br><span class=\"line\">  loader.reset();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>json 数据长这样：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"frames\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"blob.png\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"frame\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">55</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">32</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"rotated\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"trimmed\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"spriteSourceSize\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">32</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"sourceSize\"</span>: &#123; <span class=\"attr\">\"w\"</span>: <span class=\"number\">32</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"pivot\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0.5</span> &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"door.png\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"frame\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">89</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">32</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">32</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"rotated\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"trimmed\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"spriteSourceSize\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">32</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">32</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"sourceSize\"</span>: &#123; <span class=\"attr\">\"w\"</span>: <span class=\"number\">32</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">32</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"pivot\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0.5</span> &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"dungeon.png\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"frame\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">36</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">512</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">512</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"rotated\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"trimmed\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"spriteSourceSize\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">512</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">512</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"sourceSize\"</span>: &#123; <span class=\"attr\">\"w\"</span>: <span class=\"number\">512</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">512</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"pivot\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0.5</span> &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"explorer.png\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"frame\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">21</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">32</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"rotated\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"trimmed\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"spriteSourceSize\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">21</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">32</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"sourceSize\"</span>: &#123; <span class=\"attr\">\"w\"</span>: <span class=\"number\">21</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">32</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"pivot\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0.5</span> &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"treasure.png\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"frame\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">25</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">28</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"rotated\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"trimmed\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"spriteSourceSize\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">28</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"sourceSize\"</span>: &#123; <span class=\"attr\">\"w\"</span>: <span class=\"number\">28</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"pivot\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0.5</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"meta\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"app\"</span>: <span class=\"string\">\"http://www.codeandweb.com/texturepacker\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"image\"</span>: <span class=\"string\">\"treasureHunter.png\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"format\"</span>: <span class=\"string\">\"RGBA8888\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: &#123; <span class=\"attr\">\"w\"</span>: <span class=\"number\">516</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">550</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"scale\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"smartupdate\"</span>: <span class=\"string\">\"$TexturePacker:SmartUpdate:51ede84c7a85e4d6aeb31a6020a20858:3923663e59fb40b578d66a492a2cda2d:9995f8b4db1ac3cb75651b1542df8ee2$\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看着很复杂，不像人写的是吧？确实，可以自动生成的，你需要 TexturePacker 这个神奇，生成雪碧图的同时，可以到处 json 数据集，有专门针对 pixi 的拿来即用的版本。</p>\n","site":{"data":{}},"excerpt":"<p>pixi.js 是比较常用的 canvas 库，用来展示 2d 的平面图，相比 canvas，封装了更多的功能，也更简单容易上手，但是其官网的文档写得极其的简陋，可阅读性很差，综合了一些其他的文档，写出了这份极简教程，让小白也可以拿来即用。</p>","more":"<h3 id=\"一、创建画布\"><a href=\"#一、创建画布\" class=\"headerlink\" title=\"一、创建画布\"></a>一、创建画布</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建别名</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Application = PIXI.Application,</span><br><span class=\"line\">  loader = PIXI.Loader.shared,</span><br><span class=\"line\">  resources = PIXI.Loader.shared.resources,</span><br><span class=\"line\">  Texture = PIXI.Texture,</span><br><span class=\"line\">  TextureCache = PIXI.utils.TextureCache,</span><br><span class=\"line\">  Rectangle = PIXI.Rectangle,</span><br><span class=\"line\">  Sprite = PIXI.Sprite;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一张 canvas 画布</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Application(&#123;</span><br><span class=\"line\">  width: <span class=\"number\">256</span>,</span><br><span class=\"line\">  height: <span class=\"number\">256</span>,</span><br><span class=\"line\">  antialiasing: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  transparent: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  resolution: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 把新创建的 canvas 画布挂载到对应的节点上</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$refs.container.appendChild(app.view);</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、画布设置\"><a href=\"#二、画布设置\" class=\"headerlink\" title=\"二、画布设置\"></a>二、画布设置</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//canvas 全屏样式</span></span><br><span class=\"line\">app.renderer.view.style.position = <span class=\"string\">\"absolute\"</span>;</span><br><span class=\"line\">app.renderer.view.style.width = <span class=\"built_in\">window</span>.innerWidth + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">app.renderer.view.style.height = <span class=\"built_in\">window</span>.innerHeight + <span class=\"string\">\"px\"</span>;</span><br><span class=\"line\">app.renderer.view.style.display = <span class=\"string\">\"block\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//`renderer.view` 代表原始的 `&lt;canvas&gt;`标签.</span></span><br><span class=\"line\"><span class=\"comment\">//给 canvas 加条虚线，就像平常操作 canvas 一样</span></span><br><span class=\"line\">app.renderer.view.style.border = <span class=\"string\">\"1px dashed black\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//重置画布大小</span></span><br><span class=\"line\">app.renderer.resize(<span class=\"number\">512</span>, <span class=\"number\">512</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//改变画布背颜色，颜色使用的是十六进制色</span></span><br><span class=\"line\">app.renderer.backgroundColor = <span class=\"number\">0x000000</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、显示图片\"><a href=\"#三、显示图片\" class=\"headerlink\" title=\"三、显示图片\"></a>三、显示图片</h3><p>1、texture 方法创建精灵</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个 cat 精灵</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> texture = Texture.from(<span class=\"string\">\"./img/pixi/cat.png\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cat = <span class=\"keyword\">new</span> Sprite(texture);</span><br><span class=\"line\"><span class=\"comment\">// 把新创建的精灵加到舞台上</span></span><br><span class=\"line\">app.stage.addChild(cat);</span><br></pre></td></tr></table></figure>\n<p>2、loder 方法创建精灵</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader</span><br><span class=\"line\">  .add([<span class=\"string\">\"./img/pixi/cat.png\"</span>, <span class=\"string\">\"./img/pixi/blob.png\"</span>, <span class=\"string\">\"./img/pixi/explorer.png\"</span>])</span><br><span class=\"line\">  .load(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建精灵</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cat = <span class=\"keyword\">new</span> Sprite(resources[<span class=\"string\">\"./img/pixi/cat.png\"</span>].texture),</span><br><span class=\"line\">      blob = <span class=\"keyword\">new</span> Sprite(resources[<span class=\"string\">\"./img/pixi/blob.png\"</span>].texture),</span><br><span class=\"line\">      explorer = <span class=\"keyword\">new</span> Sprite(resources[<span class=\"string\">\"./img/pixi/explorer.png\"</span>].texture);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//把新创建的精灵加到舞台上</span></span><br><span class=\"line\">    app.stage.addChild(cat);</span><br><span class=\"line\">    app.stage.addChild(blob);</span><br><span class=\"line\">    app.stage.addChild(explorer);</span><br><span class=\"line\">    loader.reset();</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>3、改变精灵的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//改变精灵位置</span></span><br><span class=\"line\">blob.position.set(<span class=\"number\">82</span>, <span class=\"number\">82</span>);</span><br><span class=\"line\">explorer.position.set(<span class=\"number\">128</span>, <span class=\"number\">128</span>);</span><br><span class=\"line\"><span class=\"comment\">// 改变精灵大小</span></span><br><span class=\"line\">cat.scale.set(<span class=\"number\">1.2</span>, <span class=\"number\">1.2</span>);</span><br><span class=\"line\"><span class=\"comment\">//旋转精灵</span></span><br><span class=\"line\">cat.rotation = <span class=\"number\">0.5</span>;</span><br><span class=\"line\"><span class=\"comment\">// 设置旋转的中心点</span></span><br><span class=\"line\">cat.anchor.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 精灵显示情况控制</span></span><br><span class=\"line\">cat.visible = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<p>4、加载雪碧图</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">loader.add(<span class=\"string\">\"./img/pixi/tileset.png\"</span>).load(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> texture = TextureCache[<span class=\"string\">\"./img/pixi/tileset.png\"</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 图片在雪碧图上的位置截取 new Rectangle(x, y, w, h)</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rectangle = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">192</span>, <span class=\"number\">128</span>, <span class=\"number\">64</span>, <span class=\"number\">64</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 告诉 texture 使用截取的区域</span></span><br><span class=\"line\">  texture.frame = rectangle;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> rocket = <span class=\"keyword\">new</span> Sprite(texture);</span><br><span class=\"line\"></span><br><span class=\"line\">  rocket.position.set(<span class=\"number\">32</span>, <span class=\"number\">32</span>);</span><br><span class=\"line\">  app.stage.addChild(rocket);</span><br><span class=\"line\">  loader.reset();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>5、加载 json 贴图数据集</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loader.add(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"treasure\"</span>,</span><br><span class=\"line\">  url: <span class=\"string\">\"./img/pixi/treasureHunter.json\"</span></span><br><span class=\"line\">&#125;).load(<span class=\"function\">(<span class=\"params\">loader, resources</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> dungeon, explorer, treasure, door;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> things = resources[<span class=\"string\">\"treasure\"</span>].textures;</span><br><span class=\"line\"></span><br><span class=\"line\">  dungeon = <span class=\"keyword\">new</span> Sprite(things[<span class=\"string\">\"dungeon.png\"</span>]);</span><br><span class=\"line\">  app.stage.addChild(dungeon);</span><br><span class=\"line\"></span><br><span class=\"line\">  explorer = <span class=\"keyword\">new</span> Sprite(things[<span class=\"string\">\"explorer.png\"</span>]);</span><br><span class=\"line\">  app.stage.addChild(explorer);</span><br><span class=\"line\"></span><br><span class=\"line\">  treasure = <span class=\"keyword\">new</span> Sprite(things[<span class=\"string\">\"treasure.png\"</span>]);</span><br><span class=\"line\">  app.stage.addChild(treasure);</span><br><span class=\"line\"></span><br><span class=\"line\">  loader.reset();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>json 数据长这样：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"frames\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"blob.png\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"frame\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">55</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">32</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"rotated\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"trimmed\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"spriteSourceSize\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">32</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"sourceSize\"</span>: &#123; <span class=\"attr\">\"w\"</span>: <span class=\"number\">32</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"pivot\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0.5</span> &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"door.png\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"frame\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">89</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">32</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">32</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"rotated\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"trimmed\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"spriteSourceSize\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">32</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">32</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"sourceSize\"</span>: &#123; <span class=\"attr\">\"w\"</span>: <span class=\"number\">32</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">32</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"pivot\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0.5</span> &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"dungeon.png\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"frame\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">36</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">512</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">512</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"rotated\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"trimmed\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"spriteSourceSize\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">512</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">512</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"sourceSize\"</span>: &#123; <span class=\"attr\">\"w\"</span>: <span class=\"number\">512</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">512</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"pivot\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0.5</span> &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"explorer.png\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"frame\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">21</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">32</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"rotated\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"trimmed\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"spriteSourceSize\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">21</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">32</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"sourceSize\"</span>: &#123; <span class=\"attr\">\"w\"</span>: <span class=\"number\">21</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">32</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"pivot\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0.5</span> &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"treasure.png\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"frame\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">25</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">2</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">28</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"rotated\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"trimmed\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"spriteSourceSize\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0</span>, <span class=\"attr\">\"w\"</span>: <span class=\"number\">28</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"sourceSize\"</span>: &#123; <span class=\"attr\">\"w\"</span>: <span class=\"number\">28</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">24</span> &#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"pivot\"</span>: &#123; <span class=\"attr\">\"x\"</span>: <span class=\"number\">0.5</span>, <span class=\"attr\">\"y\"</span>: <span class=\"number\">0.5</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"meta\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"app\"</span>: <span class=\"string\">\"http://www.codeandweb.com/texturepacker\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"image\"</span>: <span class=\"string\">\"treasureHunter.png\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"format\"</span>: <span class=\"string\">\"RGBA8888\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: &#123; <span class=\"attr\">\"w\"</span>: <span class=\"number\">516</span>, <span class=\"attr\">\"h\"</span>: <span class=\"number\">550</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"scale\"</span>: <span class=\"string\">\"1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"smartupdate\"</span>: <span class=\"string\">\"$TexturePacker:SmartUpdate:51ede84c7a85e4d6aeb31a6020a20858:3923663e59fb40b578d66a492a2cda2d:9995f8b4db1ac3cb75651b1542df8ee2$\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看着很复杂，不像人写的是吧？确实，可以自动生成的，你需要 TexturePacker 这个神奇，生成雪碧图的同时，可以到处 json 数据集，有专门针对 pixi 的拿来即用的版本。</p>"},{"title":"Vue-Config 配置模板","comments":1,"date":"2018-10-22T11:33:31.000Z","_content":"\n```js\nconst path = require('path');\n\nconst resolve = dir => path.join(__dirname, dir);\n\nconst urlPath = process.env.NODE_ENV === 'development' ? './' : '/item-name/';\n\nmodule.exports = {\n  // 基本路径\n  baseUrl: urlPath,\n  // 生产环境是否生成 sourceMap 文件\n  productionSourceMap: false,\n  // 服务器端口号\n  devServer: {\n    port: 1234,\n  },\n  chainWebpack: config => {\n    config.resolve.alias\n      .set('@$', resolve('src'))\n      .set('components', resolve('src/components'))\n      .set('utils', resolve('src/utils'))\n      .set('service', resolve('src/service'))\n      .set('views', resolve('src/views'))\n      .set('assets', resolve('src/assets'));\n  },\n};\n```\n","source":"_posts/vue-config配置模板.md","raw":"---\ntitle: vue-config 配置模板\ncomments: true\ndate: 2018-10-22 19:33:31\ncategories: web\ntags: vue\n---\n\n```js\nconst path = require('path');\n\nconst resolve = dir => path.join(__dirname, dir);\n\nconst urlPath = process.env.NODE_ENV === 'development' ? './' : '/item-name/';\n\nmodule.exports = {\n  // 基本路径\n  baseUrl: urlPath,\n  // 生产环境是否生成 sourceMap 文件\n  productionSourceMap: false,\n  // 服务器端口号\n  devServer: {\n    port: 1234,\n  },\n  chainWebpack: config => {\n    config.resolve.alias\n      .set('@$', resolve('src'))\n      .set('components', resolve('src/components'))\n      .set('utils', resolve('src/utils'))\n      .set('service', resolve('src/service'))\n      .set('views', resolve('src/views'))\n      .set('assets', resolve('src/assets'));\n  },\n};\n```\n","slug":"vue-config配置模板","published":1,"updated":"2019-05-19T05:26:30.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgua4004a8ex0cmlhrn0d","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> resolve = <span class=\"function\"><span class=\"params\">dir</span> =&gt;</span> path.join(__dirname, dir);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> urlPath = process.env.NODE_ENV === <span class=\"string\">'development'</span> ? <span class=\"string\">'./'</span> : <span class=\"string\">'/item-name/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 基本路径</span></span><br><span class=\"line\">  baseUrl: urlPath,</span><br><span class=\"line\">  <span class=\"comment\">// 生产环境是否生成 sourceMap 文件</span></span><br><span class=\"line\">  productionSourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 服务器端口号</span></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    port: <span class=\"number\">1234</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  chainWebpack: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    config.resolve.alias</span><br><span class=\"line\">      .set(<span class=\"string\">'@$'</span>, resolve(<span class=\"string\">'src'</span>))</span><br><span class=\"line\">      .set(<span class=\"string\">'components'</span>, resolve(<span class=\"string\">'src/components'</span>))</span><br><span class=\"line\">      .set(<span class=\"string\">'utils'</span>, resolve(<span class=\"string\">'src/utils'</span>))</span><br><span class=\"line\">      .set(<span class=\"string\">'service'</span>, resolve(<span class=\"string\">'src/service'</span>))</span><br><span class=\"line\">      .set(<span class=\"string\">'views'</span>, resolve(<span class=\"string\">'src/views'</span>))</span><br><span class=\"line\">      .set(<span class=\"string\">'assets'</span>, resolve(<span class=\"string\">'src/assets'</span>));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> resolve = <span class=\"function\"><span class=\"params\">dir</span> =&gt;</span> path.join(__dirname, dir);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> urlPath = process.env.NODE_ENV === <span class=\"string\">'development'</span> ? <span class=\"string\">'./'</span> : <span class=\"string\">'/item-name/'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 基本路径</span></span><br><span class=\"line\">  baseUrl: urlPath,</span><br><span class=\"line\">  <span class=\"comment\">// 生产环境是否生成 sourceMap 文件</span></span><br><span class=\"line\">  productionSourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 服务器端口号</span></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    port: <span class=\"number\">1234</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  chainWebpack: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    config.resolve.alias</span><br><span class=\"line\">      .set(<span class=\"string\">'@$'</span>, resolve(<span class=\"string\">'src'</span>))</span><br><span class=\"line\">      .set(<span class=\"string\">'components'</span>, resolve(<span class=\"string\">'src/components'</span>))</span><br><span class=\"line\">      .set(<span class=\"string\">'utils'</span>, resolve(<span class=\"string\">'src/utils'</span>))</span><br><span class=\"line\">      .set(<span class=\"string\">'service'</span>, resolve(<span class=\"string\">'src/service'</span>))</span><br><span class=\"line\">      .set(<span class=\"string\">'views'</span>, resolve(<span class=\"string\">'src/views'</span>))</span><br><span class=\"line\">      .set(<span class=\"string\">'assets'</span>, resolve(<span class=\"string\">'src/assets'</span>));</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"Vue动态改变title","comments":1,"date":"2018-10-22T11:40:00.000Z","_content":"\n1. 代码：\n\n```js\nimport router from '../router';\n\nrouter.beforeEach((to, from, next) => {\n  let n = to.query.subjectId;\n  let x = ['mike', 'john', 'sarah'];\n  if (n === '4') {\n    document.title = x[2];\n  } else if (n === '5') {\n    document.title = x[1];\n  } else if (n === '6') {\n    document.title = x[0];\n  }\n  next();\n});\n```\n\n2. 在 main.js 引入即可，使用示例：\n\n```js\nimport Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\nimport './utils/title';\n\nVue.config.productionTip = false;\nVue.use(ElementUI);\n\nnew Vue({\n  router,\n  store,\n  render: h => h(App),\n}).$mount('#app');\n```\n","source":"_posts/vue动态改变title.md","raw":"---\ntitle: vue动态改变title\ncomments: true\ndate: 2018-10-22 19:40:00\ncategories: web\ntags: vue\n---\n\n1. 代码：\n\n```js\nimport router from '../router';\n\nrouter.beforeEach((to, from, next) => {\n  let n = to.query.subjectId;\n  let x = ['mike', 'john', 'sarah'];\n  if (n === '4') {\n    document.title = x[2];\n  } else if (n === '5') {\n    document.title = x[1];\n  } else if (n === '6') {\n    document.title = x[0];\n  }\n  next();\n});\n```\n\n2. 在 main.js 引入即可，使用示例：\n\n```js\nimport Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\nimport ElementUI from 'element-ui';\nimport 'element-ui/lib/theme-chalk/index.css';\nimport './utils/title';\n\nVue.config.productionTip = false;\nVue.use(ElementUI);\n\nnew Vue({\n  router,\n  store,\n  render: h => h(App),\n}).$mount('#app');\n```\n","slug":"vue动态改变title","published":1,"updated":"2019-05-19T05:26:40.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgua6004e8ex0ntpfu80q","content":"<ol>\n<li>代码：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'../router'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = to.query.subjectId;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = [<span class=\"string\">'mike'</span>, <span class=\"string\">'john'</span>, <span class=\"string\">'sarah'</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"string\">'4'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = x[<span class=\"number\">2</span>];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n === <span class=\"string\">'5'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = x[<span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n === <span class=\"string\">'6'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = x[<span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 main.js 引入即可，使用示例：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ElementUI <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./utils/title'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span>;</span><br><span class=\"line\">Vue.use(ElementUI);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>代码：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'../router'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = to.query.subjectId;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = [<span class=\"string\">'mike'</span>, <span class=\"string\">'john'</span>, <span class=\"string\">'sarah'</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"string\">'4'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = x[<span class=\"number\">2</span>];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n === <span class=\"string\">'5'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = x[<span class=\"number\">1</span>];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n === <span class=\"string\">'6'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = x[<span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 main.js 引入即可，使用示例：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">'./router'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ElementUI <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./utils/title'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span>;</span><br><span class=\"line\">Vue.use(ElementUI);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>);</span><br></pre></td></tr></table></figure>\n"},{"title":"Vue 项目搭建步骤","comments":1,"date":"2018-10-22T11:35:38.000Z","_content":"\n### 一、 初始化项目\n\n1. 安装 vue-cli3: `sudo npm install -g @vue/cli-service-global`\n2. 卸载旧版本的 vue-cli: `sudo npm uninstall -g vue-cli`\n3. 更新到 vue-cli3： `sudo npm install -g @vue/cli`\n4. 创建项目，选项：preset（default）、package manage(npm)、安装相关插件（建议不要用淘宝的 npm，因为在使用的时候有点坑，之前项目中就被这个坑过）: `vue create flash-experiment`\n5. 切换到项目目录: `cd flash-experiment`\n6. 启动项目： `npm run serve`\n7. 查看 vue-cli 相关命令: `vue create --help`\n8. 打开图形化项目管理器，查看相关配置：`vue ui`\n9. 添加插件\n   ```js\n   vue add @vue/eslint\n   vue add router //特殊添加插件的情况\n   vue add vuex   //特殊添加插件的情况\n   ```\n10. 加入 sass 支持，把一下语句加到 package.json 中：\n    ```js\n    \"node-sass\": \"^4.9.0\",\n    \"sass-loader\": \"^7.0.1\",\n    ```\n11. 添加组件，在视图中注册组件，并配置相关路由\n12. 编写组件\n13. 引入 [elementUI](http://element-cn.eleme.io/#/zh-CN/component/pagination)\n14. 引入 [axios](https://github.com/axios/axios)\n\n### 二、 git 配置\n\n1. 之前没有 git\n\n   ```git\n   cd existing_folder\n   git init\n   git remote add origin git@gitlab.dreamdev.cn:ebag/flash-experiment.git\n   git add .\n   git commit -m \"Initial commit\"\n   ```\n\n2. 已有 git\n\n   ```git\n   git remote set-url origin git@gitlab.dreamdev.cn:ebag/live-experiment.git\n   git remote -v\n   git branch --set-upstream-to=origin/develop develop\n   git branch --set-upstream-to=origin/master master\n   ```\n","source":"_posts/vue项目搭建步骤.md","raw":"---\ntitle: vue 项目搭建步骤\ncomments: true\ndate: 2018-10-22 19:35:38\ncategories: web\ntags: vue\n---\n\n### 一、 初始化项目\n\n1. 安装 vue-cli3: `sudo npm install -g @vue/cli-service-global`\n2. 卸载旧版本的 vue-cli: `sudo npm uninstall -g vue-cli`\n3. 更新到 vue-cli3： `sudo npm install -g @vue/cli`\n4. 创建项目，选项：preset（default）、package manage(npm)、安装相关插件（建议不要用淘宝的 npm，因为在使用的时候有点坑，之前项目中就被这个坑过）: `vue create flash-experiment`\n5. 切换到项目目录: `cd flash-experiment`\n6. 启动项目： `npm run serve`\n7. 查看 vue-cli 相关命令: `vue create --help`\n8. 打开图形化项目管理器，查看相关配置：`vue ui`\n9. 添加插件\n   ```js\n   vue add @vue/eslint\n   vue add router //特殊添加插件的情况\n   vue add vuex   //特殊添加插件的情况\n   ```\n10. 加入 sass 支持，把一下语句加到 package.json 中：\n    ```js\n    \"node-sass\": \"^4.9.0\",\n    \"sass-loader\": \"^7.0.1\",\n    ```\n11. 添加组件，在视图中注册组件，并配置相关路由\n12. 编写组件\n13. 引入 [elementUI](http://element-cn.eleme.io/#/zh-CN/component/pagination)\n14. 引入 [axios](https://github.com/axios/axios)\n\n### 二、 git 配置\n\n1. 之前没有 git\n\n   ```git\n   cd existing_folder\n   git init\n   git remote add origin git@gitlab.dreamdev.cn:ebag/flash-experiment.git\n   git add .\n   git commit -m \"Initial commit\"\n   ```\n\n2. 已有 git\n\n   ```git\n   git remote set-url origin git@gitlab.dreamdev.cn:ebag/live-experiment.git\n   git remote -v\n   git branch --set-upstream-to=origin/develop develop\n   git branch --set-upstream-to=origin/master master\n   ```\n","slug":"vue项目搭建步骤","published":1,"updated":"2019-05-19T05:26:48.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgua6004g8ex0ap8vb56a","content":"<h3 id=\"一、-初始化项目\"><a href=\"#一、-初始化项目\" class=\"headerlink\" title=\"一、 初始化项目\"></a>一、 初始化项目</h3><ol>\n<li>安装 vue-cli3: <code>sudo npm install -g @vue/cli-service-global</code></li>\n<li>卸载旧版本的 vue-cli: <code>sudo npm uninstall -g vue-cli</code></li>\n<li>更新到 vue-cli3： <code>sudo npm install -g @vue/cli</code></li>\n<li>创建项目，选项：preset（default）、package manage(npm)、安装相关插件（建议不要用淘宝的 npm，因为在使用的时候有点坑，之前项目中就被这个坑过）: <code>vue create flash-experiment</code></li>\n<li>切换到项目目录: <code>cd flash-experiment</code></li>\n<li>启动项目： <code>npm run serve</code></li>\n<li>查看 vue-cli 相关命令: <code>vue create --help</code></li>\n<li>打开图形化项目管理器，查看相关配置：<code>vue ui</code></li>\n<li><p>添加插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue add @vue/eslint</span><br><span class=\"line\">vue add router <span class=\"comment\">//特殊添加插件的情况</span></span><br><span class=\"line\">vue add vuex   <span class=\"comment\">//特殊添加插件的情况</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加入 sass 支持，把一下语句加到 package.json 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"node-sass\"</span>: <span class=\"string\">\"^4.9.0\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"sass-loader\"</span>: <span class=\"string\">\"^7.0.1\"</span>,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加组件，在视图中注册组件，并配置相关路由</p>\n</li>\n<li>编写组件</li>\n<li>引入 <a href=\"http://element-cn.eleme.io/#/zh-CN/component/pagination\" target=\"_blank\" rel=\"noopener\">elementUI</a></li>\n<li>引入 <a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"noopener\">axios</a></li>\n</ol>\n<h3 id=\"二、-git-配置\"><a href=\"#二、-git-配置\" class=\"headerlink\" title=\"二、 git 配置\"></a>二、 git 配置</h3><ol>\n<li><p>之前没有 git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd existing_folder</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin git@gitlab.dreamdev.cn:ebag/flash-experiment.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;Initial commit&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>已有 git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin git@gitlab.dreamdev.cn:ebag/live-experiment.git</span><br><span class=\"line\">git remote -v</span><br><span class=\"line\">git branch --set-upstream-to=origin/develop develop</span><br><span class=\"line\">git branch --set-upstream-to=origin/master master</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、-初始化项目\"><a href=\"#一、-初始化项目\" class=\"headerlink\" title=\"一、 初始化项目\"></a>一、 初始化项目</h3><ol>\n<li>安装 vue-cli3: <code>sudo npm install -g @vue/cli-service-global</code></li>\n<li>卸载旧版本的 vue-cli: <code>sudo npm uninstall -g vue-cli</code></li>\n<li>更新到 vue-cli3： <code>sudo npm install -g @vue/cli</code></li>\n<li>创建项目，选项：preset（default）、package manage(npm)、安装相关插件（建议不要用淘宝的 npm，因为在使用的时候有点坑，之前项目中就被这个坑过）: <code>vue create flash-experiment</code></li>\n<li>切换到项目目录: <code>cd flash-experiment</code></li>\n<li>启动项目： <code>npm run serve</code></li>\n<li>查看 vue-cli 相关命令: <code>vue create --help</code></li>\n<li>打开图形化项目管理器，查看相关配置：<code>vue ui</code></li>\n<li><p>添加插件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue add @vue/eslint</span><br><span class=\"line\">vue add router <span class=\"comment\">//特殊添加插件的情况</span></span><br><span class=\"line\">vue add vuex   <span class=\"comment\">//特殊添加插件的情况</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加入 sass 支持，把一下语句加到 package.json 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"node-sass\"</span>: <span class=\"string\">\"^4.9.0\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"sass-loader\"</span>: <span class=\"string\">\"^7.0.1\"</span>,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加组件，在视图中注册组件，并配置相关路由</p>\n</li>\n<li>编写组件</li>\n<li>引入 <a href=\"http://element-cn.eleme.io/#/zh-CN/component/pagination\" target=\"_blank\" rel=\"noopener\">elementUI</a></li>\n<li>引入 <a href=\"https://github.com/axios/axios\" target=\"_blank\" rel=\"noopener\">axios</a></li>\n</ol>\n<h3 id=\"二、-git-配置\"><a href=\"#二、-git-配置\" class=\"headerlink\" title=\"二、 git 配置\"></a>二、 git 配置</h3><ol>\n<li><p>之前没有 git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd existing_folder</span><br><span class=\"line\">git init</span><br><span class=\"line\">git remote add origin git@gitlab.dreamdev.cn:ebag/flash-experiment.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;Initial commit&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>已有 git</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin git@gitlab.dreamdev.cn:ebag/live-experiment.git</span><br><span class=\"line\">git remote -v</span><br><span class=\"line\">git branch --set-upstream-to=origin/develop develop</span><br><span class=\"line\">git branch --set-upstream-to=origin/master master</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"React Hooks 创建电影 App","comments":1,"date":"2019-11-01T00:32:51.000Z","_content":"\n使用 react hooks 搭建一个电影 App，该 demo 属于一个极简版，参考自一个外国哥们写的 《How to build a movie search app using React Hooks》，文章的核心围绕用 react hook 搭建一个电影 App 的关键步骤展开，没有多余的描述，代码可以开箱即用，欢迎食用。\n\n<!--more-->\n\n### 1、 项目创建\n\n```js\nnpm install -g create-react-app\n\ncreate-react-app <item-name>\n\nyarn start\n```\n\n### 2、创建 components 目录\n\n(1) 把 App.js 拉到该目录下，同时更新 index.js 下 App.js 的路径\n\n(2) 创建 Header.js，header 组件，接收父组件传过来的标题，App-header 是 App.css 中的一个 class\n\n```js\nimport React from \"react\";\n\nconst Header = props => {\n  return (\n    <header className=\"App-header\">\n      <h2>{props.text}</h2>\n    </header>\n  );\n};\n\nexport default Header;\n```\n\n(3) 创建 Movie.js，该组件用于展示父组件传过来的电影相关数据\n\n```js\nimport React from \"react\";\n\nconst DEFAULT_PLACEHOLDER_IMAGE =\n  \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\n\nconst Movie = ({ movie }) => {\n  const poster =\n    movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\n  return (\n    <div className=\"movie\">\n      <h2>{movie.Title}</h2>\n      <div>\n        <img\n          width=\"200\"\n          alt={`The movie titled: ${movie.Title}`}\n          src={poster}\n        />\n      </div>\n      <p>({movie.Year})</p>\n    </div>\n  );\n};\n\nexport default Movie;\n```\n\n(4) 创建 Search.js，该组件实现搜索功能，其中用到了 react 的 useState 钩子\n\n```js\nimport React, { useState } from \"react\";\n\nconst Search = props => {\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const handleSearchInputChanges = e => {\n    setSearchValue(e.target.value);\n  };\n\n  const resetInputField = () => {\n    setSearchValue(\"\");\n  };\n\n  const callSearchFunction = e => {\n    e.preventDefault();\n    props.search(searchValue);\n    resetInputField();\n  };\n\n  return (\n    <form className=\"search\">\n      <input\n        value={searchValue}\n        onChange={handleSearchInputChanges}\n        type=\"text\"\n      />\n      <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\n    </form>\n  );\n};\n\nexport default Search;\n```\n\n### 3、更新 App.js 文件，引用上述新组件\n\n```js\nimport React, { useReducer, useEffect } from \"react\";\nimport \"../App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\";\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        dispatch({\n          type: \"SEARCH_MOVIES_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n      });\n  }, []);\n\n  const search = searchValue => {\n    dispatch({\n      type: \"SEARCH_MOVIES_REQUEST\"\n    });\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          dispatch({\n            type: \"SEARCH_MOVIES_SUCCESS\",\n            payload: jsonResponse.Search\n          });\n        } else {\n          dispatch({\n            type: \"SEARCH_MOVIES_FAILURE\",\n            error: jsonResponse.Error\n          });\n        }\n      });\n  };\n\n  const { movies, errorMessage, loading } = state;\n\n  return (\n    <div className=\"App\">\n      <Header text=\"REACT MOVIE APP\" />\n      <Search search={search} />\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>loading... </span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n### 4、完结撒花\n","source":"_posts/react-hooks创建电影app.md","raw":"---\ntitle: react hooks 创建电影 app\ncomments: true\ndate: 2019-11-01 08:32:51\ncategories: web\ntags: react\n---\n\n使用 react hooks 搭建一个电影 App，该 demo 属于一个极简版，参考自一个外国哥们写的 《How to build a movie search app using React Hooks》，文章的核心围绕用 react hook 搭建一个电影 App 的关键步骤展开，没有多余的描述，代码可以开箱即用，欢迎食用。\n\n<!--more-->\n\n### 1、 项目创建\n\n```js\nnpm install -g create-react-app\n\ncreate-react-app <item-name>\n\nyarn start\n```\n\n### 2、创建 components 目录\n\n(1) 把 App.js 拉到该目录下，同时更新 index.js 下 App.js 的路径\n\n(2) 创建 Header.js，header 组件，接收父组件传过来的标题，App-header 是 App.css 中的一个 class\n\n```js\nimport React from \"react\";\n\nconst Header = props => {\n  return (\n    <header className=\"App-header\">\n      <h2>{props.text}</h2>\n    </header>\n  );\n};\n\nexport default Header;\n```\n\n(3) 创建 Movie.js，该组件用于展示父组件传过来的电影相关数据\n\n```js\nimport React from \"react\";\n\nconst DEFAULT_PLACEHOLDER_IMAGE =\n  \"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\";\n\nconst Movie = ({ movie }) => {\n  const poster =\n    movie.Poster === \"N/A\" ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;\n  return (\n    <div className=\"movie\">\n      <h2>{movie.Title}</h2>\n      <div>\n        <img\n          width=\"200\"\n          alt={`The movie titled: ${movie.Title}`}\n          src={poster}\n        />\n      </div>\n      <p>({movie.Year})</p>\n    </div>\n  );\n};\n\nexport default Movie;\n```\n\n(4) 创建 Search.js，该组件实现搜索功能，其中用到了 react 的 useState 钩子\n\n```js\nimport React, { useState } from \"react\";\n\nconst Search = props => {\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const handleSearchInputChanges = e => {\n    setSearchValue(e.target.value);\n  };\n\n  const resetInputField = () => {\n    setSearchValue(\"\");\n  };\n\n  const callSearchFunction = e => {\n    e.preventDefault();\n    props.search(searchValue);\n    resetInputField();\n  };\n\n  return (\n    <form className=\"search\">\n      <input\n        value={searchValue}\n        onChange={handleSearchInputChanges}\n        type=\"text\"\n      />\n      <input onClick={callSearchFunction} type=\"submit\" value=\"SEARCH\" />\n    </form>\n  );\n};\n\nexport default Search;\n```\n\n### 3、更新 App.js 文件，引用上述新组件\n\n```js\nimport React, { useReducer, useEffect } from \"react\";\nimport \"../App.css\";\nimport Header from \"./Header\";\nimport Movie from \"./Movie\";\nimport Search from \"./Search\";\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\";\n\nconst initialState = {\n  loading: true,\n  movies: [],\n  errorMessage: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SEARCH_MOVIES_REQUEST\":\n      return {\n        ...state,\n        loading: true,\n        errorMessage: null\n      };\n    case \"SEARCH_MOVIES_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        movies: action.payload\n      };\n    case \"SEARCH_MOVIES_FAILURE\":\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.error\n      };\n    default:\n      return state;\n  }\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        dispatch({\n          type: \"SEARCH_MOVIES_SUCCESS\",\n          payload: jsonResponse.Search\n        });\n      });\n  }, []);\n\n  const search = searchValue => {\n    dispatch({\n      type: \"SEARCH_MOVIES_REQUEST\"\n    });\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          dispatch({\n            type: \"SEARCH_MOVIES_SUCCESS\",\n            payload: jsonResponse.Search\n          });\n        } else {\n          dispatch({\n            type: \"SEARCH_MOVIES_FAILURE\",\n            error: jsonResponse.Error\n          });\n        }\n      });\n  };\n\n  const { movies, errorMessage, loading } = state;\n\n  return (\n    <div className=\"App\">\n      <Header text=\"REACT MOVIE APP\" />\n      <Search search={search} />\n      <p className=\"App-intro\">Sharing a few of our favourite movies</p>\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n          <span>loading... </span>\n        ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          movies.map((movie, index) => (\n            <Movie key={`${index}-${movie.Title}`} movie={movie} />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n### 4、完结撒花\n","slug":"react-hooks创建电影app","published":1,"updated":"2019-11-13T12:22:30.241Z","layout":"post","photos":[],"link":"","_id":"ck5dbgua7004j8ex00qs62x4a","content":"<p>使用 react hooks 搭建一个电影 App，该 demo 属于一个极简版，参考自一个外国哥们写的 《How to build a movie search app using React Hooks》，文章的核心围绕用 react hook 搭建一个电影 App 的关键步骤展开，没有多余的描述，代码可以开箱即用，欢迎食用。</p>\n<a id=\"more\"></a>\n<h3 id=\"1、-项目创建\"><a href=\"#1、-项目创建\" class=\"headerlink\" title=\"1、 项目创建\"></a>1、 项目创建</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br><span class=\"line\"></span><br><span class=\"line\">create-react-app &lt;item-name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">yarn start</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、创建-components-目录\"><a href=\"#2、创建-components-目录\" class=\"headerlink\" title=\"2、创建 components 目录\"></a>2、创建 components 目录</h3><p>(1) 把 App.js 拉到该目录下，同时更新 index.js 下 App.js 的路径</p>\n<p>(2) 创建 Header.js，header 组件，接收父组件传过来的标题，App-header 是 App.css 中的一个 class</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Header = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">      &lt;h2&gt;&#123;props.text&#125;&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>header&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Header;</span><br></pre></td></tr></table></figure>\n<p>(3) 创建 Movie.js，该组件用于展示父组件传过来的电影相关数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> DEFAULT_PLACEHOLDER_IMAGE =</span><br><span class=\"line\">  <span class=\"string\">\"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Movie = <span class=\"function\">(<span class=\"params\">&#123; movie &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> poster =</span><br><span class=\"line\">    movie.Poster === <span class=\"string\">\"N/A\"</span> ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"movie\"</span>&gt;</span><br><span class=\"line\">      &lt;h2&gt;&#123;movie.Title&#125;&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;img</span></span><br><span class=\"line\"><span class=\"regexp\">          width=\"200\"</span></span><br><span class=\"line\"><span class=\"regexp\">          alt=&#123;`The movie titled: $&#123;movie.Title&#125;`&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          src=&#123;poster&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p&gt;(&#123;movie.Year&#125;)&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default Movie;</span></span><br></pre></td></tr></table></figure>\n<p>(4) 创建 Search.js，该组件实现搜索功能，其中用到了 react 的 useState 钩子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Search = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [searchValue, setSearchValue] = useState(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleSearchInputChanges = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setSearchValue(e.target.value);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> resetInputField = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setSearchValue(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> callSearchFunction = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    props.search(searchValue);</span><br><span class=\"line\">    resetInputField();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;form className=<span class=\"string\">\"search\"</span>&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;searchValue&#125;</span><br><span class=\"line\">        onChange=&#123;handleSearchInputChanges&#125;</span><br><span class=\"line\">        type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;input onClick=&#123;callSearchFunction&#125; type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"SEARCH\"</span> /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default Search;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3、更新-App-js-文件，引用上述新组件\"><a href=\"#3、更新-App-js-文件，引用上述新组件\" class=\"headerlink\" title=\"3、更新 App.js 文件，引用上述新组件\"></a>3、更新 App.js 文件，引用上述新组件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useReducer, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"../App.css\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Header <span class=\"keyword\">from</span> <span class=\"string\">\"./Header\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Movie <span class=\"keyword\">from</span> <span class=\"string\">\"./Movie\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Search <span class=\"keyword\">from</span> <span class=\"string\">\"./Search\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MOVIE_API_URL = <span class=\"string\">\"https://www.omdbapi.com/?s=man&amp;apikey=4a3b711b\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</span><br><span class=\"line\">  loading: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  movies: [],</span><br><span class=\"line\">  errorMessage: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"SEARCH_MOVIES_REQUEST\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        loading: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        errorMessage: <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"SEARCH_MOVIES_SUCCESS\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        loading: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        movies: action.payload</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"SEARCH_MOVIES_FAILURE\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        loading: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        errorMessage: action.error</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fetch(MOVIE_API_URL)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">jsonResponse</span> =&gt;</span> &#123;</span><br><span class=\"line\">        dispatch(&#123;</span><br><span class=\"line\">          type: <span class=\"string\">\"SEARCH_MOVIES_SUCCESS\"</span>,</span><br><span class=\"line\">          payload: jsonResponse.Search</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> search = <span class=\"function\"><span class=\"params\">searchValue</span> =&gt;</span> &#123;</span><br><span class=\"line\">    dispatch(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"SEARCH_MOVIES_REQUEST\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    fetch(<span class=\"string\">`https://www.omdbapi.com/?s=<span class=\"subst\">$&#123;searchValue&#125;</span>&amp;apikey=4a3b711b`</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">jsonResponse</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jsonResponse.Response === <span class=\"string\">\"True\"</span>) &#123;</span><br><span class=\"line\">          dispatch(&#123;</span><br><span class=\"line\">            type: <span class=\"string\">\"SEARCH_MOVIES_SUCCESS\"</span>,</span><br><span class=\"line\">            payload: jsonResponse.Search</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          dispatch(&#123;</span><br><span class=\"line\">            type: <span class=\"string\">\"SEARCH_MOVIES_FAILURE\"</span>,</span><br><span class=\"line\">            error: jsonResponse.Error</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; movies, errorMessage, loading &#125; = state;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">      &lt;Header text=<span class=\"string\">\"REACT MOVIE APP\"</span> /&gt;</span><br><span class=\"line\">      &lt;Search search=&#123;search&#125; /&gt;</span><br><span class=\"line\">      &lt;p className=<span class=\"string\">\"App-intro\"</span>&gt;Sharing a few <span class=\"keyword\">of</span> our favourite movies&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"movies\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;loading &amp;&amp; !errorMessage ? (</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;span&gt;loading... &lt;/</span>span&gt;</span><br><span class=\"line\">        ) : errorMessage ? (</span><br><span class=\"line\">          &lt;div className=<span class=\"string\">\"errorMessage\"</span>&gt;&#123;errorMessage&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        ) : (</span></span><br><span class=\"line\"><span class=\"regexp\">          movies.map((movie, index) =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Movie key=&#123;`$&#123;index&#125;-$&#123;movie.Title&#125;`&#125; movie=&#123;movie&#125; /</span>&gt;</span><br><span class=\"line\">          ))</span><br><span class=\"line\">        )&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、完结撒花\"><a href=\"#4、完结撒花\" class=\"headerlink\" title=\"4、完结撒花\"></a>4、完结撒花</h3>","site":{"data":{}},"excerpt":"<p>使用 react hooks 搭建一个电影 App，该 demo 属于一个极简版，参考自一个外国哥们写的 《How to build a movie search app using React Hooks》，文章的核心围绕用 react hook 搭建一个电影 App 的关键步骤展开，没有多余的描述，代码可以开箱即用，欢迎食用。</p>","more":"<h3 id=\"1、-项目创建\"><a href=\"#1、-项目创建\" class=\"headerlink\" title=\"1、 项目创建\"></a>1、 项目创建</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br><span class=\"line\"></span><br><span class=\"line\">create-react-app &lt;item-name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">yarn start</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、创建-components-目录\"><a href=\"#2、创建-components-目录\" class=\"headerlink\" title=\"2、创建 components 目录\"></a>2、创建 components 目录</h3><p>(1) 把 App.js 拉到该目录下，同时更新 index.js 下 App.js 的路径</p>\n<p>(2) 创建 Header.js，header 组件，接收父组件传过来的标题，App-header 是 App.css 中的一个 class</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Header = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;header className=<span class=\"string\">\"App-header\"</span>&gt;</span><br><span class=\"line\">      &lt;h2&gt;&#123;props.text&#125;&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>header&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Header;</span><br></pre></td></tr></table></figure>\n<p>(3) 创建 Movie.js，该组件用于展示父组件传过来的电影相关数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> DEFAULT_PLACEHOLDER_IMAGE =</span><br><span class=\"line\">  <span class=\"string\">\"https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Movie = <span class=\"function\">(<span class=\"params\">&#123; movie &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> poster =</span><br><span class=\"line\">    movie.Poster === <span class=\"string\">\"N/A\"</span> ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"movie\"</span>&gt;</span><br><span class=\"line\">      &lt;h2&gt;&#123;movie.Title&#125;&lt;<span class=\"regexp\">/h2&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &lt;img</span></span><br><span class=\"line\"><span class=\"regexp\">          width=\"200\"</span></span><br><span class=\"line\"><span class=\"regexp\">          alt=&#123;`The movie titled: $&#123;movie.Title&#125;`&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">          src=&#123;poster&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">        /</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p&gt;(&#123;movie.Year&#125;)&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default Movie;</span></span><br></pre></td></tr></table></figure>\n<p>(4) 创建 Search.js，该组件实现搜索功能，其中用到了 react 的 useState 钩子</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Search = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [searchValue, setSearchValue] = useState(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> handleSearchInputChanges = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setSearchValue(e.target.value);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> resetInputField = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    setSearchValue(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> callSearchFunction = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">    props.search(searchValue);</span><br><span class=\"line\">    resetInputField();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;form className=<span class=\"string\">\"search\"</span>&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        value=&#123;searchValue&#125;</span><br><span class=\"line\">        onChange=&#123;handleSearchInputChanges&#125;</span><br><span class=\"line\">        type=<span class=\"string\">\"text\"</span></span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;input onClick=&#123;callSearchFunction&#125; type=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"SEARCH\"</span> /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/form&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  );</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default Search;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3、更新-App-js-文件，引用上述新组件\"><a href=\"#3、更新-App-js-文件，引用上述新组件\" class=\"headerlink\" title=\"3、更新 App.js 文件，引用上述新组件\"></a>3、更新 App.js 文件，引用上述新组件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useReducer, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"../App.css\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Header <span class=\"keyword\">from</span> <span class=\"string\">\"./Header\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Movie <span class=\"keyword\">from</span> <span class=\"string\">\"./Movie\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Search <span class=\"keyword\">from</span> <span class=\"string\">\"./Search\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MOVIE_API_URL = <span class=\"string\">\"https://www.omdbapi.com/?s=man&amp;apikey=4a3b711b\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;</span><br><span class=\"line\">  loading: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  movies: [],</span><br><span class=\"line\">  errorMessage: <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">state, action</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"SEARCH_MOVIES_REQUEST\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        loading: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        errorMessage: <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"SEARCH_MOVIES_SUCCESS\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        loading: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        movies: action.payload</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">\"SEARCH_MOVIES_FAILURE\"</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...state,</span><br><span class=\"line\">        loading: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        errorMessage: action.error</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fetch(MOVIE_API_URL)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">jsonResponse</span> =&gt;</span> &#123;</span><br><span class=\"line\">        dispatch(&#123;</span><br><span class=\"line\">          type: <span class=\"string\">\"SEARCH_MOVIES_SUCCESS\"</span>,</span><br><span class=\"line\">          payload: jsonResponse.Search</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> search = <span class=\"function\"><span class=\"params\">searchValue</span> =&gt;</span> &#123;</span><br><span class=\"line\">    dispatch(&#123;</span><br><span class=\"line\">      type: <span class=\"string\">\"SEARCH_MOVIES_REQUEST\"</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    fetch(<span class=\"string\">`https://www.omdbapi.com/?s=<span class=\"subst\">$&#123;searchValue&#125;</span>&amp;apikey=4a3b711b`</span>)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">jsonResponse</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jsonResponse.Response === <span class=\"string\">\"True\"</span>) &#123;</span><br><span class=\"line\">          dispatch(&#123;</span><br><span class=\"line\">            type: <span class=\"string\">\"SEARCH_MOVIES_SUCCESS\"</span>,</span><br><span class=\"line\">            payload: jsonResponse.Search</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          dispatch(&#123;</span><br><span class=\"line\">            type: <span class=\"string\">\"SEARCH_MOVIES_FAILURE\"</span>,</span><br><span class=\"line\">            error: jsonResponse.Error</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123; movies, errorMessage, loading &#125; = state;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"App\"</span>&gt;</span><br><span class=\"line\">      &lt;Header text=<span class=\"string\">\"REACT MOVIE APP\"</span> /&gt;</span><br><span class=\"line\">      &lt;Search search=&#123;search&#125; /&gt;</span><br><span class=\"line\">      &lt;p className=<span class=\"string\">\"App-intro\"</span>&gt;Sharing a few <span class=\"keyword\">of</span> our favourite movies&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;div className=\"movies\"&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;loading &amp;&amp; !errorMessage ? (</span></span><br><span class=\"line\"><span class=\"regexp\">          &lt;span&gt;loading... &lt;/</span>span&gt;</span><br><span class=\"line\">        ) : errorMessage ? (</span><br><span class=\"line\">          &lt;div className=<span class=\"string\">\"errorMessage\"</span>&gt;&#123;errorMessage&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        ) : (</span></span><br><span class=\"line\"><span class=\"regexp\">          movies.map((movie, index) =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;Movie key=&#123;`$&#123;index&#125;-$&#123;movie.Title&#125;`&#125; movie=&#123;movie&#125; /</span>&gt;</span><br><span class=\"line\">          ))</span><br><span class=\"line\">        )&#125;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、完结撒花\"><a href=\"#4、完结撒花\" class=\"headerlink\" title=\"4、完结撒花\"></a>4、完结撒花</h3>"},{"title":"Webpack","comments":1,"date":"2019-08-04T04:29:56.000Z","_content":"## 一、安装\n\n### 1. 本地安装\n\n```\n# webpack 4+ 版本\nnpm install --save-dev webpack-cli\nnpm install --save-dev webpack\n\n# 安装指定版本\nnpm install --save-dev webpack@<version>\n```\n\n### 2. 全局安装（官方不推荐）\n\n```\nnpm install --global webpack\n```\n\n### 3. 最新体验版安装\n\n```\nnpm install webpack@beta\nnpm install webpack/webpack#<tagname/branchname>\n```\n\n### 3. 运行\n\n```\nwebpack\n```\n\n## 二、入门\n\n### 1. 项目初始化\n\n```\nmkdir webpack-demo && cd webpack-demo\n\nnpm init -y\n\nnpm install webpack webpack-cli --save-dev\n```\n\n### 2. 初始化源码目录\n\n```\nmkdir src\ncd src\nnew-item index.js\ncd ..\nmkdir dist\ncd dist\nnew-item index.html\n```\n\n### 3. 创建配置文件 webpack.config.js\n\n```\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js', // 入口文件地址\n  output: {\n    filename: 'bundle.js', // 出口文件名\n    path: path.resolve(__dirname, 'dist') // 告诉 webpack 在哪里生成文件\n  }\n};\n```\n\n### 4. 添加npm脚本\n\n```\n {\n    \"name\": \"webpack-demo\",\n    \"private\": true,\n    \"version\": \"1.0.0\",\n    \"description\": \"\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n+     \"build\": \"webpack\"\n    },\n    \"keywords\": [],\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n      \"webpack\": \"^4.0.1\",\n      \"webpack-cli\": \"^2.0.9\",\n      \"lodash\": \"^4.17.5\"\n    }\n  }\n```\n\n### 5. 开始使用 webpack 打包：`npm run build`\n\n> 具体事例请参考 example 目录下的 chapterOne\n\n## 三、静态资源管理\n\n### 0. 创建静态资源目录 asset\n\n### 1. css\n\n(1) 安装对应的 loader： `npm install --save-dev style-loader css-loader`\n\n(2) 配置 loader：\n\n```js\nmodule: {\n    rules: [{\n      test: /\\.css$/,\n      use: [\n        'style-loader',\n        'css-loader'\n      ]\n    }]\n  }\n```\n\n(3) 静态资源目录添加 style.css 文件，在入口文件中引用，在打包时， webpack 会把对应的 css 代码插入到 index.html 的 head 中。\n\n### 2. 图片\n\n(1) 安装对应的 loader： `npm install --save-dev file-loader`\n\n(2) 配置 loader：\n\n```js\n{\n  test: /\\.(png|svg|jpg|gif)$/,\n  use: [\n    'file-loader'\n  ]\n}\n```\n\n(3) 静态资源目录添加一张图片，在入口文件中引用，打包时， webpack 会生成目标文件夹中的最终 url，并将入口文件中的路径替换为最终路径。\n\n### 3. 字体\n\n(1) 配置 loader：\n\n```\n{\n  test: /\\.(woff|woff2|eot|ttf|otf)$/,\n  use: [\n    'file-loader'\n  ]\n}\n```\n\n(2) 静态资源目录添加字体，在入口文件中引用，打包时， webpack 会生成目标文件夹中的最终 url，并将入口文件中的路径替换为最终路径。\n\n### 4. 数据（json<默认支持>、xml、csv）\n\n(1) 安装对应的 loader: `npm install --save-dev csv-loader xml-loader`\n\n(2) 配置 loader：\n\n```\n{\n  test: /\\.(csv|tsv)$/,\n  use: [\n    'csv-loader'\n  ]\n},\n{\n  test: /\\.xml$/,\n  use: [\n    'xml-loader'\n  ]\n}\n```\n\n(3) 静态资源目录添加对应的数据文件，在入口文件中引用数据文件, 打包之后，对应的数据文件会被处理为 json 格式的数据\n\n> 具体事例请参考 example 目录下的 chapterTwo\n\n## 四、输出管理\n\n### 0. 入口分离\n\n(1) 源码目录中新建 print.js 文件，并在 index.js 中引用对应模块，index.js 中引用对应的包\n\n(2) webpack 配置修改：\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    app: './src/index.js',\n    print: './src/print.js'\n  },\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  }\n};\n```\n\n### 1. 解决引用重复的问题，每次打包生成新的 html 文件\n\n(1) 设定 HtmlWebpackPlugin\n\n安装 html-webpack-plugin: `npm install --save-dev html-webpack-plugin`\n\n(2) 配置 HtmlWebpackPlugin\n\n```\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nplugins: [\n  new HtmlWebpackPlugin({\n    title: 'Output Management'\n  })\n],\n```\n\n(3) 在打包时， HtmlWebpackPlugin 会生成新的 index.html 文件，替换旧的 index.html 文件\n\n### 2. 删除遗留的多余文件,在每次构建前清理 /dist 文件夹\n\n(1) 安装插件: `npm install clean-webpack-plugin --save-dev`\n\n(2) 配置插件:\n\n```\nconst {\n  CleanWebpackPlugin\n} = require('clean-webpack-plugin');\n\nnew CleanWebpackPlugin(),\n```\n\n> 具体事例请参考 example 目录下的 chapterThree\n\n## 五、开发环境配置\n\n### 1. 将编译后的代码映射回原始源代码\n\n(1) 配置文件中添加 source map 配置： `devtool: 'inline-source-map'`\n\n(2) 入口文件有错误，控制台返回的错误路径是对应的源路径\n\n### 2. 自动编译代码\n\n(1) 观察模式：\n\n+ 添加 script 脚本：`\"watch\": \"webpack --watch\"` \n\n+ `npm run watch`，每次更新入口文件，代码将自动编译，但是每次编译后，需要手动刷新浏览器，页面才会更新\n\n\n(2) webpack-dev-server（一个简单的web服务器，可以实时重新加载页面）（官方推荐使用）\n\n+ 安装： `npm install --save-dev webpack-dev-server`\n\n+ 修改配置文件：告知 webpack-dev-server 在哪里查找文件\n\n```\ndevServer: {\n  contentBase: './dist'\n}\n```\n\n+ 添加 script 脚本\n\n```\n\"start\": \"webpack-dev-server --open\",\n```\n\n+ 修改源文件，web 服务器就会自动重新加载编译后的代码\n\n(3) webpack-dev-middleware（模块热替换），把 webpack 处理后的文件传递给一个服务器(server)\n\n+ 安装 express 和 webpack-dev-middleware： `npm install --save-dev express webpack-dev-middleware`\n\n+ 配置文件中 output 添加  publicPat 选项： `publicPath: '/'`\n\n+ 自定义一个 express 服务，添加 server.js 文件，内容如下：\n\n```js\nconst express = require('express');\nconst webpack = require('webpack');\nconst webpackDevMiddleware = require('webpack-dev-middleware');\n\nconst app = express();\nconst config = require('./webpack.config.js');\nconst compiler = webpack(config);\n\n// Tell express to use the webpack-dev-middleware and use the webpack.config.js\n// configuration file as a base.\napp.use(webpackDevMiddleware(compiler, {\n  publicPath: config.output.publicPath\n}));\n\n// Serve the files on port 3000.\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!\\n');\n});\n```\n\n+ 添加 npm script： `\"server\": \"node server.js\",`\n\n+ 执行 `npm run server`， 打开 http://localhost:3000/ 即是项目地址\n\n> 具体事例请参考 example 目录下的 chapterFour\n\n## 六、模块热替换\n\n### 1. 添加 webpack 自带的插件 NamedModulesPlugin 和 HotModuleReplacementPlugin\n\n```\nconst webpack = require('webpack');\n\ndevServer: {\n  contentBase: './dist',\n  hot: true\n},\n\nplugins: [\n  new webpack.NamedModulesPlugin(),\n  new webpack.HotModuleReplacementPlugin()\n],\n```\n\n### 2. 修改 index.js 文件，监听该文件所引用的外部文件的更新状况\n\n```js\nif (module.hot) {\n  module.hot.accept('./print.js', function() {\n    console.log('Accepting the updated printMe module!');\n    printMe();\n  })\n}\n```\n\n### 3. css 等静态资源加载了相应的 loader，会自动更新\n\n### 4.其他热更新 loader 或插件\n\n+ React Hot Loader：实时调整 react 组件。\n\n+ Vue Loader：此 loader 支持用于 vue 组件的 HMR，提供开箱即用体验。\n\n+ Elm Hot Loader：支持用于 Elm 程序语言的 HMR。\n\n+ Redux HMR：无需 loader 或插件！只需对 main store 文件进行简单的修改。\n\n+ Angular HMR：没有必要使用 loader！只需对主要的 NgModule 文件进行简单的修改，由 HMR API 完全控制。\n\n## 七、输出优化\n\n### 1. 移除 JavaScript 上下文中的未引用代码(dead-code)\n\npackage.json 文件设置 sideEffects 属性 \n\n```js\n\"sideEffects\": [\n  \"./src/some-side-effectful-file.js\",\n  \"*.css\"\n]\n```\n\n### 2.压缩输出，设置编译模式为 production\n\n```js\nmode: \"production\"\n```\n\n## 八、生产环境构建\n\n### 1.构建目标比较\n\n**生产环境构建目标：** 更小的 bundle、更轻量的 source map、更优化的资源、更短的加载时间\n\n**开发环境构建目标：** 强大的 source map 和具有热模块替换能力的 localhost server\n\n### 2.针对不同环境配置 webpack\n\n(1) 安装 webpack-merge：`npm install --save-dev webpack-merge`\n\n(2) 针对不同的环境创建对应的配置文件\n\n```js\n// webpack.common.js\nconst path = require('path');\nconst {\n  CleanWebpackPlugin\n} = require('clean-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: {\n    app: './src/index.js'\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({\n      title: 'Production'\n    })\n  ],\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  module: {\n    rules: [{\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          'css-loader'\n        ]\n      },\n      {\n        test: /\\.(png|svg|jpg|gif)$/,\n        use: [\n          'file-loader'\n        ]\n      },\n      {\n        test: /\\.(woff|woff2|eot|ttf|otf)$/,\n        use: [\n          'file-loader'\n        ]\n      },\n      {\n        test: /\\.(csv|tsv)$/,\n        use: [\n          'csv-loader'\n        ]\n      },\n      {\n        test: /\\.xml$/,\n        use: [\n          'xml-loader'\n        ]\n      }\n    ]\n  }\n};\n```\n\n```js\n// webpack.dev.js\nconst merge = require('webpack-merge');\nconst common = require('./webpack.common.js');\nconst webpack = require('webpack');\n\nmodule.exports = merge(common, {\n  mode: 'development',\n  devtool: 'inline-source-map',\n  devServer: {\n    contentBase: './dist'\n  },\n  plugins: [\n    new webpack.NamedModulesPlugin(),\n    new webpack.HotModuleReplacementPlugin()\n  ]\n});\n```\n\n```js\n//webpack.prod.js\nconst merge = require('webpack-merge');\nconst UglifyJSPlugin = require('uglifyjs-webpack-plugin');\nconst common = require('./webpack.common.js');\n\nmodule.exports = merge(common, {\n  mode: 'production',\n  plugins: [\n    new UglifyJSPlugin({sourceMap: true}) // 不支持 es6 语法的压缩\n  ]\n});\n```\n\n(3) 修改 NPM Script\n\n```js\n\"start\": \"webpack-dev-server --open --config webpack.dev.js\",\n\"build\": \"webpack --config webpack.prod.js\"\n```\n\n## 九、代码分离\n\n### 1.针对多个文件指定对应的入口\n\n### 2.把多个地方引用的代码分离到一个文件中，防止重复引用\n\n```js\noptimization: {\n  runtimeChunk: {\n    name: \"manifest\"\n  },\n  splitChunks: {\n    cacheGroups: {\n      commons: {\n        test: /[\\\\/]node_modules[\\\\/]/,\n        name: \"vendor\",\n        chunks: \"all\"\n      }\n    }\n  }\n}\n```\n\n### 3.动态导入\n\n```js\n// output 添加 chunkFilename 字段\nchunkFilename: '[name].bundle.js',\n```\n\n```js\n// index.js 动态引入库，编译之后可以看到对应的 loadash-chunk\nasync function getComponent() {\n  var element = document.createElement('div');\n\n  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n  return element;\n}\ngetComponent().then(component => {\n  document.body.appendChild(component);\n})\n```\n","source":"_posts/webpack.md","raw":"---\ntitle: webpack\ncomments: true\ndate: 2019-08-04 12:29:56\ncategories: 项目管理\ntags: webpack\n---\n## 一、安装\n\n### 1. 本地安装\n\n```\n# webpack 4+ 版本\nnpm install --save-dev webpack-cli\nnpm install --save-dev webpack\n\n# 安装指定版本\nnpm install --save-dev webpack@<version>\n```\n\n### 2. 全局安装（官方不推荐）\n\n```\nnpm install --global webpack\n```\n\n### 3. 最新体验版安装\n\n```\nnpm install webpack@beta\nnpm install webpack/webpack#<tagname/branchname>\n```\n\n### 3. 运行\n\n```\nwebpack\n```\n\n## 二、入门\n\n### 1. 项目初始化\n\n```\nmkdir webpack-demo && cd webpack-demo\n\nnpm init -y\n\nnpm install webpack webpack-cli --save-dev\n```\n\n### 2. 初始化源码目录\n\n```\nmkdir src\ncd src\nnew-item index.js\ncd ..\nmkdir dist\ncd dist\nnew-item index.html\n```\n\n### 3. 创建配置文件 webpack.config.js\n\n```\nconst path = require('path');\n\nmodule.exports = {\n  entry: './src/index.js', // 入口文件地址\n  output: {\n    filename: 'bundle.js', // 出口文件名\n    path: path.resolve(__dirname, 'dist') // 告诉 webpack 在哪里生成文件\n  }\n};\n```\n\n### 4. 添加npm脚本\n\n```\n {\n    \"name\": \"webpack-demo\",\n    \"private\": true,\n    \"version\": \"1.0.0\",\n    \"description\": \"\",\n    \"main\": \"index.js\",\n    \"scripts\": {\n      \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n+     \"build\": \"webpack\"\n    },\n    \"keywords\": [],\n    \"author\": \"\",\n    \"license\": \"ISC\",\n    \"devDependencies\": {\n      \"webpack\": \"^4.0.1\",\n      \"webpack-cli\": \"^2.0.9\",\n      \"lodash\": \"^4.17.5\"\n    }\n  }\n```\n\n### 5. 开始使用 webpack 打包：`npm run build`\n\n> 具体事例请参考 example 目录下的 chapterOne\n\n## 三、静态资源管理\n\n### 0. 创建静态资源目录 asset\n\n### 1. css\n\n(1) 安装对应的 loader： `npm install --save-dev style-loader css-loader`\n\n(2) 配置 loader：\n\n```js\nmodule: {\n    rules: [{\n      test: /\\.css$/,\n      use: [\n        'style-loader',\n        'css-loader'\n      ]\n    }]\n  }\n```\n\n(3) 静态资源目录添加 style.css 文件，在入口文件中引用，在打包时， webpack 会把对应的 css 代码插入到 index.html 的 head 中。\n\n### 2. 图片\n\n(1) 安装对应的 loader： `npm install --save-dev file-loader`\n\n(2) 配置 loader：\n\n```js\n{\n  test: /\\.(png|svg|jpg|gif)$/,\n  use: [\n    'file-loader'\n  ]\n}\n```\n\n(3) 静态资源目录添加一张图片，在入口文件中引用，打包时， webpack 会生成目标文件夹中的最终 url，并将入口文件中的路径替换为最终路径。\n\n### 3. 字体\n\n(1) 配置 loader：\n\n```\n{\n  test: /\\.(woff|woff2|eot|ttf|otf)$/,\n  use: [\n    'file-loader'\n  ]\n}\n```\n\n(2) 静态资源目录添加字体，在入口文件中引用，打包时， webpack 会生成目标文件夹中的最终 url，并将入口文件中的路径替换为最终路径。\n\n### 4. 数据（json<默认支持>、xml、csv）\n\n(1) 安装对应的 loader: `npm install --save-dev csv-loader xml-loader`\n\n(2) 配置 loader：\n\n```\n{\n  test: /\\.(csv|tsv)$/,\n  use: [\n    'csv-loader'\n  ]\n},\n{\n  test: /\\.xml$/,\n  use: [\n    'xml-loader'\n  ]\n}\n```\n\n(3) 静态资源目录添加对应的数据文件，在入口文件中引用数据文件, 打包之后，对应的数据文件会被处理为 json 格式的数据\n\n> 具体事例请参考 example 目录下的 chapterTwo\n\n## 四、输出管理\n\n### 0. 入口分离\n\n(1) 源码目录中新建 print.js 文件，并在 index.js 中引用对应模块，index.js 中引用对应的包\n\n(2) webpack 配置修改：\n\n```js\nconst path = require('path');\n\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    app: './src/index.js',\n    print: './src/print.js'\n  },\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  }\n};\n```\n\n### 1. 解决引用重复的问题，每次打包生成新的 html 文件\n\n(1) 设定 HtmlWebpackPlugin\n\n安装 html-webpack-plugin: `npm install --save-dev html-webpack-plugin`\n\n(2) 配置 HtmlWebpackPlugin\n\n```\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nplugins: [\n  new HtmlWebpackPlugin({\n    title: 'Output Management'\n  })\n],\n```\n\n(3) 在打包时， HtmlWebpackPlugin 会生成新的 index.html 文件，替换旧的 index.html 文件\n\n### 2. 删除遗留的多余文件,在每次构建前清理 /dist 文件夹\n\n(1) 安装插件: `npm install clean-webpack-plugin --save-dev`\n\n(2) 配置插件:\n\n```\nconst {\n  CleanWebpackPlugin\n} = require('clean-webpack-plugin');\n\nnew CleanWebpackPlugin(),\n```\n\n> 具体事例请参考 example 目录下的 chapterThree\n\n## 五、开发环境配置\n\n### 1. 将编译后的代码映射回原始源代码\n\n(1) 配置文件中添加 source map 配置： `devtool: 'inline-source-map'`\n\n(2) 入口文件有错误，控制台返回的错误路径是对应的源路径\n\n### 2. 自动编译代码\n\n(1) 观察模式：\n\n+ 添加 script 脚本：`\"watch\": \"webpack --watch\"` \n\n+ `npm run watch`，每次更新入口文件，代码将自动编译，但是每次编译后，需要手动刷新浏览器，页面才会更新\n\n\n(2) webpack-dev-server（一个简单的web服务器，可以实时重新加载页面）（官方推荐使用）\n\n+ 安装： `npm install --save-dev webpack-dev-server`\n\n+ 修改配置文件：告知 webpack-dev-server 在哪里查找文件\n\n```\ndevServer: {\n  contentBase: './dist'\n}\n```\n\n+ 添加 script 脚本\n\n```\n\"start\": \"webpack-dev-server --open\",\n```\n\n+ 修改源文件，web 服务器就会自动重新加载编译后的代码\n\n(3) webpack-dev-middleware（模块热替换），把 webpack 处理后的文件传递给一个服务器(server)\n\n+ 安装 express 和 webpack-dev-middleware： `npm install --save-dev express webpack-dev-middleware`\n\n+ 配置文件中 output 添加  publicPat 选项： `publicPath: '/'`\n\n+ 自定义一个 express 服务，添加 server.js 文件，内容如下：\n\n```js\nconst express = require('express');\nconst webpack = require('webpack');\nconst webpackDevMiddleware = require('webpack-dev-middleware');\n\nconst app = express();\nconst config = require('./webpack.config.js');\nconst compiler = webpack(config);\n\n// Tell express to use the webpack-dev-middleware and use the webpack.config.js\n// configuration file as a base.\napp.use(webpackDevMiddleware(compiler, {\n  publicPath: config.output.publicPath\n}));\n\n// Serve the files on port 3000.\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!\\n');\n});\n```\n\n+ 添加 npm script： `\"server\": \"node server.js\",`\n\n+ 执行 `npm run server`， 打开 http://localhost:3000/ 即是项目地址\n\n> 具体事例请参考 example 目录下的 chapterFour\n\n## 六、模块热替换\n\n### 1. 添加 webpack 自带的插件 NamedModulesPlugin 和 HotModuleReplacementPlugin\n\n```\nconst webpack = require('webpack');\n\ndevServer: {\n  contentBase: './dist',\n  hot: true\n},\n\nplugins: [\n  new webpack.NamedModulesPlugin(),\n  new webpack.HotModuleReplacementPlugin()\n],\n```\n\n### 2. 修改 index.js 文件，监听该文件所引用的外部文件的更新状况\n\n```js\nif (module.hot) {\n  module.hot.accept('./print.js', function() {\n    console.log('Accepting the updated printMe module!');\n    printMe();\n  })\n}\n```\n\n### 3. css 等静态资源加载了相应的 loader，会自动更新\n\n### 4.其他热更新 loader 或插件\n\n+ React Hot Loader：实时调整 react 组件。\n\n+ Vue Loader：此 loader 支持用于 vue 组件的 HMR，提供开箱即用体验。\n\n+ Elm Hot Loader：支持用于 Elm 程序语言的 HMR。\n\n+ Redux HMR：无需 loader 或插件！只需对 main store 文件进行简单的修改。\n\n+ Angular HMR：没有必要使用 loader！只需对主要的 NgModule 文件进行简单的修改，由 HMR API 完全控制。\n\n## 七、输出优化\n\n### 1. 移除 JavaScript 上下文中的未引用代码(dead-code)\n\npackage.json 文件设置 sideEffects 属性 \n\n```js\n\"sideEffects\": [\n  \"./src/some-side-effectful-file.js\",\n  \"*.css\"\n]\n```\n\n### 2.压缩输出，设置编译模式为 production\n\n```js\nmode: \"production\"\n```\n\n## 八、生产环境构建\n\n### 1.构建目标比较\n\n**生产环境构建目标：** 更小的 bundle、更轻量的 source map、更优化的资源、更短的加载时间\n\n**开发环境构建目标：** 强大的 source map 和具有热模块替换能力的 localhost server\n\n### 2.针对不同环境配置 webpack\n\n(1) 安装 webpack-merge：`npm install --save-dev webpack-merge`\n\n(2) 针对不同的环境创建对应的配置文件\n\n```js\n// webpack.common.js\nconst path = require('path');\nconst {\n  CleanWebpackPlugin\n} = require('clean-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: {\n    app: './src/index.js'\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new HtmlWebpackPlugin({\n      title: 'Production'\n    })\n  ],\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  module: {\n    rules: [{\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          'css-loader'\n        ]\n      },\n      {\n        test: /\\.(png|svg|jpg|gif)$/,\n        use: [\n          'file-loader'\n        ]\n      },\n      {\n        test: /\\.(woff|woff2|eot|ttf|otf)$/,\n        use: [\n          'file-loader'\n        ]\n      },\n      {\n        test: /\\.(csv|tsv)$/,\n        use: [\n          'csv-loader'\n        ]\n      },\n      {\n        test: /\\.xml$/,\n        use: [\n          'xml-loader'\n        ]\n      }\n    ]\n  }\n};\n```\n\n```js\n// webpack.dev.js\nconst merge = require('webpack-merge');\nconst common = require('./webpack.common.js');\nconst webpack = require('webpack');\n\nmodule.exports = merge(common, {\n  mode: 'development',\n  devtool: 'inline-source-map',\n  devServer: {\n    contentBase: './dist'\n  },\n  plugins: [\n    new webpack.NamedModulesPlugin(),\n    new webpack.HotModuleReplacementPlugin()\n  ]\n});\n```\n\n```js\n//webpack.prod.js\nconst merge = require('webpack-merge');\nconst UglifyJSPlugin = require('uglifyjs-webpack-plugin');\nconst common = require('./webpack.common.js');\n\nmodule.exports = merge(common, {\n  mode: 'production',\n  plugins: [\n    new UglifyJSPlugin({sourceMap: true}) // 不支持 es6 语法的压缩\n  ]\n});\n```\n\n(3) 修改 NPM Script\n\n```js\n\"start\": \"webpack-dev-server --open --config webpack.dev.js\",\n\"build\": \"webpack --config webpack.prod.js\"\n```\n\n## 九、代码分离\n\n### 1.针对多个文件指定对应的入口\n\n### 2.把多个地方引用的代码分离到一个文件中，防止重复引用\n\n```js\noptimization: {\n  runtimeChunk: {\n    name: \"manifest\"\n  },\n  splitChunks: {\n    cacheGroups: {\n      commons: {\n        test: /[\\\\/]node_modules[\\\\/]/,\n        name: \"vendor\",\n        chunks: \"all\"\n      }\n    }\n  }\n}\n```\n\n### 3.动态导入\n\n```js\n// output 添加 chunkFilename 字段\nchunkFilename: '[name].bundle.js',\n```\n\n```js\n// index.js 动态引入库，编译之后可以看到对应的 loadash-chunk\nasync function getComponent() {\n  var element = document.createElement('div');\n\n  element.innerHTML = _.join(['Hello', 'webpack'], ' ');\n\n  return element;\n}\ngetComponent().then(component => {\n  document.body.appendChild(component);\n})\n```\n","slug":"webpack","published":1,"updated":"2019-08-04T04:31:16.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgua8004m8ex0982sjbwj","content":"<h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><h3 id=\"1-本地安装\"><a href=\"#1-本地安装\" class=\"headerlink\" title=\"1. 本地安装\"></a>1. 本地安装</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># webpack 4+ 版本</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save-dev webpack-cli</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save-dev webpack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装指定版本</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save-dev webpack@&lt;version&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-全局安装（官方不推荐）\"><a href=\"#2-全局安装（官方不推荐）\" class=\"headerlink\" title=\"2. 全局安装（官方不推荐）\"></a>2. 全局安装（官方不推荐）</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> install --<span class=\"built_in\">global</span> webpack</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-最新体验版安装\"><a href=\"#3-最新体验版安装\" class=\"headerlink\" title=\"3. 最新体验版安装\"></a>3. 最新体验版安装</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> install webpack@beta</span><br><span class=\"line\"><span class=\"built_in\">npm</span> install webpack/webpack<span class=\"comment\">#&lt;tagname/branchname&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-运行\"><a href=\"#3-运行\" class=\"headerlink\" title=\"3. 运行\"></a>3. 运行</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">webpack</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、入门\"><a href=\"#二、入门\" class=\"headerlink\" title=\"二、入门\"></a>二、入门</h2><h3 id=\"1-项目初始化\"><a href=\"#1-项目初始化\" class=\"headerlink\" title=\"1. 项目初始化\"></a>1. 项目初始化</h3><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mkdir</span> webpack-demo &amp;&amp; <span class=\"keyword\">cd</span> webpack-demo</span><br><span class=\"line\"></span><br><span class=\"line\">npm init -<span class=\"built_in\">y</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm install webpack webpack-<span class=\"keyword\">cli</span> --<span class=\"keyword\">save</span>-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-初始化源码目录\"><a href=\"#2-初始化源码目录\" class=\"headerlink\" title=\"2. 初始化源码目录\"></a>2. 初始化源码目录</h3><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir src</span><br><span class=\"line\">cd src</span><br><span class=\"line\">new-item index.js</span><br><span class=\"line\">cd ..</span><br><span class=\"line\">mkdir dist</span><br><span class=\"line\">cd dist</span><br><span class=\"line\">new-item index.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-创建配置文件-webpack-config-js\"><a href=\"#3-创建配置文件-webpack-config-js\" class=\"headerlink\" title=\"3. 创建配置文件 webpack.config.js\"></a>3. 创建配置文件 webpack.config.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>, <span class=\"comment\">// 入口文件地址</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>, <span class=\"comment\">// 出口文件名</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>) <span class=\"comment\">// 告诉 webpack 在哪里生成文件</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-添加npm脚本\"><a href=\"#4-添加npm脚本\" class=\"headerlink\" title=\"4. 添加npm脚本\"></a>4. 添加npm脚本</h3><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"webpack-demo\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">+     <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"keywords\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^4.0.1\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"webpack-cli\"</span>: <span class=\"string\">\"^2.0.9\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"lodash\"</span>: <span class=\"string\">\"^4.17.5\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-开始使用-webpack-打包：npm-run-build\"><a href=\"#5-开始使用-webpack-打包：npm-run-build\" class=\"headerlink\" title=\"5. 开始使用 webpack 打包：npm run build\"></a>5. 开始使用 webpack 打包：<code>npm run build</code></h3><blockquote>\n<p>具体事例请参考 example 目录下的 chapterOne</p>\n</blockquote>\n<h2 id=\"三、静态资源管理\"><a href=\"#三、静态资源管理\" class=\"headerlink\" title=\"三、静态资源管理\"></a>三、静态资源管理</h2><h3 id=\"0-创建静态资源目录-asset\"><a href=\"#0-创建静态资源目录-asset\" class=\"headerlink\" title=\"0. 创建静态资源目录 asset\"></a>0. 创建静态资源目录 asset</h3><h3 id=\"1-css\"><a href=\"#1-css\" class=\"headerlink\" title=\"1. css\"></a>1. css</h3><p>(1) 安装对应的 loader： <code>npm install --save-dev style-loader css-loader</code></p>\n<p>(2) 配置 loader：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">        <span class=\"string\">'css-loader'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>(3) 静态资源目录添加 style.css 文件，在入口文件中引用，在打包时， webpack 会把对应的 css 代码插入到 index.html 的 head 中。</p>\n<h3 id=\"2-图片\"><a href=\"#2-图片\" class=\"headerlink\" title=\"2. 图片\"></a>2. 图片</h3><p>(1) 安装对应的 loader： <code>npm install --save-dev file-loader</code></p>\n<p>(2) 配置 loader：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.(png|svg|jpg|gif)$/</span>,</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    <span class=\"string\">'file-loader'</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3) 静态资源目录添加一张图片，在入口文件中引用，打包时， webpack 会生成目标文件夹中的最终 url，并将入口文件中的路径替换为最终路径。</p>\n<h3 id=\"3-字体\"><a href=\"#3-字体\" class=\"headerlink\" title=\"3. 字体\"></a>3. 字体</h3><p>(1) 配置 loader：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">test</span>: /\\.(woff|woff2|eot|ttf|otf)$/,</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    <span class=\"string\">'file-loader'</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) 静态资源目录添加字体，在入口文件中引用，打包时， webpack 会生成目标文件夹中的最终 url，并将入口文件中的路径替换为最终路径。</p>\n<h3 id=\"4-数据（json-lt-默认支持-gt-、xml、csv）\"><a href=\"#4-数据（json-lt-默认支持-gt-、xml、csv）\" class=\"headerlink\" title=\"4. 数据（json&lt;默认支持&gt;、xml、csv）\"></a>4. 数据（json&lt;默认支持&gt;、xml、csv）</h3><p>(1) 安装对应的 loader: <code>npm install --save-dev csv-loader xml-loader</code></p>\n<p>(2) 配置 loader：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">test</span>: /\\.(csv|tsv)$/,</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    <span class=\"string\">'csv-loader'</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">test</span>: /\\.xml$/,</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    <span class=\"string\">'xml-loader'</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3) 静态资源目录添加对应的数据文件，在入口文件中引用数据文件, 打包之后，对应的数据文件会被处理为 json 格式的数据</p>\n<blockquote>\n<p>具体事例请参考 example 目录下的 chapterTwo</p>\n</blockquote>\n<h2 id=\"四、输出管理\"><a href=\"#四、输出管理\" class=\"headerlink\" title=\"四、输出管理\"></a>四、输出管理</h2><h3 id=\"0-入口分离\"><a href=\"#0-入口分离\" class=\"headerlink\" title=\"0. 入口分离\"></a>0. 入口分离</h3><p>(1) 源码目录中新建 print.js 文件，并在 index.js 中引用对应模块，index.js 中引用对应的包</p>\n<p>(2) webpack 配置修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    print: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-解决引用重复的问题，每次打包生成新的-html-文件\"><a href=\"#1-解决引用重复的问题，每次打包生成新的-html-文件\" class=\"headerlink\" title=\"1. 解决引用重复的问题，每次打包生成新的 html 文件\"></a>1. 解决引用重复的问题，每次打包生成新的 html 文件</h3><p>(1) 设定 HtmlWebpackPlugin</p>\n<p>安装 html-webpack-plugin: <code>npm install --save-dev html-webpack-plugin</code></p>\n<p>(2) 配置 HtmlWebpackPlugin</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Output Management'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>(3) 在打包时， HtmlWebpackPlugin 会生成新的 index.html 文件，替换旧的 index.html 文件</p>\n<h3 id=\"2-删除遗留的多余文件-在每次构建前清理-dist-文件夹\"><a href=\"#2-删除遗留的多余文件-在每次构建前清理-dist-文件夹\" class=\"headerlink\" title=\"2. 删除遗留的多余文件,在每次构建前清理 /dist 文件夹\"></a>2. 删除遗留的多余文件,在每次构建前清理 /dist 文件夹</h3><p>(1) 安装插件: <code>npm install clean-webpack-plugin --save-dev</code></p>\n<p>(2) 配置插件:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  CleanWebpackPlugin</span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>具体事例请参考 example 目录下的 chapterThree</p>\n</blockquote>\n<h2 id=\"五、开发环境配置\"><a href=\"#五、开发环境配置\" class=\"headerlink\" title=\"五、开发环境配置\"></a>五、开发环境配置</h2><h3 id=\"1-将编译后的代码映射回原始源代码\"><a href=\"#1-将编译后的代码映射回原始源代码\" class=\"headerlink\" title=\"1. 将编译后的代码映射回原始源代码\"></a>1. 将编译后的代码映射回原始源代码</h3><p>(1) 配置文件中添加 source map 配置： <code>devtool: &#39;inline-source-map&#39;</code></p>\n<p>(2) 入口文件有错误，控制台返回的错误路径是对应的源路径</p>\n<h3 id=\"2-自动编译代码\"><a href=\"#2-自动编译代码\" class=\"headerlink\" title=\"2. 自动编译代码\"></a>2. 自动编译代码</h3><p>(1) 观察模式：</p>\n<ul>\n<li><p>添加 script 脚本：<code>&quot;watch&quot;: &quot;webpack --watch&quot;</code> </p>\n</li>\n<li><p><code>npm run watch</code>，每次更新入口文件，代码将自动编译，但是每次编译后，需要手动刷新浏览器，页面才会更新</p>\n</li>\n</ul>\n<p>(2) webpack-dev-server（一个简单的web服务器，可以实时重新加载页面）（官方推荐使用）</p>\n<ul>\n<li><p>安装： <code>npm install --save-dev webpack-dev-server</code></p>\n</li>\n<li><p>修改配置文件：告知 webpack-dev-server 在哪里查找文件</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">devServer</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">contentBase</span>: <span class=\"string\">'./dist'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加 script 脚本</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"<span class=\"keyword\">start</span><span class=\"string\">\": \"</span>webpack-dev-<span class=\"keyword\">server</span> <span class=\"comment\">--open\",</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改源文件，web 服务器就会自动重新加载编译后的代码</li>\n</ul>\n<p>(3) webpack-dev-middleware（模块热替换），把 webpack 处理后的文件传递给一个服务器(server)</p>\n<ul>\n<li><p>安装 express 和 webpack-dev-middleware： <code>npm install --save-dev express webpack-dev-middleware</code></p>\n</li>\n<li><p>配置文件中 output 添加  publicPat 选项： <code>publicPath: &#39;/&#39;</code></p>\n</li>\n<li><p>自定义一个 express 服务，添加 server.js 文件，内容如下：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackDevMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-dev-middleware'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = webpack(config);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tell express to use the webpack-dev-middleware and use the webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// configuration file as a base.</span></span><br><span class=\"line\">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class=\"line\">  publicPath: config.output.publicPath</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Serve the files on port 3000.</span></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!\\n'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>添加 npm script： <code>&quot;server&quot;: &quot;node server.js&quot;,</code></p>\n</li>\n<li><p>执行 <code>npm run server</code>， 打开 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a> 即是项目地址</p>\n</li>\n</ul>\n<blockquote>\n<p>具体事例请参考 example 目录下的 chapterFour</p>\n</blockquote>\n<h2 id=\"六、模块热替换\"><a href=\"#六、模块热替换\" class=\"headerlink\" title=\"六、模块热替换\"></a>六、模块热替换</h2><h3 id=\"1-添加-webpack-自带的插件-NamedModulesPlugin-和-HotModuleReplacementPlugin\"><a href=\"#1-添加-webpack-自带的插件-NamedModulesPlugin-和-HotModuleReplacementPlugin\" class=\"headerlink\" title=\"1. 添加 webpack 自带的插件 NamedModulesPlugin 和 HotModuleReplacementPlugin\"></a>1. 添加 webpack 自带的插件 NamedModulesPlugin 和 HotModuleReplacementPlugin</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  contentBase: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">  hot: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-修改-index-js-文件，监听该文件所引用的外部文件的更新状况\"><a href=\"#2-修改-index-js-文件，监听该文件所引用的外部文件的更新状况\" class=\"headerlink\" title=\"2. 修改 index.js 文件，监听该文件所引用的外部文件的更新状况\"></a>2. 修改 index.js 文件，监听该文件所引用的外部文件的更新状况</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">module</span>.hot) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.hot.accept(<span class=\"string\">'./print.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accepting the updated printMe module!'</span>);</span><br><span class=\"line\">    printMe();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-css-等静态资源加载了相应的-loader，会自动更新\"><a href=\"#3-css-等静态资源加载了相应的-loader，会自动更新\" class=\"headerlink\" title=\"3. css 等静态资源加载了相应的 loader，会自动更新\"></a>3. css 等静态资源加载了相应的 loader，会自动更新</h3><h3 id=\"4-其他热更新-loader-或插件\"><a href=\"#4-其他热更新-loader-或插件\" class=\"headerlink\" title=\"4.其他热更新 loader 或插件\"></a>4.其他热更新 loader 或插件</h3><ul>\n<li><p>React Hot Loader：实时调整 react 组件。</p>\n</li>\n<li><p>Vue Loader：此 loader 支持用于 vue 组件的 HMR，提供开箱即用体验。</p>\n</li>\n<li><p>Elm Hot Loader：支持用于 Elm 程序语言的 HMR。</p>\n</li>\n<li><p>Redux HMR：无需 loader 或插件！只需对 main store 文件进行简单的修改。</p>\n</li>\n<li><p>Angular HMR：没有必要使用 loader！只需对主要的 NgModule 文件进行简单的修改，由 HMR API 完全控制。</p>\n</li>\n</ul>\n<h2 id=\"七、输出优化\"><a href=\"#七、输出优化\" class=\"headerlink\" title=\"七、输出优化\"></a>七、输出优化</h2><h3 id=\"1-移除-JavaScript-上下文中的未引用代码-dead-code\"><a href=\"#1-移除-JavaScript-上下文中的未引用代码-dead-code\" class=\"headerlink\" title=\"1. 移除 JavaScript 上下文中的未引用代码(dead-code)\"></a>1. 移除 JavaScript 上下文中的未引用代码(dead-code)</h3><p>package.json 文件设置 sideEffects 属性 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"sideEffects\"</span>: [</span><br><span class=\"line\">  <span class=\"string\">\"./src/some-side-effectful-file.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"*.css\"</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-压缩输出，设置编译模式为-production\"><a href=\"#2-压缩输出，设置编译模式为-production\" class=\"headerlink\" title=\"2.压缩输出，设置编译模式为 production\"></a>2.压缩输出，设置编译模式为 production</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mode: <span class=\"string\">\"production\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"八、生产环境构建\"><a href=\"#八、生产环境构建\" class=\"headerlink\" title=\"八、生产环境构建\"></a>八、生产环境构建</h2><h3 id=\"1-构建目标比较\"><a href=\"#1-构建目标比较\" class=\"headerlink\" title=\"1.构建目标比较\"></a>1.构建目标比较</h3><p><strong>生产环境构建目标：</strong> 更小的 bundle、更轻量的 source map、更优化的资源、更短的加载时间</p>\n<p><strong>开发环境构建目标：</strong> 强大的 source map 和具有热模块替换能力的 localhost server</p>\n<h3 id=\"2-针对不同环境配置-webpack\"><a href=\"#2-针对不同环境配置-webpack\" class=\"headerlink\" title=\"2.针对不同环境配置 webpack\"></a>2.针对不同环境配置 webpack</h3><p>(1) 安装 webpack-merge：<code>npm install --save-dev webpack-merge</code></p>\n<p>(2) 针对不同的环境创建对应的配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.common.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  CleanWebpackPlugin</span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">'Production'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          <span class=\"string\">'css-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|svg|jpg|gif)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">'file-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">'file-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(csv|tsv)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">'csv-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.xml$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">'xml-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.dev.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(common, &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">'./dist'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//webpack.prod.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> UglifyJSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(common, &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> UglifyJSPlugin(&#123;<span class=\"attr\">sourceMap</span>: <span class=\"literal\">true</span>&#125;) <span class=\"comment\">// 不支持 es6 语法的压缩</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>(3) 修改 NPM Script</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --open --config webpack.dev.js\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack --config webpack.prod.js\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"九、代码分离\"><a href=\"#九、代码分离\" class=\"headerlink\" title=\"九、代码分离\"></a>九、代码分离</h2><h3 id=\"1-针对多个文件指定对应的入口\"><a href=\"#1-针对多个文件指定对应的入口\" class=\"headerlink\" title=\"1.针对多个文件指定对应的入口\"></a>1.针对多个文件指定对应的入口</h3><h3 id=\"2-把多个地方引用的代码分离到一个文件中，防止重复引用\"><a href=\"#2-把多个地方引用的代码分离到一个文件中，防止重复引用\" class=\"headerlink\" title=\"2.把多个地方引用的代码分离到一个文件中，防止重复引用\"></a>2.把多个地方引用的代码分离到一个文件中，防止重复引用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">  runtimeChunk: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"manifest\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  splitChunks: &#123;</span><br><span class=\"line\">    cacheGroups: &#123;</span><br><span class=\"line\">      commons: &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"vendor\"</span>,</span><br><span class=\"line\">        chunks: <span class=\"string\">\"all\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-动态导入\"><a href=\"#3-动态导入\" class=\"headerlink\" title=\"3.动态导入\"></a>3.动态导入</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// output 添加 chunkFilename 字段</span></span><br><span class=\"line\">chunkFilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js 动态引入库，编译之后可以看到对应的 loadash-chunk</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getComponent().then(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(component);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、安装\"><a href=\"#一、安装\" class=\"headerlink\" title=\"一、安装\"></a>一、安装</h2><h3 id=\"1-本地安装\"><a href=\"#1-本地安装\" class=\"headerlink\" title=\"1. 本地安装\"></a>1. 本地安装</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># webpack 4+ 版本</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save-dev webpack-cli</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save-dev webpack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装指定版本</span></span><br><span class=\"line\">npm <span class=\"keyword\">install</span> <span class=\"comment\">--save-dev webpack@&lt;version&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-全局安装（官方不推荐）\"><a href=\"#2-全局安装（官方不推荐）\" class=\"headerlink\" title=\"2. 全局安装（官方不推荐）\"></a>2. 全局安装（官方不推荐）</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> install --<span class=\"built_in\">global</span> webpack</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-最新体验版安装\"><a href=\"#3-最新体验版安装\" class=\"headerlink\" title=\"3. 最新体验版安装\"></a>3. 最新体验版安装</h3><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">npm</span> install webpack@beta</span><br><span class=\"line\"><span class=\"built_in\">npm</span> install webpack/webpack<span class=\"comment\">#&lt;tagname/branchname&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-运行\"><a href=\"#3-运行\" class=\"headerlink\" title=\"3. 运行\"></a>3. 运行</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">webpack</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、入门\"><a href=\"#二、入门\" class=\"headerlink\" title=\"二、入门\"></a>二、入门</h2><h3 id=\"1-项目初始化\"><a href=\"#1-项目初始化\" class=\"headerlink\" title=\"1. 项目初始化\"></a>1. 项目初始化</h3><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">mkdir</span> webpack-demo &amp;&amp; <span class=\"keyword\">cd</span> webpack-demo</span><br><span class=\"line\"></span><br><span class=\"line\">npm init -<span class=\"built_in\">y</span></span><br><span class=\"line\"></span><br><span class=\"line\">npm install webpack webpack-<span class=\"keyword\">cli</span> --<span class=\"keyword\">save</span>-dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-初始化源码目录\"><a href=\"#2-初始化源码目录\" class=\"headerlink\" title=\"2. 初始化源码目录\"></a>2. 初始化源码目录</h3><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir src</span><br><span class=\"line\">cd src</span><br><span class=\"line\">new-item index.js</span><br><span class=\"line\">cd ..</span><br><span class=\"line\">mkdir dist</span><br><span class=\"line\">cd dist</span><br><span class=\"line\">new-item index.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-创建配置文件-webpack-config-js\"><a href=\"#3-创建配置文件-webpack-config-js\" class=\"headerlink\" title=\"3. 创建配置文件 webpack.config.js\"></a>3. 创建配置文件 webpack.config.js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/index.js'</span>, <span class=\"comment\">// 入口文件地址</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'bundle.js'</span>, <span class=\"comment\">// 出口文件名</span></span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>) <span class=\"comment\">// 告诉 webpack 在哪里生成文件</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-添加npm脚本\"><a href=\"#4-添加npm脚本\" class=\"headerlink\" title=\"4. 添加npm脚本\"></a>4. 添加npm脚本</h3><figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &#123;</span><br><span class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"webpack-demo\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>,</span><br><span class=\"line\">+     <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"keywords\"</span>: [],</span><br><span class=\"line\">    <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^4.0.1\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"webpack-cli\"</span>: <span class=\"string\">\"^2.0.9\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"lodash\"</span>: <span class=\"string\">\"^4.17.5\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-开始使用-webpack-打包：npm-run-build\"><a href=\"#5-开始使用-webpack-打包：npm-run-build\" class=\"headerlink\" title=\"5. 开始使用 webpack 打包：npm run build\"></a>5. 开始使用 webpack 打包：<code>npm run build</code></h3><blockquote>\n<p>具体事例请参考 example 目录下的 chapterOne</p>\n</blockquote>\n<h2 id=\"三、静态资源管理\"><a href=\"#三、静态资源管理\" class=\"headerlink\" title=\"三、静态资源管理\"></a>三、静态资源管理</h2><h3 id=\"0-创建静态资源目录-asset\"><a href=\"#0-创建静态资源目录-asset\" class=\"headerlink\" title=\"0. 创建静态资源目录 asset\"></a>0. 创建静态资源目录 asset</h3><h3 id=\"1-css\"><a href=\"#1-css\" class=\"headerlink\" title=\"1. css\"></a>1. css</h3><p>(1) 安装对应的 loader： <code>npm install --save-dev style-loader css-loader</code></p>\n<p>(2) 配置 loader：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">      test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">        <span class=\"string\">'css-loader'</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>(3) 静态资源目录添加 style.css 文件，在入口文件中引用，在打包时， webpack 会把对应的 css 代码插入到 index.html 的 head 中。</p>\n<h3 id=\"2-图片\"><a href=\"#2-图片\" class=\"headerlink\" title=\"2. 图片\"></a>2. 图片</h3><p>(1) 安装对应的 loader： <code>npm install --save-dev file-loader</code></p>\n<p>(2) 配置 loader：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.(png|svg|jpg|gif)$/</span>,</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    <span class=\"string\">'file-loader'</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3) 静态资源目录添加一张图片，在入口文件中引用，打包时， webpack 会生成目标文件夹中的最终 url，并将入口文件中的路径替换为最终路径。</p>\n<h3 id=\"3-字体\"><a href=\"#3-字体\" class=\"headerlink\" title=\"3. 字体\"></a>3. 字体</h3><p>(1) 配置 loader：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">test</span>: /\\.(woff|woff2|eot|ttf|otf)$/,</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    <span class=\"string\">'file-loader'</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2) 静态资源目录添加字体，在入口文件中引用，打包时， webpack 会生成目标文件夹中的最终 url，并将入口文件中的路径替换为最终路径。</p>\n<h3 id=\"4-数据（json-lt-默认支持-gt-、xml、csv）\"><a href=\"#4-数据（json-lt-默认支持-gt-、xml、csv）\" class=\"headerlink\" title=\"4. 数据（json&lt;默认支持&gt;、xml、csv）\"></a>4. 数据（json&lt;默认支持&gt;、xml、csv）</h3><p>(1) 安装对应的 loader: <code>npm install --save-dev csv-loader xml-loader</code></p>\n<p>(2) 配置 loader：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">test</span>: /\\.(csv|tsv)$/,</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    <span class=\"string\">'csv-loader'</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attribute\">test</span>: /\\.xml$/,</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    <span class=\"string\">'xml-loader'</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(3) 静态资源目录添加对应的数据文件，在入口文件中引用数据文件, 打包之后，对应的数据文件会被处理为 json 格式的数据</p>\n<blockquote>\n<p>具体事例请参考 example 目录下的 chapterTwo</p>\n</blockquote>\n<h2 id=\"四、输出管理\"><a href=\"#四、输出管理\" class=\"headerlink\" title=\"四、输出管理\"></a>四、输出管理</h2><h3 id=\"0-入口分离\"><a href=\"#0-入口分离\" class=\"headerlink\" title=\"0. 入口分离\"></a>0. 入口分离</h3><p>(1) 源码目录中新建 print.js 文件，并在 index.js 中引用对应模块，index.js 中引用对应的包</p>\n<p>(2) webpack 配置修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">    print: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-解决引用重复的问题，每次打包生成新的-html-文件\"><a href=\"#1-解决引用重复的问题，每次打包生成新的-html-文件\" class=\"headerlink\" title=\"1. 解决引用重复的问题，每次打包生成新的 html 文件\"></a>1. 解决引用重复的问题，每次打包生成新的 html 文件</h3><p>(1) 设定 HtmlWebpackPlugin</p>\n<p>安装 html-webpack-plugin: <code>npm install --save-dev html-webpack-plugin</code></p>\n<p>(2) 配置 HtmlWebpackPlugin</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Output Management'</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>(3) 在打包时， HtmlWebpackPlugin 会生成新的 index.html 文件，替换旧的 index.html 文件</p>\n<h3 id=\"2-删除遗留的多余文件-在每次构建前清理-dist-文件夹\"><a href=\"#2-删除遗留的多余文件-在每次构建前清理-dist-文件夹\" class=\"headerlink\" title=\"2. 删除遗留的多余文件,在每次构建前清理 /dist 文件夹\"></a>2. 删除遗留的多余文件,在每次构建前清理 /dist 文件夹</h3><p>(1) 安装插件: <code>npm install clean-webpack-plugin --save-dev</code></p>\n<p>(2) 配置插件:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  CleanWebpackPlugin</span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>具体事例请参考 example 目录下的 chapterThree</p>\n</blockquote>\n<h2 id=\"五、开发环境配置\"><a href=\"#五、开发环境配置\" class=\"headerlink\" title=\"五、开发环境配置\"></a>五、开发环境配置</h2><h3 id=\"1-将编译后的代码映射回原始源代码\"><a href=\"#1-将编译后的代码映射回原始源代码\" class=\"headerlink\" title=\"1. 将编译后的代码映射回原始源代码\"></a>1. 将编译后的代码映射回原始源代码</h3><p>(1) 配置文件中添加 source map 配置： <code>devtool: &#39;inline-source-map&#39;</code></p>\n<p>(2) 入口文件有错误，控制台返回的错误路径是对应的源路径</p>\n<h3 id=\"2-自动编译代码\"><a href=\"#2-自动编译代码\" class=\"headerlink\" title=\"2. 自动编译代码\"></a>2. 自动编译代码</h3><p>(1) 观察模式：</p>\n<ul>\n<li><p>添加 script 脚本：<code>&quot;watch&quot;: &quot;webpack --watch&quot;</code> </p>\n</li>\n<li><p><code>npm run watch</code>，每次更新入口文件，代码将自动编译，但是每次编译后，需要手动刷新浏览器，页面才会更新</p>\n</li>\n</ul>\n<p>(2) webpack-dev-server（一个简单的web服务器，可以实时重新加载页面）（官方推荐使用）</p>\n<ul>\n<li><p>安装： <code>npm install --save-dev webpack-dev-server</code></p>\n</li>\n<li><p>修改配置文件：告知 webpack-dev-server 在哪里查找文件</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">devServer</span>: &#123;</span><br><span class=\"line\">  <span class=\"attribute\">contentBase</span>: <span class=\"string\">'./dist'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加 script 脚本</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"<span class=\"keyword\">start</span><span class=\"string\">\": \"</span>webpack-dev-<span class=\"keyword\">server</span> <span class=\"comment\">--open\",</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改源文件，web 服务器就会自动重新加载编译后的代码</li>\n</ul>\n<p>(3) webpack-dev-middleware（模块热替换），把 webpack 处理后的文件传递给一个服务器(server)</p>\n<ul>\n<li><p>安装 express 和 webpack-dev-middleware： <code>npm install --save-dev express webpack-dev-middleware</code></p>\n</li>\n<li><p>配置文件中 output 添加  publicPat 选项： <code>publicPath: &#39;/&#39;</code></p>\n</li>\n<li><p>自定义一个 express 服务，添加 server.js 文件，内容如下：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackDevMiddleware = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-dev-middleware'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.config.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> compiler = webpack(config);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tell express to use the webpack-dev-middleware and use the webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// configuration file as a base.</span></span><br><span class=\"line\">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class=\"line\">  publicPath: config.output.publicPath</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Serve the files on port 3000.</span></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Example app listening on port 3000!\\n'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>添加 npm script： <code>&quot;server&quot;: &quot;node server.js&quot;,</code></p>\n</li>\n<li><p>执行 <code>npm run server</code>， 打开 <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/</a> 即是项目地址</p>\n</li>\n</ul>\n<blockquote>\n<p>具体事例请参考 example 目录下的 chapterFour</p>\n</blockquote>\n<h2 id=\"六、模块热替换\"><a href=\"#六、模块热替换\" class=\"headerlink\" title=\"六、模块热替换\"></a>六、模块热替换</h2><h3 id=\"1-添加-webpack-自带的插件-NamedModulesPlugin-和-HotModuleReplacementPlugin\"><a href=\"#1-添加-webpack-自带的插件-NamedModulesPlugin-和-HotModuleReplacementPlugin\" class=\"headerlink\" title=\"1. 添加 webpack 自带的插件 NamedModulesPlugin 和 HotModuleReplacementPlugin\"></a>1. 添加 webpack 自带的插件 NamedModulesPlugin 和 HotModuleReplacementPlugin</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  contentBase: <span class=\"string\">'./dist'</span>,</span><br><span class=\"line\">  hot: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-修改-index-js-文件，监听该文件所引用的外部文件的更新状况\"><a href=\"#2-修改-index-js-文件，监听该文件所引用的外部文件的更新状况\" class=\"headerlink\" title=\"2. 修改 index.js 文件，监听该文件所引用的外部文件的更新状况\"></a>2. 修改 index.js 文件，监听该文件所引用的外部文件的更新状况</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">module</span>.hot) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.hot.accept(<span class=\"string\">'./print.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Accepting the updated printMe module!'</span>);</span><br><span class=\"line\">    printMe();</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-css-等静态资源加载了相应的-loader，会自动更新\"><a href=\"#3-css-等静态资源加载了相应的-loader，会自动更新\" class=\"headerlink\" title=\"3. css 等静态资源加载了相应的 loader，会自动更新\"></a>3. css 等静态资源加载了相应的 loader，会自动更新</h3><h3 id=\"4-其他热更新-loader-或插件\"><a href=\"#4-其他热更新-loader-或插件\" class=\"headerlink\" title=\"4.其他热更新 loader 或插件\"></a>4.其他热更新 loader 或插件</h3><ul>\n<li><p>React Hot Loader：实时调整 react 组件。</p>\n</li>\n<li><p>Vue Loader：此 loader 支持用于 vue 组件的 HMR，提供开箱即用体验。</p>\n</li>\n<li><p>Elm Hot Loader：支持用于 Elm 程序语言的 HMR。</p>\n</li>\n<li><p>Redux HMR：无需 loader 或插件！只需对 main store 文件进行简单的修改。</p>\n</li>\n<li><p>Angular HMR：没有必要使用 loader！只需对主要的 NgModule 文件进行简单的修改，由 HMR API 完全控制。</p>\n</li>\n</ul>\n<h2 id=\"七、输出优化\"><a href=\"#七、输出优化\" class=\"headerlink\" title=\"七、输出优化\"></a>七、输出优化</h2><h3 id=\"1-移除-JavaScript-上下文中的未引用代码-dead-code\"><a href=\"#1-移除-JavaScript-上下文中的未引用代码-dead-code\" class=\"headerlink\" title=\"1. 移除 JavaScript 上下文中的未引用代码(dead-code)\"></a>1. 移除 JavaScript 上下文中的未引用代码(dead-code)</h3><p>package.json 文件设置 sideEffects 属性 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"sideEffects\"</span>: [</span><br><span class=\"line\">  <span class=\"string\">\"./src/some-side-effectful-file.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"*.css\"</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-压缩输出，设置编译模式为-production\"><a href=\"#2-压缩输出，设置编译模式为-production\" class=\"headerlink\" title=\"2.压缩输出，设置编译模式为 production\"></a>2.压缩输出，设置编译模式为 production</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mode: <span class=\"string\">\"production\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"八、生产环境构建\"><a href=\"#八、生产环境构建\" class=\"headerlink\" title=\"八、生产环境构建\"></a>八、生产环境构建</h2><h3 id=\"1-构建目标比较\"><a href=\"#1-构建目标比较\" class=\"headerlink\" title=\"1.构建目标比较\"></a>1.构建目标比较</h3><p><strong>生产环境构建目标：</strong> 更小的 bundle、更轻量的 source map、更优化的资源、更短的加载时间</p>\n<p><strong>开发环境构建目标：</strong> 强大的 source map 和具有热模块替换能力的 localhost server</p>\n<h3 id=\"2-针对不同环境配置-webpack\"><a href=\"#2-针对不同环境配置-webpack\" class=\"headerlink\" title=\"2.针对不同环境配置 webpack\"></a>2.针对不同环境配置 webpack</h3><p>(1) 安装 webpack-merge：<code>npm install --save-dev webpack-merge</code></p>\n<p>(2) 针对不同的环境创建对应的配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.common.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">  CleanWebpackPlugin</span><br><span class=\"line\">&#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    app: <span class=\"string\">'./src/index.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">      title: <span class=\"string\">'Production'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [&#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">'style-loader'</span>,</span><br><span class=\"line\">          <span class=\"string\">'css-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|svg|jpg|gif)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">'file-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">'file-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(csv|tsv)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">'csv-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.xml$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          <span class=\"string\">'xml-loader'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.dev.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(common, &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">'inline-source-map'</span>,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: <span class=\"string\">'./dist'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.NamedModulesPlugin(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//webpack.prod.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack-merge'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> UglifyJSPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> common = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = merge(common, &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> UglifyJSPlugin(&#123;<span class=\"attr\">sourceMap</span>: <span class=\"literal\">true</span>&#125;) <span class=\"comment\">// 不支持 es6 语法的压缩</span></span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>(3) 修改 NPM Script</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --open --config webpack.dev.js\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack --config webpack.prod.js\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"九、代码分离\"><a href=\"#九、代码分离\" class=\"headerlink\" title=\"九、代码分离\"></a>九、代码分离</h2><h3 id=\"1-针对多个文件指定对应的入口\"><a href=\"#1-针对多个文件指定对应的入口\" class=\"headerlink\" title=\"1.针对多个文件指定对应的入口\"></a>1.针对多个文件指定对应的入口</h3><h3 id=\"2-把多个地方引用的代码分离到一个文件中，防止重复引用\"><a href=\"#2-把多个地方引用的代码分离到一个文件中，防止重复引用\" class=\"headerlink\" title=\"2.把多个地方引用的代码分离到一个文件中，防止重复引用\"></a>2.把多个地方引用的代码分离到一个文件中，防止重复引用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">  runtimeChunk: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">\"manifest\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  splitChunks: &#123;</span><br><span class=\"line\">    cacheGroups: &#123;</span><br><span class=\"line\">      commons: &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">        name: <span class=\"string\">\"vendor\"</span>,</span><br><span class=\"line\">        chunks: <span class=\"string\">\"all\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-动态导入\"><a href=\"#3-动态导入\" class=\"headerlink\" title=\"3.动态导入\"></a>3.动态导入</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// output 添加 chunkFilename 字段</span></span><br><span class=\"line\">chunkFilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// index.js 动态引入库，编译之后可以看到对应的 loadash-chunk</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getComponent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  element.innerHTML = _.join([<span class=\"string\">'Hello'</span>, <span class=\"string\">'webpack'</span>], <span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getComponent().then(<span class=\"function\"><span class=\"params\">component</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(component);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"Web请求加密","comments":1,"date":"2018-10-22T11:47:57.000Z","_content":"\n1. 代码：\n\n```js\nimport CryptoJS from 'crypto-js';\n\nexport class ApiSign {\n  constructor() {\n    (this.wordMap = {\n      '*': '%2A',\n      '(': '%28',\n      ')': '%29',\n    }),\n      (this.stdUrlsafe = {\n        '+': '-',\n        '/': '_',\n      });\n  }\n\n  encode(str) {\n    return encodeURIComponent(str).replace(/[*()]/g, v => {\n      return this.wordMap[v] || v;\n    });\n  }\n\n  sign(params) {\n    const keys = Object.keys(params);\n    if (keys.length === 0) {\n      console.error('params empty');\n      return '';\n    }\n    if (!params.F_accesstoken) {\n      console.error('F_accesstoken empty');\n      return '';\n    }\n    keys.sort();\n    const encryptStr = keys\n      .map(v => {\n        return [this.encode(v), '=', this.encode(params[v])].join('');\n      })\n      .join('&');\n    return (\n      '01' +\n      CryptoJS.HmacSHA1(encryptStr, params.F_accesstoken)\n        .toString(CryptoJS.enc.Base64)\n        .replace(/[+/]/g, v => {\n          return this.stdUrlsafe[v] || v;\n        })\n    );\n  }\n}\n\nconst apiSign = new ApiSign();\nexport { apiSign };\n```\n\n2. 使用方法\n\n- 安装 [crypto-js](https://www.npmjs.com/package/crypto-js)\n- 使用示例：\n\n  ```js\n  import { apiSign } from '@/utils/sign.js';\n\n  let params = {};\n  params.F_sign = apiSign.sign(params);\n  ```\n","source":"_posts/web请求加密.md","raw":"---\ntitle: web请求加密\ncomments: true\ndate: 2018-10-22 19:47:57\ncategories: web\ntags: http\n---\n\n1. 代码：\n\n```js\nimport CryptoJS from 'crypto-js';\n\nexport class ApiSign {\n  constructor() {\n    (this.wordMap = {\n      '*': '%2A',\n      '(': '%28',\n      ')': '%29',\n    }),\n      (this.stdUrlsafe = {\n        '+': '-',\n        '/': '_',\n      });\n  }\n\n  encode(str) {\n    return encodeURIComponent(str).replace(/[*()]/g, v => {\n      return this.wordMap[v] || v;\n    });\n  }\n\n  sign(params) {\n    const keys = Object.keys(params);\n    if (keys.length === 0) {\n      console.error('params empty');\n      return '';\n    }\n    if (!params.F_accesstoken) {\n      console.error('F_accesstoken empty');\n      return '';\n    }\n    keys.sort();\n    const encryptStr = keys\n      .map(v => {\n        return [this.encode(v), '=', this.encode(params[v])].join('');\n      })\n      .join('&');\n    return (\n      '01' +\n      CryptoJS.HmacSHA1(encryptStr, params.F_accesstoken)\n        .toString(CryptoJS.enc.Base64)\n        .replace(/[+/]/g, v => {\n          return this.stdUrlsafe[v] || v;\n        })\n    );\n  }\n}\n\nconst apiSign = new ApiSign();\nexport { apiSign };\n```\n\n2. 使用方法\n\n- 安装 [crypto-js](https://www.npmjs.com/package/crypto-js)\n- 使用示例：\n\n  ```js\n  import { apiSign } from '@/utils/sign.js';\n\n  let params = {};\n  params.F_sign = apiSign.sign(params);\n  ```\n","slug":"web请求加密","published":1,"updated":"2019-05-19T05:26:58.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgua9004p8ex0z858cyvm","content":"<ol>\n<li>代码：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> CryptoJS <span class=\"keyword\">from</span> <span class=\"string\">'crypto-js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApiSign</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    (<span class=\"keyword\">this</span>.wordMap = &#123;</span><br><span class=\"line\">      <span class=\"string\">'*'</span>: <span class=\"string\">'%2A'</span>,</span><br><span class=\"line\">      <span class=\"string\">'('</span>: <span class=\"string\">'%28'</span>,</span><br><span class=\"line\">      <span class=\"string\">')'</span>: <span class=\"string\">'%29'</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">      (<span class=\"keyword\">this</span>.stdUrlsafe = &#123;</span><br><span class=\"line\">        <span class=\"string\">'+'</span>: <span class=\"string\">'-'</span>,</span><br><span class=\"line\">        <span class=\"string\">'/'</span>: <span class=\"string\">'_'</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  encode(str) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">encodeURIComponent</span>(str).replace(<span class=\"regexp\">/[*()]/g</span>, v =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.wordMap[v] || v;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sign(params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(params);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (keys.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'params empty'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!params.F_accesstoken) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'F_accesstoken empty'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    keys.sort();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> encryptStr = keys</span><br><span class=\"line\">      .map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"keyword\">this</span>.encode(v), <span class=\"string\">'='</span>, <span class=\"keyword\">this</span>.encode(params[v])].join(<span class=\"string\">''</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .join(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">'01'</span> +</span><br><span class=\"line\">      CryptoJS.HmacSHA1(encryptStr, params.F_accesstoken)</span><br><span class=\"line\">        .toString(CryptoJS.enc.Base64)</span><br><span class=\"line\">        .replace(<span class=\"regexp\">/[+/]/g</span>, v =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.stdUrlsafe[v] || v;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> apiSign = <span class=\"keyword\">new</span> ApiSign();</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; apiSign &#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用方法</li>\n</ol>\n<ul>\n<li>安装 <a href=\"https://www.npmjs.com/package/crypto-js\" target=\"_blank\" rel=\"noopener\">crypto-js</a></li>\n<li><p>使用示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; apiSign &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/sign.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> params = &#123;&#125;;</span><br><span class=\"line\">params.F_sign = apiSign.sign(params);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>代码：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> CryptoJS <span class=\"keyword\">from</span> <span class=\"string\">'crypto-js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ApiSign</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    (<span class=\"keyword\">this</span>.wordMap = &#123;</span><br><span class=\"line\">      <span class=\"string\">'*'</span>: <span class=\"string\">'%2A'</span>,</span><br><span class=\"line\">      <span class=\"string\">'('</span>: <span class=\"string\">'%28'</span>,</span><br><span class=\"line\">      <span class=\"string\">')'</span>: <span class=\"string\">'%29'</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">      (<span class=\"keyword\">this</span>.stdUrlsafe = &#123;</span><br><span class=\"line\">        <span class=\"string\">'+'</span>: <span class=\"string\">'-'</span>,</span><br><span class=\"line\">        <span class=\"string\">'/'</span>: <span class=\"string\">'_'</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  encode(str) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">encodeURIComponent</span>(str).replace(<span class=\"regexp\">/[*()]/g</span>, v =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.wordMap[v] || v;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sign(params) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(params);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (keys.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'params empty'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!params.F_accesstoken) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'F_accesstoken empty'</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    keys.sort();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> encryptStr = keys</span><br><span class=\"line\">      .map(<span class=\"function\"><span class=\"params\">v</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [<span class=\"keyword\">this</span>.encode(v), <span class=\"string\">'='</span>, <span class=\"keyword\">this</span>.encode(params[v])].join(<span class=\"string\">''</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .join(<span class=\"string\">'&amp;'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"string\">'01'</span> +</span><br><span class=\"line\">      CryptoJS.HmacSHA1(encryptStr, params.F_accesstoken)</span><br><span class=\"line\">        .toString(CryptoJS.enc.Base64)</span><br><span class=\"line\">        .replace(<span class=\"regexp\">/[+/]/g</span>, v =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.stdUrlsafe[v] || v;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> apiSign = <span class=\"keyword\">new</span> ApiSign();</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; apiSign &#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用方法</li>\n</ol>\n<ul>\n<li>安装 <a href=\"https://www.npmjs.com/package/crypto-js\" target=\"_blank\" rel=\"noopener\">crypto-js</a></li>\n<li><p>使用示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; apiSign &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@/utils/sign.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> params = &#123;&#125;;</span><br><span class=\"line\">params.F_sign = apiSign.sign(params);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"Vscode 配置 Wsl 并配置 Node 环境","comments":1,"date":"2018-12-18T00:57:19.000Z","_content":"\n1. 下载 WSL Guideline，里面会有配置安装 wsl 相关说明\n\n2. 切换终端到 wsl\n\n3. 安装 node：\n\n```bash\n$ touch ~/.bashrc\n$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash\n// restart bash\n$ nvm install node\n```\n\n4. 安装 vue-cli3：`npm install -g @vue/cli`\n\n5. 可以开始使用啦\n","source":"_posts/wsl配置.md","raw":"---\ntitle: Vscode 配置 wsl 并配置 node 环境\ncomments: true\ndate: 2018-12-18 08:57:19\ncategories: web\ntags: 编辑器\n---\n\n1. 下载 WSL Guideline，里面会有配置安装 wsl 相关说明\n\n2. 切换终端到 wsl\n\n3. 安装 node：\n\n```bash\n$ touch ~/.bashrc\n$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash\n// restart bash\n$ nvm install node\n```\n\n4. 安装 vue-cli3：`npm install -g @vue/cli`\n\n5. 可以开始使用啦\n","slug":"wsl配置","published":1,"updated":"2019-05-19T05:27:42.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguaa004s8ex0lxyt8qqr","content":"<ol>\n<li><p>下载 WSL Guideline，里面会有配置安装 wsl 相关说明</p>\n</li>\n<li><p>切换终端到 wsl</p>\n</li>\n<li><p>安装 node：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch ~/.bashrc</span><br><span class=\"line\">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash</span><br><span class=\"line\">// restart bash</span><br><span class=\"line\">$ nvm install node</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p>安装 vue-cli3：<code>npm install -g @vue/cli</code></p>\n</li>\n<li><p>可以开始使用啦</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>下载 WSL Guideline，里面会有配置安装 wsl 相关说明</p>\n</li>\n<li><p>切换终端到 wsl</p>\n</li>\n<li><p>安装 node：</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ touch ~/.bashrc</span><br><span class=\"line\">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash</span><br><span class=\"line\">// restart bash</span><br><span class=\"line\">$ nvm install node</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><p>安装 vue-cli3：<code>npm install -g @vue/cli</code></p>\n</li>\n<li><p>可以开始使用啦</p>\n</li>\n</ol>\n"},{"title":"Wordpress安装","date":"2018-05-20T08:58:59.000Z","_content":"\n[原文链接：](https://codex.wordpress.org/zh-cn:%E5%AE%89%E8%A3%85_WordPress#.E6.AD.A5.E9.AA.A43:.E8.AE.BE.E7.BD.AEwp-config.php)\n\n1. 下载并解压缩 WordPress 程序安装包\n\n2. 在你的网页服务器上为 WordPress 创建一个数据库, 并且创建一个 MySQL 拥有所有权限可以进入和修改的用户\n\n3. 重命名 wp-config-sample.php 文件为 wp-config.php\n\n4. 把 WordPress 文件夹放在你服务器上想要放的地方:\n\n(1) 如果你想把通过顶级域名来访问你的 WordPress 博客 (例如 http://example.com/),移动或上传所有解压后的 WordPress 文件夹里面的文件(但不包括 WordPress 文件夹本身) 到你服务器的根目录下.\n\n(2) 如果你想通过子域名来访问你的博客(例如 http://example.com/blog/), 将 wordpress 重命名为你想要的子目录名称， 接着上传至你的网站服务器。 例如，你想让 WordPress 安装在子目录\"blog\"中，你就应该将\"wordpress\"这个文件夹重命名为\"blog\"，接着上传至你的网站服务器的根目录中。\n\n5. 在你喜欢的浏览器中访问 wp-admin/install.php 以便启动安装程序.\n\n(1) 如果你在根目录下安装 WordPress,，你应该访问: http://example.com/wp-admin/install.php\n\n(2) 如果你将 WordPress 安装在子目录 blog 下，你应该访问: http://example.com/blog/wp-admin/install.php\n","source":"_posts/wordpress安装.md","raw":"---\ntitle: wordpress安装\ndate: 2018-05-20 16:58:59\ncategories: 博客\ntags: wordpress\n---\n\n[原文链接：](https://codex.wordpress.org/zh-cn:%E5%AE%89%E8%A3%85_WordPress#.E6.AD.A5.E9.AA.A43:.E8.AE.BE.E7.BD.AEwp-config.php)\n\n1. 下载并解压缩 WordPress 程序安装包\n\n2. 在你的网页服务器上为 WordPress 创建一个数据库, 并且创建一个 MySQL 拥有所有权限可以进入和修改的用户\n\n3. 重命名 wp-config-sample.php 文件为 wp-config.php\n\n4. 把 WordPress 文件夹放在你服务器上想要放的地方:\n\n(1) 如果你想把通过顶级域名来访问你的 WordPress 博客 (例如 http://example.com/),移动或上传所有解压后的 WordPress 文件夹里面的文件(但不包括 WordPress 文件夹本身) 到你服务器的根目录下.\n\n(2) 如果你想通过子域名来访问你的博客(例如 http://example.com/blog/), 将 wordpress 重命名为你想要的子目录名称， 接着上传至你的网站服务器。 例如，你想让 WordPress 安装在子目录\"blog\"中，你就应该将\"wordpress\"这个文件夹重命名为\"blog\"，接着上传至你的网站服务器的根目录中。\n\n5. 在你喜欢的浏览器中访问 wp-admin/install.php 以便启动安装程序.\n\n(1) 如果你在根目录下安装 WordPress,，你应该访问: http://example.com/wp-admin/install.php\n\n(2) 如果你将 WordPress 安装在子目录 blog 下，你应该访问: http://example.com/blog/wp-admin/install.php\n","slug":"wordpress安装","published":1,"updated":"2019-05-19T05:27:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dbguab004w8ex0pqba33ox","content":"<p><a href=\"https://codex.wordpress.org/zh-cn:%E5%AE%89%E8%A3%85_WordPress#.E6.AD.A5.E9.AA.A43:.E8.AE.BE.E7.BD.AEwp-config.php\" target=\"_blank\" rel=\"noopener\">原文链接：</a></p>\n<ol>\n<li><p>下载并解压缩 WordPress 程序安装包</p>\n</li>\n<li><p>在你的网页服务器上为 WordPress 创建一个数据库, 并且创建一个 MySQL 拥有所有权限可以进入和修改的用户</p>\n</li>\n<li><p>重命名 wp-config-sample.php 文件为 wp-config.php</p>\n</li>\n<li><p>把 WordPress 文件夹放在你服务器上想要放的地方:</p>\n</li>\n</ol>\n<p>(1) 如果你想把通过顶级域名来访问你的 WordPress 博客 (例如 <a href=\"http://example.com/),移动或上传所有解压后的\" target=\"_blank\" rel=\"noopener\">http://example.com/),移动或上传所有解压后的</a> WordPress 文件夹里面的文件(但不包括 WordPress 文件夹本身) 到你服务器的根目录下.</p>\n<p>(2) 如果你想通过子域名来访问你的博客(例如 <a href=\"http://example.com/blog/)\" target=\"_blank\" rel=\"noopener\">http://example.com/blog/)</a>, 将 wordpress 重命名为你想要的子目录名称， 接着上传至你的网站服务器。 例如，你想让 WordPress 安装在子目录”blog”中，你就应该将”wordpress”这个文件夹重命名为”blog”，接着上传至你的网站服务器的根目录中。</p>\n<ol start=\"5\">\n<li>在你喜欢的浏览器中访问 wp-admin/install.php 以便启动安装程序.</li>\n</ol>\n<p>(1) 如果你在根目录下安装 WordPress,，你应该访问: <a href=\"http://example.com/wp-admin/install.php\" target=\"_blank\" rel=\"noopener\">http://example.com/wp-admin/install.php</a></p>\n<p>(2) 如果你将 WordPress 安装在子目录 blog 下，你应该访问: <a href=\"http://example.com/blog/wp-admin/install.php\" target=\"_blank\" rel=\"noopener\">http://example.com/blog/wp-admin/install.php</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://codex.wordpress.org/zh-cn:%E5%AE%89%E8%A3%85_WordPress#.E6.AD.A5.E9.AA.A43:.E8.AE.BE.E7.BD.AEwp-config.php\" target=\"_blank\" rel=\"noopener\">原文链接：</a></p>\n<ol>\n<li><p>下载并解压缩 WordPress 程序安装包</p>\n</li>\n<li><p>在你的网页服务器上为 WordPress 创建一个数据库, 并且创建一个 MySQL 拥有所有权限可以进入和修改的用户</p>\n</li>\n<li><p>重命名 wp-config-sample.php 文件为 wp-config.php</p>\n</li>\n<li><p>把 WordPress 文件夹放在你服务器上想要放的地方:</p>\n</li>\n</ol>\n<p>(1) 如果你想把通过顶级域名来访问你的 WordPress 博客 (例如 <a href=\"http://example.com/),移动或上传所有解压后的\" target=\"_blank\" rel=\"noopener\">http://example.com/),移动或上传所有解压后的</a> WordPress 文件夹里面的文件(但不包括 WordPress 文件夹本身) 到你服务器的根目录下.</p>\n<p>(2) 如果你想通过子域名来访问你的博客(例如 <a href=\"http://example.com/blog/)\" target=\"_blank\" rel=\"noopener\">http://example.com/blog/)</a>, 将 wordpress 重命名为你想要的子目录名称， 接着上传至你的网站服务器。 例如，你想让 WordPress 安装在子目录”blog”中，你就应该将”wordpress”这个文件夹重命名为”blog”，接着上传至你的网站服务器的根目录中。</p>\n<ol start=\"5\">\n<li>在你喜欢的浏览器中访问 wp-admin/install.php 以便启动安装程序.</li>\n</ol>\n<p>(1) 如果你在根目录下安装 WordPress,，你应该访问: <a href=\"http://example.com/wp-admin/install.php\" target=\"_blank\" rel=\"noopener\">http://example.com/wp-admin/install.php</a></p>\n<p>(2) 如果你将 WordPress 安装在子目录 blog 下，你应该访问: <a href=\"http://example.com/blog/wp-admin/install.php\" target=\"_blank\" rel=\"noopener\">http://example.com/blog/wp-admin/install.php</a></p>\n"},{"title":"Yml 文件操作方法","comments":1,"date":"2018-06-08T01:52:46.000Z","_content":"\n1. 文件读取方法示例：\n\n```\n    import yaml\n    fr = open('yml_file_address', 'r',encoding='utf-8')\n    data = yaml.load(fr)\n    print(data)\n    fr.close()\n```\n\n关于 yml 文件的操作，有一个专门的库 yaml ，yaml 直接给出了一个把 yml 文件读取到字典里的方法 load，所以要读取 yml 文件非常简单，只需要引入 yaml 库，用 python 的 open 方法打开文件，用 load 方法读取文件，就可以轻而易举的读取 yml 文件到字典里了。当然其中还是有点坑的，那就是解码的问题，因为默认读取的文件不是字符编码格式，所以要把它转换为字符编码，再传给 load。\n\n2. 文件写入方法示例：\n\n```\n    import yaml\n    fr = open('yml_file_address', 'w',encoding='utf-8')\n    temp = {\"fruits\":\"banana\"}\n    data = yaml.dump(temp,fr, default_flow_style=False)\n    print(data)\n    fr.close()\n```\n\nyaml 库提供了一个 dump 方法，只需要打开文件，给出要写入的参数（字典形式等），调用 dump 方法就可以很快捷的写入信息到 yml 文件啦\n\n3. 这两个方法在项目中的运用：\n\n```\n修改配置文件昵称\ndef changeUserName(user):\n    fr = open('yml_file_address', 'r',encoding='utf-8')\n    data = yaml.load(fr)\n    fr.close()\n    data['robot_name_cn'] = user\n    fr = open('yml_file_address', 'w', encoding='utf-8')\n    yaml.dump(data, fr, allow_unicode=True, default_flow_style=False)\n    fr.close()\n    return data['robot_name_cn']\n修改配置文件密码\ndef changePassword(password):\n    fr = open('yml_file_address', 'r',encoding='utf-8')\n    data = yaml.load(fr)\n    fr.close()\n    data['password'] = password\n    if 'password' in data.keys():\n        fr = open('yml_file_address', 'w', encoding='utf-8')\n        yaml.dump(data, fr, allow_unicode=True, default_flow_style=False)\n        fr.close()\n        return data['password']\n    else:\n        fr = open('yml_file_address', 'a', encoding='utf-8')\n        yaml.dump(data, fr, allow_unicode=True, default_flow_style=False)\n        fr.close()\n        return data['password']\n```\n\n这是两个修改配置信息的函数 changeUserName（） 和 changePassword（），故名思议，就是修改密码和昵称，两个函数的思路都是一样的，先读取配置文件，把相应的信息替换进配置文件里，然后通过写入方法，把这两个信息写入文件中。\n\n其中的难点可能就是解码和生成 yaml 文件的样式问题了。一开始各种报解码错误，在打开文件的时候加一个 encoding，在写入函数中加一个 allow_unicode=True 搞定了。\n\n解决替换信息在文件中的样式问题， 是在写入函数中加入 default_flow_style=False 搞定的。\n","source":"_posts/yml文件操作方法.md","raw":"---\ntitle: yml 文件操作方法\ncomments: true\ndate: 2018-06-08 09:52:46\ncategories: python\ntags: 文本操作\n---\n\n1. 文件读取方法示例：\n\n```\n    import yaml\n    fr = open('yml_file_address', 'r',encoding='utf-8')\n    data = yaml.load(fr)\n    print(data)\n    fr.close()\n```\n\n关于 yml 文件的操作，有一个专门的库 yaml ，yaml 直接给出了一个把 yml 文件读取到字典里的方法 load，所以要读取 yml 文件非常简单，只需要引入 yaml 库，用 python 的 open 方法打开文件，用 load 方法读取文件，就可以轻而易举的读取 yml 文件到字典里了。当然其中还是有点坑的，那就是解码的问题，因为默认读取的文件不是字符编码格式，所以要把它转换为字符编码，再传给 load。\n\n2. 文件写入方法示例：\n\n```\n    import yaml\n    fr = open('yml_file_address', 'w',encoding='utf-8')\n    temp = {\"fruits\":\"banana\"}\n    data = yaml.dump(temp,fr, default_flow_style=False)\n    print(data)\n    fr.close()\n```\n\nyaml 库提供了一个 dump 方法，只需要打开文件，给出要写入的参数（字典形式等），调用 dump 方法就可以很快捷的写入信息到 yml 文件啦\n\n3. 这两个方法在项目中的运用：\n\n```\n修改配置文件昵称\ndef changeUserName(user):\n    fr = open('yml_file_address', 'r',encoding='utf-8')\n    data = yaml.load(fr)\n    fr.close()\n    data['robot_name_cn'] = user\n    fr = open('yml_file_address', 'w', encoding='utf-8')\n    yaml.dump(data, fr, allow_unicode=True, default_flow_style=False)\n    fr.close()\n    return data['robot_name_cn']\n修改配置文件密码\ndef changePassword(password):\n    fr = open('yml_file_address', 'r',encoding='utf-8')\n    data = yaml.load(fr)\n    fr.close()\n    data['password'] = password\n    if 'password' in data.keys():\n        fr = open('yml_file_address', 'w', encoding='utf-8')\n        yaml.dump(data, fr, allow_unicode=True, default_flow_style=False)\n        fr.close()\n        return data['password']\n    else:\n        fr = open('yml_file_address', 'a', encoding='utf-8')\n        yaml.dump(data, fr, allow_unicode=True, default_flow_style=False)\n        fr.close()\n        return data['password']\n```\n\n这是两个修改配置信息的函数 changeUserName（） 和 changePassword（），故名思议，就是修改密码和昵称，两个函数的思路都是一样的，先读取配置文件，把相应的信息替换进配置文件里，然后通过写入方法，把这两个信息写入文件中。\n\n其中的难点可能就是解码和生成 yaml 文件的样式问题了。一开始各种报解码错误，在打开文件的时候加一个 encoding，在写入函数中加一个 allow_unicode=True 搞定了。\n\n解决替换信息在文件中的样式问题， 是在写入函数中加入 default_flow_style=False 搞定的。\n","slug":"yml文件操作方法","published":1,"updated":"2019-05-19T06:11:34.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguae004z8ex0hzd3sr3r","content":"<ol>\n<li>文件读取方法示例：</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\">fr = <span class=\"built_in\">open</span>(<span class=\"string\">'yml_file_address'</span>, <span class=\"string\">'r'</span>,encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">data = yaml.load(fr)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br><span class=\"line\">fr.<span class=\"built_in\">close</span>()</span><br></pre></td></tr></table></figure>\n<p>关于 yml 文件的操作，有一个专门的库 yaml ，yaml 直接给出了一个把 yml 文件读取到字典里的方法 load，所以要读取 yml 文件非常简单，只需要引入 yaml 库，用 python 的 open 方法打开文件，用 load 方法读取文件，就可以轻而易举的读取 yml 文件到字典里了。当然其中还是有点坑的，那就是解码的问题，因为默认读取的文件不是字符编码格式，所以要把它转换为字符编码，再传给 load。</p>\n<ol start=\"2\">\n<li>文件写入方法示例：</li>\n</ol>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"><span class=\"title\">fr</span> = open('yml_file_address', 'w',encoding='utf<span class=\"number\">-8</span>')</span><br><span class=\"line\"><span class=\"title\">temp</span> = &#123;<span class=\"string\">\"fruits\"</span>:<span class=\"string\">\"banana\"</span>&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> = yaml.dump(<span class=\"title\">temp</span>,<span class=\"title\">fr</span>, <span class=\"title\">default_flow_style</span>=<span class=\"type\">False</span>)</span></span><br><span class=\"line\"><span class=\"title\">print</span>(<span class=\"class\"><span class=\"keyword\">data</span>)</span></span><br><span class=\"line\"><span class=\"title\">fr</span>.close()</span><br></pre></td></tr></table></figure>\n<p>yaml 库提供了一个 dump 方法，只需要打开文件，给出要写入的参数（字典形式等），调用 dump 方法就可以很快捷的写入信息到 yml 文件啦</p>\n<ol start=\"3\">\n<li>这两个方法在项目中的运用：</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改配置文件昵称</span><br><span class=\"line\">def changeUserName(user):</span><br><span class=\"line\">    fr = <span class=\"keyword\">open</span>(<span class=\"string\">'yml_file_address'</span>, <span class=\"string\">'r'</span>,encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">data</span> = yaml.load(fr)</span><br><span class=\"line\">    fr.close()</span><br><span class=\"line\">    <span class=\"keyword\">data</span>[<span class=\"string\">'robot_name_cn'</span>] = user</span><br><span class=\"line\">    fr = <span class=\"keyword\">open</span>(<span class=\"string\">'yml_file_address'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    yaml.dump(<span class=\"keyword\">data</span>, fr, allow_unicode=True, default_flow_style=False)</span><br><span class=\"line\">    fr.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">data</span>[<span class=\"string\">'robot_name_cn'</span>]</span><br><span class=\"line\">修改配置文件密码</span><br><span class=\"line\">def changePassword(password):</span><br><span class=\"line\">    fr = <span class=\"keyword\">open</span>(<span class=\"string\">'yml_file_address'</span>, <span class=\"string\">'r'</span>,encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">data</span> = yaml.load(fr)</span><br><span class=\"line\">    fr.close()</span><br><span class=\"line\">    <span class=\"keyword\">data</span>[<span class=\"string\">'password'</span>] = password</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'password'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">data</span>.keys():</span><br><span class=\"line\">        fr = <span class=\"keyword\">open</span>(<span class=\"string\">'yml_file_address'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        yaml.dump(<span class=\"keyword\">data</span>, fr, allow_unicode=True, default_flow_style=False)</span><br><span class=\"line\">        fr.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span>[<span class=\"string\">'password'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        fr = <span class=\"keyword\">open</span>(<span class=\"string\">'yml_file_address'</span>, <span class=\"string\">'a'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        yaml.dump(<span class=\"keyword\">data</span>, fr, allow_unicode=True, default_flow_style=False)</span><br><span class=\"line\">        fr.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span>[<span class=\"string\">'password'</span>]</span><br></pre></td></tr></table></figure>\n<p>这是两个修改配置信息的函数 changeUserName（） 和 changePassword（），故名思议，就是修改密码和昵称，两个函数的思路都是一样的，先读取配置文件，把相应的信息替换进配置文件里，然后通过写入方法，把这两个信息写入文件中。</p>\n<p>其中的难点可能就是解码和生成 yaml 文件的样式问题了。一开始各种报解码错误，在打开文件的时候加一个 encoding，在写入函数中加一个 allow_unicode=True 搞定了。</p>\n<p>解决替换信息在文件中的样式问题， 是在写入函数中加入 default_flow_style=False 搞定的。</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>文件读取方法示例：</li>\n</ol>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\">fr = <span class=\"built_in\">open</span>(<span class=\"string\">'yml_file_address'</span>, <span class=\"string\">'r'</span>,encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">data = yaml.load(fr)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br><span class=\"line\">fr.<span class=\"built_in\">close</span>()</span><br></pre></td></tr></table></figure>\n<p>关于 yml 文件的操作，有一个专门的库 yaml ，yaml 直接给出了一个把 yml 文件读取到字典里的方法 load，所以要读取 yml 文件非常简单，只需要引入 yaml 库，用 python 的 open 方法打开文件，用 load 方法读取文件，就可以轻而易举的读取 yml 文件到字典里了。当然其中还是有点坑的，那就是解码的问题，因为默认读取的文件不是字符编码格式，所以要把它转换为字符编码，再传给 load。</p>\n<ol start=\"2\">\n<li>文件写入方法示例：</li>\n</ol>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> yaml</span><br><span class=\"line\"><span class=\"title\">fr</span> = open('yml_file_address', 'w',encoding='utf<span class=\"number\">-8</span>')</span><br><span class=\"line\"><span class=\"title\">temp</span> = &#123;<span class=\"string\">\"fruits\"</span>:<span class=\"string\">\"banana\"</span>&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> = yaml.dump(<span class=\"title\">temp</span>,<span class=\"title\">fr</span>, <span class=\"title\">default_flow_style</span>=<span class=\"type\">False</span>)</span></span><br><span class=\"line\"><span class=\"title\">print</span>(<span class=\"class\"><span class=\"keyword\">data</span>)</span></span><br><span class=\"line\"><span class=\"title\">fr</span>.close()</span><br></pre></td></tr></table></figure>\n<p>yaml 库提供了一个 dump 方法，只需要打开文件，给出要写入的参数（字典形式等），调用 dump 方法就可以很快捷的写入信息到 yml 文件啦</p>\n<ol start=\"3\">\n<li>这两个方法在项目中的运用：</li>\n</ol>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改配置文件昵称</span><br><span class=\"line\">def changeUserName(user):</span><br><span class=\"line\">    fr = <span class=\"keyword\">open</span>(<span class=\"string\">'yml_file_address'</span>, <span class=\"string\">'r'</span>,encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">data</span> = yaml.load(fr)</span><br><span class=\"line\">    fr.close()</span><br><span class=\"line\">    <span class=\"keyword\">data</span>[<span class=\"string\">'robot_name_cn'</span>] = user</span><br><span class=\"line\">    fr = <span class=\"keyword\">open</span>(<span class=\"string\">'yml_file_address'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    yaml.dump(<span class=\"keyword\">data</span>, fr, allow_unicode=True, default_flow_style=False)</span><br><span class=\"line\">    fr.close()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">data</span>[<span class=\"string\">'robot_name_cn'</span>]</span><br><span class=\"line\">修改配置文件密码</span><br><span class=\"line\">def changePassword(password):</span><br><span class=\"line\">    fr = <span class=\"keyword\">open</span>(<span class=\"string\">'yml_file_address'</span>, <span class=\"string\">'r'</span>,encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">data</span> = yaml.load(fr)</span><br><span class=\"line\">    fr.close()</span><br><span class=\"line\">    <span class=\"keyword\">data</span>[<span class=\"string\">'password'</span>] = password</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">'password'</span> <span class=\"keyword\">in</span> <span class=\"keyword\">data</span>.keys():</span><br><span class=\"line\">        fr = <span class=\"keyword\">open</span>(<span class=\"string\">'yml_file_address'</span>, <span class=\"string\">'w'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        yaml.dump(<span class=\"keyword\">data</span>, fr, allow_unicode=True, default_flow_style=False)</span><br><span class=\"line\">        fr.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span>[<span class=\"string\">'password'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        fr = <span class=\"keyword\">open</span>(<span class=\"string\">'yml_file_address'</span>, <span class=\"string\">'a'</span>, encoding=<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">        yaml.dump(<span class=\"keyword\">data</span>, fr, allow_unicode=True, default_flow_style=False)</span><br><span class=\"line\">        fr.close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">data</span>[<span class=\"string\">'password'</span>]</span><br></pre></td></tr></table></figure>\n<p>这是两个修改配置信息的函数 changeUserName（） 和 changePassword（），故名思议，就是修改密码和昵称，两个函数的思路都是一样的，先读取配置文件，把相应的信息替换进配置文件里，然后通过写入方法，把这两个信息写入文件中。</p>\n<p>其中的难点可能就是解码和生成 yaml 文件的样式问题了。一开始各种报解码错误，在打开文件的时候加一个 encoding，在写入函数中加一个 allow_unicode=True 搞定了。</p>\n<p>解决替换信息在文件中的样式问题， 是在写入函数中加入 default_flow_style=False 搞定的。</p>\n"},{"title":"下拉列表的实现","comments":1,"date":"2019-09-01T09:28:44.000Z","_content":"用别人的组件总有各种不可控的问题，而且不好维护，还是造轮子比较舒畅。\n\n下拉列表是工作中经常用到的一个功能，点击按钮，显示下拉列表，点击列表中的项目显示对应的值到按钮中，这是下拉列表的常用交互。这里的一个比较有意思的点就是如何在点击别的地方时关闭列表。我采用的方法是监听组件最外层的 blur 事件，当该组件失去焦点时，关闭列表。由于按钮用的是 div 实现，默认 div 是没有 blur 事件的，这里添加一个 tabindex 属性， blur 就有效了。\n\ndemo：\n\n```html\n<!-- html -->\n<div class=\"dropDown-wrap\" tabindex=\"1\" @blur=\"hidden\">\n  <div class=\"dropDown\" @click=\"isDropDown=!isDropDown\">\n    {{selected.name}}\n    <svg class=\"arrow-right\" role=\"presentation\" v-show=\"isIcon\">\n      <polyline points=\"7,0 14,7 7,14\" fill=\"none\" stroke-width=\"2px\" stroke=\"#fff\" />\n    </svg>\n  </div>\n  <div class=\"arrow-up\" :class=\"{isDropDown:isDropDown}\"></div>\n  <div class=\"dropDown-list\" :class=\"{isDropDown:isDropDown}\">\n    <div\n      class=\"dropDown-item\"\n      :class=\"{isSelected:selected.id===item.id}\"\n      v-for=\"(item,index) in list\"\n      :key=\"index\"\n      @click=\"selectItem(item)\"\n    >{{item.name}}</div>\n  </div>\n</div>\n```\n\n```js\nselectItem (item) {\n  this.$emit('changeItem', item)\n  this.isDropDown = false\n},\nhidden () {\n  this.isDropDown = false\n}\n```\n\n#### 三、Demo 地址\n\n[Demo](https://canace22.github.io/Demos/#/) => 媒体 => 列表控件\n\n\n\n","source":"_posts/下拉列表的实现.md","raw":"---\ntitle: 下拉列表的实现\ncomments: true\ndate: 2019-09-01 17:28:44\ncategories: web\ntags: vue 组件\n---\n用别人的组件总有各种不可控的问题，而且不好维护，还是造轮子比较舒畅。\n\n下拉列表是工作中经常用到的一个功能，点击按钮，显示下拉列表，点击列表中的项目显示对应的值到按钮中，这是下拉列表的常用交互。这里的一个比较有意思的点就是如何在点击别的地方时关闭列表。我采用的方法是监听组件最外层的 blur 事件，当该组件失去焦点时，关闭列表。由于按钮用的是 div 实现，默认 div 是没有 blur 事件的，这里添加一个 tabindex 属性， blur 就有效了。\n\ndemo：\n\n```html\n<!-- html -->\n<div class=\"dropDown-wrap\" tabindex=\"1\" @blur=\"hidden\">\n  <div class=\"dropDown\" @click=\"isDropDown=!isDropDown\">\n    {{selected.name}}\n    <svg class=\"arrow-right\" role=\"presentation\" v-show=\"isIcon\">\n      <polyline points=\"7,0 14,7 7,14\" fill=\"none\" stroke-width=\"2px\" stroke=\"#fff\" />\n    </svg>\n  </div>\n  <div class=\"arrow-up\" :class=\"{isDropDown:isDropDown}\"></div>\n  <div class=\"dropDown-list\" :class=\"{isDropDown:isDropDown}\">\n    <div\n      class=\"dropDown-item\"\n      :class=\"{isSelected:selected.id===item.id}\"\n      v-for=\"(item,index) in list\"\n      :key=\"index\"\n      @click=\"selectItem(item)\"\n    >{{item.name}}</div>\n  </div>\n</div>\n```\n\n```js\nselectItem (item) {\n  this.$emit('changeItem', item)\n  this.isDropDown = false\n},\nhidden () {\n  this.isDropDown = false\n}\n```\n\n#### 三、Demo 地址\n\n[Demo](https://canace22.github.io/Demos/#/) => 媒体 => 列表控件\n\n\n\n","slug":"下拉列表的实现","published":1,"updated":"2020-01-08T01:00:24.546Z","layout":"post","photos":[],"link":"","_id":"ck5dbguaf00518ex0vd3l27ni","content":"<p>用别人的组件总有各种不可控的问题，而且不好维护，还是造轮子比较舒畅。</p>\n<p>下拉列表是工作中经常用到的一个功能，点击按钮，显示下拉列表，点击列表中的项目显示对应的值到按钮中，这是下拉列表的常用交互。这里的一个比较有意思的点就是如何在点击别的地方时关闭列表。我采用的方法是监听组件最外层的 blur 事件，当该组件失去焦点时，关闭列表。由于按钮用的是 div 实现，默认 div 是没有 blur 事件的，这里添加一个 tabindex 属性， blur 就有效了。</p>\n<p>demo：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropDown-wrap\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"1\"</span> @<span class=\"attr\">blur</span>=<span class=\"string\">\"hidden\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropDown\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"isDropDown=!isDropDown\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;selected.name&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"arrow-right\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"isIcon\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">polyline</span> <span class=\"attr\">points</span>=<span class=\"string\">\"7,0 14,7 7,14\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">\"2px\"</span> <span class=\"attr\">stroke</span>=<span class=\"string\">\"#fff\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"arrow-up\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;isDropDown:isDropDown&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropDown-list\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;isDropDown:isDropDown&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"dropDown-item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;isSelected:selected.id===item.id&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,index) in list\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">click</span>=<span class=\"string\">\"selectItem(item)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span>&#123;&#123;item.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selectItem (item) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'changeItem'</span>, item)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isDropDown = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">hidden () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isDropDown = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"三、Demo-地址\"><a href=\"#三、Demo-地址\" class=\"headerlink\" title=\"三、Demo 地址\"></a>三、Demo 地址</h4><p><a href=\"https://canace22.github.io/Demos/#/\" target=\"_blank\" rel=\"noopener\">Demo</a> =&gt; 媒体 =&gt; 列表控件</p>\n","site":{"data":{}},"excerpt":"","more":"<p>用别人的组件总有各种不可控的问题，而且不好维护，还是造轮子比较舒畅。</p>\n<p>下拉列表是工作中经常用到的一个功能，点击按钮，显示下拉列表，点击列表中的项目显示对应的值到按钮中，这是下拉列表的常用交互。这里的一个比较有意思的点就是如何在点击别的地方时关闭列表。我采用的方法是监听组件最外层的 blur 事件，当该组件失去焦点时，关闭列表。由于按钮用的是 div 实现，默认 div 是没有 blur 事件的，这里添加一个 tabindex 属性， blur 就有效了。</p>\n<p>demo：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropDown-wrap\"</span> <span class=\"attr\">tabindex</span>=<span class=\"string\">\"1\"</span> @<span class=\"attr\">blur</span>=<span class=\"string\">\"hidden\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropDown\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"isDropDown=!isDropDown\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;selected.name&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">class</span>=<span class=\"string\">\"arrow-right\"</span> <span class=\"attr\">role</span>=<span class=\"string\">\"presentation\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"isIcon\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">polyline</span> <span class=\"attr\">points</span>=<span class=\"string\">\"7,0 14,7 7,14\"</span> <span class=\"attr\">fill</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">stroke-width</span>=<span class=\"string\">\"2px\"</span> <span class=\"attr\">stroke</span>=<span class=\"string\">\"#fff\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"arrow-up\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;isDropDown:isDropDown&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dropDown-list\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;isDropDown:isDropDown&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">class</span>=<span class=\"string\">\"dropDown-item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:class</span>=<span class=\"string\">\"&#123;isSelected:selected.id===item.id&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item,index) in list\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      @<span class=\"attr\">click</span>=<span class=\"string\">\"selectItem(item)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span>&#123;&#123;item.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selectItem (item) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'changeItem'</span>, item)</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isDropDown = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">hidden () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.isDropDown = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"三、Demo-地址\"><a href=\"#三、Demo-地址\" class=\"headerlink\" title=\"三、Demo 地址\"></a>三、Demo 地址</h4><p><a href=\"https://canace22.github.io/Demos/#/\" target=\"_blank\" rel=\"noopener\">Demo</a> =&gt; 媒体 =&gt; 列表控件</p>\n"},{"title":"一键生成响应式表格","comments":1,"date":"2019-02-28T07:48:52.000Z","_content":"\n这是一个一键生成响应式表格的方案。\n\n```CSS\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  text-align: center;\n  line-height: 40px;\n  table-layout: fixed;\n  color: #333;\n  font-weight: normal;\n  font-size: 14px;\n  margin: 5% 0;\n  td{\n    padding: 10px;\n  }\n  thead {\n    background-color: #cce5ff;\n    font-weight: 500;\n  }\n}\n\ntable-bordered {\n  border: 1px solid #e0e0e0;\n}\n\n.table-bordered {\n  th {\n    background: #e4efff;\n    border: 1px solid #e0e0e0;\n    font-weight: normal;\n    height: auto;\n  }\n  td {\n    background: #e4efff;\n    border: 1px solid #e0e0e0;\n    font-weight: normal;\n    height: auto;\n  }\n  thead {\n    th {\n      border-bottom: 1px;\n      font-weight: 500;\n      height: auto;\n    }\n    td {\n      border-bottom: 1px;\n      font-weight: 500;\n      height: auto;\n    }\n  }\n}\n```\n\n```HTML\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" class=\"table table-bordered\">\n  <thead>\n    <tr>\n      <th style=\"width: 40%;\">题型</th>\n      <th>题量</th>\n      <th>分值</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr  >\n      <td>{{chapter.name}}</td>\n      <td>{{chapter.questionCount}} 题</td>\n      <td>{{chapter.presetScore}}分</td>\n    </tr>\n  </tbody>\n</table>\n\n```\n","source":"_posts/一键生成响应式表格.md","raw":"---\ntitle: 一键生成响应式表格\ncomments: true\ndate: 2019-02-28 15:48:52\ncategories: web\ntags: css\n---\n\n这是一个一键生成响应式表格的方案。\n\n```CSS\ntable {\n  width: 100%;\n  border-collapse: collapse;\n  text-align: center;\n  line-height: 40px;\n  table-layout: fixed;\n  color: #333;\n  font-weight: normal;\n  font-size: 14px;\n  margin: 5% 0;\n  td{\n    padding: 10px;\n  }\n  thead {\n    background-color: #cce5ff;\n    font-weight: 500;\n  }\n}\n\ntable-bordered {\n  border: 1px solid #e0e0e0;\n}\n\n.table-bordered {\n  th {\n    background: #e4efff;\n    border: 1px solid #e0e0e0;\n    font-weight: normal;\n    height: auto;\n  }\n  td {\n    background: #e4efff;\n    border: 1px solid #e0e0e0;\n    font-weight: normal;\n    height: auto;\n  }\n  thead {\n    th {\n      border-bottom: 1px;\n      font-weight: 500;\n      height: auto;\n    }\n    td {\n      border-bottom: 1px;\n      font-weight: 500;\n      height: auto;\n    }\n  }\n}\n```\n\n```HTML\n<table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" class=\"table table-bordered\">\n  <thead>\n    <tr>\n      <th style=\"width: 40%;\">题型</th>\n      <th>题量</th>\n      <th>分值</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr  >\n      <td>{{chapter.name}}</td>\n      <td>{{chapter.questionCount}} 题</td>\n      <td>{{chapter.presetScore}}分</td>\n    </tr>\n  </tbody>\n</table>\n\n```\n","slug":"一键生成响应式表格","published":1,"updated":"2019-05-19T05:28:02.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguag00558ex0zc8fqqb6","content":"<p>这是一个一键生成响应式表格的方案。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">table-layout</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">5%</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  td&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">padding</span>: 10<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">thead</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#cce5ff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table-bordered</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#e0e0e0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.table-bordered</span> &#123;</span><br><span class=\"line\">  th &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#e4efff</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#e0e0e0</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">font-weight</span>: <span class=\"selector-tag\">normal</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">height</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#e4efff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#e0e0e0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">thead</span> &#123;</span><br><span class=\"line\">    th &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">font-weight</span>: 500;</span><br><span class=\"line\">      <span class=\"selector-tag\">height</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table table-bordered\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 40%;\"</span>&gt;</span>题型<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>题量<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>分值<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>  &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;chapter.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;chapter.questionCount&#125;&#125; 题<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;chapter.presetScore&#125;&#125;分<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一个一键生成响应式表格的方案。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">table-layout</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">5%</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  td&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">padding</span>: 10<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">thead</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#cce5ff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table-bordered</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#e0e0e0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.table-bordered</span> &#123;</span><br><span class=\"line\">  th &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#e4efff</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-id\">#e0e0e0</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">font-weight</span>: <span class=\"selector-tag\">normal</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">height</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#e4efff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#e0e0e0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">thead</span> &#123;</span><br><span class=\"line\">    th &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">border-bottom</span>: 1<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">font-weight</span>: 500;</span><br><span class=\"line\">      <span class=\"selector-tag\">height</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">td</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table table-bordered\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 40%;\"</span>&gt;</span>题型<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>题量<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>分值<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>  &gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;chapter.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;chapter.questionCount&#125;&#125; 题<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;chapter.presetScore&#125;&#125;分<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"两数求和问题","comments":1,"date":"2018-07-30T13:41:30.000Z","_content":"\n### 题目：\n\n```md\n给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。\n你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。\n```\n\n实现方法，暴力破解法，大致思路是遍历数组，跟目标值减去数组中的元素的值做比较，找出对应的值，返回相应的索引，放到新的数组中，再把对应的被减数的索引添加到新数组中，测试用时 40ms，python 代码如下：\n\n```py\nclass Solution:\n    def twoSum(self, nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    # 创建一个新数组\n    A = []\n    # 遍历给定数组\n    for index in range(len(nums)):\n        # 设其中一个要找的数为 a，用目标与给定数组中的元素分别相减\n        a = target - nums[len(nums) - index - 1]\n        i = -1\n        try:\n            # 在给定数组中查找是否存在刚刚相减所得的数 a,若存在则返回相应的索引，并赋值给 i，没有则返回\n            i = nums.index(a)\n        except Exception as e:\n            pass\n        # 若找到了差 a，且 a 的索引不为 -1 以及上面的被减数的索引比 a 的索引大\n        # 则将二者添加到新数组中，新数组就是我们要求的值\n        if i != -1 and len(nums) - index - 1 > i:\n            A.append(i)\n            A.append(len(nums) - index - 1)\n\n    return A\n```\n","source":"_posts/两数求和问题.md","raw":"---\ntitle: 两数求和问题\ncomments: true\ndate: 2018-07-30 21:41:30\ncategories: 算法\ntags: leetcode\n---\n\n### 题目：\n\n```md\n给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。\n你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。\n```\n\n实现方法，暴力破解法，大致思路是遍历数组，跟目标值减去数组中的元素的值做比较，找出对应的值，返回相应的索引，放到新的数组中，再把对应的被减数的索引添加到新数组中，测试用时 40ms，python 代码如下：\n\n```py\nclass Solution:\n    def twoSum(self, nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    # 创建一个新数组\n    A = []\n    # 遍历给定数组\n    for index in range(len(nums)):\n        # 设其中一个要找的数为 a，用目标与给定数组中的元素分别相减\n        a = target - nums[len(nums) - index - 1]\n        i = -1\n        try:\n            # 在给定数组中查找是否存在刚刚相减所得的数 a,若存在则返回相应的索引，并赋值给 i，没有则返回\n            i = nums.index(a)\n        except Exception as e:\n            pass\n        # 若找到了差 a，且 a 的索引不为 -1 以及上面的被减数的索引比 a 的索引大\n        # 则将二者添加到新数组中，新数组就是我们要求的值\n        if i != -1 and len(nums) - index - 1 > i:\n            A.append(i)\n            A.append(len(nums) - index - 1)\n\n    return A\n```\n","slug":"两数求和问题","published":1,"updated":"2019-05-19T05:28:14.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguah00578ex0inzcyojx","content":"<h3 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h3><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。</span><br><span class=\"line\">你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</span><br></pre></td></tr></table></figure>\n<p>实现方法，暴力破解法，大致思路是遍历数组，跟目标值减去数组中的元素的值做比较，找出对应的值，返回相应的索引，放到新的数组中，再把对应的被减数的索引添加到新数组中，测试用时 40ms，python 代码如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">twoSum</span><span class=\"params\">(self, nums, target)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    :type target: int</span></span><br><span class=\"line\"><span class=\"string\">    :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建一个新数组</span></span><br><span class=\"line\">    A = []</span><br><span class=\"line\">    <span class=\"comment\"># 遍历给定数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">        <span class=\"comment\"># 设其中一个要找的数为 a，用目标与给定数组中的元素分别相减</span></span><br><span class=\"line\">        a = target - nums[len(nums) - index - <span class=\"number\">1</span>]</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 在给定数组中查找是否存在刚刚相减所得的数 a,若存在则返回相应的索引，并赋值给 i，没有则返回</span></span><br><span class=\"line\">            i = nums.index(a)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"comment\"># 若找到了差 a，且 a 的索引不为 -1 以及上面的被减数的索引比 a 的索引大</span></span><br><span class=\"line\">        <span class=\"comment\"># 则将二者添加到新数组中，新数组就是我们要求的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i != <span class=\"number\">-1</span> <span class=\"keyword\">and</span> len(nums) - index - <span class=\"number\">1</span> &gt; i:</span><br><span class=\"line\">            A.append(i)</span><br><span class=\"line\">            A.append(len(nums) - index - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> A</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"题目：\"><a href=\"#题目：\" class=\"headerlink\" title=\"题目：\"></a>题目：</h3><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。</span><br><span class=\"line\">你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</span><br></pre></td></tr></table></figure>\n<p>实现方法，暴力破解法，大致思路是遍历数组，跟目标值减去数组中的元素的值做比较，找出对应的值，返回相应的索引，放到新的数组中，再把对应的被减数的索引添加到新数组中，测试用时 40ms，python 代码如下：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">twoSum</span><span class=\"params\">(self, nums, target)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    :type target: int</span></span><br><span class=\"line\"><span class=\"string\">    :rtype: List[int]</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建一个新数组</span></span><br><span class=\"line\">    A = []</span><br><span class=\"line\">    <span class=\"comment\"># 遍历给定数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">        <span class=\"comment\"># 设其中一个要找的数为 a，用目标与给定数组中的元素分别相减</span></span><br><span class=\"line\">        a = target - nums[len(nums) - index - <span class=\"number\">1</span>]</span><br><span class=\"line\">        i = <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 在给定数组中查找是否存在刚刚相减所得的数 a,若存在则返回相应的索引，并赋值给 i，没有则返回</span></span><br><span class=\"line\">            i = nums.index(a)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">        <span class=\"comment\"># 若找到了差 a，且 a 的索引不为 -1 以及上面的被减数的索引比 a 的索引大</span></span><br><span class=\"line\">        <span class=\"comment\"># 则将二者添加到新数组中，新数组就是我们要求的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i != <span class=\"number\">-1</span> <span class=\"keyword\">and</span> len(nums) - index - <span class=\"number\">1</span> &gt; i:</span><br><span class=\"line\">            A.append(i)</span><br><span class=\"line\">            A.append(len(nums) - index - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> A</span><br></pre></td></tr></table></figure>\n"},{"title":"关于写周报的笔记","date":"2018-05-20T09:01:14.000Z","_content":"\n如果你上班了，你们公司会要求你写周报吗？如果你还是学生，你的父母或老师会要求你写周报吗？没人要求，还会自发性的写周报吗？写周报给你带来了什么样的改变？\n\n我是写周报的，虽然公司也要求写，但更多出于自发性的写，我把他当作 GTD 系统中的一部分，对我而言是 CONTEXT，起承上启下的作用。\n\n1.  区别\n\n    (1) 被动写周报和主动记录反馈本周状态是有区别的，被动通常受命于人，属于履行任务，追求的是效率，希望尽可能快的完成；而主动写周报通常是自发性的，属于自我反省，追求的是问题的发现-解决-反馈，需要静下心来思考。\n\n    (2) 工作周报和个人总结周报也是有区别的：\n\n    (3) 内容上，工作周报只需要记录和工作相关的事情，而个人周报不仅需要总结工作，还需要总结生活、学习；\n\n    (4) 深度上，由于工作周报通常是需要提交给部门老大看，因此在剖析问题、总结得失，自我反省上非常不深刻，甚至会出现避重就轻的问题，一份周报常常沦为简单对工作任务的概括和陈述；而个人周报则不容易出现这类问题，就好比面壁自省，谁还会在乎什么话该说还是不该说，都是自个儿的事；\n\n2.  方法\n\n    (1) Step-1-回顾\n\n        A. 检查计划中关键项目/任务的完成进度是否符合预期；\n\n        B. 反馈各项目/任务的执行结果，如：完成情况/未达预期的原因/失败的原因；\n\n        C. 统计日程表中各任务的耗时情况是否正常，有没有效率特低或特高的情况，原因写到备注中；\n\n        D. 回溯上一周面临的问题是否得到解决，解决方案是否有效，并对问题解决的过程进行概括；\n\n    (2) Step-2-总结\n\n        A. 总结本周面临的新问题，描述问题并概括导致问题出现的原因，准备以何种解决方案应对？\n\n        B. 对工作、学习、生活（主要是人际关系）三方面进行评估，一方面对重点任务进行陈述性总结，另一方面评估重点任务的完成质量\n\n3.  Step-3-计划\n\n    (1) 列出能预见到的项目/任务，如：阅读书籍<在你身边为你设计>；\n\n    (2) 细化任务，一方面要计划任务量，另一方面要计划时间分配，如：阅读到用研部分（P125 页）完，睡前阅读 30 分钟，周末统一整理笔记\n\n    OK，通过这三个步骤，基本上就可以写出一份到位的周报总结了，另外月报的方法也大同小异，可参考着写。\n\n另外，以前还看到过别人周报中设置的一些关注点，可供大家参考：\n\n1. 黄金时间分布段：目的是把重点任务分配到精力最集中，最不容易受干扰的时间段去做；\n\n2. 总结任务的分类，各分类下的任务量，无需脑力的 Brain Dead 任务和需要静下心做的 Deep Time 任务各占了多少时间\n\n3. 如果你有建立一个靠谱的理想，你每天花费多少时间在上面？\n\n4. 评估你的精力状况，避免因为安排太多任务而透支\n\n一句话就是总结：你这周做了什么？做得怎么样？接下来你准备做什么？怎么去做？\n","source":"_posts/关于写周报的笔记.md","raw":"---\ntitle: 关于写周报的笔记\ndate: 2018-05-20 17:01:14\ncategories: 随笔\ntags: 个人管理\n---\n\n如果你上班了，你们公司会要求你写周报吗？如果你还是学生，你的父母或老师会要求你写周报吗？没人要求，还会自发性的写周报吗？写周报给你带来了什么样的改变？\n\n我是写周报的，虽然公司也要求写，但更多出于自发性的写，我把他当作 GTD 系统中的一部分，对我而言是 CONTEXT，起承上启下的作用。\n\n1.  区别\n\n    (1) 被动写周报和主动记录反馈本周状态是有区别的，被动通常受命于人，属于履行任务，追求的是效率，希望尽可能快的完成；而主动写周报通常是自发性的，属于自我反省，追求的是问题的发现-解决-反馈，需要静下心来思考。\n\n    (2) 工作周报和个人总结周报也是有区别的：\n\n    (3) 内容上，工作周报只需要记录和工作相关的事情，而个人周报不仅需要总结工作，还需要总结生活、学习；\n\n    (4) 深度上，由于工作周报通常是需要提交给部门老大看，因此在剖析问题、总结得失，自我反省上非常不深刻，甚至会出现避重就轻的问题，一份周报常常沦为简单对工作任务的概括和陈述；而个人周报则不容易出现这类问题，就好比面壁自省，谁还会在乎什么话该说还是不该说，都是自个儿的事；\n\n2.  方法\n\n    (1) Step-1-回顾\n\n        A. 检查计划中关键项目/任务的完成进度是否符合预期；\n\n        B. 反馈各项目/任务的执行结果，如：完成情况/未达预期的原因/失败的原因；\n\n        C. 统计日程表中各任务的耗时情况是否正常，有没有效率特低或特高的情况，原因写到备注中；\n\n        D. 回溯上一周面临的问题是否得到解决，解决方案是否有效，并对问题解决的过程进行概括；\n\n    (2) Step-2-总结\n\n        A. 总结本周面临的新问题，描述问题并概括导致问题出现的原因，准备以何种解决方案应对？\n\n        B. 对工作、学习、生活（主要是人际关系）三方面进行评估，一方面对重点任务进行陈述性总结，另一方面评估重点任务的完成质量\n\n3.  Step-3-计划\n\n    (1) 列出能预见到的项目/任务，如：阅读书籍<在你身边为你设计>；\n\n    (2) 细化任务，一方面要计划任务量，另一方面要计划时间分配，如：阅读到用研部分（P125 页）完，睡前阅读 30 分钟，周末统一整理笔记\n\n    OK，通过这三个步骤，基本上就可以写出一份到位的周报总结了，另外月报的方法也大同小异，可参考着写。\n\n另外，以前还看到过别人周报中设置的一些关注点，可供大家参考：\n\n1. 黄金时间分布段：目的是把重点任务分配到精力最集中，最不容易受干扰的时间段去做；\n\n2. 总结任务的分类，各分类下的任务量，无需脑力的 Brain Dead 任务和需要静下心做的 Deep Time 任务各占了多少时间\n\n3. 如果你有建立一个靠谱的理想，你每天花费多少时间在上面？\n\n4. 评估你的精力状况，避免因为安排太多任务而透支\n\n一句话就是总结：你这周做了什么？做得怎么样？接下来你准备做什么？怎么去做？\n","slug":"关于写周报的笔记","published":1,"updated":"2019-05-19T06:13:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dbguai005b8ex0qcftidvy","content":"<p>如果你上班了，你们公司会要求你写周报吗？如果你还是学生，你的父母或老师会要求你写周报吗？没人要求，还会自发性的写周报吗？写周报给你带来了什么样的改变？</p>\n<p>我是写周报的，虽然公司也要求写，但更多出于自发性的写，我把他当作 GTD 系统中的一部分，对我而言是 CONTEXT，起承上启下的作用。</p>\n<ol>\n<li><p>区别</p>\n<p>(1) 被动写周报和主动记录反馈本周状态是有区别的，被动通常受命于人，属于履行任务，追求的是效率，希望尽可能快的完成；而主动写周报通常是自发性的，属于自我反省，追求的是问题的发现-解决-反馈，需要静下心来思考。</p>\n<p>(2) 工作周报和个人总结周报也是有区别的：</p>\n<p>(3) 内容上，工作周报只需要记录和工作相关的事情，而个人周报不仅需要总结工作，还需要总结生活、学习；</p>\n<p>(4) 深度上，由于工作周报通常是需要提交给部门老大看，因此在剖析问题、总结得失，自我反省上非常不深刻，甚至会出现避重就轻的问题，一份周报常常沦为简单对工作任务的概括和陈述；而个人周报则不容易出现这类问题，就好比面壁自省，谁还会在乎什么话该说还是不该说，都是自个儿的事；</p>\n</li>\n<li><p>方法</p>\n<p>(1) Step-1-回顾</p>\n<pre><code>A. 检查计划中关键项目/任务的完成进度是否符合预期；\n\nB. 反馈各项目/任务的执行结果，如：完成情况/未达预期的原因/失败的原因；\n\nC. 统计日程表中各任务的耗时情况是否正常，有没有效率特低或特高的情况，原因写到备注中；\n\nD. 回溯上一周面临的问题是否得到解决，解决方案是否有效，并对问题解决的过程进行概括；\n</code></pre><p>(2) Step-2-总结</p>\n<pre><code>A. 总结本周面临的新问题，描述问题并概括导致问题出现的原因，准备以何种解决方案应对？\n\nB. 对工作、学习、生活（主要是人际关系）三方面进行评估，一方面对重点任务进行陈述性总结，另一方面评估重点任务的完成质量\n</code></pre></li>\n<li><p>Step-3-计划</p>\n<p>(1) 列出能预见到的项目/任务，如：阅读书籍&lt;在你身边为你设计&gt;；</p>\n<p>(2) 细化任务，一方面要计划任务量，另一方面要计划时间分配，如：阅读到用研部分（P125 页）完，睡前阅读 30 分钟，周末统一整理笔记</p>\n<p>OK，通过这三个步骤，基本上就可以写出一份到位的周报总结了，另外月报的方法也大同小异，可参考着写。</p>\n</li>\n</ol>\n<p>另外，以前还看到过别人周报中设置的一些关注点，可供大家参考：</p>\n<ol>\n<li><p>黄金时间分布段：目的是把重点任务分配到精力最集中，最不容易受干扰的时间段去做；</p>\n</li>\n<li><p>总结任务的分类，各分类下的任务量，无需脑力的 Brain Dead 任务和需要静下心做的 Deep Time 任务各占了多少时间</p>\n</li>\n<li><p>如果你有建立一个靠谱的理想，你每天花费多少时间在上面？</p>\n</li>\n<li><p>评估你的精力状况，避免因为安排太多任务而透支</p>\n</li>\n</ol>\n<p>一句话就是总结：你这周做了什么？做得怎么样？接下来你准备做什么？怎么去做？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果你上班了，你们公司会要求你写周报吗？如果你还是学生，你的父母或老师会要求你写周报吗？没人要求，还会自发性的写周报吗？写周报给你带来了什么样的改变？</p>\n<p>我是写周报的，虽然公司也要求写，但更多出于自发性的写，我把他当作 GTD 系统中的一部分，对我而言是 CONTEXT，起承上启下的作用。</p>\n<ol>\n<li><p>区别</p>\n<p>(1) 被动写周报和主动记录反馈本周状态是有区别的，被动通常受命于人，属于履行任务，追求的是效率，希望尽可能快的完成；而主动写周报通常是自发性的，属于自我反省，追求的是问题的发现-解决-反馈，需要静下心来思考。</p>\n<p>(2) 工作周报和个人总结周报也是有区别的：</p>\n<p>(3) 内容上，工作周报只需要记录和工作相关的事情，而个人周报不仅需要总结工作，还需要总结生活、学习；</p>\n<p>(4) 深度上，由于工作周报通常是需要提交给部门老大看，因此在剖析问题、总结得失，自我反省上非常不深刻，甚至会出现避重就轻的问题，一份周报常常沦为简单对工作任务的概括和陈述；而个人周报则不容易出现这类问题，就好比面壁自省，谁还会在乎什么话该说还是不该说，都是自个儿的事；</p>\n</li>\n<li><p>方法</p>\n<p>(1) Step-1-回顾</p>\n<pre><code>A. 检查计划中关键项目/任务的完成进度是否符合预期；\n\nB. 反馈各项目/任务的执行结果，如：完成情况/未达预期的原因/失败的原因；\n\nC. 统计日程表中各任务的耗时情况是否正常，有没有效率特低或特高的情况，原因写到备注中；\n\nD. 回溯上一周面临的问题是否得到解决，解决方案是否有效，并对问题解决的过程进行概括；\n</code></pre><p>(2) Step-2-总结</p>\n<pre><code>A. 总结本周面临的新问题，描述问题并概括导致问题出现的原因，准备以何种解决方案应对？\n\nB. 对工作、学习、生活（主要是人际关系）三方面进行评估，一方面对重点任务进行陈述性总结，另一方面评估重点任务的完成质量\n</code></pre></li>\n<li><p>Step-3-计划</p>\n<p>(1) 列出能预见到的项目/任务，如：阅读书籍&lt;在你身边为你设计&gt;；</p>\n<p>(2) 细化任务，一方面要计划任务量，另一方面要计划时间分配，如：阅读到用研部分（P125 页）完，睡前阅读 30 分钟，周末统一整理笔记</p>\n<p>OK，通过这三个步骤，基本上就可以写出一份到位的周报总结了，另外月报的方法也大同小异，可参考着写。</p>\n</li>\n</ol>\n<p>另外，以前还看到过别人周报中设置的一些关注点，可供大家参考：</p>\n<ol>\n<li><p>黄金时间分布段：目的是把重点任务分配到精力最集中，最不容易受干扰的时间段去做；</p>\n</li>\n<li><p>总结任务的分类，各分类下的任务量，无需脑力的 Brain Dead 任务和需要静下心做的 Deep Time 任务各占了多少时间</p>\n</li>\n<li><p>如果你有建立一个靠谱的理想，你每天花费多少时间在上面？</p>\n</li>\n<li><p>评估你的精力状况，避免因为安排太多任务而透支</p>\n</li>\n</ol>\n<p>一句话就是总结：你这周做了什么？做得怎么样？接下来你准备做什么？怎么去做？</p>\n"},{"title":"代码优化","comments":1,"date":"2019-06-30T06:15:35.000Z","_content":"\n## 用 vue 进行前端开发，怎么做到函数式编程呢？\n\n每次做完项目，都会发现自己在代码的解耦，接口的封装方面做的还不够，后期必定会多次进行优化，在优化的过程中，就想到，如何把零散的代码，编程整体性更强的代码，使人一看到就知道手脚在哪里。在这里我的总结是，按功能点进行函数的封装，一个大点是一个函数，这个大点里面又有很多小点，可以把函数赋值给变量，进行使用，这样就不用每次都跳来跳去了，维护起来也更方便快捷。\n\nvue-cli3 中静态文件怎么处理？\n用 vue-cli2 的人习惯把静态文件放 static 或者 asset 里，放 asset 里，会被打包，不推荐，但是 vue-cli3 没有 static 文件，怎么办呢？我的答案是，放在 public 目录下，因为这个文件是不会被打包压缩的，一定程度上可以提高编译效率\n\n## 代码抽离\n\n把通用功能抽离到 utils 目录，把通用 api 进行二次封装，放到 api 文件里，以 export 的方式导出，需要的时候再引入，会使代码看起来简洁很多，也简化了对应页面的代码量，维护起来更是得心应手了，至于性能方面，对首屏加载速度还是有一定提高效果的。\n\n组件抽离，核心思想，只抽离 ui，业务逻辑还是在引用处\n\n多个 vue 组件引用同一个组件，且相似度高的，用 render 进行合并，并更新数据\n\n## html\n\n尽量的减少页面的节点，可以优化网页的加载速度，所以应该考虑的思路是以最少的节点，写最多的页面。同时避免过多的操作 DOM，尽量以数据驱动页面。\n","source":"_posts/代码优化.md","raw":"---\ntitle: 代码优化\ncomments: true\ndate: 2019-06-30 14:15:35\ncategories: web\ntags: js\n---\n\n## 用 vue 进行前端开发，怎么做到函数式编程呢？\n\n每次做完项目，都会发现自己在代码的解耦，接口的封装方面做的还不够，后期必定会多次进行优化，在优化的过程中，就想到，如何把零散的代码，编程整体性更强的代码，使人一看到就知道手脚在哪里。在这里我的总结是，按功能点进行函数的封装，一个大点是一个函数，这个大点里面又有很多小点，可以把函数赋值给变量，进行使用，这样就不用每次都跳来跳去了，维护起来也更方便快捷。\n\nvue-cli3 中静态文件怎么处理？\n用 vue-cli2 的人习惯把静态文件放 static 或者 asset 里，放 asset 里，会被打包，不推荐，但是 vue-cli3 没有 static 文件，怎么办呢？我的答案是，放在 public 目录下，因为这个文件是不会被打包压缩的，一定程度上可以提高编译效率\n\n## 代码抽离\n\n把通用功能抽离到 utils 目录，把通用 api 进行二次封装，放到 api 文件里，以 export 的方式导出，需要的时候再引入，会使代码看起来简洁很多，也简化了对应页面的代码量，维护起来更是得心应手了，至于性能方面，对首屏加载速度还是有一定提高效果的。\n\n组件抽离，核心思想，只抽离 ui，业务逻辑还是在引用处\n\n多个 vue 组件引用同一个组件，且相似度高的，用 render 进行合并，并更新数据\n\n## html\n\n尽量的减少页面的节点，可以优化网页的加载速度，所以应该考虑的思路是以最少的节点，写最多的页面。同时避免过多的操作 DOM，尽量以数据驱动页面。\n","slug":"代码优化","published":1,"updated":"2020-01-08T01:00:24.546Z","layout":"post","photos":[],"link":"","_id":"ck5dbguaj005e8ex0l2bfselg","content":"<h2 id=\"用-vue-进行前端开发，怎么做到函数式编程呢？\"><a href=\"#用-vue-进行前端开发，怎么做到函数式编程呢？\" class=\"headerlink\" title=\"用 vue 进行前端开发，怎么做到函数式编程呢？\"></a>用 vue 进行前端开发，怎么做到函数式编程呢？</h2><p>每次做完项目，都会发现自己在代码的解耦，接口的封装方面做的还不够，后期必定会多次进行优化，在优化的过程中，就想到，如何把零散的代码，编程整体性更强的代码，使人一看到就知道手脚在哪里。在这里我的总结是，按功能点进行函数的封装，一个大点是一个函数，这个大点里面又有很多小点，可以把函数赋值给变量，进行使用，这样就不用每次都跳来跳去了，维护起来也更方便快捷。</p>\n<p>vue-cli3 中静态文件怎么处理？<br>用 vue-cli2 的人习惯把静态文件放 static 或者 asset 里，放 asset 里，会被打包，不推荐，但是 vue-cli3 没有 static 文件，怎么办呢？我的答案是，放在 public 目录下，因为这个文件是不会被打包压缩的，一定程度上可以提高编译效率</p>\n<h2 id=\"代码抽离\"><a href=\"#代码抽离\" class=\"headerlink\" title=\"代码抽离\"></a>代码抽离</h2><p>把通用功能抽离到 utils 目录，把通用 api 进行二次封装，放到 api 文件里，以 export 的方式导出，需要的时候再引入，会使代码看起来简洁很多，也简化了对应页面的代码量，维护起来更是得心应手了，至于性能方面，对首屏加载速度还是有一定提高效果的。</p>\n<p>组件抽离，核心思想，只抽离 ui，业务逻辑还是在引用处</p>\n<p>多个 vue 组件引用同一个组件，且相似度高的，用 render 进行合并，并更新数据</p>\n<h2 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h2><p>尽量的减少页面的节点，可以优化网页的加载速度，所以应该考虑的思路是以最少的节点，写最多的页面。同时避免过多的操作 DOM，尽量以数据驱动页面。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"用-vue-进行前端开发，怎么做到函数式编程呢？\"><a href=\"#用-vue-进行前端开发，怎么做到函数式编程呢？\" class=\"headerlink\" title=\"用 vue 进行前端开发，怎么做到函数式编程呢？\"></a>用 vue 进行前端开发，怎么做到函数式编程呢？</h2><p>每次做完项目，都会发现自己在代码的解耦，接口的封装方面做的还不够，后期必定会多次进行优化，在优化的过程中，就想到，如何把零散的代码，编程整体性更强的代码，使人一看到就知道手脚在哪里。在这里我的总结是，按功能点进行函数的封装，一个大点是一个函数，这个大点里面又有很多小点，可以把函数赋值给变量，进行使用，这样就不用每次都跳来跳去了，维护起来也更方便快捷。</p>\n<p>vue-cli3 中静态文件怎么处理？<br>用 vue-cli2 的人习惯把静态文件放 static 或者 asset 里，放 asset 里，会被打包，不推荐，但是 vue-cli3 没有 static 文件，怎么办呢？我的答案是，放在 public 目录下，因为这个文件是不会被打包压缩的，一定程度上可以提高编译效率</p>\n<h2 id=\"代码抽离\"><a href=\"#代码抽离\" class=\"headerlink\" title=\"代码抽离\"></a>代码抽离</h2><p>把通用功能抽离到 utils 目录，把通用 api 进行二次封装，放到 api 文件里，以 export 的方式导出，需要的时候再引入，会使代码看起来简洁很多，也简化了对应页面的代码量，维护起来更是得心应手了，至于性能方面，对首屏加载速度还是有一定提高效果的。</p>\n<p>组件抽离，核心思想，只抽离 ui，业务逻辑还是在引用处</p>\n<p>多个 vue 组件引用同一个组件，且相似度高的，用 render 进行合并，并更新数据</p>\n<h2 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h2><p>尽量的减少页面的节点，可以优化网页的加载速度，所以应该考虑的思路是以最少的节点，写最多的页面。同时避免过多的操作 DOM，尽量以数据驱动页面。</p>\n"},{"title":"前端性能优化","comments":1,"date":"2018-10-22T11:54:10.000Z","_content":"\n1. 内容优化\n\n- 减少 HTTP 请求数:这条策略是最重要最有效的，因为一个完整的请求要经过 DNS 寻址，与服务器建立连接，发送数据，等待服务器响应，接收数据这样一个消耗时间成本和资源成本的复杂的过程。常见方法：合并多个 CSS 文件和 js 文件，利用 CSS Sprites 整合图像，Inline Images(使用 data：URL scheme 在实际的页面嵌入图像数据 )，合理设置 HTTP 缓存等。\n- 减少 DNS 查找\n- 避免重定向\n- 使用 Ajax 缓存\n- 延迟加载组件,预加载组件\n- 减少 DOM 元素数量:页面中存在大量 DOM 元素,会导致 javascript 遍历 DOM 的效率变慢。\n- 最小化 iframe 的数量：iframes 提供了一个简单的方式把一个网站的内容嵌入到另一个网站中。但其创建速度比其他包括 JavaScript 和 CSS 的 DOM 元素的创建慢了 1-2 个数量级。\n- 避免 404：HTTP 请求时间消耗是很大的，因此使用 HTTP 请求来获得一个没有用处的响应（例如 404 没有找到页面）是完全没有必要的，它只会降低用户体验而不会有一点好处。\n\n2. 服务器优化\n\n- 使用内容分发网络（CDN）：把网站内容分散到多个、处于不同地域位置的服务器上可以加快下载速度。\n- GZIP 压缩\n- 设置 ETag：ETags（Entity tags，实体标签）是 web 服务器和浏览器用于判断浏览器缓存中的内容和服务器中的原始内容是否匹配的一种机制。\n- 提前刷新缓冲区\n- 对 Ajax 请求使用 GET 方法\n- 避免空的图像 src\n\n3. Cookie 优化\n\n- 减小 Cookie 大小\n- 针对 Web 组件使用域名无关的 Cookie\n\n4. javascript 优化\n\n- 将 JavaScript 脚本放在页面的底部。\n- 将 JavaScript 和 CSS 作为外部文件来引用：在实际应用中使用外部文件可以提高页面速度，因为 JavaScript 和 CSS 文件都能在浏览器中产生缓存。\n- 缩小 JavaScript 和 CSS\n- 删除重复的脚本\n- 最小化 DOM 的访问：使用 JavaScript 访问 DOM 元素比较慢。\n- 开发智能的事件处理程序\n- javascript 代码注意：谨慎使用 with,避免使用 eval Function 函数,减少作用域链查找。\n\n5. 图像优化\n\n- 优化图片大小\n- 通过 CSS Sprites 优化图片\n- 不要在 HTML 中使用缩放图片\n- favicon.ico 要小而且可缓存\n","source":"_posts/前端性能优化.md","raw":"---\ntitle: 前端性能优化\ncomments: true\ndate: 2018-10-22 19:54:10\ncategories: web\ntags: 性能优化\n---\n\n1. 内容优化\n\n- 减少 HTTP 请求数:这条策略是最重要最有效的，因为一个完整的请求要经过 DNS 寻址，与服务器建立连接，发送数据，等待服务器响应，接收数据这样一个消耗时间成本和资源成本的复杂的过程。常见方法：合并多个 CSS 文件和 js 文件，利用 CSS Sprites 整合图像，Inline Images(使用 data：URL scheme 在实际的页面嵌入图像数据 )，合理设置 HTTP 缓存等。\n- 减少 DNS 查找\n- 避免重定向\n- 使用 Ajax 缓存\n- 延迟加载组件,预加载组件\n- 减少 DOM 元素数量:页面中存在大量 DOM 元素,会导致 javascript 遍历 DOM 的效率变慢。\n- 最小化 iframe 的数量：iframes 提供了一个简单的方式把一个网站的内容嵌入到另一个网站中。但其创建速度比其他包括 JavaScript 和 CSS 的 DOM 元素的创建慢了 1-2 个数量级。\n- 避免 404：HTTP 请求时间消耗是很大的，因此使用 HTTP 请求来获得一个没有用处的响应（例如 404 没有找到页面）是完全没有必要的，它只会降低用户体验而不会有一点好处。\n\n2. 服务器优化\n\n- 使用内容分发网络（CDN）：把网站内容分散到多个、处于不同地域位置的服务器上可以加快下载速度。\n- GZIP 压缩\n- 设置 ETag：ETags（Entity tags，实体标签）是 web 服务器和浏览器用于判断浏览器缓存中的内容和服务器中的原始内容是否匹配的一种机制。\n- 提前刷新缓冲区\n- 对 Ajax 请求使用 GET 方法\n- 避免空的图像 src\n\n3. Cookie 优化\n\n- 减小 Cookie 大小\n- 针对 Web 组件使用域名无关的 Cookie\n\n4. javascript 优化\n\n- 将 JavaScript 脚本放在页面的底部。\n- 将 JavaScript 和 CSS 作为外部文件来引用：在实际应用中使用外部文件可以提高页面速度，因为 JavaScript 和 CSS 文件都能在浏览器中产生缓存。\n- 缩小 JavaScript 和 CSS\n- 删除重复的脚本\n- 最小化 DOM 的访问：使用 JavaScript 访问 DOM 元素比较慢。\n- 开发智能的事件处理程序\n- javascript 代码注意：谨慎使用 with,避免使用 eval Function 函数,减少作用域链查找。\n\n5. 图像优化\n\n- 优化图片大小\n- 通过 CSS Sprites 优化图片\n- 不要在 HTML 中使用缩放图片\n- favicon.ico 要小而且可缓存\n","slug":"前端性能优化","published":1,"updated":"2019-05-19T05:29:24.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguak005i8ex0bat4e2ok","content":"<ol>\n<li>内容优化</li>\n</ol>\n<ul>\n<li>减少 HTTP 请求数:这条策略是最重要最有效的，因为一个完整的请求要经过 DNS 寻址，与服务器建立连接，发送数据，等待服务器响应，接收数据这样一个消耗时间成本和资源成本的复杂的过程。常见方法：合并多个 CSS 文件和 js 文件，利用 CSS Sprites 整合图像，Inline Images(使用 data：URL scheme 在实际的页面嵌入图像数据 )，合理设置 HTTP 缓存等。</li>\n<li>减少 DNS 查找</li>\n<li>避免重定向</li>\n<li>使用 Ajax 缓存</li>\n<li>延迟加载组件,预加载组件</li>\n<li>减少 DOM 元素数量:页面中存在大量 DOM 元素,会导致 javascript 遍历 DOM 的效率变慢。</li>\n<li>最小化 iframe 的数量：iframes 提供了一个简单的方式把一个网站的内容嵌入到另一个网站中。但其创建速度比其他包括 JavaScript 和 CSS 的 DOM 元素的创建慢了 1-2 个数量级。</li>\n<li>避免 404：HTTP 请求时间消耗是很大的，因此使用 HTTP 请求来获得一个没有用处的响应（例如 404 没有找到页面）是完全没有必要的，它只会降低用户体验而不会有一点好处。</li>\n</ul>\n<ol start=\"2\">\n<li>服务器优化</li>\n</ol>\n<ul>\n<li>使用内容分发网络（CDN）：把网站内容分散到多个、处于不同地域位置的服务器上可以加快下载速度。</li>\n<li>GZIP 压缩</li>\n<li>设置 ETag：ETags（Entity tags，实体标签）是 web 服务器和浏览器用于判断浏览器缓存中的内容和服务器中的原始内容是否匹配的一种机制。</li>\n<li>提前刷新缓冲区</li>\n<li>对 Ajax 请求使用 GET 方法</li>\n<li>避免空的图像 src</li>\n</ul>\n<ol start=\"3\">\n<li>Cookie 优化</li>\n</ol>\n<ul>\n<li>减小 Cookie 大小</li>\n<li>针对 Web 组件使用域名无关的 Cookie</li>\n</ul>\n<ol start=\"4\">\n<li>javascript 优化</li>\n</ol>\n<ul>\n<li>将 JavaScript 脚本放在页面的底部。</li>\n<li>将 JavaScript 和 CSS 作为外部文件来引用：在实际应用中使用外部文件可以提高页面速度，因为 JavaScript 和 CSS 文件都能在浏览器中产生缓存。</li>\n<li>缩小 JavaScript 和 CSS</li>\n<li>删除重复的脚本</li>\n<li>最小化 DOM 的访问：使用 JavaScript 访问 DOM 元素比较慢。</li>\n<li>开发智能的事件处理程序</li>\n<li>javascript 代码注意：谨慎使用 with,避免使用 eval Function 函数,减少作用域链查找。</li>\n</ul>\n<ol start=\"5\">\n<li>图像优化</li>\n</ol>\n<ul>\n<li>优化图片大小</li>\n<li>通过 CSS Sprites 优化图片</li>\n<li>不要在 HTML 中使用缩放图片</li>\n<li>favicon.ico 要小而且可缓存</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>内容优化</li>\n</ol>\n<ul>\n<li>减少 HTTP 请求数:这条策略是最重要最有效的，因为一个完整的请求要经过 DNS 寻址，与服务器建立连接，发送数据，等待服务器响应，接收数据这样一个消耗时间成本和资源成本的复杂的过程。常见方法：合并多个 CSS 文件和 js 文件，利用 CSS Sprites 整合图像，Inline Images(使用 data：URL scheme 在实际的页面嵌入图像数据 )，合理设置 HTTP 缓存等。</li>\n<li>减少 DNS 查找</li>\n<li>避免重定向</li>\n<li>使用 Ajax 缓存</li>\n<li>延迟加载组件,预加载组件</li>\n<li>减少 DOM 元素数量:页面中存在大量 DOM 元素,会导致 javascript 遍历 DOM 的效率变慢。</li>\n<li>最小化 iframe 的数量：iframes 提供了一个简单的方式把一个网站的内容嵌入到另一个网站中。但其创建速度比其他包括 JavaScript 和 CSS 的 DOM 元素的创建慢了 1-2 个数量级。</li>\n<li>避免 404：HTTP 请求时间消耗是很大的，因此使用 HTTP 请求来获得一个没有用处的响应（例如 404 没有找到页面）是完全没有必要的，它只会降低用户体验而不会有一点好处。</li>\n</ul>\n<ol start=\"2\">\n<li>服务器优化</li>\n</ol>\n<ul>\n<li>使用内容分发网络（CDN）：把网站内容分散到多个、处于不同地域位置的服务器上可以加快下载速度。</li>\n<li>GZIP 压缩</li>\n<li>设置 ETag：ETags（Entity tags，实体标签）是 web 服务器和浏览器用于判断浏览器缓存中的内容和服务器中的原始内容是否匹配的一种机制。</li>\n<li>提前刷新缓冲区</li>\n<li>对 Ajax 请求使用 GET 方法</li>\n<li>避免空的图像 src</li>\n</ul>\n<ol start=\"3\">\n<li>Cookie 优化</li>\n</ol>\n<ul>\n<li>减小 Cookie 大小</li>\n<li>针对 Web 组件使用域名无关的 Cookie</li>\n</ul>\n<ol start=\"4\">\n<li>javascript 优化</li>\n</ol>\n<ul>\n<li>将 JavaScript 脚本放在页面的底部。</li>\n<li>将 JavaScript 和 CSS 作为外部文件来引用：在实际应用中使用外部文件可以提高页面速度，因为 JavaScript 和 CSS 文件都能在浏览器中产生缓存。</li>\n<li>缩小 JavaScript 和 CSS</li>\n<li>删除重复的脚本</li>\n<li>最小化 DOM 的访问：使用 JavaScript 访问 DOM 元素比较慢。</li>\n<li>开发智能的事件处理程序</li>\n<li>javascript 代码注意：谨慎使用 with,避免使用 eval Function 函数,减少作用域链查找。</li>\n</ul>\n<ol start=\"5\">\n<li>图像优化</li>\n</ol>\n<ul>\n<li>优化图片大小</li>\n<li>通过 CSS Sprites 优化图片</li>\n<li>不要在 HTML 中使用缩放图片</li>\n<li>favicon.ico 要小而且可缓存</li>\n</ul>\n"},{"title":"分页算法","comments":1,"date":"2019-03-18T00:59:03.000Z","_content":"\n分页是一种比较常见的功能，分页的原理其实也很简单，首先要知道没有需要展示的项目数量 pageSize，然后还得知道当前所在的页数 currentPage, 设所有的 item 都在一个数组 array 里，每页需要展示 5 个 item，那么当 currentPage = 1 时，第一页要展示的所有 item 为 array.slice(0, 4), 第二页要展示的 item 为 array.slice(5, 9), 以此类推，那么第 n（n >= 0) 页需要展示的 item 应该为：array.slice(5n, 5n+4)，推而广之，基本数字的分页公式就出来了：\n\n```js\ncurrentArray = array.slice(pageSize * (currentPage - 1), pageSize * 2(currentPage - 1) - 1);\n```\n\n除了基本的数字分页，我们还经常看到上一页，下一页，这种怎么实现呢？上一页就是 currentPage - 1， 那么下一页就是 currentPage + 1，吧这两个分别带入上述公式，我们就得到了上一页，下一页的公式了：\n\n```js\n// 上一页\ncurrentArray = array.slice(pageSize * (currentPage - 2), pageSize * 2(currentPage - 2) -1)\n// 下一页\ncurrentArray = array.slice(pageSize * currentPage, pageSize * 2currentPage -1)\n```\n\n分页中还常常看到跳转页面的功能，所要跳转的数字就是我们选择的页数，因此跟第一种同理，用第一个公式即可。\n\n除此之外，在选择下一页的时候，页面的数字组合会往右偏移，选择上一页的时候，页面的数字组合往左偏移，实现的方法也很简单\n\n```js\n// 设当前页面数字组合为数组 nums，\n// nums 初始化为 [1, 2, 3, 4, 5]，\n// 那么选择上一页时，\nnums = nums.map(item => {\n  return item++;\n});\n// 选择下一页时\nnums = nums.map(item => {\n  return item--;\n});\n```\n\n实现了上面的页面数字组合更新之后，还有一个问题，当点击最后一页，和最开始一页时，页面数字组合应该是不被更新的，优化一下上面的算法：\n\n```js\n// 设当前页面数字组合为数组 nums，\n// nums 初始化为 [1, 2, 3, 4, 5]，\n// 那么选择上一页时，\nnums = nums.map(item => {\n  if (item !== 1) {\n    return item++;\n  } else {\n    return;\n  }\n});\n// 选择下一页时\nnums = nums.map(item => {\n  if (item !== totalPage.length - 1) {\n    return item--;\n  } else {\n    return;\n  }\n});\n```\n\n至此，我自己总结的分页算法就讲解完啦。\n","source":"_posts/分页算法.md","raw":"---\ntitle: 分页算法\ncomments: true\ndate: 2019-03-18 08:59:03\ncategories: 算法\ntags: 分页\n---\n\n分页是一种比较常见的功能，分页的原理其实也很简单，首先要知道没有需要展示的项目数量 pageSize，然后还得知道当前所在的页数 currentPage, 设所有的 item 都在一个数组 array 里，每页需要展示 5 个 item，那么当 currentPage = 1 时，第一页要展示的所有 item 为 array.slice(0, 4), 第二页要展示的 item 为 array.slice(5, 9), 以此类推，那么第 n（n >= 0) 页需要展示的 item 应该为：array.slice(5n, 5n+4)，推而广之，基本数字的分页公式就出来了：\n\n```js\ncurrentArray = array.slice(pageSize * (currentPage - 1), pageSize * 2(currentPage - 1) - 1);\n```\n\n除了基本的数字分页，我们还经常看到上一页，下一页，这种怎么实现呢？上一页就是 currentPage - 1， 那么下一页就是 currentPage + 1，吧这两个分别带入上述公式，我们就得到了上一页，下一页的公式了：\n\n```js\n// 上一页\ncurrentArray = array.slice(pageSize * (currentPage - 2), pageSize * 2(currentPage - 2) -1)\n// 下一页\ncurrentArray = array.slice(pageSize * currentPage, pageSize * 2currentPage -1)\n```\n\n分页中还常常看到跳转页面的功能，所要跳转的数字就是我们选择的页数，因此跟第一种同理，用第一个公式即可。\n\n除此之外，在选择下一页的时候，页面的数字组合会往右偏移，选择上一页的时候，页面的数字组合往左偏移，实现的方法也很简单\n\n```js\n// 设当前页面数字组合为数组 nums，\n// nums 初始化为 [1, 2, 3, 4, 5]，\n// 那么选择上一页时，\nnums = nums.map(item => {\n  return item++;\n});\n// 选择下一页时\nnums = nums.map(item => {\n  return item--;\n});\n```\n\n实现了上面的页面数字组合更新之后，还有一个问题，当点击最后一页，和最开始一页时，页面数字组合应该是不被更新的，优化一下上面的算法：\n\n```js\n// 设当前页面数字组合为数组 nums，\n// nums 初始化为 [1, 2, 3, 4, 5]，\n// 那么选择上一页时，\nnums = nums.map(item => {\n  if (item !== 1) {\n    return item++;\n  } else {\n    return;\n  }\n});\n// 选择下一页时\nnums = nums.map(item => {\n  if (item !== totalPage.length - 1) {\n    return item--;\n  } else {\n    return;\n  }\n});\n```\n\n至此，我自己总结的分页算法就讲解完啦。\n","slug":"分页算法","published":1,"updated":"2019-05-19T05:29:10.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgual005l8ex04s96pu27","content":"<p>分页是一种比较常见的功能，分页的原理其实也很简单，首先要知道没有需要展示的项目数量 pageSize，然后还得知道当前所在的页数 currentPage, 设所有的 item 都在一个数组 array 里，每页需要展示 5 个 item，那么当 currentPage = 1 时，第一页要展示的所有 item 为 array.slice(0, 4), 第二页要展示的 item 为 array.slice(5, 9), 以此类推，那么第 n（n &gt;= 0) 页需要展示的 item 应该为：array.slice(5n, 5n+4)，推而广之，基本数字的分页公式就出来了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">currentArray = array.slice(pageSize * (currentPage - <span class=\"number\">1</span>), pageSize * <span class=\"number\">2</span>(currentPage - <span class=\"number\">1</span>) - <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>除了基本的数字分页，我们还经常看到上一页，下一页，这种怎么实现呢？上一页就是 currentPage - 1， 那么下一页就是 currentPage + 1，吧这两个分别带入上述公式，我们就得到了上一页，下一页的公式了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上一页</span></span><br><span class=\"line\">currentArray = array.slice(pageSize * (currentPage - <span class=\"number\">2</span>), pageSize * <span class=\"number\">2</span>(currentPage - <span class=\"number\">2</span>) <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"comment\">// 下一页</span></span><br><span class=\"line\">currentArray = array.slice(pageSize * currentPage, pageSize * <span class=\"number\">2</span>currentPage <span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure>\n<p>分页中还常常看到跳转页面的功能，所要跳转的数字就是我们选择的页数，因此跟第一种同理，用第一个公式即可。</p>\n<p>除此之外，在选择下一页的时候，页面的数字组合会往右偏移，选择上一页的时候，页面的数字组合往左偏移，实现的方法也很简单</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设当前页面数字组合为数组 nums，</span></span><br><span class=\"line\"><span class=\"comment\">// nums 初始化为 [1, 2, 3, 4, 5]，</span></span><br><span class=\"line\"><span class=\"comment\">// 那么选择上一页时，</span></span><br><span class=\"line\">nums = nums.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item++;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 选择下一页时</span></span><br><span class=\"line\">nums = nums.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item--;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>实现了上面的页面数字组合更新之后，还有一个问题，当点击最后一页，和最开始一页时，页面数字组合应该是不被更新的，优化一下上面的算法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设当前页面数字组合为数组 nums，</span></span><br><span class=\"line\"><span class=\"comment\">// nums 初始化为 [1, 2, 3, 4, 5]，</span></span><br><span class=\"line\"><span class=\"comment\">// 那么选择上一页时，</span></span><br><span class=\"line\">nums = nums.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item !== <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item++;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 选择下一页时</span></span><br><span class=\"line\">nums = nums.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item !== totalPage.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item--;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>至此，我自己总结的分页算法就讲解完啦。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>分页是一种比较常见的功能，分页的原理其实也很简单，首先要知道没有需要展示的项目数量 pageSize，然后还得知道当前所在的页数 currentPage, 设所有的 item 都在一个数组 array 里，每页需要展示 5 个 item，那么当 currentPage = 1 时，第一页要展示的所有 item 为 array.slice(0, 4), 第二页要展示的 item 为 array.slice(5, 9), 以此类推，那么第 n（n &gt;= 0) 页需要展示的 item 应该为：array.slice(5n, 5n+4)，推而广之，基本数字的分页公式就出来了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">currentArray = array.slice(pageSize * (currentPage - <span class=\"number\">1</span>), pageSize * <span class=\"number\">2</span>(currentPage - <span class=\"number\">1</span>) - <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>除了基本的数字分页，我们还经常看到上一页，下一页，这种怎么实现呢？上一页就是 currentPage - 1， 那么下一页就是 currentPage + 1，吧这两个分别带入上述公式，我们就得到了上一页，下一页的公式了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 上一页</span></span><br><span class=\"line\">currentArray = array.slice(pageSize * (currentPage - <span class=\"number\">2</span>), pageSize * <span class=\"number\">2</span>(currentPage - <span class=\"number\">2</span>) <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"comment\">// 下一页</span></span><br><span class=\"line\">currentArray = array.slice(pageSize * currentPage, pageSize * <span class=\"number\">2</span>currentPage <span class=\"number\">-1</span>)</span><br></pre></td></tr></table></figure>\n<p>分页中还常常看到跳转页面的功能，所要跳转的数字就是我们选择的页数，因此跟第一种同理，用第一个公式即可。</p>\n<p>除此之外，在选择下一页的时候，页面的数字组合会往右偏移，选择上一页的时候，页面的数字组合往左偏移，实现的方法也很简单</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设当前页面数字组合为数组 nums，</span></span><br><span class=\"line\"><span class=\"comment\">// nums 初始化为 [1, 2, 3, 4, 5]，</span></span><br><span class=\"line\"><span class=\"comment\">// 那么选择上一页时，</span></span><br><span class=\"line\">nums = nums.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item++;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 选择下一页时</span></span><br><span class=\"line\">nums = nums.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> item--;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>实现了上面的页面数字组合更新之后，还有一个问题，当点击最后一页，和最开始一页时，页面数字组合应该是不被更新的，优化一下上面的算法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设当前页面数字组合为数组 nums，</span></span><br><span class=\"line\"><span class=\"comment\">// nums 初始化为 [1, 2, 3, 4, 5]，</span></span><br><span class=\"line\"><span class=\"comment\">// 那么选择上一页时，</span></span><br><span class=\"line\">nums = nums.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item !== <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item++;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 选择下一页时</span></span><br><span class=\"line\">nums = nums.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (item !== totalPage.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item--;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>至此，我自己总结的分页算法就讲解完啦。</p>\n"},{"title":"前端面试总结——读书郎","comments":1,"date":"2018-06-07T11:58:34.000Z","_content":"\n前几天在拉勾投的简历，今天下午下班后去面试，总的感觉是面试很专业很基础，自己太不专业了，大三到现在也只是自己写写小项目自己玩，真正聊技术的话，一点都不专业，专业名词没几个能说的上来，想到之前工作中用到的很多 python 知识点自己也是说不上来，只是会用，后来看到别人的教程，才知道自己一直用的东东原来是有专业名词的。\n\n下面是面试的题目：\n\n1. js 知识点考察：\n\n```\nfunction fun(){\n    console.log(this)\n}\nfun()\nb = new fun()\nconsole.log(b)\n```\n\n（1） 以上结果分别是什么？\n\n第一个 this 指向全局作用域，所以打印的应该是 window，这个我当时一时没反应过来，知道是指向全局作用域，但是具体打印出来的是什么，没反应过来。\n\n第二个 b 是 fun 函数的实例，继承了 fun 函数的所有特性，但是由于没有给这个实例传参，所以结果是 undefined，这个我知道打印出来的是 undefined，也知道原因，但是没有按着面试官走，没把实例这个名词说出来。\n\n```\nvar a = 1\nfunction fun(){\n    console.log(a)\n    if(true){\n        var a = 2\n        console.log(a)\n    }\n    console.log(a)\n}\nfun()\nconsole.log(a)\n```\n\n(2) 以上代码打印出来的分别是什么？为什么？\n\n第一个 a 打印出来是 undefined,因为作用域内不存在这个参数，默认返回 undefined。第二个 a 打印出来是 2，因为在 if 内申明了局部变量 a 并把 2 赋值给了这个参数。第三个 a 打印出来同样是 2，因为这条语句在 if 作用域的下面，代码树是往下延伸的。第四个 a 打印出来是 a，因为 a=1 属于这个作用域，而函数里的 a 它是共享不到的，要共享函数内的参数的话，可以用闭包。\n\n（3）第三个问题没太懂，问的是 function 除了 argument 外还有哪些内置 xx？这个我没听清的用 xx 表示吧，你们懂的告诉我一声。\n\n2. 算法知识点考察\n\n（1）说说快排，这个我当时有点蒙圈了，因为好久之前接触的东东，都忘了，回来后补充解释如下：\n\n快速排序是从目标数据中任意选取一个数据，以这个数据的值为分割点，把目标数据分割为两部分。这样循环操作下去进行排序。这个在代码中用的挺多的，但是我没记住它的学名，没想起来。这个解释摘自我大二时候读《写给大家的算法书》的算法基础部分的笔记。\n\n（2）说说冒泡排序，同上，没打出来，回来后补充解释如下：\n\n冒泡排序是对比相邻的两个数据，根据大小关系调整两个数据的顺序。同样摘自大二的读书笔记。\n\n除了这些还有一些零零碎碎的知识点，我就不一一罗列了，列出这几个典型的吧，可能面试经验比较少，很多东西都准备不充分，背着自己的电脑就过去面试了，面试问到项目就拿出了自己的一些小项目出来，也比较随意，结果是其次，最主要的是面试挺欢乐，知道了自己在前端算法这一块还很薄弱，接下来得好好学学数据结构和算法了。\n","source":"_posts/前端面试总结——读书郎.md","raw":"---\ntitle: 前端面试总结——读书郎\ncomments: true\ndate: 2018-06-07 19:58:34\ncategories: web\ntags: 面试\n---\n\n前几天在拉勾投的简历，今天下午下班后去面试，总的感觉是面试很专业很基础，自己太不专业了，大三到现在也只是自己写写小项目自己玩，真正聊技术的话，一点都不专业，专业名词没几个能说的上来，想到之前工作中用到的很多 python 知识点自己也是说不上来，只是会用，后来看到别人的教程，才知道自己一直用的东东原来是有专业名词的。\n\n下面是面试的题目：\n\n1. js 知识点考察：\n\n```\nfunction fun(){\n    console.log(this)\n}\nfun()\nb = new fun()\nconsole.log(b)\n```\n\n（1） 以上结果分别是什么？\n\n第一个 this 指向全局作用域，所以打印的应该是 window，这个我当时一时没反应过来，知道是指向全局作用域，但是具体打印出来的是什么，没反应过来。\n\n第二个 b 是 fun 函数的实例，继承了 fun 函数的所有特性，但是由于没有给这个实例传参，所以结果是 undefined，这个我知道打印出来的是 undefined，也知道原因，但是没有按着面试官走，没把实例这个名词说出来。\n\n```\nvar a = 1\nfunction fun(){\n    console.log(a)\n    if(true){\n        var a = 2\n        console.log(a)\n    }\n    console.log(a)\n}\nfun()\nconsole.log(a)\n```\n\n(2) 以上代码打印出来的分别是什么？为什么？\n\n第一个 a 打印出来是 undefined,因为作用域内不存在这个参数，默认返回 undefined。第二个 a 打印出来是 2，因为在 if 内申明了局部变量 a 并把 2 赋值给了这个参数。第三个 a 打印出来同样是 2，因为这条语句在 if 作用域的下面，代码树是往下延伸的。第四个 a 打印出来是 a，因为 a=1 属于这个作用域，而函数里的 a 它是共享不到的，要共享函数内的参数的话，可以用闭包。\n\n（3）第三个问题没太懂，问的是 function 除了 argument 外还有哪些内置 xx？这个我没听清的用 xx 表示吧，你们懂的告诉我一声。\n\n2. 算法知识点考察\n\n（1）说说快排，这个我当时有点蒙圈了，因为好久之前接触的东东，都忘了，回来后补充解释如下：\n\n快速排序是从目标数据中任意选取一个数据，以这个数据的值为分割点，把目标数据分割为两部分。这样循环操作下去进行排序。这个在代码中用的挺多的，但是我没记住它的学名，没想起来。这个解释摘自我大二时候读《写给大家的算法书》的算法基础部分的笔记。\n\n（2）说说冒泡排序，同上，没打出来，回来后补充解释如下：\n\n冒泡排序是对比相邻的两个数据，根据大小关系调整两个数据的顺序。同样摘自大二的读书笔记。\n\n除了这些还有一些零零碎碎的知识点，我就不一一罗列了，列出这几个典型的吧，可能面试经验比较少，很多东西都准备不充分，背着自己的电脑就过去面试了，面试问到项目就拿出了自己的一些小项目出来，也比较随意，结果是其次，最主要的是面试挺欢乐，知道了自己在前端算法这一块还很薄弱，接下来得好好学学数据结构和算法了。\n","slug":"前端面试总结——读书郎","published":1,"updated":"2019-05-19T05:30:10.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguam005p8ex0wnbx64ka","content":"<p>前几天在拉勾投的简历，今天下午下班后去面试，总的感觉是面试很专业很基础，自己太不专业了，大三到现在也只是自己写写小项目自己玩，真正聊技术的话，一点都不专业，专业名词没几个能说的上来，想到之前工作中用到的很多 python 知识点自己也是说不上来，只是会用，后来看到别人的教程，才知道自己一直用的东东原来是有专业名词的。</p>\n<p>下面是面试的题目：</p>\n<ol>\n<li>js 知识点考察：</li>\n</ol>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"function\"><span class=\"keyword\">fun</span>()&#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">console</span></span>.log(this)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span>()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">b</span></span> = new <span class=\"function\"><span class=\"keyword\">fun</span>()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">console</span></span>.log(b)</span><br></pre></td></tr></table></figure>\n<p>（1） 以上结果分别是什么？</p>\n<p>第一个 this 指向全局作用域，所以打印的应该是 window，这个我当时一时没反应过来，知道是指向全局作用域，但是具体打印出来的是什么，没反应过来。</p>\n<p>第二个 b 是 fun 函数的实例，继承了 fun 函数的所有特性，但是由于没有给这个实例传参，所以结果是 undefined，这个我知道打印出来的是 undefined，也知道原因，但是没有按着面试官走，没把实例这个名词说出来。</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = <span class=\"number\">1</span></span><br><span class=\"line\">function <span class=\"function\"><span class=\"keyword\">fun</span>()&#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">console</span></span>.log(a)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        var a = <span class=\"number\">2</span></span><br><span class=\"line\">        console.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span>()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">console</span></span>.log(a)</span><br></pre></td></tr></table></figure>\n<p>(2) 以上代码打印出来的分别是什么？为什么？</p>\n<p>第一个 a 打印出来是 undefined,因为作用域内不存在这个参数，默认返回 undefined。第二个 a 打印出来是 2，因为在 if 内申明了局部变量 a 并把 2 赋值给了这个参数。第三个 a 打印出来同样是 2，因为这条语句在 if 作用域的下面，代码树是往下延伸的。第四个 a 打印出来是 a，因为 a=1 属于这个作用域，而函数里的 a 它是共享不到的，要共享函数内的参数的话，可以用闭包。</p>\n<p>（3）第三个问题没太懂，问的是 function 除了 argument 外还有哪些内置 xx？这个我没听清的用 xx 表示吧，你们懂的告诉我一声。</p>\n<ol start=\"2\">\n<li>算法知识点考察</li>\n</ol>\n<p>（1）说说快排，这个我当时有点蒙圈了，因为好久之前接触的东东，都忘了，回来后补充解释如下：</p>\n<p>快速排序是从目标数据中任意选取一个数据，以这个数据的值为分割点，把目标数据分割为两部分。这样循环操作下去进行排序。这个在代码中用的挺多的，但是我没记住它的学名，没想起来。这个解释摘自我大二时候读《写给大家的算法书》的算法基础部分的笔记。</p>\n<p>（2）说说冒泡排序，同上，没打出来，回来后补充解释如下：</p>\n<p>冒泡排序是对比相邻的两个数据，根据大小关系调整两个数据的顺序。同样摘自大二的读书笔记。</p>\n<p>除了这些还有一些零零碎碎的知识点，我就不一一罗列了，列出这几个典型的吧，可能面试经验比较少，很多东西都准备不充分，背着自己的电脑就过去面试了，面试问到项目就拿出了自己的一些小项目出来，也比较随意，结果是其次，最主要的是面试挺欢乐，知道了自己在前端算法这一块还很薄弱，接下来得好好学学数据结构和算法了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前几天在拉勾投的简历，今天下午下班后去面试，总的感觉是面试很专业很基础，自己太不专业了，大三到现在也只是自己写写小项目自己玩，真正聊技术的话，一点都不专业，专业名词没几个能说的上来，想到之前工作中用到的很多 python 知识点自己也是说不上来，只是会用，后来看到别人的教程，才知道自己一直用的东东原来是有专业名词的。</p>\n<p>下面是面试的题目：</p>\n<ol>\n<li>js 知识点考察：</li>\n</ol>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function <span class=\"function\"><span class=\"keyword\">fun</span>()&#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">console</span></span>.log(this)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span>()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">b</span></span> = new <span class=\"function\"><span class=\"keyword\">fun</span>()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">console</span></span>.log(b)</span><br></pre></td></tr></table></figure>\n<p>（1） 以上结果分别是什么？</p>\n<p>第一个 this 指向全局作用域，所以打印的应该是 window，这个我当时一时没反应过来，知道是指向全局作用域，但是具体打印出来的是什么，没反应过来。</p>\n<p>第二个 b 是 fun 函数的实例，继承了 fun 函数的所有特性，但是由于没有给这个实例传参，所以结果是 undefined，这个我知道打印出来的是 undefined，也知道原因，但是没有按着面试官走，没把实例这个名词说出来。</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = <span class=\"number\">1</span></span><br><span class=\"line\">function <span class=\"function\"><span class=\"keyword\">fun</span>()&#123;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">console</span></span>.log(a)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        var a = <span class=\"number\">2</span></span><br><span class=\"line\">        console.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    console.log(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span>()</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">console</span></span>.log(a)</span><br></pre></td></tr></table></figure>\n<p>(2) 以上代码打印出来的分别是什么？为什么？</p>\n<p>第一个 a 打印出来是 undefined,因为作用域内不存在这个参数，默认返回 undefined。第二个 a 打印出来是 2，因为在 if 内申明了局部变量 a 并把 2 赋值给了这个参数。第三个 a 打印出来同样是 2，因为这条语句在 if 作用域的下面，代码树是往下延伸的。第四个 a 打印出来是 a，因为 a=1 属于这个作用域，而函数里的 a 它是共享不到的，要共享函数内的参数的话，可以用闭包。</p>\n<p>（3）第三个问题没太懂，问的是 function 除了 argument 外还有哪些内置 xx？这个我没听清的用 xx 表示吧，你们懂的告诉我一声。</p>\n<ol start=\"2\">\n<li>算法知识点考察</li>\n</ol>\n<p>（1）说说快排，这个我当时有点蒙圈了，因为好久之前接触的东东，都忘了，回来后补充解释如下：</p>\n<p>快速排序是从目标数据中任意选取一个数据，以这个数据的值为分割点，把目标数据分割为两部分。这样循环操作下去进行排序。这个在代码中用的挺多的，但是我没记住它的学名，没想起来。这个解释摘自我大二时候读《写给大家的算法书》的算法基础部分的笔记。</p>\n<p>（2）说说冒泡排序，同上，没打出来，回来后补充解释如下：</p>\n<p>冒泡排序是对比相邻的两个数据，根据大小关系调整两个数据的顺序。同样摘自大二的读书笔记。</p>\n<p>除了这些还有一些零零碎碎的知识点，我就不一一罗列了，列出这几个典型的吧，可能面试经验比较少，很多东西都准备不充分，背着自己的电脑就过去面试了，面试问到项目就拿出了自己的一些小项目出来，也比较随意，结果是其次，最主要的是面试挺欢乐，知道了自己在前端算法这一块还很薄弱，接下来得好好学学数据结构和算法了。</p>\n"},{"title":"单向列表拼接","comments":1,"date":"2019-09-15T10:02:38.000Z","_content":"```python\n# Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\n\n# Example:\n# Input: 1 -> 2 -> 4, 1 -> 3 -> 4\n# Output: 1 -> 1 -> 2 -> 3 -> 4 -> 4\n\n# 来源：力扣（LeetCode）\n# 链接：https: // leetcode-cn.com/problems/merge-two-sorted-lists\n\n# Definition for singly-linked list.\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def mergeTwoLists(self, l1, l2):\n        prehead = ListNode(-1)\n\n        prev = prehead\n        while l1 and l2:\n            if l1.val <= l2.val:\n                prev.next = l1\n                l1 = l1.next\n            else:\n                prev.next = l2\n                l2 = l2.next\n            prev = prev.next\n        prev.next = l1 if l1 is not None else l2\n\n        return prehead.next\n\n    def __init__(self, arr1, arr2):\n        n1 = ListNode(arr1[0])\n        x1 = ListNode(arr2[0])\n        self.mergeTwoLists(n1, x1)\n        print(self.mergeTwoLists(n1, x1).val)\n\nSolution([1, 2, 4], [1, 3, 4])\n```\n通过比较两个列表节点的大小，替换节点的方式，拼接出一个由小到大排序的有序单向列表，这题对于我来说，难点在于列表的实现，由于之前没怎么接触过链表，还得慢慢去理解。\n","source":"_posts/单向列表拼接.md","raw":"---\ntitle: 单向列表拼接\ncomments: true\ndate: 2019-09-15 18:02:38\ncategories: 算法\ntags: algorithmn-simple\n---\n```python\n# Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\n\n# Example:\n# Input: 1 -> 2 -> 4, 1 -> 3 -> 4\n# Output: 1 -> 1 -> 2 -> 3 -> 4 -> 4\n\n# 来源：力扣（LeetCode）\n# 链接：https: // leetcode-cn.com/problems/merge-two-sorted-lists\n\n# Definition for singly-linked list.\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\nclass Solution:\n    def mergeTwoLists(self, l1, l2):\n        prehead = ListNode(-1)\n\n        prev = prehead\n        while l1 and l2:\n            if l1.val <= l2.val:\n                prev.next = l1\n                l1 = l1.next\n            else:\n                prev.next = l2\n                l2 = l2.next\n            prev = prev.next\n        prev.next = l1 if l1 is not None else l2\n\n        return prehead.next\n\n    def __init__(self, arr1, arr2):\n        n1 = ListNode(arr1[0])\n        x1 = ListNode(arr2[0])\n        self.mergeTwoLists(n1, x1)\n        print(self.mergeTwoLists(n1, x1).val)\n\nSolution([1, 2, 4], [1, 3, 4])\n```\n通过比较两个列表节点的大小，替换节点的方式，拼接出一个由小到大排序的有序单向列表，这题对于我来说，难点在于列表的实现，由于之前没怎么接触过链表，还得慢慢去理解。\n","slug":"单向列表拼接","published":1,"updated":"2019-09-15T10:03:12.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguan005s8ex04zi0dbzu","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example:</span></span><br><span class=\"line\"><span class=\"comment\"># Input: 1 -&gt; 2 -&gt; 4, 1 -&gt; 3 -&gt; 4</span></span><br><span class=\"line\"><span class=\"comment\"># Output: 1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 来源：力扣（LeetCode）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接：https: // leetcode-cn.com/problems/merge-two-sorted-lists</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        self.val = x</span><br><span class=\"line\">        self.next = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergeTwoLists</span><span class=\"params\">(self, l1, l2)</span>:</span></span><br><span class=\"line\">        prehead = ListNode(<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        prev = prehead</span><br><span class=\"line\">        <span class=\"keyword\">while</span> l1 <span class=\"keyword\">and</span> l2:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> l1.val &lt;= l2.val:</span><br><span class=\"line\">                prev.next = l1</span><br><span class=\"line\">                l1 = l1.next</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                prev.next = l2</span><br><span class=\"line\">                l2 = l2.next</span><br><span class=\"line\">            prev = prev.next</span><br><span class=\"line\">        prev.next = l1 <span class=\"keyword\">if</span> l1 <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">else</span> l2</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> prehead.next</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, arr1, arr2)</span>:</span></span><br><span class=\"line\">        n1 = ListNode(arr1[<span class=\"number\">0</span>])</span><br><span class=\"line\">        x1 = ListNode(arr2[<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.mergeTwoLists(n1, x1)</span><br><span class=\"line\">        print(self.mergeTwoLists(n1, x1).val)</span><br><span class=\"line\"></span><br><span class=\"line\">Solution([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure>\n<p>通过比较两个列表节点的大小，替换节点的方式，拼接出一个由小到大排序的有序单向列表，这题对于我来说，难点在于列表的实现，由于之前没怎么接触过链表，还得慢慢去理解。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example:</span></span><br><span class=\"line\"><span class=\"comment\"># Input: 1 -&gt; 2 -&gt; 4, 1 -&gt; 3 -&gt; 4</span></span><br><span class=\"line\"><span class=\"comment\"># Output: 1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 来源：力扣（LeetCode）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接：https: // leetcode-cn.com/problems/merge-two-sorted-lists</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListNode</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        self.val = x</span><br><span class=\"line\">        self.next = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mergeTwoLists</span><span class=\"params\">(self, l1, l2)</span>:</span></span><br><span class=\"line\">        prehead = ListNode(<span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        prev = prehead</span><br><span class=\"line\">        <span class=\"keyword\">while</span> l1 <span class=\"keyword\">and</span> l2:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> l1.val &lt;= l2.val:</span><br><span class=\"line\">                prev.next = l1</span><br><span class=\"line\">                l1 = l1.next</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                prev.next = l2</span><br><span class=\"line\">                l2 = l2.next</span><br><span class=\"line\">            prev = prev.next</span><br><span class=\"line\">        prev.next = l1 <span class=\"keyword\">if</span> l1 <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">else</span> l2</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> prehead.next</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, arr1, arr2)</span>:</span></span><br><span class=\"line\">        n1 = ListNode(arr1[<span class=\"number\">0</span>])</span><br><span class=\"line\">        x1 = ListNode(arr2[<span class=\"number\">0</span>])</span><br><span class=\"line\">        self.mergeTwoLists(n1, x1)</span><br><span class=\"line\">        print(self.mergeTwoLists(n1, x1).val)</span><br><span class=\"line\"></span><br><span class=\"line\">Solution([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>], [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure>\n<p>通过比较两个列表节点的大小，替换节点的方式，拼接出一个由小到大排序的有序单向列表，这题对于我来说，难点在于列表的实现，由于之前没怎么接触过链表，还得慢慢去理解。</p>\n"},{"title":"写给大家看的算法书笔记","comments":1,"date":"2018-06-07T12:08:41.000Z","_content":"\n#### 一、什么是算法\n\n1. 算法是对特定问题的解决步骤（对信息进行排序、搜索目标信息等）；\n\n- 算法 → 更优质的算法 → 好的程序；\n- 算法的两个必要条件：\n- 准确性，证明方法——断言；\n- 可停止性（死循环不能看做算法）；\n\n- 几种重要的算法：\n- 数论算法：\n  - 求解最大公约数的辗转相除法；\n  - 求解联立方程的高斯消元法；\n  - 求解定积分近似值的梯形公式;\n  - 计算质数的艾拉斯托尼筛法;\n- 排序算法(按序排列)：\n  - 选择排序；\n  - 冒泡排序；\n  - 插入排序；\n  - 希尔排序;\n  - 归并排序;\n  - 快速排序；\n- 搜索算法：（比较求同）\n  - 线性搜索；\n  - 二分搜索；\n- 字符串匹配算法：\n\n  - 简单字符串搜索；\n  - KMP 算法；\n  - BM 算法；\n\n- 结构化编程思想：旨在高效描述程序，最大限度减少设计误差的方法论，其中的处理流程结构组合包括：\n- 顺序结构：按顺序处理；\n  ![图片来源于网络](http://upload-images.jianshu.io/upload_images/1476489-9f036b6001ef4e07.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n- 选择结构：按条件处理；\n  ![图片来源于网络](http://upload-images.jianshu.io/upload_images/1476489-68f37dd7d235e531.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 循环结构：条件成立下，进行定量循环处理；\n  ![图片来源于网络](http://upload-images.jianshu.io/upload_images/1476489-a41112c31c533ab9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 二、 变量和数组\n\n1.  算法由数据和处理构成；\n\n- 基本数据类型：\n  - 整数；\n  - 浮点数；\n  - 字符；\n  - 布尔值；\n  - 字符串；\n- 描述数据信息的方法是数据值；\n- 变量是存放数据值的容器，变量的作用是使处理过程通用化，每个变量只能存放一个数据，变量名是区分不同变量的标记，变量名要能表示所装载的数据；\n- 把数据赋值给变量的过程叫代入；\n- 数组是用来保存大量同一数据类型值的，数组索引，即数组元素的位置标号，可以利用数组进行关联数据的处理；\n- 二维数组，数组元素沿横纵方向排列；\n\n#### 三、数据结构——高效的管理大量数据的构造\n\n1. 常用的数据结构：\n\n- <b>数组</b>，快速定位第 N 个数据；\n  ![图片来源于手机拍摄](http://upload-images.jianshu.io/upload_images/1476489-5279810825a68703.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- <b>链表</b>，离散数据排序，快速插入删除数据（插入、删除数据不改变数据位置）。单向链表只能单向检索，元素由数据和“NEXT 指针”构成，HEAD 指针标记链表的第一个元素。双向链表元素由数据，PREV、NEXT 指针构成，可向前向后检索数据，链表为空的状态，HEAD 指针，TAIL 指针分别存储“没有起始元素”、“没有末尾元素”的信息；\n  ![图片来源于网络](http://upload-images.jianshu.io/upload_images/1476489-6113ee58c4fc1e74.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- <b>堆栈</b>（先进后出），数据操作：入栈 → 写入数据（push）→ 出栈（POP）→ 读取数据。考虑计算机优先级或者计算机管理子程序调用的顺序时用到；\n  ![图片来源于网络](http://upload-images.jianshu.io/upload_images/1476489-21be1fcb8546bd49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- <b>队列</b>（先进先出），应用在电文发放和接收中；\n  ![图片来源于网络](http://upload-images.jianshu.io/upload_images/1476489-0789fc904f456296.gif?imageMogr2/auto-orient/strip)\n\n- <b>树</b>，管理父节点数据和子节点数据，二叉树一个父节点对用两个子节点，可以用数组来表示二叉树；\n  ![图片来源于手机拍摄](http://upload-images.jianshu.io/upload_images/1476489-a812b66052043bd4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  ![图片来源于手机拍摄](http://upload-images.jianshu.io/upload_images/1476489-061f5d3516622b9b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  ![图片来源于手机拍摄](http://upload-images.jianshu.io/upload_images/1476489-f43abcb33e47957a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 图，自由的表示各种关系的数据。图的分类：有向图（边有方向性）、加权图（边有权重）；\n  ![图片来源于手机拍摄](http://upload-images.jianshu.io/upload_images/1476489-ea65bbf1f9b3b98b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 四、算法基础\n\n1.  循环处理和控制变量\n\n- 循环处理：利用一个控制变量来管理循环次数，从而进行必要次数的处理；\n- 循环处理的步骤：\n  - 设置控制变量的初始值；\n  - 判断循环条件，如果为 true，进行以下 3,4,步，否则为 false，终止处理；\n  - 执行循环体；\n  - 改变控制变量，回到步骤 2；\n- 利用循环处理使处理过程通用化；\n  <b>案例：</b>\n  计算 1~N 的整数的总和。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-233c00b2f31f8e76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-4ea54b8cba9d8db1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 使用数组可以高效的处理大量数据\n  <b>案例：</b>\n  求斐波那契数列。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-b0f7928c9e70b00c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-aae2fafe110aeb4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 数组求和\n  <b>案例：</b>\n  计算一年的营业额。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-ca431aa7a661a3fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-2498e2f8f6979555.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 求平均值\n  <b>案例：</b>\n  求班级考试的平均分。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-a288f74be53c16ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-a4ea9bb73708cdf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 求数组数据中的最大值\n  <b>案例：</b>\n  求最高分。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-5934e850b29830b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-393b1a7d9a9bc418.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 求数据中的最小值\n  <b>案例：</b>\n  求最低分。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-7d3483e3bd32591a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-a49e301d22d84669.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 为数组元素排序\n  <b>案例：</b>\n  为考试成绩排名。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-2d67aeb495cc806e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-34838194b6e477e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 二维数组操作\n  <b>案例</b>\n  求全班学生不同科目考试合计总分。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-bfadc73a743b91f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-b4681f4285738dc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 求两个数的最大公约数\n  <b>案例：</b>\n  辗转相除法\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-460179a152a07806.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-3fc4fb3e5c8ebb16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 排序算法\n\n1. 几种常用的排序算法\n   - 桶排序\n     概念：\n     准备与待排序数据取值范围大小个数的木桶，利用这些木桶对数据进行保存、排序。\n     排序过程：\n     （1）准备好木桶数据，把其所有元素初始化为 0；\n     （2）把保存排序数组（n 个数据）的下标的变量 i 初始化为 0；\n     （3）i 小于 n 时，循环执行 4~5；\n     （4）把 data[i]代入变量 value；\n     （5）bucket[value]加 1；\n     （6）i 加 1；\n     （7）从 bucket 的起始元素开始，把每个数值非 0 的元素的下标按照数值（出现次数）取出来，排成一列。\n   - 选择排序\n     概念：\n     遍历数据，把数据中的最大值（或最小值）与起始（或者末尾）数据进行交换。\n     排序过程：\n     （1）从“待排序部分”中找到最小值；\n     （2）把最小值和“待排序部分起始位置的元素”交换；\n     （3）“待排序部分”的起始位置向后移动一位；\n     （4）循环操作 1~3，直至“待排序部分”只剩下一个元素。\n   - 冒泡排序\n     对比相邻的两个数据，根据大小关系调整两个数据的顺序。\n   - 插入排序\n     把目标数据按照正确的大小排列顺序插入相应的位置中。\n   - 归并排序\n     把目标数据分割成更小的部分进行排序，更小的部分正确排序之后再合并起来。\n   - 希尔排序\n     把目标数据按照一定的个数分成几个区域进行插入排序。\n   - 快速排序  \n     从目标数据中任意选取一个数据，以这个数据的值为分割点，把目标数据分割为两部分。这样循环操作下去进行排序。\n\n#### 搜索算法\n\n1. 常用的搜索算法：\n\n- 线性搜索（随机排布的数据列中使用，效率比较低）；\n- 二分搜索（已经排好序的数据列中使用，效率较高）；\n- 利用哈希表进行搜索（高效搜索）；\n- 简单字符串搜索（有长度的数据）；\n- 利用 KMP 算法 进行字符串搜索；\n- 利用 BM 算法进行字符串搜索。\n","source":"_posts/写给大家看的算法书笔记.md","raw":"---\ntitle: 写给大家看的算法书笔记\ncomments: true\ndate: 2018-06-07 20:08:41\ncategories: 算法\ntags: 笔记\n---\n\n#### 一、什么是算法\n\n1. 算法是对特定问题的解决步骤（对信息进行排序、搜索目标信息等）；\n\n- 算法 → 更优质的算法 → 好的程序；\n- 算法的两个必要条件：\n- 准确性，证明方法——断言；\n- 可停止性（死循环不能看做算法）；\n\n- 几种重要的算法：\n- 数论算法：\n  - 求解最大公约数的辗转相除法；\n  - 求解联立方程的高斯消元法；\n  - 求解定积分近似值的梯形公式;\n  - 计算质数的艾拉斯托尼筛法;\n- 排序算法(按序排列)：\n  - 选择排序；\n  - 冒泡排序；\n  - 插入排序；\n  - 希尔排序;\n  - 归并排序;\n  - 快速排序；\n- 搜索算法：（比较求同）\n  - 线性搜索；\n  - 二分搜索；\n- 字符串匹配算法：\n\n  - 简单字符串搜索；\n  - KMP 算法；\n  - BM 算法；\n\n- 结构化编程思想：旨在高效描述程序，最大限度减少设计误差的方法论，其中的处理流程结构组合包括：\n- 顺序结构：按顺序处理；\n  ![图片来源于网络](http://upload-images.jianshu.io/upload_images/1476489-9f036b6001ef4e07.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n- 选择结构：按条件处理；\n  ![图片来源于网络](http://upload-images.jianshu.io/upload_images/1476489-68f37dd7d235e531.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 循环结构：条件成立下，进行定量循环处理；\n  ![图片来源于网络](http://upload-images.jianshu.io/upload_images/1476489-a41112c31c533ab9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 二、 变量和数组\n\n1.  算法由数据和处理构成；\n\n- 基本数据类型：\n  - 整数；\n  - 浮点数；\n  - 字符；\n  - 布尔值；\n  - 字符串；\n- 描述数据信息的方法是数据值；\n- 变量是存放数据值的容器，变量的作用是使处理过程通用化，每个变量只能存放一个数据，变量名是区分不同变量的标记，变量名要能表示所装载的数据；\n- 把数据赋值给变量的过程叫代入；\n- 数组是用来保存大量同一数据类型值的，数组索引，即数组元素的位置标号，可以利用数组进行关联数据的处理；\n- 二维数组，数组元素沿横纵方向排列；\n\n#### 三、数据结构——高效的管理大量数据的构造\n\n1. 常用的数据结构：\n\n- <b>数组</b>，快速定位第 N 个数据；\n  ![图片来源于手机拍摄](http://upload-images.jianshu.io/upload_images/1476489-5279810825a68703.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- <b>链表</b>，离散数据排序，快速插入删除数据（插入、删除数据不改变数据位置）。单向链表只能单向检索，元素由数据和“NEXT 指针”构成，HEAD 指针标记链表的第一个元素。双向链表元素由数据，PREV、NEXT 指针构成，可向前向后检索数据，链表为空的状态，HEAD 指针，TAIL 指针分别存储“没有起始元素”、“没有末尾元素”的信息；\n  ![图片来源于网络](http://upload-images.jianshu.io/upload_images/1476489-6113ee58c4fc1e74.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- <b>堆栈</b>（先进后出），数据操作：入栈 → 写入数据（push）→ 出栈（POP）→ 读取数据。考虑计算机优先级或者计算机管理子程序调用的顺序时用到；\n  ![图片来源于网络](http://upload-images.jianshu.io/upload_images/1476489-21be1fcb8546bd49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- <b>队列</b>（先进先出），应用在电文发放和接收中；\n  ![图片来源于网络](http://upload-images.jianshu.io/upload_images/1476489-0789fc904f456296.gif?imageMogr2/auto-orient/strip)\n\n- <b>树</b>，管理父节点数据和子节点数据，二叉树一个父节点对用两个子节点，可以用数组来表示二叉树；\n  ![图片来源于手机拍摄](http://upload-images.jianshu.io/upload_images/1476489-a812b66052043bd4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  ![图片来源于手机拍摄](http://upload-images.jianshu.io/upload_images/1476489-061f5d3516622b9b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  ![图片来源于手机拍摄](http://upload-images.jianshu.io/upload_images/1476489-f43abcb33e47957a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 图，自由的表示各种关系的数据。图的分类：有向图（边有方向性）、加权图（边有权重）；\n  ![图片来源于手机拍摄](http://upload-images.jianshu.io/upload_images/1476489-ea65bbf1f9b3b98b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 四、算法基础\n\n1.  循环处理和控制变量\n\n- 循环处理：利用一个控制变量来管理循环次数，从而进行必要次数的处理；\n- 循环处理的步骤：\n  - 设置控制变量的初始值；\n  - 判断循环条件，如果为 true，进行以下 3,4,步，否则为 false，终止处理；\n  - 执行循环体；\n  - 改变控制变量，回到步骤 2；\n- 利用循环处理使处理过程通用化；\n  <b>案例：</b>\n  计算 1~N 的整数的总和。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-233c00b2f31f8e76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-4ea54b8cba9d8db1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 使用数组可以高效的处理大量数据\n  <b>案例：</b>\n  求斐波那契数列。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-b0f7928c9e70b00c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-aae2fafe110aeb4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 数组求和\n  <b>案例：</b>\n  计算一年的营业额。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-ca431aa7a661a3fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-2498e2f8f6979555.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 求平均值\n  <b>案例：</b>\n  求班级考试的平均分。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-a288f74be53c16ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-a4ea9bb73708cdf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 求数组数据中的最大值\n  <b>案例：</b>\n  求最高分。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-5934e850b29830b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-393b1a7d9a9bc418.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 求数据中的最小值\n  <b>案例：</b>\n  求最低分。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-7d3483e3bd32591a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-a49e301d22d84669.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 为数组元素排序\n  <b>案例：</b>\n  为考试成绩排名。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-2d67aeb495cc806e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-34838194b6e477e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 二维数组操作\n  <b>案例</b>\n  求全班学生不同科目考试合计总分。\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-bfadc73a743b91f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-b4681f4285738dc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n- 求两个数的最大公约数\n  <b>案例：</b>\n  辗转相除法\n  算法：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-460179a152a07806.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n  JavaScript 代码：\n  ![](http://upload-images.jianshu.io/upload_images/1476489-3fc4fb3e5c8ebb16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### 排序算法\n\n1. 几种常用的排序算法\n   - 桶排序\n     概念：\n     准备与待排序数据取值范围大小个数的木桶，利用这些木桶对数据进行保存、排序。\n     排序过程：\n     （1）准备好木桶数据，把其所有元素初始化为 0；\n     （2）把保存排序数组（n 个数据）的下标的变量 i 初始化为 0；\n     （3）i 小于 n 时，循环执行 4~5；\n     （4）把 data[i]代入变量 value；\n     （5）bucket[value]加 1；\n     （6）i 加 1；\n     （7）从 bucket 的起始元素开始，把每个数值非 0 的元素的下标按照数值（出现次数）取出来，排成一列。\n   - 选择排序\n     概念：\n     遍历数据，把数据中的最大值（或最小值）与起始（或者末尾）数据进行交换。\n     排序过程：\n     （1）从“待排序部分”中找到最小值；\n     （2）把最小值和“待排序部分起始位置的元素”交换；\n     （3）“待排序部分”的起始位置向后移动一位；\n     （4）循环操作 1~3，直至“待排序部分”只剩下一个元素。\n   - 冒泡排序\n     对比相邻的两个数据，根据大小关系调整两个数据的顺序。\n   - 插入排序\n     把目标数据按照正确的大小排列顺序插入相应的位置中。\n   - 归并排序\n     把目标数据分割成更小的部分进行排序，更小的部分正确排序之后再合并起来。\n   - 希尔排序\n     把目标数据按照一定的个数分成几个区域进行插入排序。\n   - 快速排序  \n     从目标数据中任意选取一个数据，以这个数据的值为分割点，把目标数据分割为两部分。这样循环操作下去进行排序。\n\n#### 搜索算法\n\n1. 常用的搜索算法：\n\n- 线性搜索（随机排布的数据列中使用，效率比较低）；\n- 二分搜索（已经排好序的数据列中使用，效率较高）；\n- 利用哈希表进行搜索（高效搜索）；\n- 简单字符串搜索（有长度的数据）；\n- 利用 KMP 算法 进行字符串搜索；\n- 利用 BM 算法进行字符串搜索。\n","slug":"写给大家看的算法书笔记","published":1,"updated":"2019-05-19T05:28:40.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguao005u8ex0asevmvr1","content":"<h4 id=\"一、什么是算法\"><a href=\"#一、什么是算法\" class=\"headerlink\" title=\"一、什么是算法\"></a>一、什么是算法</h4><ol>\n<li>算法是对特定问题的解决步骤（对信息进行排序、搜索目标信息等）；</li>\n</ol>\n<ul>\n<li>算法 → 更优质的算法 → 好的程序；</li>\n<li>算法的两个必要条件：</li>\n<li>准确性，证明方法——断言；</li>\n<li><p>可停止性（死循环不能看做算法）；</p>\n</li>\n<li><p>几种重要的算法：</p>\n</li>\n<li>数论算法：<ul>\n<li>求解最大公约数的辗转相除法；</li>\n<li>求解联立方程的高斯消元法；</li>\n<li>求解定积分近似值的梯形公式;</li>\n<li>计算质数的艾拉斯托尼筛法;</li>\n</ul>\n</li>\n<li>排序算法(按序排列)：<ul>\n<li>选择排序；</li>\n<li>冒泡排序；</li>\n<li>插入排序；</li>\n<li>希尔排序;</li>\n<li>归并排序;</li>\n<li>快速排序；</li>\n</ul>\n</li>\n<li>搜索算法：（比较求同）<ul>\n<li>线性搜索；</li>\n<li>二分搜索；</li>\n</ul>\n</li>\n<li><p>字符串匹配算法：</p>\n<ul>\n<li>简单字符串搜索；</li>\n<li>KMP 算法；</li>\n<li>BM 算法；</li>\n</ul>\n</li>\n<li><p>结构化编程思想：旨在高效描述程序，最大限度减少设计误差的方法论，其中的处理流程结构组合包括：</p>\n</li>\n<li>顺序结构：按顺序处理；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-9f036b6001ef4e07.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于网络\"></li>\n<li><p>选择结构：按条件处理；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-68f37dd7d235e531.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于网络\"></p>\n</li>\n<li><p>循环结构：条件成立下，进行定量循环处理；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-a41112c31c533ab9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于网络\"></p>\n</li>\n</ul>\n<h4 id=\"二、-变量和数组\"><a href=\"#二、-变量和数组\" class=\"headerlink\" title=\"二、 变量和数组\"></a>二、 变量和数组</h4><ol>\n<li>算法由数据和处理构成；</li>\n</ol>\n<ul>\n<li>基本数据类型：<ul>\n<li>整数；</li>\n<li>浮点数；</li>\n<li>字符；</li>\n<li>布尔值；</li>\n<li>字符串；</li>\n</ul>\n</li>\n<li>描述数据信息的方法是数据值；</li>\n<li>变量是存放数据值的容器，变量的作用是使处理过程通用化，每个变量只能存放一个数据，变量名是区分不同变量的标记，变量名要能表示所装载的数据；</li>\n<li>把数据赋值给变量的过程叫代入；</li>\n<li>数组是用来保存大量同一数据类型值的，数组索引，即数组元素的位置标号，可以利用数组进行关联数据的处理；</li>\n<li>二维数组，数组元素沿横纵方向排列；</li>\n</ul>\n<h4 id=\"三、数据结构——高效的管理大量数据的构造\"><a href=\"#三、数据结构——高效的管理大量数据的构造\" class=\"headerlink\" title=\"三、数据结构——高效的管理大量数据的构造\"></a>三、数据结构——高效的管理大量数据的构造</h4><ol>\n<li>常用的数据结构：</li>\n</ol>\n<ul>\n<li><p><b>数组</b>，快速定位第 N 个数据；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-5279810825a68703.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于手机拍摄\"></p>\n</li>\n<li><p><b>链表</b>，离散数据排序，快速插入删除数据（插入、删除数据不改变数据位置）。单向链表只能单向检索，元素由数据和“NEXT 指针”构成，HEAD 指针标记链表的第一个元素。双向链表元素由数据，PREV、NEXT 指针构成，可向前向后检索数据，链表为空的状态，HEAD 指针，TAIL 指针分别存储“没有起始元素”、“没有末尾元素”的信息；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-6113ee58c4fc1e74.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于网络\"></p>\n</li>\n<li><p><b>堆栈</b>（先进后出），数据操作：入栈 → 写入数据（push）→ 出栈（POP）→ 读取数据。考虑计算机优先级或者计算机管理子程序调用的顺序时用到；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-21be1fcb8546bd49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于网络\"></p>\n</li>\n<li><p><b>队列</b>（先进先出），应用在电文发放和接收中；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-0789fc904f456296.gif?imageMogr2/auto-orient/strip\" alt=\"图片来源于网络\"></p>\n</li>\n<li><p><b>树</b>，管理父节点数据和子节点数据，二叉树一个父节点对用两个子节点，可以用数组来表示二叉树；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-a812b66052043bd4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于手机拍摄\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-061f5d3516622b9b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于手机拍摄\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-f43abcb33e47957a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于手机拍摄\"></p>\n</li>\n<li><p>图，自由的表示各种关系的数据。图的分类：有向图（边有方向性）、加权图（边有权重）；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-ea65bbf1f9b3b98b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于手机拍摄\"></p>\n</li>\n</ul>\n<h4 id=\"四、算法基础\"><a href=\"#四、算法基础\" class=\"headerlink\" title=\"四、算法基础\"></a>四、算法基础</h4><ol>\n<li>循环处理和控制变量</li>\n</ol>\n<ul>\n<li>循环处理：利用一个控制变量来管理循环次数，从而进行必要次数的处理；</li>\n<li>循环处理的步骤：<ul>\n<li>设置控制变量的初始值；</li>\n<li>判断循环条件，如果为 true，进行以下 3,4,步，否则为 false，终止处理；</li>\n<li>执行循环体；</li>\n<li>改变控制变量，回到步骤 2；</li>\n</ul>\n</li>\n<li><p>利用循环处理使处理过程通用化；<br><b>案例：</b><br>计算 1~N 的整数的总和。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-233c00b2f31f8e76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-4ea54b8cba9d8db1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>使用数组可以高效的处理大量数据<br><b>案例：</b><br>求斐波那契数列。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-b0f7928c9e70b00c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-aae2fafe110aeb4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>数组求和<br><b>案例：</b><br>计算一年的营业额。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-ca431aa7a661a3fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-2498e2f8f6979555.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>求平均值<br><b>案例：</b><br>求班级考试的平均分。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-a288f74be53c16ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-a4ea9bb73708cdf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>求数组数据中的最大值<br><b>案例：</b><br>求最高分。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-5934e850b29830b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-393b1a7d9a9bc418.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>求数据中的最小值<br><b>案例：</b><br>求最低分。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-7d3483e3bd32591a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-a49e301d22d84669.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>为数组元素排序<br><b>案例：</b><br>为考试成绩排名。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-2d67aeb495cc806e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-34838194b6e477e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>二维数组操作<br><b>案例</b><br>求全班学生不同科目考试合计总分。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-bfadc73a743b91f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-b4681f4285738dc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>求两个数的最大公约数<br><b>案例：</b><br>辗转相除法<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-460179a152a07806.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-3fc4fb3e5c8ebb16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n</ul>\n<h4 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h4><ol>\n<li>几种常用的排序算法<ul>\n<li>桶排序<br>概念：<br>准备与待排序数据取值范围大小个数的木桶，利用这些木桶对数据进行保存、排序。<br>排序过程：<br>（1）准备好木桶数据，把其所有元素初始化为 0；<br>（2）把保存排序数组（n 个数据）的下标的变量 i 初始化为 0；<br>（3）i 小于 n 时，循环执行 4~5；<br>（4）把 data[i]代入变量 value；<br>（5）bucket[value]加 1；<br>（6）i 加 1；<br>（7）从 bucket 的起始元素开始，把每个数值非 0 的元素的下标按照数值（出现次数）取出来，排成一列。</li>\n<li>选择排序<br>概念：<br>遍历数据，把数据中的最大值（或最小值）与起始（或者末尾）数据进行交换。<br>排序过程：<br>（1）从“待排序部分”中找到最小值；<br>（2）把最小值和“待排序部分起始位置的元素”交换；<br>（3）“待排序部分”的起始位置向后移动一位；<br>（4）循环操作 1~3，直至“待排序部分”只剩下一个元素。</li>\n<li>冒泡排序<br>对比相邻的两个数据，根据大小关系调整两个数据的顺序。</li>\n<li>插入排序<br>把目标数据按照正确的大小排列顺序插入相应的位置中。</li>\n<li>归并排序<br>把目标数据分割成更小的部分进行排序，更小的部分正确排序之后再合并起来。</li>\n<li>希尔排序<br>把目标数据按照一定的个数分成几个区域进行插入排序。</li>\n<li>快速排序<br>从目标数据中任意选取一个数据，以这个数据的值为分割点，把目标数据分割为两部分。这样循环操作下去进行排序。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"搜索算法\"><a href=\"#搜索算法\" class=\"headerlink\" title=\"搜索算法\"></a>搜索算法</h4><ol>\n<li>常用的搜索算法：</li>\n</ol>\n<ul>\n<li>线性搜索（随机排布的数据列中使用，效率比较低）；</li>\n<li>二分搜索（已经排好序的数据列中使用，效率较高）；</li>\n<li>利用哈希表进行搜索（高效搜索）；</li>\n<li>简单字符串搜索（有长度的数据）；</li>\n<li>利用 KMP 算法 进行字符串搜索；</li>\n<li>利用 BM 算法进行字符串搜索。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、什么是算法\"><a href=\"#一、什么是算法\" class=\"headerlink\" title=\"一、什么是算法\"></a>一、什么是算法</h4><ol>\n<li>算法是对特定问题的解决步骤（对信息进行排序、搜索目标信息等）；</li>\n</ol>\n<ul>\n<li>算法 → 更优质的算法 → 好的程序；</li>\n<li>算法的两个必要条件：</li>\n<li>准确性，证明方法——断言；</li>\n<li><p>可停止性（死循环不能看做算法）；</p>\n</li>\n<li><p>几种重要的算法：</p>\n</li>\n<li>数论算法：<ul>\n<li>求解最大公约数的辗转相除法；</li>\n<li>求解联立方程的高斯消元法；</li>\n<li>求解定积分近似值的梯形公式;</li>\n<li>计算质数的艾拉斯托尼筛法;</li>\n</ul>\n</li>\n<li>排序算法(按序排列)：<ul>\n<li>选择排序；</li>\n<li>冒泡排序；</li>\n<li>插入排序；</li>\n<li>希尔排序;</li>\n<li>归并排序;</li>\n<li>快速排序；</li>\n</ul>\n</li>\n<li>搜索算法：（比较求同）<ul>\n<li>线性搜索；</li>\n<li>二分搜索；</li>\n</ul>\n</li>\n<li><p>字符串匹配算法：</p>\n<ul>\n<li>简单字符串搜索；</li>\n<li>KMP 算法；</li>\n<li>BM 算法；</li>\n</ul>\n</li>\n<li><p>结构化编程思想：旨在高效描述程序，最大限度减少设计误差的方法论，其中的处理流程结构组合包括：</p>\n</li>\n<li>顺序结构：按顺序处理；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-9f036b6001ef4e07.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于网络\"></li>\n<li><p>选择结构：按条件处理；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-68f37dd7d235e531.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于网络\"></p>\n</li>\n<li><p>循环结构：条件成立下，进行定量循环处理；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-a41112c31c533ab9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于网络\"></p>\n</li>\n</ul>\n<h4 id=\"二、-变量和数组\"><a href=\"#二、-变量和数组\" class=\"headerlink\" title=\"二、 变量和数组\"></a>二、 变量和数组</h4><ol>\n<li>算法由数据和处理构成；</li>\n</ol>\n<ul>\n<li>基本数据类型：<ul>\n<li>整数；</li>\n<li>浮点数；</li>\n<li>字符；</li>\n<li>布尔值；</li>\n<li>字符串；</li>\n</ul>\n</li>\n<li>描述数据信息的方法是数据值；</li>\n<li>变量是存放数据值的容器，变量的作用是使处理过程通用化，每个变量只能存放一个数据，变量名是区分不同变量的标记，变量名要能表示所装载的数据；</li>\n<li>把数据赋值给变量的过程叫代入；</li>\n<li>数组是用来保存大量同一数据类型值的，数组索引，即数组元素的位置标号，可以利用数组进行关联数据的处理；</li>\n<li>二维数组，数组元素沿横纵方向排列；</li>\n</ul>\n<h4 id=\"三、数据结构——高效的管理大量数据的构造\"><a href=\"#三、数据结构——高效的管理大量数据的构造\" class=\"headerlink\" title=\"三、数据结构——高效的管理大量数据的构造\"></a>三、数据结构——高效的管理大量数据的构造</h4><ol>\n<li>常用的数据结构：</li>\n</ol>\n<ul>\n<li><p><b>数组</b>，快速定位第 N 个数据；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-5279810825a68703.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于手机拍摄\"></p>\n</li>\n<li><p><b>链表</b>，离散数据排序，快速插入删除数据（插入、删除数据不改变数据位置）。单向链表只能单向检索，元素由数据和“NEXT 指针”构成，HEAD 指针标记链表的第一个元素。双向链表元素由数据，PREV、NEXT 指针构成，可向前向后检索数据，链表为空的状态，HEAD 指针，TAIL 指针分别存储“没有起始元素”、“没有末尾元素”的信息；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-6113ee58c4fc1e74.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于网络\"></p>\n</li>\n<li><p><b>堆栈</b>（先进后出），数据操作：入栈 → 写入数据（push）→ 出栈（POP）→ 读取数据。考虑计算机优先级或者计算机管理子程序调用的顺序时用到；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-21be1fcb8546bd49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于网络\"></p>\n</li>\n<li><p><b>队列</b>（先进先出），应用在电文发放和接收中；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-0789fc904f456296.gif?imageMogr2/auto-orient/strip\" alt=\"图片来源于网络\"></p>\n</li>\n<li><p><b>树</b>，管理父节点数据和子节点数据，二叉树一个父节点对用两个子节点，可以用数组来表示二叉树；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-a812b66052043bd4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于手机拍摄\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-061f5d3516622b9b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于手机拍摄\"><br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-f43abcb33e47957a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于手机拍摄\"></p>\n</li>\n<li><p>图，自由的表示各种关系的数据。图的分类：有向图（边有方向性）、加权图（边有权重）；<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-ea65bbf1f9b3b98b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"图片来源于手机拍摄\"></p>\n</li>\n</ul>\n<h4 id=\"四、算法基础\"><a href=\"#四、算法基础\" class=\"headerlink\" title=\"四、算法基础\"></a>四、算法基础</h4><ol>\n<li>循环处理和控制变量</li>\n</ol>\n<ul>\n<li>循环处理：利用一个控制变量来管理循环次数，从而进行必要次数的处理；</li>\n<li>循环处理的步骤：<ul>\n<li>设置控制变量的初始值；</li>\n<li>判断循环条件，如果为 true，进行以下 3,4,步，否则为 false，终止处理；</li>\n<li>执行循环体；</li>\n<li>改变控制变量，回到步骤 2；</li>\n</ul>\n</li>\n<li><p>利用循环处理使处理过程通用化；<br><b>案例：</b><br>计算 1~N 的整数的总和。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-233c00b2f31f8e76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-4ea54b8cba9d8db1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>使用数组可以高效的处理大量数据<br><b>案例：</b><br>求斐波那契数列。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-b0f7928c9e70b00c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-aae2fafe110aeb4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>数组求和<br><b>案例：</b><br>计算一年的营业额。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-ca431aa7a661a3fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-2498e2f8f6979555.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>求平均值<br><b>案例：</b><br>求班级考试的平均分。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-a288f74be53c16ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-a4ea9bb73708cdf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>求数组数据中的最大值<br><b>案例：</b><br>求最高分。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-5934e850b29830b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-393b1a7d9a9bc418.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>求数据中的最小值<br><b>案例：</b><br>求最低分。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-7d3483e3bd32591a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-a49e301d22d84669.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>为数组元素排序<br><b>案例：</b><br>为考试成绩排名。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-2d67aeb495cc806e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-34838194b6e477e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>二维数组操作<br><b>案例</b><br>求全班学生不同科目考试合计总分。<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-bfadc73a743b91f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-b4681f4285738dc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n<li><p>求两个数的最大公约数<br><b>案例：</b><br>辗转相除法<br>算法：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-460179a152a07806.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt><br>JavaScript 代码：<br><img src=\"http://upload-images.jianshu.io/upload_images/1476489-3fc4fb3e5c8ebb16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt></p>\n</li>\n</ul>\n<h4 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h4><ol>\n<li>几种常用的排序算法<ul>\n<li>桶排序<br>概念：<br>准备与待排序数据取值范围大小个数的木桶，利用这些木桶对数据进行保存、排序。<br>排序过程：<br>（1）准备好木桶数据，把其所有元素初始化为 0；<br>（2）把保存排序数组（n 个数据）的下标的变量 i 初始化为 0；<br>（3）i 小于 n 时，循环执行 4~5；<br>（4）把 data[i]代入变量 value；<br>（5）bucket[value]加 1；<br>（6）i 加 1；<br>（7）从 bucket 的起始元素开始，把每个数值非 0 的元素的下标按照数值（出现次数）取出来，排成一列。</li>\n<li>选择排序<br>概念：<br>遍历数据，把数据中的最大值（或最小值）与起始（或者末尾）数据进行交换。<br>排序过程：<br>（1）从“待排序部分”中找到最小值；<br>（2）把最小值和“待排序部分起始位置的元素”交换；<br>（3）“待排序部分”的起始位置向后移动一位；<br>（4）循环操作 1~3，直至“待排序部分”只剩下一个元素。</li>\n<li>冒泡排序<br>对比相邻的两个数据，根据大小关系调整两个数据的顺序。</li>\n<li>插入排序<br>把目标数据按照正确的大小排列顺序插入相应的位置中。</li>\n<li>归并排序<br>把目标数据分割成更小的部分进行排序，更小的部分正确排序之后再合并起来。</li>\n<li>希尔排序<br>把目标数据按照一定的个数分成几个区域进行插入排序。</li>\n<li>快速排序<br>从目标数据中任意选取一个数据，以这个数据的值为分割点，把目标数据分割为两部分。这样循环操作下去进行排序。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"搜索算法\"><a href=\"#搜索算法\" class=\"headerlink\" title=\"搜索算法\"></a>搜索算法</h4><ol>\n<li>常用的搜索算法：</li>\n</ol>\n<ul>\n<li>线性搜索（随机排布的数据列中使用，效率比较低）；</li>\n<li>二分搜索（已经排好序的数据列中使用，效率较高）；</li>\n<li>利用哈希表进行搜索（高效搜索）；</li>\n<li>简单字符串搜索（有长度的数据）；</li>\n<li>利用 KMP 算法 进行字符串搜索；</li>\n<li>利用 BM 算法进行字符串搜索。</li>\n</ul>\n"},{"title":"前端绘制图形验证码","comments":1,"date":"2019-02-13T01:02:40.000Z","_content":"\n摘要：\n本文主要实现了一下功能：1、图形验证码由验证码、干扰线、干扰点组合而成；2、验证码由数字和字母随机组合形成；3、每次切换验证码，验证码字体颜色和背景颜色变化\n\n一、实现思路\n\n1. 生成一个随机色，用于切换验证码时控制字体颜色和背景颜色\n\n2. 生成一个随机数，用于改变颜色的 rgb 值和绘制干扰线与干扰点\n\n3. 生成一个由数字和字母组合而成的随机码\n\n4. 将随机数、干扰线、干扰点绘制在 canvas 画布上\n\n5. 由于图形验证码是会刷新的，所以下一次刷新的时候要确保画布是空的，才不会出现上一次绘制的图形，因此，要在绘制图形之前，清空画布\n\n6. 验证：通过对比输入的值和生成的随机码，验证是否输入正确\n\n二、示例\n\n```js\nlet code;\n\n// 生成一个随机色\nfunction randomColor(min, max) {\n  let r = randomNum(min, max);\n  let g = randomNum(min, max);\n  let b = randomNum(min, max);\n  return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n}\n\n// 生成一个随机数\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n// 生成随机码\nfunction createCode() {\n  code = \"\";\n  //验证码的长度\n  let codeLength = 4;\n  const checkCode = document.getElementById(\"myCanvas\");\n  const codeChars = [];\n  // 验证码所需数字和字母的集合\n  for (let i = 0; i < 26; i++) {\n    if (i < 10) {\n      codeChars.push(String.fromCharCode(i + 48));\n    }\n    codeChars.push(String.fromCharCode(i + 97));\n    codeChars.push(String.fromCharCode(i + 65));\n  }\n  // 组合数字和字母\n  for (let i = 0; i < codeLength; i++) {\n    let charNum = Math.floor(Math.random() * 52);\n    code += codeChars[charNum];\n  }\n  if (checkCode) {\n    drawVerify(checkCode, code);\n  }\n}\n\n// 绘制验证码图形\nfunction drawVerify(cEle, value) {\n  const [ctx, width, height] = [cEle.getContext(\"2d\"), cEle.width, cEle.height];\n\n  // 清空画布\n  ctx.clearRect(0, 0, width, height);\n  // 绘制背景色\n  ctx.fillStyle = randomColor(180, 240);\n  ctx.fillRect(0, 0, width, height);\n  // 填充字体\n  ctx.font = \"30px Arial\";\n  ctx.fillStyle = randomColor(50, 160);\n  ctx.fillText(value, 20, 40);\n  // 绘制干扰线\n  for (var i = 0; i < 2; i++) {\n    ctx.strokeStyle = randomColor(40, 180);\n    ctx.beginPath();\n    ctx.moveTo(randomNum(0, width), randomNum(0, height));\n    ctx.lineTo(randomNum(0, width), randomNum(0, height));\n    ctx.stroke();\n  }\n  // 绘制干扰点\n  for (var i = 0; i < 30; i++) {\n    ctx.fillStyle = randomColor(0, 255);\n    ctx.beginPath();\n    ctx.arc(randomNum(0, width), randomNum(0, height), 1, 0, 2 * Math.PI);\n    ctx.fill();\n  }\n}\n// 验证\nfunction validateCode() {\n  const [inputCode, warnToast] = [\n    document.getElementById(\"inputCode\").value,\n    document.getElementById(\"warnToast\")\n  ];\n\n  if (inputCode.length <= 0) {\n    warnToast.innerHTML = \"请输入验证码！\";\n  } else if (inputCode.toUpperCase() != code.toUpperCase()) {\n    warnToast.innerHTML = \"验证码错误\";\n    createCode();\n  } else {\n    warnToast.innerHTML = \"验证码正确！\";\n  }\n}\n```\n","source":"_posts/前端绘制图形验证码.md","raw":"---\ntitle: 前端绘制图形验证码\ncomments: true\ndate: 2019-02-13 09:02:40\ncategories: web\ntags: css\n---\n\n摘要：\n本文主要实现了一下功能：1、图形验证码由验证码、干扰线、干扰点组合而成；2、验证码由数字和字母随机组合形成；3、每次切换验证码，验证码字体颜色和背景颜色变化\n\n一、实现思路\n\n1. 生成一个随机色，用于切换验证码时控制字体颜色和背景颜色\n\n2. 生成一个随机数，用于改变颜色的 rgb 值和绘制干扰线与干扰点\n\n3. 生成一个由数字和字母组合而成的随机码\n\n4. 将随机数、干扰线、干扰点绘制在 canvas 画布上\n\n5. 由于图形验证码是会刷新的，所以下一次刷新的时候要确保画布是空的，才不会出现上一次绘制的图形，因此，要在绘制图形之前，清空画布\n\n6. 验证：通过对比输入的值和生成的随机码，验证是否输入正确\n\n二、示例\n\n```js\nlet code;\n\n// 生成一个随机色\nfunction randomColor(min, max) {\n  let r = randomNum(min, max);\n  let g = randomNum(min, max);\n  let b = randomNum(min, max);\n  return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n}\n\n// 生成一个随机数\nfunction randomNum(min, max) {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n// 生成随机码\nfunction createCode() {\n  code = \"\";\n  //验证码的长度\n  let codeLength = 4;\n  const checkCode = document.getElementById(\"myCanvas\");\n  const codeChars = [];\n  // 验证码所需数字和字母的集合\n  for (let i = 0; i < 26; i++) {\n    if (i < 10) {\n      codeChars.push(String.fromCharCode(i + 48));\n    }\n    codeChars.push(String.fromCharCode(i + 97));\n    codeChars.push(String.fromCharCode(i + 65));\n  }\n  // 组合数字和字母\n  for (let i = 0; i < codeLength; i++) {\n    let charNum = Math.floor(Math.random() * 52);\n    code += codeChars[charNum];\n  }\n  if (checkCode) {\n    drawVerify(checkCode, code);\n  }\n}\n\n// 绘制验证码图形\nfunction drawVerify(cEle, value) {\n  const [ctx, width, height] = [cEle.getContext(\"2d\"), cEle.width, cEle.height];\n\n  // 清空画布\n  ctx.clearRect(0, 0, width, height);\n  // 绘制背景色\n  ctx.fillStyle = randomColor(180, 240);\n  ctx.fillRect(0, 0, width, height);\n  // 填充字体\n  ctx.font = \"30px Arial\";\n  ctx.fillStyle = randomColor(50, 160);\n  ctx.fillText(value, 20, 40);\n  // 绘制干扰线\n  for (var i = 0; i < 2; i++) {\n    ctx.strokeStyle = randomColor(40, 180);\n    ctx.beginPath();\n    ctx.moveTo(randomNum(0, width), randomNum(0, height));\n    ctx.lineTo(randomNum(0, width), randomNum(0, height));\n    ctx.stroke();\n  }\n  // 绘制干扰点\n  for (var i = 0; i < 30; i++) {\n    ctx.fillStyle = randomColor(0, 255);\n    ctx.beginPath();\n    ctx.arc(randomNum(0, width), randomNum(0, height), 1, 0, 2 * Math.PI);\n    ctx.fill();\n  }\n}\n// 验证\nfunction validateCode() {\n  const [inputCode, warnToast] = [\n    document.getElementById(\"inputCode\").value,\n    document.getElementById(\"warnToast\")\n  ];\n\n  if (inputCode.length <= 0) {\n    warnToast.innerHTML = \"请输入验证码！\";\n  } else if (inputCode.toUpperCase() != code.toUpperCase()) {\n    warnToast.innerHTML = \"验证码错误\";\n    createCode();\n  } else {\n    warnToast.innerHTML = \"验证码正确！\";\n  }\n}\n```\n","slug":"前端绘制图形验证码","published":1,"updated":"2019-11-01T01:23:39.418Z","layout":"post","photos":[],"link":"","_id":"ck5dbguap005y8ex0u9m44psv","content":"<p>摘要：<br>本文主要实现了一下功能：1、图形验证码由验证码、干扰线、干扰点组合而成；2、验证码由数字和字母随机组合形成；3、每次切换验证码，验证码字体颜色和背景颜色变化</p>\n<p>一、实现思路</p>\n<ol>\n<li><p>生成一个随机色，用于切换验证码时控制字体颜色和背景颜色</p>\n</li>\n<li><p>生成一个随机数，用于改变颜色的 rgb 值和绘制干扰线与干扰点</p>\n</li>\n<li><p>生成一个由数字和字母组合而成的随机码</p>\n</li>\n<li><p>将随机数、干扰线、干扰点绘制在 canvas 画布上</p>\n</li>\n<li><p>由于图形验证码是会刷新的，所以下一次刷新的时候要确保画布是空的，才不会出现上一次绘制的图形，因此，要在绘制图形之前，清空画布</p>\n</li>\n<li><p>验证：通过对比输入的值和生成的随机码，验证是否输入正确</p>\n</li>\n</ol>\n<p>二、示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> code;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成一个随机色</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randomColor</span>(<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> r = randomNum(min, max);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> g = randomNum(min, max);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = randomNum(min, max);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"rgb(\"</span> + r + <span class=\"string\">\",\"</span> + g + <span class=\"string\">\",\"</span> + b + <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成一个随机数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randomNum</span>(<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min) + min);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 生成随机码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCode</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  code = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">//验证码的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> codeLength = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> checkCode = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myCanvas\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> codeChars = [];</span><br><span class=\"line\">  <span class=\"comment\">// 验证码所需数字和字母的集合</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      codeChars.push(<span class=\"built_in\">String</span>.fromCharCode(i + <span class=\"number\">48</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    codeChars.push(<span class=\"built_in\">String</span>.fromCharCode(i + <span class=\"number\">97</span>));</span><br><span class=\"line\">    codeChars.push(<span class=\"built_in\">String</span>.fromCharCode(i + <span class=\"number\">65</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 组合数字和字母</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; codeLength; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> charNum = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">52</span>);</span><br><span class=\"line\">    code += codeChars[charNum];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (checkCode) &#123;</span><br><span class=\"line\">    drawVerify(checkCode, code);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绘制验证码图形</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawVerify</span>(<span class=\"params\">cEle, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [ctx, width, height] = [cEle.getContext(<span class=\"string\">\"2d\"</span>), cEle.width, cEle.height];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清空画布</span></span><br><span class=\"line\">  ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">  <span class=\"comment\">// 绘制背景色</span></span><br><span class=\"line\">  ctx.fillStyle = randomColor(<span class=\"number\">180</span>, <span class=\"number\">240</span>);</span><br><span class=\"line\">  ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">  <span class=\"comment\">// 填充字体</span></span><br><span class=\"line\">  ctx.font = <span class=\"string\">\"30px Arial\"</span>;</span><br><span class=\"line\">  ctx.fillStyle = randomColor(<span class=\"number\">50</span>, <span class=\"number\">160</span>);</span><br><span class=\"line\">  ctx.fillText(value, <span class=\"number\">20</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 绘制干扰线</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    ctx.strokeStyle = randomColor(<span class=\"number\">40</span>, <span class=\"number\">180</span>);</span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.moveTo(randomNum(<span class=\"number\">0</span>, width), randomNum(<span class=\"number\">0</span>, height));</span><br><span class=\"line\">    ctx.lineTo(randomNum(<span class=\"number\">0</span>, width), randomNum(<span class=\"number\">0</span>, height));</span><br><span class=\"line\">    ctx.stroke();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 绘制干扰点</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">    ctx.fillStyle = randomColor(<span class=\"number\">0</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.arc(randomNum(<span class=\"number\">0</span>, width), randomNum(<span class=\"number\">0</span>, height), <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI);</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 验证</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateCode</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [inputCode, warnToast] = [</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"inputCode\"</span>).value,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"warnToast\"</span>)</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (inputCode.length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    warnToast.innerHTML = <span class=\"string\">\"请输入验证码！\"</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (inputCode.toUpperCase() != code.toUpperCase()) &#123;</span><br><span class=\"line\">    warnToast.innerHTML = <span class=\"string\">\"验证码错误\"</span>;</span><br><span class=\"line\">    createCode();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    warnToast.innerHTML = <span class=\"string\">\"验证码正确！\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>摘要：<br>本文主要实现了一下功能：1、图形验证码由验证码、干扰线、干扰点组合而成；2、验证码由数字和字母随机组合形成；3、每次切换验证码，验证码字体颜色和背景颜色变化</p>\n<p>一、实现思路</p>\n<ol>\n<li><p>生成一个随机色，用于切换验证码时控制字体颜色和背景颜色</p>\n</li>\n<li><p>生成一个随机数，用于改变颜色的 rgb 值和绘制干扰线与干扰点</p>\n</li>\n<li><p>生成一个由数字和字母组合而成的随机码</p>\n</li>\n<li><p>将随机数、干扰线、干扰点绘制在 canvas 画布上</p>\n</li>\n<li><p>由于图形验证码是会刷新的，所以下一次刷新的时候要确保画布是空的，才不会出现上一次绘制的图形，因此，要在绘制图形之前，清空画布</p>\n</li>\n<li><p>验证：通过对比输入的值和生成的随机码，验证是否输入正确</p>\n</li>\n</ol>\n<p>二、示例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> code;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成一个随机色</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randomColor</span>(<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> r = randomNum(min, max);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> g = randomNum(min, max);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = randomNum(min, max);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"rgb(\"</span> + r + <span class=\"string\">\",\"</span> + g + <span class=\"string\">\",\"</span> + b + <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成一个随机数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randomNum</span>(<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min) + min);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 生成随机码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCode</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  code = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"comment\">//验证码的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> codeLength = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> checkCode = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"myCanvas\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> codeChars = [];</span><br><span class=\"line\">  <span class=\"comment\">// 验证码所需数字和字母的集合</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">      codeChars.push(<span class=\"built_in\">String</span>.fromCharCode(i + <span class=\"number\">48</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    codeChars.push(<span class=\"built_in\">String</span>.fromCharCode(i + <span class=\"number\">97</span>));</span><br><span class=\"line\">    codeChars.push(<span class=\"built_in\">String</span>.fromCharCode(i + <span class=\"number\">65</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 组合数字和字母</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; codeLength; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> charNum = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">52</span>);</span><br><span class=\"line\">    code += codeChars[charNum];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (checkCode) &#123;</span><br><span class=\"line\">    drawVerify(checkCode, code);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 绘制验证码图形</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawVerify</span>(<span class=\"params\">cEle, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [ctx, width, height] = [cEle.getContext(<span class=\"string\">\"2d\"</span>), cEle.width, cEle.height];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 清空画布</span></span><br><span class=\"line\">  ctx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">  <span class=\"comment\">// 绘制背景色</span></span><br><span class=\"line\">  ctx.fillStyle = randomColor(<span class=\"number\">180</span>, <span class=\"number\">240</span>);</span><br><span class=\"line\">  ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">  <span class=\"comment\">// 填充字体</span></span><br><span class=\"line\">  ctx.font = <span class=\"string\">\"30px Arial\"</span>;</span><br><span class=\"line\">  ctx.fillStyle = randomColor(<span class=\"number\">50</span>, <span class=\"number\">160</span>);</span><br><span class=\"line\">  ctx.fillText(value, <span class=\"number\">20</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 绘制干扰线</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    ctx.strokeStyle = randomColor(<span class=\"number\">40</span>, <span class=\"number\">180</span>);</span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.moveTo(randomNum(<span class=\"number\">0</span>, width), randomNum(<span class=\"number\">0</span>, height));</span><br><span class=\"line\">    ctx.lineTo(randomNum(<span class=\"number\">0</span>, width), randomNum(<span class=\"number\">0</span>, height));</span><br><span class=\"line\">    ctx.stroke();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 绘制干扰点</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">    ctx.fillStyle = randomColor(<span class=\"number\">0</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\">    ctx.beginPath();</span><br><span class=\"line\">    ctx.arc(randomNum(<span class=\"number\">0</span>, width), randomNum(<span class=\"number\">0</span>, height), <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI);</span><br><span class=\"line\">    ctx.fill();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 验证</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateCode</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [inputCode, warnToast] = [</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"inputCode\"</span>).value,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"warnToast\"</span>)</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (inputCode.length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    warnToast.innerHTML = <span class=\"string\">\"请输入验证码！\"</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (inputCode.toUpperCase() != code.toUpperCase()) &#123;</span><br><span class=\"line\">    warnToast.innerHTML = <span class=\"string\">\"验证码错误\"</span>;</span><br><span class=\"line\">    createCode();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    warnToast.innerHTML = <span class=\"string\">\"验证码正确！\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"初始化可伸缩数组","comments":1,"date":"2019-06-30T06:18:34.000Z","_content":"\n## Demo\n\n```js\nlet len = 5;\n\n// method1\nlet arr = Array(len)\n  .fill(null)\n  .map((v, i) => String.fromCharCode(65 + i));\n// method2\nlet arr = Array.apply(null, { length: len }).map((v, i) => String.fromCharCode(65 + i));\n\nconsole.log(arr); //[ 'A', 'B', 'C', 'D', 'E' ]\n```\n","source":"_posts/初始化可伸缩数组.md","raw":"---\ntitle: 初始化可伸缩数组\ncomments: true\ndate: 2019-06-30 14:18:34\ncategories: web\ntags: js\n---\n\n## Demo\n\n```js\nlet len = 5;\n\n// method1\nlet arr = Array(len)\n  .fill(null)\n  .map((v, i) => String.fromCharCode(65 + i));\n// method2\nlet arr = Array.apply(null, { length: len }).map((v, i) => String.fromCharCode(65 + i));\n\nconsole.log(arr); //[ 'A', 'B', 'C', 'D', 'E' ]\n```\n","slug":"初始化可伸缩数组","published":1,"updated":"2019-06-30T06:19:06.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguaq00618ex0ti6l4o9p","content":"<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> len = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>(len)</span><br><span class=\"line\">  .fill(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  .map(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> <span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">65</span> + i));</span><br><span class=\"line\"><span class=\"comment\">// method2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">length</span>: len &#125;).map(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> <span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">65</span> + i));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[ 'A', 'B', 'C', 'D', 'E' ]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> len = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>(len)</span><br><span class=\"line\">  .fill(<span class=\"literal\">null</span>)</span><br><span class=\"line\">  .map(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> <span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">65</span> + i));</span><br><span class=\"line\"><span class=\"comment\">// method2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"built_in\">Array</span>.apply(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">length</span>: len &#125;).map(<span class=\"function\">(<span class=\"params\">v, i</span>) =&gt;</span> <span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">65</span> + i));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">//[ 'A', 'B', 'C', 'D', 'E' ]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"反转整数","comments":1,"date":"2019-09-08T06:31:18.000Z","_content":"```python\n# 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n# 示例 1:\n# 输入: 123\n# 输出: 321\n\n#  示例 2:\n# 输入: -123\n# 输出: -321\n\n# 示例 3:\n# 输入: 120\n# 输出: 21\n# 注意:\n\n# 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231, 231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n# 来源：力扣（LeetCode）\n# 链接：https: // leetcode-cn.com/problems/reverse-integer\n\nclass Solution:\n    def reverse(self, x):\n        INT_MAX = 2**31\n        INT_MIN = -2**31\n        cur = 0\n        while x != 0:\n            if (x < 0):\n                pop = int(x % -10)\n            else:\n                pop = int(x % 10)\n            if cur > INT_MAX / 10 or (cur == INT_MAX / 10 and pop > 7):\n                return 0\n            if cur < INT_MIN / 10 or (cur == INT_MIN / 10 and pop < -8):\n                return 0\n            cur = cur * 10 + pop\n            x = int(x/10)\n        return cur\n\n    def _init_(self):\n        print(res.reverse(-123))\n        return self.reverse(-123)\n\nres = Solution()\nres._init_()\n```\n\n从个位开始从高到低重新排位，最后得到的就是当前整数倒过来的数字\n","source":"_posts/反转整数.md","raw":"---\ntitle: 反转整数\ncomments: true\ndate: 2019-09-08 14:31:18\ncategories: 算法\ntags: algorithmn-simple\n---\n```python\n# 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n\n# 示例 1:\n# 输入: 123\n# 输出: 321\n\n#  示例 2:\n# 输入: -123\n# 输出: -321\n\n# 示例 3:\n# 输入: 120\n# 输出: 21\n# 注意:\n\n# 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231, 231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。\n\n# 来源：力扣（LeetCode）\n# 链接：https: // leetcode-cn.com/problems/reverse-integer\n\nclass Solution:\n    def reverse(self, x):\n        INT_MAX = 2**31\n        INT_MIN = -2**31\n        cur = 0\n        while x != 0:\n            if (x < 0):\n                pop = int(x % -10)\n            else:\n                pop = int(x % 10)\n            if cur > INT_MAX / 10 or (cur == INT_MAX / 10 and pop > 7):\n                return 0\n            if cur < INT_MIN / 10 or (cur == INT_MIN / 10 and pop < -8):\n                return 0\n            cur = cur * 10 + pop\n            x = int(x/10)\n        return cur\n\n    def _init_(self):\n        print(res.reverse(-123))\n        return self.reverse(-123)\n\nres = Solution()\nres._init_()\n```\n\n从个位开始从高到低重新排位，最后得到的就是当前整数倒过来的数字\n","slug":"反转整数","published":1,"updated":"2019-09-08T06:33:00.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguar00658ex0k59ox2d2","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 1:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: 123</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: 321</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  示例 2:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: -123</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: -321</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 3:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: 120</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: 21</span></span><br><span class=\"line\"><span class=\"comment\"># 注意:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231, 231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 来源：力扣（LeetCode）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接：https: // leetcode-cn.com/problems/reverse-integer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        INT_MAX = <span class=\"number\">2</span>**<span class=\"number\">31</span></span><br><span class=\"line\">        INT_MIN = <span class=\"number\">-2</span>**<span class=\"number\">31</span></span><br><span class=\"line\">        cur = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> x != <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>):</span><br><span class=\"line\">                pop = int(x % <span class=\"number\">-10</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                pop = int(x % <span class=\"number\">10</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur &gt; INT_MAX / <span class=\"number\">10</span> <span class=\"keyword\">or</span> (cur == INT_MAX / <span class=\"number\">10</span> <span class=\"keyword\">and</span> pop &gt; <span class=\"number\">7</span>):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur &lt; INT_MIN / <span class=\"number\">10</span> <span class=\"keyword\">or</span> (cur == INT_MIN / <span class=\"number\">10</span> <span class=\"keyword\">and</span> pop &lt; <span class=\"number\">-8</span>):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            cur = cur * <span class=\"number\">10</span> + pop</span><br><span class=\"line\">            x = int(x/<span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_init_</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(res.reverse(<span class=\"number\">-123</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.reverse(<span class=\"number\">-123</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">res = Solution()</span><br><span class=\"line\">res._init_()</span><br></pre></td></tr></table></figure>\n<p>从个位开始从高到低重新排位，最后得到的就是当前整数倒过来的数字</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 1:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: 123</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: 321</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#  示例 2:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: -123</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: -321</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 3:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: 120</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: 21</span></span><br><span class=\"line\"><span class=\"comment\"># 注意:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231, 231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 来源：力扣（LeetCode）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接：https: // leetcode-cn.com/problems/reverse-integer</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reverse</span><span class=\"params\">(self, x)</span>:</span></span><br><span class=\"line\">        INT_MAX = <span class=\"number\">2</span>**<span class=\"number\">31</span></span><br><span class=\"line\">        INT_MIN = <span class=\"number\">-2</span>**<span class=\"number\">31</span></span><br><span class=\"line\">        cur = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> x != <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>):</span><br><span class=\"line\">                pop = int(x % <span class=\"number\">-10</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                pop = int(x % <span class=\"number\">10</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur &gt; INT_MAX / <span class=\"number\">10</span> <span class=\"keyword\">or</span> (cur == INT_MAX / <span class=\"number\">10</span> <span class=\"keyword\">and</span> pop &gt; <span class=\"number\">7</span>):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> cur &lt; INT_MIN / <span class=\"number\">10</span> <span class=\"keyword\">or</span> (cur == INT_MIN / <span class=\"number\">10</span> <span class=\"keyword\">and</span> pop &lt; <span class=\"number\">-8</span>):</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            cur = cur * <span class=\"number\">10</span> + pop</span><br><span class=\"line\">            x = int(x/<span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_init_</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(res.reverse(<span class=\"number\">-123</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.reverse(<span class=\"number\">-123</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">res = Solution()</span><br><span class=\"line\">res._init_()</span><br></pre></td></tr></table></figure>\n<p>从个位开始从高到低重新排位，最后得到的就是当前整数倒过来的数字</p>\n"},{"title":"Fork 同步源代码","comments":1,"date":"2018-09-09T03:11:30.000Z","_content":"\n1. 查看远程分支状态：`git remote -v`\n\n2. 确定一个将被同步给 fork 远程的上游仓库：`git remote add upstream <origin.git>`\n\n3. 再次查看状态确认是否配置成功：`git remote -v`\n\n4. 从上游仓库 fetch 分支和提交点，提交给本地 master： `git fetch upstream`\n\n5. 把 upstream/master 分支合并到本地 master 上：`git merge upstream/master`\n","source":"_posts/同步源代码.md","raw":"---\ntitle: fork 同步源代码\ncomments: true\ndate: 2018-09-09 11:11:30\ncategories: 项目管理\ntags: git\n---\n\n1. 查看远程分支状态：`git remote -v`\n\n2. 确定一个将被同步给 fork 远程的上游仓库：`git remote add upstream <origin.git>`\n\n3. 再次查看状态确认是否配置成功：`git remote -v`\n\n4. 从上游仓库 fetch 分支和提交点，提交给本地 master： `git fetch upstream`\n\n5. 把 upstream/master 分支合并到本地 master 上：`git merge upstream/master`\n","slug":"同步源代码","published":1,"updated":"2019-05-19T05:30:34.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguas00688ex0ocj4bby7","content":"<ol>\n<li><p>查看远程分支状态：<code>git remote -v</code></p>\n</li>\n<li><p>确定一个将被同步给 fork 远程的上游仓库：<code>git remote add upstream &lt;origin.git&gt;</code></p>\n</li>\n<li><p>再次查看状态确认是否配置成功：<code>git remote -v</code></p>\n</li>\n<li><p>从上游仓库 fetch 分支和提交点，提交给本地 master： <code>git fetch upstream</code></p>\n</li>\n<li><p>把 upstream/master 分支合并到本地 master 上：<code>git merge upstream/master</code></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>查看远程分支状态：<code>git remote -v</code></p>\n</li>\n<li><p>确定一个将被同步给 fork 远程的上游仓库：<code>git remote add upstream &lt;origin.git&gt;</code></p>\n</li>\n<li><p>再次查看状态确认是否配置成功：<code>git remote -v</code></p>\n</li>\n<li><p>从上游仓库 fetch 分支和提交点，提交给本地 master： <code>git fetch upstream</code></p>\n</li>\n<li><p>把 upstream/master 分支合并到本地 master 上：<code>git merge upstream/master</code></p>\n</li>\n</ol>\n"},{"title":"四个JS小技巧","comments":1,"date":"2019-07-16T15:12:58.000Z","_content":"\n## 一、尽早结束\n\n```javascript\nfunction transformData(rawData) {\n  // check if no data\n  if (!rawData) {\n    return [];\n  }\n\n  // check for specific case\n  if (rawData.length == 1) {\n    return [];\n  }\n\n  // actual function code goes here\n  return rawData.map(item => item);\n}\n```\n\n这种写法的好处：\n\n- 考虑到了无效值和边界的情况，并且很好的规避了它们\n- 代码简洁\n- 后期维护起来比较方便\n- 一旦接受了这种代码风格，你会更加重视发挥函数的作用并且对代码至上而下的执行过程会更加明了\n\n## 二、使用对象而不是 switch\n\n```javascript\n// Switch\nlet createType = null;\nswitch (contentType) {\n  case 'post':\n    createType = () => console.log('creating a post...');\n    break;\n  case 'video':\n    createType = () => console.log('creating a video...');\n    break;\n  default:\n    createType = () => console.log('unrecognized content type');\n}\n\ncreateType();\n\n// Object literal\nconst contentTypes = {\n  post: () => console.log('creating a post...'),\n  video: () => console.log('creatinga  video...'),\n  default: () => console.log('unrecognized content type'),\n};\n\nconst createType = contentTypes[contentType] || contentTypes['default'];\ncreateType();\n```\n\n这种写法的好处：\n\n- 不必担心没写 case 或者 break\n- 简洁易懂\n- 对象比 switch 代码块容易写\n- 代码量更少\n\n## 三、语义化变量，而不是使用 x, y, z 这些变量\n\n```javascript\n// bad\nconst foo = y && z;\n\n// good\nconst isPostEnabled = isPost && postDateValid;\n```\n\n## 四、 尽量使用三元表达式代替简单的 if········else······\n\n```javascript\nlet result = null;\nif (conditionA) {\n  if (conditionB) {\n    result = 'A & B';\n  } else {\n    result = 'A';\n  }\n} else {\n  result = 'Not A';\n}\n\nconst result = !conditionA ? 'Not A' : conditionB ? 'A & B' : 'A';\n```\n","source":"_posts/四个JS小技巧.md","raw":"---\ntitle: 四个JS小技巧\ncomments: true\ndate: 2019-07-16 23:12:58\ncategories: web\ntags: js\n---\n\n## 一、尽早结束\n\n```javascript\nfunction transformData(rawData) {\n  // check if no data\n  if (!rawData) {\n    return [];\n  }\n\n  // check for specific case\n  if (rawData.length == 1) {\n    return [];\n  }\n\n  // actual function code goes here\n  return rawData.map(item => item);\n}\n```\n\n这种写法的好处：\n\n- 考虑到了无效值和边界的情况，并且很好的规避了它们\n- 代码简洁\n- 后期维护起来比较方便\n- 一旦接受了这种代码风格，你会更加重视发挥函数的作用并且对代码至上而下的执行过程会更加明了\n\n## 二、使用对象而不是 switch\n\n```javascript\n// Switch\nlet createType = null;\nswitch (contentType) {\n  case 'post':\n    createType = () => console.log('creating a post...');\n    break;\n  case 'video':\n    createType = () => console.log('creating a video...');\n    break;\n  default:\n    createType = () => console.log('unrecognized content type');\n}\n\ncreateType();\n\n// Object literal\nconst contentTypes = {\n  post: () => console.log('creating a post...'),\n  video: () => console.log('creatinga  video...'),\n  default: () => console.log('unrecognized content type'),\n};\n\nconst createType = contentTypes[contentType] || contentTypes['default'];\ncreateType();\n```\n\n这种写法的好处：\n\n- 不必担心没写 case 或者 break\n- 简洁易懂\n- 对象比 switch 代码块容易写\n- 代码量更少\n\n## 三、语义化变量，而不是使用 x, y, z 这些变量\n\n```javascript\n// bad\nconst foo = y && z;\n\n// good\nconst isPostEnabled = isPost && postDateValid;\n```\n\n## 四、 尽量使用三元表达式代替简单的 if········else······\n\n```javascript\nlet result = null;\nif (conditionA) {\n  if (conditionB) {\n    result = 'A & B';\n  } else {\n    result = 'A';\n  }\n} else {\n  result = 'Not A';\n}\n\nconst result = !conditionA ? 'Not A' : conditionB ? 'A & B' : 'A';\n```\n","slug":"四个JS小技巧","published":1,"updated":"2019-07-16T15:18:46.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguas006c8ex0s1wmzdx0","content":"<h2 id=\"一、尽早结束\"><a href=\"#一、尽早结束\" class=\"headerlink\" title=\"一、尽早结束\"></a>一、尽早结束</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformData</span>(<span class=\"params\">rawData</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// check if no data</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!rawData) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// check for specific case</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (rawData.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// actual function code goes here</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> rawData.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种写法的好处：</p>\n<ul>\n<li>考虑到了无效值和边界的情况，并且很好的规避了它们</li>\n<li>代码简洁</li>\n<li>后期维护起来比较方便</li>\n<li>一旦接受了这种代码风格，你会更加重视发挥函数的作用并且对代码至上而下的执行过程会更加明了</li>\n</ul>\n<h2 id=\"二、使用对象而不是-switch\"><a href=\"#二、使用对象而不是-switch\" class=\"headerlink\" title=\"二、使用对象而不是 switch\"></a>二、使用对象而不是 switch</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Switch</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createType = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (contentType) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'post'</span>:</span><br><span class=\"line\">    createType = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'creating a post...'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'video'</span>:</span><br><span class=\"line\">    createType = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'creating a video...'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    createType = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'unrecognized content type'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createType();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object literal</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> contentTypes = &#123;</span><br><span class=\"line\">  post: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'creating a post...'</span>),</span><br><span class=\"line\">  video: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'creatinga  video...'</span>),</span><br><span class=\"line\">  <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'unrecognized content type'</span>),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> createType = contentTypes[contentType] || contentTypes[<span class=\"string\">'default'</span>];</span><br><span class=\"line\">createType();</span><br></pre></td></tr></table></figure>\n<p>这种写法的好处：</p>\n<ul>\n<li>不必担心没写 case 或者 break</li>\n<li>简洁易懂</li>\n<li>对象比 switch 代码块容易写</li>\n<li>代码量更少</li>\n</ul>\n<h2 id=\"三、语义化变量，而不是使用-x-y-z-这些变量\"><a href=\"#三、语义化变量，而不是使用-x-y-z-这些变量\" class=\"headerlink\" title=\"三、语义化变量，而不是使用 x, y, z 这些变量\"></a>三、语义化变量，而不是使用 x, y, z 这些变量</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = y &amp;&amp; z;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPostEnabled = isPost &amp;&amp; postDateValid;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、-尽量使用三元表达式代替简单的-if········else······\"><a href=\"#四、-尽量使用三元表达式代替简单的-if········else······\" class=\"headerlink\" title=\"四、 尽量使用三元表达式代替简单的 if········else······\"></a>四、 尽量使用三元表达式代替简单的 if········else······</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (conditionA) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (conditionB) &#123;</span><br><span class=\"line\">    result = <span class=\"string\">'A &amp; B'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    result = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  result = <span class=\"string\">'Not A'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = !conditionA ? <span class=\"string\">'Not A'</span> : conditionB ? <span class=\"string\">'A &amp; B'</span> : <span class=\"string\">'A'</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、尽早结束\"><a href=\"#一、尽早结束\" class=\"headerlink\" title=\"一、尽早结束\"></a>一、尽早结束</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">transformData</span>(<span class=\"params\">rawData</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// check if no data</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!rawData) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// check for specific case</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (rawData.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// actual function code goes here</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> rawData.map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种写法的好处：</p>\n<ul>\n<li>考虑到了无效值和边界的情况，并且很好的规避了它们</li>\n<li>代码简洁</li>\n<li>后期维护起来比较方便</li>\n<li>一旦接受了这种代码风格，你会更加重视发挥函数的作用并且对代码至上而下的执行过程会更加明了</li>\n</ul>\n<h2 id=\"二、使用对象而不是-switch\"><a href=\"#二、使用对象而不是-switch\" class=\"headerlink\" title=\"二、使用对象而不是 switch\"></a>二、使用对象而不是 switch</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Switch</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createType = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (contentType) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'post'</span>:</span><br><span class=\"line\">    createType = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'creating a post...'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'video'</span>:</span><br><span class=\"line\">    createType = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'creating a video...'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    createType = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'unrecognized content type'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createType();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object literal</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> contentTypes = &#123;</span><br><span class=\"line\">  post: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'creating a post...'</span>),</span><br><span class=\"line\">  video: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'creatinga  video...'</span>),</span><br><span class=\"line\">  <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'unrecognized content type'</span>),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> createType = contentTypes[contentType] || contentTypes[<span class=\"string\">'default'</span>];</span><br><span class=\"line\">createType();</span><br></pre></td></tr></table></figure>\n<p>这种写法的好处：</p>\n<ul>\n<li>不必担心没写 case 或者 break</li>\n<li>简洁易懂</li>\n<li>对象比 switch 代码块容易写</li>\n<li>代码量更少</li>\n</ul>\n<h2 id=\"三、语义化变量，而不是使用-x-y-z-这些变量\"><a href=\"#三、语义化变量，而不是使用-x-y-z-这些变量\" class=\"headerlink\" title=\"三、语义化变量，而不是使用 x, y, z 这些变量\"></a>三、语义化变量，而不是使用 x, y, z 这些变量</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bad</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> foo = y &amp;&amp; z;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isPostEnabled = isPost &amp;&amp; postDateValid;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、-尽量使用三元表达式代替简单的-if········else······\"><a href=\"#四、-尽量使用三元表达式代替简单的-if········else······\" class=\"headerlink\" title=\"四、 尽量使用三元表达式代替简单的 if········else······\"></a>四、 尽量使用三元表达式代替简单的 if········else······</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (conditionA) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (conditionB) &#123;</span><br><span class=\"line\">    result = <span class=\"string\">'A &amp; B'</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    result = <span class=\"string\">'A'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  result = <span class=\"string\">'Not A'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = !conditionA ? <span class=\"string\">'Not A'</span> : conditionB ? <span class=\"string\">'A &amp; B'</span> : <span class=\"string\">'A'</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"天使之恋","date":"2018-05-20T09:00:11.000Z","_content":"天使之恋，是一部日本的爱情电影。电影主要讲述的是失足女高中生由里与得了脑肿瘤又不愿意做手术准备等死的光辉大叔的纯纯的爱情故事。其实，选择继续看这部电影，是因为一开头给了一个镜头，是在医院中，光辉大叔刚从检查室出来，遇到由里和她妈妈，并且插肩而过，当时就在想，这样医院中毫不相干的两个人怎么把他们联系起来呢？后来看到由里跟一个老人家在一起，以为她做了人家的小三，应该跟在医院邂逅的那个大叔无关，可是这个画面也给了大叔一个镜头。再后一点，看到由里跟一个女的在床上接吻，心想，可能由里是一个双性恋者。就是跟着这一个个线索，最后我才看到了这部电影的最深情节，17岁的高中女生与35岁的大叔的纯洁的爱情故事，非常动人。大叔即使知道由里之前做过援交女的种种劣迹，依然表示自己是真的爱由里。也许，这就是浪漫主义的剧情吧。现实中，大多数男人都表示，自己不能接受自己的女朋友有过不洁的行为，即使是自己的女朋友跟之前的男朋友有过什么，也是不能容忍的。","source":"_posts/天使之恋.md","raw":"---\ntitle: 天使之恋\ndate: 2018-05-20 17:00:11\ncategories: 随笔\ntags: 影评\n---\n天使之恋，是一部日本的爱情电影。电影主要讲述的是失足女高中生由里与得了脑肿瘤又不愿意做手术准备等死的光辉大叔的纯纯的爱情故事。其实，选择继续看这部电影，是因为一开头给了一个镜头，是在医院中，光辉大叔刚从检查室出来，遇到由里和她妈妈，并且插肩而过，当时就在想，这样医院中毫不相干的两个人怎么把他们联系起来呢？后来看到由里跟一个老人家在一起，以为她做了人家的小三，应该跟在医院邂逅的那个大叔无关，可是这个画面也给了大叔一个镜头。再后一点，看到由里跟一个女的在床上接吻，心想，可能由里是一个双性恋者。就是跟着这一个个线索，最后我才看到了这部电影的最深情节，17岁的高中女生与35岁的大叔的纯洁的爱情故事，非常动人。大叔即使知道由里之前做过援交女的种种劣迹，依然表示自己是真的爱由里。也许，这就是浪漫主义的剧情吧。现实中，大多数男人都表示，自己不能接受自己的女朋友有过不洁的行为，即使是自己的女朋友跟之前的男朋友有过什么，也是不能容忍的。","slug":"天使之恋","published":1,"updated":"2018-05-20T09:34:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dbguat006f8ex0ebokc71q","content":"<p>天使之恋，是一部日本的爱情电影。电影主要讲述的是失足女高中生由里与得了脑肿瘤又不愿意做手术准备等死的光辉大叔的纯纯的爱情故事。其实，选择继续看这部电影，是因为一开头给了一个镜头，是在医院中，光辉大叔刚从检查室出来，遇到由里和她妈妈，并且插肩而过，当时就在想，这样医院中毫不相干的两个人怎么把他们联系起来呢？后来看到由里跟一个老人家在一起，以为她做了人家的小三，应该跟在医院邂逅的那个大叔无关，可是这个画面也给了大叔一个镜头。再后一点，看到由里跟一个女的在床上接吻，心想，可能由里是一个双性恋者。就是跟着这一个个线索，最后我才看到了这部电影的最深情节，17岁的高中女生与35岁的大叔的纯洁的爱情故事，非常动人。大叔即使知道由里之前做过援交女的种种劣迹，依然表示自己是真的爱由里。也许，这就是浪漫主义的剧情吧。现实中，大多数男人都表示，自己不能接受自己的女朋友有过不洁的行为，即使是自己的女朋友跟之前的男朋友有过什么，也是不能容忍的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>天使之恋，是一部日本的爱情电影。电影主要讲述的是失足女高中生由里与得了脑肿瘤又不愿意做手术准备等死的光辉大叔的纯纯的爱情故事。其实，选择继续看这部电影，是因为一开头给了一个镜头，是在医院中，光辉大叔刚从检查室出来，遇到由里和她妈妈，并且插肩而过，当时就在想，这样医院中毫不相干的两个人怎么把他们联系起来呢？后来看到由里跟一个老人家在一起，以为她做了人家的小三，应该跟在医院邂逅的那个大叔无关，可是这个画面也给了大叔一个镜头。再后一点，看到由里跟一个女的在床上接吻，心想，可能由里是一个双性恋者。就是跟着这一个个线索，最后我才看到了这部电影的最深情节，17岁的高中女生与35岁的大叔的纯洁的爱情故事，非常动人。大叔即使知道由里之前做过援交女的种种劣迹，依然表示自己是真的爱由里。也许，这就是浪漫主义的剧情吧。现实中，大多数男人都表示，自己不能接受自己的女朋友有过不洁的行为，即使是自己的女朋友跟之前的男朋友有过什么，也是不能容忍的。</p>\n"},{"title":"回文数判断","comments":1,"date":"2019-09-08T06:33:41.000Z","_content":"```python\n# 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n\n# 示例 1:\n# 输入: 121\n# 输出: true\n\n# 示例 2:\n# 输入: -121\n# 输出: false\n# 解释: 从左向右读, 为 - 121 。 从右向左读, 为 121 - 。因此它不是一个回文数。\n\n# 示例 3:\n# 输入: 10\n# 输出: false\n# 解释: 从右向左读, 为 01 。因此它不是一个回文数。\n\n# 来源：力扣（LeetCode）\n# 链接：https: // leetcode-cn.com/problems/palindrome-number\n\n\nclass Solution:\n    def isPalindrome(self, x: int) -> bool:\n        # x 若是 0 或者负数，返回 false\n        if (x < 0 or (int(x % 10 == 0) and x != 0)):\n            return False\n        # 初始化翻转数字\n        reverse = 0\n        # 若原始数字 x 大于从后面开始翻转的数字，说明已经翻转了后半部分，翻转阶段完成\n        while (x > reverse):\n            reverse = int(reverse * 10) + int(x % 10)\n            x = int(x / 10)\n            print('x:', x)\n            print('reverse', reverse)\n        # 若翻转的后半部分数字 reverse 等于前半部分数字，返回 true，否则返回 false，利用 int 向上取整的特性，当 x 为奇数时，去掉最后一位\n        return x == reverse or x == int(reverse/10)\n\nx = Solution()\narr = [121, -121, 10]\nfor item in arr:\n    print(x.isPalindrome(item))\n```\n","source":"_posts/回文数判断.md","raw":"---\ntitle: 回文数判断\ncomments: true\ndate: 2019-09-08 14:33:41\ncategories: 算法\ntags: algorithmn-simple\n---\n```python\n# 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n\n# 示例 1:\n# 输入: 121\n# 输出: true\n\n# 示例 2:\n# 输入: -121\n# 输出: false\n# 解释: 从左向右读, 为 - 121 。 从右向左读, 为 121 - 。因此它不是一个回文数。\n\n# 示例 3:\n# 输入: 10\n# 输出: false\n# 解释: 从右向左读, 为 01 。因此它不是一个回文数。\n\n# 来源：力扣（LeetCode）\n# 链接：https: // leetcode-cn.com/problems/palindrome-number\n\n\nclass Solution:\n    def isPalindrome(self, x: int) -> bool:\n        # x 若是 0 或者负数，返回 false\n        if (x < 0 or (int(x % 10 == 0) and x != 0)):\n            return False\n        # 初始化翻转数字\n        reverse = 0\n        # 若原始数字 x 大于从后面开始翻转的数字，说明已经翻转了后半部分，翻转阶段完成\n        while (x > reverse):\n            reverse = int(reverse * 10) + int(x % 10)\n            x = int(x / 10)\n            print('x:', x)\n            print('reverse', reverse)\n        # 若翻转的后半部分数字 reverse 等于前半部分数字，返回 true，否则返回 false，利用 int 向上取整的特性，当 x 为奇数时，去掉最后一位\n        return x == reverse or x == int(reverse/10)\n\nx = Solution()\narr = [121, -121, 10]\nfor item in arr:\n    print(x.isPalindrome(item))\n```\n","slug":"回文数判断","published":1,"updated":"2019-09-08T06:34:28.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguau006j8ex0xcglbs4d","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 1:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: 121</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 2:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: -121</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: false</span></span><br><span class=\"line\"><span class=\"comment\"># 解释: 从左向右读, 为 - 121 。 从右向左读, 为 121 - 。因此它不是一个回文数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 3:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: 10</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: false</span></span><br><span class=\"line\"><span class=\"comment\"># 解释: 从右向左读, 为 01 。因此它不是一个回文数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 来源：力扣（LeetCode）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接：https: // leetcode-cn.com/problems/palindrome-number</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(self, x: int)</span> -&gt; bool:</span></span><br><span class=\"line\">        <span class=\"comment\"># x 若是 0 或者负数，返回 false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> (int(x % <span class=\"number\">10</span> == <span class=\"number\">0</span>) <span class=\"keyword\">and</span> x != <span class=\"number\">0</span>)):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"comment\"># 初始化翻转数字</span></span><br><span class=\"line\">        reverse = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 若原始数字 x 大于从后面开始翻转的数字，说明已经翻转了后半部分，翻转阶段完成</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x &gt; reverse):</span><br><span class=\"line\">            reverse = int(reverse * <span class=\"number\">10</span>) + int(x % <span class=\"number\">10</span>)</span><br><span class=\"line\">            x = int(x / <span class=\"number\">10</span>)</span><br><span class=\"line\">            print(<span class=\"string\">'x:'</span>, x)</span><br><span class=\"line\">            print(<span class=\"string\">'reverse'</span>, reverse)</span><br><span class=\"line\">        <span class=\"comment\"># 若翻转的后半部分数字 reverse 等于前半部分数字，返回 true，否则返回 false，利用 int 向上取整的特性，当 x 为奇数时，去掉最后一位</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x == reverse <span class=\"keyword\">or</span> x == int(reverse/<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x = Solution()</span><br><span class=\"line\">arr = [<span class=\"number\">121</span>, <span class=\"number\">-121</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> arr:</span><br><span class=\"line\">    print(x.isPalindrome(item))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 1:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: 121</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 2:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: -121</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: false</span></span><br><span class=\"line\"><span class=\"comment\"># 解释: 从左向右读, 为 - 121 。 从右向左读, 为 121 - 。因此它不是一个回文数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 3:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: 10</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: false</span></span><br><span class=\"line\"><span class=\"comment\"># 解释: 从右向左读, 为 01 。因此它不是一个回文数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 来源：力扣（LeetCode）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接：https: // leetcode-cn.com/problems/palindrome-number</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(self, x: int)</span> -&gt; bool:</span></span><br><span class=\"line\">        <span class=\"comment\"># x 若是 0 或者负数，返回 false</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> (int(x % <span class=\"number\">10</span> == <span class=\"number\">0</span>) <span class=\"keyword\">and</span> x != <span class=\"number\">0</span>)):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"comment\"># 初始化翻转数字</span></span><br><span class=\"line\">        reverse = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"comment\"># 若原始数字 x 大于从后面开始翻转的数字，说明已经翻转了后半部分，翻转阶段完成</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x &gt; reverse):</span><br><span class=\"line\">            reverse = int(reverse * <span class=\"number\">10</span>) + int(x % <span class=\"number\">10</span>)</span><br><span class=\"line\">            x = int(x / <span class=\"number\">10</span>)</span><br><span class=\"line\">            print(<span class=\"string\">'x:'</span>, x)</span><br><span class=\"line\">            print(<span class=\"string\">'reverse'</span>, reverse)</span><br><span class=\"line\">        <span class=\"comment\"># 若翻转的后半部分数字 reverse 等于前半部分数字，返回 true，否则返回 false，利用 int 向上取整的特性，当 x 为奇数时，去掉最后一位</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x == reverse <span class=\"keyword\">or</span> x == int(reverse/<span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x = Solution()</span><br><span class=\"line\">arr = [<span class=\"number\">121</span>, <span class=\"number\">-121</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> arr:</span><br><span class=\"line\">    print(x.isPalindrome(item))</span><br></pre></td></tr></table></figure>\n"},{"title":"寻找数组中重复元素个数的简洁方法","comments":1,"date":"2019-06-30T06:10:52.000Z","_content":"\n## 场景：\n\n有一个数组里面存了一些值 val = [1, 2, 3]，另一个数组中存的是选择这些值得集合 answer = [1, 1, 2, 3, 2, 1]，求 val 中对应每位元素在 answer 中的重复个数，并输出到对应的数组中。要求不要使用迭代等复杂的写法。\n\n## 实现：\n\n```js\nfunction findRepeat(val, answer) {\n  return val.map(num => answer.filter(n => n === num).length);\n}\nconst val = [1, 2, 3];\nconst answer = [1, 1, 2, 3, 2, 1];\n\nfindRepeat(val, answer);\n```\n","source":"_posts/寻找数组中重复元素个数的简洁方法.md","raw":"---\ntitle: 寻找数组中重复元素个数的简洁方法\ncomments: true\ndate: 2019-06-30 14:10:52\ncategories: web\ntags: js\n---\n\n## 场景：\n\n有一个数组里面存了一些值 val = [1, 2, 3]，另一个数组中存的是选择这些值得集合 answer = [1, 1, 2, 3, 2, 1]，求 val 中对应每位元素在 answer 中的重复个数，并输出到对应的数组中。要求不要使用迭代等复杂的写法。\n\n## 实现：\n\n```js\nfunction findRepeat(val, answer) {\n  return val.map(num => answer.filter(n => n === num).length);\n}\nconst val = [1, 2, 3];\nconst answer = [1, 1, 2, 3, 2, 1];\n\nfindRepeat(val, answer);\n```\n","slug":"寻找数组中重复元素个数的简洁方法","published":1,"updated":"2019-06-30T06:13:44.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguav006m8ex00jlbmd3p","content":"<h2 id=\"场景：\"><a href=\"#场景：\" class=\"headerlink\" title=\"场景：\"></a>场景：</h2><p>有一个数组里面存了一些值 val = [1, 2, 3]，另一个数组中存的是选择这些值得集合 answer = [1, 1, 2, 3, 2, 1]，求 val 中对应每位元素在 answer 中的重复个数，并输出到对应的数组中。要求不要使用迭代等复杂的写法。</p>\n<h2 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findRepeat</span>(<span class=\"params\">val, answer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val.map(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> answer.filter(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n === num).length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> val = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> answer = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">findRepeat(val, answer);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"场景：\"><a href=\"#场景：\" class=\"headerlink\" title=\"场景：\"></a>场景：</h2><p>有一个数组里面存了一些值 val = [1, 2, 3]，另一个数组中存的是选择这些值得集合 answer = [1, 1, 2, 3, 2, 1]，求 val 中对应每位元素在 answer 中的重复个数，并输出到对应的数组中。要求不要使用迭代等复杂的写法。</p>\n<h2 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">findRepeat</span>(<span class=\"params\">val, answer</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> val.map(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> answer.filter(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n === num).length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> val = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> answer = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">findRepeat(val, answer);</span><br></pre></td></tr></table></figure>\n"},{"title":"对象属性值监听","comments":1,"date":"2019-06-30T06:17:17.000Z","_content":"\n## Demo\n\n```js\nlet data = {\n  title: 'hello world!',\n};\n\nfunction definePropertyData(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    get: function() {\n      console.log(111);\n      return value;\n    },\n    set: function(newValue) {\n      value = newValue;\n    },\n  });\n}\n\ndefinePropertyData(data, 'title', data.title);\n\nconsole.log(data.title); // 111 hello world!\ndata.title = 38;\nconsole.log(data.title); // 111 38\n```\n","source":"_posts/对象属性值监听.md","raw":"---\ntitle: 对象属性值监听\ncomments: true\ndate: 2019-06-30 14:17:17\ncategories: web\ntags: js\n---\n\n## Demo\n\n```js\nlet data = {\n  title: 'hello world!',\n};\n\nfunction definePropertyData(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    get: function() {\n      console.log(111);\n      return value;\n    },\n    set: function(newValue) {\n      value = newValue;\n    },\n  });\n}\n\ndefinePropertyData(data, 'title', data.title);\n\nconsole.log(data.title); // 111 hello world!\ndata.title = 38;\nconsole.log(data.title); // 111 38\n```\n","slug":"对象属性值监听","published":1,"updated":"2019-06-30T06:18:06.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguaw006q8ex05jfdbwsw","content":"<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">  title: <span class=\"string\">'hello world!'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">definePropertyData</span>(<span class=\"params\">obj, prop, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function(newValue) &#123;</span><br><span class=\"line\">      value = newValue;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">definePropertyData(data, <span class=\"string\">'title'</span>, data.title);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.title); <span class=\"comment\">// 111 hello world!</span></span><br><span class=\"line\">data.title = <span class=\"number\">38</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.title); <span class=\"comment\">// 111 38</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">  title: <span class=\"string\">'hello world!'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">definePropertyData</span>(<span class=\"params\">obj, prop, value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span>: function() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"number\">111</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span>: function(newValue) &#123;</span><br><span class=\"line\">      value = newValue;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">definePropertyData(data, <span class=\"string\">'title'</span>, data.title);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.title); <span class=\"comment\">// 111 hello world!</span></span><br><span class=\"line\">data.title = <span class=\"number\">38</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.title); <span class=\"comment\">// 111 38</span></span><br></pre></td></tr></table></figure>\n"},{"title":"布尔变量在项目中的应用","comments":1,"date":"2018-06-08T01:54:53.000Z","_content":"\n在本次项目中，收获最大的一点应该就是学会了在项目中应用布尔变量了，以下谈谈我对布尔变量使用的一些看法。\n\n在本次项目中，有一个困扰了我许久的难题，那就是代码的逻辑问题，一开始由于各种逻辑混乱，导致插件效果不尽如人意，插件的控制效果很不理想，最后通过几个布尔变量，轻而易举的弄通了代码逻辑，也使插件很合乎我意的跑了起来，甚至还可以加以扩展。\n\n下面举个小栗子来说明布尔变量的简单使用吧：\n\n```\nhelp =  False\n\ndef getHelp():\n    help = True\n\nglobal help\nif help:\n    print('What can I do for you?)\n```\n\n从上面的例子我们可以看出，布尔变量可以很好的用来控制代码块的执行顺序，在插件中的应用则是很好的控制进入插件后的操作过程，从而实现逻辑清晰的插件。\n","source":"_posts/布尔变量在项目中的应用.md","raw":"---\ntitle: 布尔变量在项目中的应用\ncomments: true\ndate: 2018-06-08 09:54:53\ncategories: python\ntags: 经验\n---\n\n在本次项目中，收获最大的一点应该就是学会了在项目中应用布尔变量了，以下谈谈我对布尔变量使用的一些看法。\n\n在本次项目中，有一个困扰了我许久的难题，那就是代码的逻辑问题，一开始由于各种逻辑混乱，导致插件效果不尽如人意，插件的控制效果很不理想，最后通过几个布尔变量，轻而易举的弄通了代码逻辑，也使插件很合乎我意的跑了起来，甚至还可以加以扩展。\n\n下面举个小栗子来说明布尔变量的简单使用吧：\n\n```\nhelp =  False\n\ndef getHelp():\n    help = True\n\nglobal help\nif help:\n    print('What can I do for you?)\n```\n\n从上面的例子我们可以看出，布尔变量可以很好的用来控制代码块的执行顺序，在插件中的应用则是很好的控制进入插件后的操作过程，从而实现逻辑清晰的插件。\n","slug":"布尔变量在项目中的应用","published":1,"updated":"2019-05-19T06:10:52.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguaw006t8ex03tcbjr7v","content":"<p>在本次项目中，收获最大的一点应该就是学会了在项目中应用布尔变量了，以下谈谈我对布尔变量使用的一些看法。</p>\n<p>在本次项目中，有一个困扰了我许久的难题，那就是代码的逻辑问题，一开始由于各种逻辑混乱，导致插件效果不尽如人意，插件的控制效果很不理想，最后通过几个布尔变量，轻而易举的弄通了代码逻辑，也使插件很合乎我意的跑了起来，甚至还可以加以扩展。</p>\n<p>下面举个小栗子来说明布尔变量的简单使用吧：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">help</span> =  <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> getHelp():</span><br><span class=\"line\">    <span class=\"keyword\">help</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">global</span> <span class=\"keyword\">help</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">help</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'What can I do for you?)</span></span><br></pre></td></tr></table></figure>\n<p>从上面的例子我们可以看出，布尔变量可以很好的用来控制代码块的执行顺序，在插件中的应用则是很好的控制进入插件后的操作过程，从而实现逻辑清晰的插件。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在本次项目中，收获最大的一点应该就是学会了在项目中应用布尔变量了，以下谈谈我对布尔变量使用的一些看法。</p>\n<p>在本次项目中，有一个困扰了我许久的难题，那就是代码的逻辑问题，一开始由于各种逻辑混乱，导致插件效果不尽如人意，插件的控制效果很不理想，最后通过几个布尔变量，轻而易举的弄通了代码逻辑，也使插件很合乎我意的跑了起来，甚至还可以加以扩展。</p>\n<p>下面举个小栗子来说明布尔变量的简单使用吧：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">help</span> =  <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> getHelp():</span><br><span class=\"line\">    <span class=\"keyword\">help</span> = <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">global</span> <span class=\"keyword\">help</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">help</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'What can I do for you?)</span></span><br></pre></td></tr></table></figure>\n<p>从上面的例子我们可以看出，布尔变量可以很好的用来控制代码块的执行顺序，在插件中的应用则是很好的控制进入插件后的操作过程，从而实现逻辑清晰的插件。</p>\n"},{"title":"微信小程序踩坑","comments":1,"date":"2018-09-09T02:36:48.000Z","_content":"\n1. 暂时还没有转发到朋友圈的 api，可以通过 canvas 绘制图片 保存到用户相册，用户通过小程序码自行分享到朋友圈的方式实现，git 上有一个比较成熟的组件；\n\n2. 入门方式：概览官方文档，熟悉里面有哪些组件、框架、API 等，在实际项目开发中需要的时候找到相应的例子使用就好了，此外，生命周期需要详细了解，因为实际的开发中会经常涉及到；\n\n3. 微信开发工具有时会抽风，处理方式是清除缓存 => 重启；\n\n4. 在 request 之前，确保已经服务器域名配置跟 request 的域名一致，不然会报 403 错误；\n","source":"_posts/微信小程序踩坑.md","raw":"---\ntitle: 微信小程序踩坑\ncomments: true\ndate: 2018-09-09 10:36:48\ncategories: web\ntags: 小程序\n---\n\n1. 暂时还没有转发到朋友圈的 api，可以通过 canvas 绘制图片 保存到用户相册，用户通过小程序码自行分享到朋友圈的方式实现，git 上有一个比较成熟的组件；\n\n2. 入门方式：概览官方文档，熟悉里面有哪些组件、框架、API 等，在实际项目开发中需要的时候找到相应的例子使用就好了，此外，生命周期需要详细了解，因为实际的开发中会经常涉及到；\n\n3. 微信开发工具有时会抽风，处理方式是清除缓存 => 重启；\n\n4. 在 request 之前，确保已经服务器域名配置跟 request 的域名一致，不然会报 403 错误；\n","slug":"微信小程序踩坑","published":1,"updated":"2019-05-19T05:31:04.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguax006w8ex017k867ye","content":"<ol>\n<li><p>暂时还没有转发到朋友圈的 api，可以通过 canvas 绘制图片 保存到用户相册，用户通过小程序码自行分享到朋友圈的方式实现，git 上有一个比较成熟的组件；</p>\n</li>\n<li><p>入门方式：概览官方文档，熟悉里面有哪些组件、框架、API 等，在实际项目开发中需要的时候找到相应的例子使用就好了，此外，生命周期需要详细了解，因为实际的开发中会经常涉及到；</p>\n</li>\n<li><p>微信开发工具有时会抽风，处理方式是清除缓存 =&gt; 重启；</p>\n</li>\n<li><p>在 request 之前，确保已经服务器域名配置跟 request 的域名一致，不然会报 403 错误；</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>暂时还没有转发到朋友圈的 api，可以通过 canvas 绘制图片 保存到用户相册，用户通过小程序码自行分享到朋友圈的方式实现，git 上有一个比较成熟的组件；</p>\n</li>\n<li><p>入门方式：概览官方文档，熟悉里面有哪些组件、框架、API 等，在实际项目开发中需要的时候找到相应的例子使用就好了，此外，生命周期需要详细了解，因为实际的开发中会经常涉及到；</p>\n</li>\n<li><p>微信开发工具有时会抽风，处理方式是清除缓存 =&gt; 重启；</p>\n</li>\n<li><p>在 request 之前，确保已经服务器域名配置跟 request 的域名一致，不然会报 403 错误；</p>\n</li>\n</ol>\n"},{"title":"拼音学习项目笔记","comments":1,"date":"2019-03-19T01:44:46.000Z","_content":"\n1. 关于数据更新机制\n\n   （1）v-if 关闭组件的时候，会销毁数据，可以用于实现返回父组件关闭音频等媒体，如果只是界面的开关的话，用 v-show 即可\n\n   （2）离开子组件后，父组件所传递的数据需要清空，切记不要在网络请求里做清空操作，因为网络请求是有延迟的，一般放在打开子组件的事件里执行清空操作\n\n2. 关于 audio\n\n   对于不同格式的音频，audio 的播放机制不一样，对于 base64 等流媒体，audio 采用边下边播的机制，对于 MP3 等非流媒体，audio 采用下载完之后再播放的机制，所以为了播放效果更好，防止出现等待状况，最好把音频转换为流媒体的形式，下面是我写的一个 MP3 转 base64 的示例：\n\n   ```js\n   mp3ToBase64(url) {\n     const el = document.getElementById(\"voiceM\");\n     const temp = {\n       headers: {\n         \"Content-Type\": \" audio/mpeg3\"\n       },\n       responseType: \"arraybuffer\"\n     };\n     http.get(url, \"\", temp).then(res => {\n       const val = new Buffer(res.data, \"binary\").toString(\"base64\");\n       const audioUrl = `data:${res.headers[\n         \"content-type\"\n       ].toLowerCase()};base64,${val}`;\n       el.src = audioUrl;\n       el.play();\n     });\n   }\n   ```\n","source":"_posts/拼音学习项目笔记.md","raw":"---\ntitle: 拼音学习项目笔记\ncomments: true\ndate: 2019-03-19 09:44:46\ncategories: web\ntags: 经验\n---\n\n1. 关于数据更新机制\n\n   （1）v-if 关闭组件的时候，会销毁数据，可以用于实现返回父组件关闭音频等媒体，如果只是界面的开关的话，用 v-show 即可\n\n   （2）离开子组件后，父组件所传递的数据需要清空，切记不要在网络请求里做清空操作，因为网络请求是有延迟的，一般放在打开子组件的事件里执行清空操作\n\n2. 关于 audio\n\n   对于不同格式的音频，audio 的播放机制不一样，对于 base64 等流媒体，audio 采用边下边播的机制，对于 MP3 等非流媒体，audio 采用下载完之后再播放的机制，所以为了播放效果更好，防止出现等待状况，最好把音频转换为流媒体的形式，下面是我写的一个 MP3 转 base64 的示例：\n\n   ```js\n   mp3ToBase64(url) {\n     const el = document.getElementById(\"voiceM\");\n     const temp = {\n       headers: {\n         \"Content-Type\": \" audio/mpeg3\"\n       },\n       responseType: \"arraybuffer\"\n     };\n     http.get(url, \"\", temp).then(res => {\n       const val = new Buffer(res.data, \"binary\").toString(\"base64\");\n       const audioUrl = `data:${res.headers[\n         \"content-type\"\n       ].toLowerCase()};base64,${val}`;\n       el.src = audioUrl;\n       el.play();\n     });\n   }\n   ```\n","slug":"拼音学习项目笔记","published":1,"updated":"2019-05-19T05:31:14.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguay00708ex0jaq8zo6v","content":"<ol>\n<li><p>关于数据更新机制</p>\n<p>（1）v-if 关闭组件的时候，会销毁数据，可以用于实现返回父组件关闭音频等媒体，如果只是界面的开关的话，用 v-show 即可</p>\n<p>（2）离开子组件后，父组件所传递的数据需要清空，切记不要在网络请求里做清空操作，因为网络请求是有延迟的，一般放在打开子组件的事件里执行清空操作</p>\n</li>\n<li><p>关于 audio</p>\n<p>对于不同格式的音频，audio 的播放机制不一样，对于 base64 等流媒体，audio 采用边下边播的机制，对于 MP3 等非流媒体，audio 采用下载完之后再播放的机制，所以为了播放效果更好，防止出现等待状况，最好把音频转换为流媒体的形式，下面是我写的一个 MP3 转 base64 的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mp3ToBase64(url) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"voiceM\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> temp = &#123;</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\" audio/mpeg3\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    responseType: <span class=\"string\">\"arraybuffer\"</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  http.get(url, <span class=\"string\">\"\"</span>, temp).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = <span class=\"keyword\">new</span> Buffer(res.data, <span class=\"string\">\"binary\"</span>).toString(<span class=\"string\">\"base64\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> audioUrl = <span class=\"string\">`data:<span class=\"subst\">$&#123;res.headers[</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">      <span class=\"string\">\"content-type\"</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    ].toLowerCase()&#125;</span>;base64,<span class=\"subst\">$&#123;val&#125;</span>`</span>;</span><br><span class=\"line\">    el.src = audioUrl;</span><br><span class=\"line\">    el.play();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>关于数据更新机制</p>\n<p>（1）v-if 关闭组件的时候，会销毁数据，可以用于实现返回父组件关闭音频等媒体，如果只是界面的开关的话，用 v-show 即可</p>\n<p>（2）离开子组件后，父组件所传递的数据需要清空，切记不要在网络请求里做清空操作，因为网络请求是有延迟的，一般放在打开子组件的事件里执行清空操作</p>\n</li>\n<li><p>关于 audio</p>\n<p>对于不同格式的音频，audio 的播放机制不一样，对于 base64 等流媒体，audio 采用边下边播的机制，对于 MP3 等非流媒体，audio 采用下载完之后再播放的机制，所以为了播放效果更好，防止出现等待状况，最好把音频转换为流媒体的形式，下面是我写的一个 MP3 转 base64 的示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mp3ToBase64(url) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"voiceM\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> temp = &#123;</span><br><span class=\"line\">    headers: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\" audio/mpeg3\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    responseType: <span class=\"string\">\"arraybuffer\"</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  http.get(url, <span class=\"string\">\"\"</span>, temp).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> val = <span class=\"keyword\">new</span> Buffer(res.data, <span class=\"string\">\"binary\"</span>).toString(<span class=\"string\">\"base64\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> audioUrl = <span class=\"string\">`data:<span class=\"subst\">$&#123;res.headers[</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">      <span class=\"string\">\"content-type\"</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">    ].toLowerCase()&#125;</span>;base64,<span class=\"subst\">$&#123;val&#125;</span>`</span>;</span><br><span class=\"line\">    el.src = audioUrl;</span><br><span class=\"line\">    el.play();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"括号匹配","comments":1,"date":"2019-09-08T06:32:40.000Z","_content":"```python\n# 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n# 有效字符串需满足：\n# 左括号必须用相同类型的右括号闭合。\n# 左括号必须以正确的顺序闭合。\n# 注意空字符串可被认为是有效字符串。\n\n# 示例 1:\n# 输入: \"()\"\n# 输出: true\n\n# 示例 2:\n# 输入: \"()[]{}\"\n# 输出: true\n\n# 示例 3:\n# 输入: \"(]\"\n# 输出: false\n\n# 示例 4:\n# 输入: \"([)]\"\n# 输出: false\n\n# 示例 5:\n# 输入: \"{[]}\"\n# 输出: true\n\n# 来源：力扣（LeetCode）\n# 链接：https: // leetcode-cn.com/problems/valid-parentheses\n\n\nclass Solution:\n    def isValid(self, s):\n        # 简洁但是效率低\n        # while '{}' in s or '()' in s or '[]' in s:\n        #     s = s.replace('{}', '')\n        #     s = s.replace('[]', '')\n        #     s = s.replace('()', '')\n        # return s == ''\n        stack = []  # 初始化栈\n        mapping = {')': '(', ']': '[', '}': '{'}  # 字典存储所有的匹配类型\n        for char in s:  # 遍历字符串\n            if (char in mapping):  # 当前字符为闭合符号时\n                top_element = stack.pop() if stack else '#'  # 栈顶元素出栈\n                if mapping[char] != top_element:  # 没有匹配的类型，返回 false\n                    return False\n            else:\n                stack.append(char)  # 开括号存储到栈里\n        return not stack\n\n    def _init_(self):\n        return self.isValid(\"([)]\")\n\nres = Solution()\nprint(res._init_())\n```\n","source":"_posts/括号匹配.md","raw":"---\ntitle: 括号匹配\ncomments: true\ndate: 2019-09-08 14:32:40\ncategories: 算法\ntags: algorithmn-simple\n---\n```python\n# 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n\n# 有效字符串需满足：\n# 左括号必须用相同类型的右括号闭合。\n# 左括号必须以正确的顺序闭合。\n# 注意空字符串可被认为是有效字符串。\n\n# 示例 1:\n# 输入: \"()\"\n# 输出: true\n\n# 示例 2:\n# 输入: \"()[]{}\"\n# 输出: true\n\n# 示例 3:\n# 输入: \"(]\"\n# 输出: false\n\n# 示例 4:\n# 输入: \"([)]\"\n# 输出: false\n\n# 示例 5:\n# 输入: \"{[]}\"\n# 输出: true\n\n# 来源：力扣（LeetCode）\n# 链接：https: // leetcode-cn.com/problems/valid-parentheses\n\n\nclass Solution:\n    def isValid(self, s):\n        # 简洁但是效率低\n        # while '{}' in s or '()' in s or '[]' in s:\n        #     s = s.replace('{}', '')\n        #     s = s.replace('[]', '')\n        #     s = s.replace('()', '')\n        # return s == ''\n        stack = []  # 初始化栈\n        mapping = {')': '(', ']': '[', '}': '{'}  # 字典存储所有的匹配类型\n        for char in s:  # 遍历字符串\n            if (char in mapping):  # 当前字符为闭合符号时\n                top_element = stack.pop() if stack else '#'  # 栈顶元素出栈\n                if mapping[char] != top_element:  # 没有匹配的类型，返回 false\n                    return False\n            else:\n                stack.append(char)  # 开括号存储到栈里\n        return not stack\n\n    def _init_(self):\n        return self.isValid(\"([)]\")\n\nres = Solution()\nprint(res._init_())\n```\n","slug":"括号匹配","published":1,"updated":"2019-09-08T06:33:26.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbguaz00738ex0r623dn9j","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 给定一个只包括 '('，')'，'&#123;'，'&#125;'，'['，']' 的字符串，判断字符串是否有效。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有效字符串需满足：</span></span><br><span class=\"line\"><span class=\"comment\"># 左括号必须用相同类型的右括号闭合。</span></span><br><span class=\"line\"><span class=\"comment\"># 左括号必须以正确的顺序闭合。</span></span><br><span class=\"line\"><span class=\"comment\"># 注意空字符串可被认为是有效字符串。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 1:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: \"()\"</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 2:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: \"()[]&#123;&#125;\"</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 3:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: \"(]\"</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 4:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: \"([)]\"</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 5:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: \"&#123;[]&#125;\"</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 来源：力扣（LeetCode）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接：https: // leetcode-cn.com/problems/valid-parentheses</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isValid</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 简洁但是效率低</span></span><br><span class=\"line\">        <span class=\"comment\"># while '&#123;&#125;' in s or '()' in s or '[]' in s:</span></span><br><span class=\"line\">        <span class=\"comment\">#     s = s.replace('&#123;&#125;', '')</span></span><br><span class=\"line\">        <span class=\"comment\">#     s = s.replace('[]', '')</span></span><br><span class=\"line\">        <span class=\"comment\">#     s = s.replace('()', '')</span></span><br><span class=\"line\">        <span class=\"comment\"># return s == ''</span></span><br><span class=\"line\">        stack = []  <span class=\"comment\"># 初始化栈</span></span><br><span class=\"line\">        mapping = &#123;<span class=\"string\">')'</span>: <span class=\"string\">'('</span>, <span class=\"string\">']'</span>: <span class=\"string\">'['</span>, <span class=\"string\">'&#125;'</span>: <span class=\"string\">'&#123;'</span>&#125;  <span class=\"comment\"># 字典存储所有的匹配类型</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:  <span class=\"comment\"># 遍历字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (char <span class=\"keyword\">in</span> mapping):  <span class=\"comment\"># 当前字符为闭合符号时</span></span><br><span class=\"line\">                top_element = stack.pop() <span class=\"keyword\">if</span> stack <span class=\"keyword\">else</span> <span class=\"string\">'#'</span>  <span class=\"comment\"># 栈顶元素出栈</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> mapping[char] != top_element:  <span class=\"comment\"># 没有匹配的类型，返回 false</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                stack.append(char)  <span class=\"comment\"># 开括号存储到栈里</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> stack</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_init_</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.isValid(<span class=\"string\">\"([)]\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">res = Solution()</span><br><span class=\"line\">print(res._init_())</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 给定一个只包括 '('，')'，'&#123;'，'&#125;'，'['，']' 的字符串，判断字符串是否有效。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 有效字符串需满足：</span></span><br><span class=\"line\"><span class=\"comment\"># 左括号必须用相同类型的右括号闭合。</span></span><br><span class=\"line\"><span class=\"comment\"># 左括号必须以正确的顺序闭合。</span></span><br><span class=\"line\"><span class=\"comment\"># 注意空字符串可被认为是有效字符串。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 1:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: \"()\"</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 2:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: \"()[]&#123;&#125;\"</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 3:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: \"(]\"</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 4:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: \"([)]\"</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例 5:</span></span><br><span class=\"line\"><span class=\"comment\"># 输入: \"&#123;[]&#125;\"</span></span><br><span class=\"line\"><span class=\"comment\"># 输出: true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 来源：力扣（LeetCode）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接：https: // leetcode-cn.com/problems/valid-parentheses</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isValid</span><span class=\"params\">(self, s)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 简洁但是效率低</span></span><br><span class=\"line\">        <span class=\"comment\"># while '&#123;&#125;' in s or '()' in s or '[]' in s:</span></span><br><span class=\"line\">        <span class=\"comment\">#     s = s.replace('&#123;&#125;', '')</span></span><br><span class=\"line\">        <span class=\"comment\">#     s = s.replace('[]', '')</span></span><br><span class=\"line\">        <span class=\"comment\">#     s = s.replace('()', '')</span></span><br><span class=\"line\">        <span class=\"comment\"># return s == ''</span></span><br><span class=\"line\">        stack = []  <span class=\"comment\"># 初始化栈</span></span><br><span class=\"line\">        mapping = &#123;<span class=\"string\">')'</span>: <span class=\"string\">'('</span>, <span class=\"string\">']'</span>: <span class=\"string\">'['</span>, <span class=\"string\">'&#125;'</span>: <span class=\"string\">'&#123;'</span>&#125;  <span class=\"comment\"># 字典存储所有的匹配类型</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> char <span class=\"keyword\">in</span> s:  <span class=\"comment\"># 遍历字符串</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (char <span class=\"keyword\">in</span> mapping):  <span class=\"comment\"># 当前字符为闭合符号时</span></span><br><span class=\"line\">                top_element = stack.pop() <span class=\"keyword\">if</span> stack <span class=\"keyword\">else</span> <span class=\"string\">'#'</span>  <span class=\"comment\"># 栈顶元素出栈</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> mapping[char] != top_element:  <span class=\"comment\"># 没有匹配的类型，返回 false</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                stack.append(char)  <span class=\"comment\"># 开括号存储到栈里</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">not</span> stack</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_init_</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.isValid(<span class=\"string\">\"([)]\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">res = Solution()</span><br><span class=\"line\">print(res._init_())</span><br></pre></td></tr></table></figure>\n"},{"title":"找出数组中相加等于目标值的两个元素下标","comments":1,"date":"2019-09-08T06:27:13.000Z","_content":"```python\n# 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n# 示例:\n# 给定 nums = [2, 7, 11, 15], target = 9\n# 因为 nums[0] + nums[1] = 2 + 7 = 9\n# 所以返回 [0, 1]\n\n# 来源：力扣（LeetCode）\n# 链接：https://leetcode-cn.com/problems/two-sum\n\nclass Solution:\n    def twoSum(self, nums, target):\n        hashmap = {}\n        for i, val in enumerate(nums):\n            complement = target - val\n            if complement in hashmap:\n                return [hashmap[complement], i]\n            hashmap[val] = i\n    def _init_(self):\n       return self.twoSum([2, 7, 11, 15], 22)\n\nx = Solution()\nprint(x))\n```\n\n遍历列表，目标值与当前元素相减得到符合条件的元素，查找字典，如果存在符合条件的键，返回值，否则把该元素作为键，索引作为值存到字典里，重复以上步骤，直到找到对应的两个元素，返回索引列表\n","source":"_posts/找出数组中相加等于目标值的两个元素下标.md","raw":"---\ntitle: 找出数组中相加等于目标值的两个元素下标\ncomments: true\ndate: 2019-09-08 14:27:13\ncategories: 算法\ntags: algorithmn-simple\n---\n```python\n# 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n# 示例:\n# 给定 nums = [2, 7, 11, 15], target = 9\n# 因为 nums[0] + nums[1] = 2 + 7 = 9\n# 所以返回 [0, 1]\n\n# 来源：力扣（LeetCode）\n# 链接：https://leetcode-cn.com/problems/two-sum\n\nclass Solution:\n    def twoSum(self, nums, target):\n        hashmap = {}\n        for i, val in enumerate(nums):\n            complement = target - val\n            if complement in hashmap:\n                return [hashmap[complement], i]\n            hashmap[val] = i\n    def _init_(self):\n       return self.twoSum([2, 7, 11, 15], 22)\n\nx = Solution()\nprint(x))\n```\n\n遍历列表，目标值与当前元素相减得到符合条件的元素，查找字典，如果存在符合条件的键，返回值，否则把该元素作为键，索引作为值存到字典里，重复以上步骤，直到找到对应的两个元素，返回索引列表\n","slug":"找出数组中相加等于目标值的两个元素下标","published":1,"updated":"2019-09-08T06:31:50.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgub000768ex0c7rgutvb","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例:</span></span><br><span class=\"line\"><span class=\"comment\"># 给定 nums = [2, 7, 11, 15], target = 9</span></span><br><span class=\"line\"><span class=\"comment\"># 因为 nums[0] + nums[1] = 2 + 7 = 9</span></span><br><span class=\"line\"><span class=\"comment\"># 所以返回 [0, 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 来源：力扣（LeetCode）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接：https://leetcode-cn.com/problems/two-sum</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">twoSum</span><span class=\"params\">(self, nums, target)</span>:</span></span><br><span class=\"line\">        hashmap = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, val <span class=\"keyword\">in</span> enumerate(nums):</span><br><span class=\"line\">            complement = target - val</span><br><span class=\"line\">            <span class=\"keyword\">if</span> complement <span class=\"keyword\">in</span> hashmap:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [hashmap[complement], i]</span><br><span class=\"line\">            hashmap[val] = i</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_init_</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> self.twoSum([<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>], <span class=\"number\">22</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x = Solution()</span><br><span class=\"line\">print(x))</span><br></pre></td></tr></table></figure>\n<p>遍历列表，目标值与当前元素相减得到符合条件的元素，查找字典，如果存在符合条件的键，返回值，否则把该元素作为键，索引作为值存到字典里，重复以上步骤，直到找到对应的两个元素，返回索引列表</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 示例:</span></span><br><span class=\"line\"><span class=\"comment\"># 给定 nums = [2, 7, 11, 15], target = 9</span></span><br><span class=\"line\"><span class=\"comment\"># 因为 nums[0] + nums[1] = 2 + 7 = 9</span></span><br><span class=\"line\"><span class=\"comment\"># 所以返回 [0, 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 来源：力扣（LeetCode）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接：https://leetcode-cn.com/problems/two-sum</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">twoSum</span><span class=\"params\">(self, nums, target)</span>:</span></span><br><span class=\"line\">        hashmap = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, val <span class=\"keyword\">in</span> enumerate(nums):</span><br><span class=\"line\">            complement = target - val</span><br><span class=\"line\">            <span class=\"keyword\">if</span> complement <span class=\"keyword\">in</span> hashmap:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [hashmap[complement], i]</span><br><span class=\"line\">            hashmap[val] = i</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_init_</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> self.twoSum([<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>], <span class=\"number\">22</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x = Solution()</span><br><span class=\"line\">print(x))</span><br></pre></td></tr></table></figure>\n<p>遍历列表，目标值与当前元素相减得到符合条件的元素，查找字典，如果存在符合条件的键，返回值，否则把该元素作为键，索引作为值存到字典里，重复以上步骤，直到找到对应的两个元素，返回索引列表</p>\n"},{"title":"搭建 Django 博客系统","date":"2018-05-20T06:30:48.000Z","updated":"2018-05-20T07:10:00.000Z","comments":1,"_content":"\n##### 一、 环境：\n\nwin7 系统、Django、python\n\n##### 二、 需求分析：\n\n实现博客的创建、编辑和删除功能，并开通后台 admin,加入富文本编辑器，并入项目中\n\n##### 三、 搭建 Django 网站：\n\n1. 检查 Django 版本信息，python >> import django >> django.get_version()\n\n2. 启动 DOS 命令窗口，切换到相应文件路径，输入：`django-admin startproject mysite(网站名称)` 命令，创建一个 blog 项目目录。\n\n3. `cd mysite` > `ls -l` 查看项目目录，可以看到项目目录包括：_init_.py、manage.py、setting.py、urls.py。_init_.py 会把项目目录变成一个 python 包（相关模块的一个集合)，可以方便我们用 python 的“点记号”来制定项目中的某个部分，比如 mysite.urls。\n\n4. manage.py 是项目的启动文件，我们完成之后，要在 dos 中启动的就是这个文件。\n\n5. setting.py 顾名思义，项目的配置文件，主要用来配置数据库、变量之类的基础信息。\n\n6. urls.py 有点像路由配置，就是一些路径的集合，方便在文件中调用。\n\n##### 四、 搭建 Django 博客：\n\n`cd mysite` < `python manage.py startapp blog` 利用 manage.py 创建博客 app，可以看到生成了*init.py*、models.py、views.py。同样的,_init_.py 把博客变成了一个 python 包，model.py 和 views.py 是两个空文件，先占着位置。\n\n##### 五、 修改配置文件：\n\n打开 setting.py ，找到 INSTALLED_APPS 元组，把 APP 以模块的形式添加到元组里。\n\n##### 六、 初始化后台数据库：\n\n1. 由于使用的是 mysql 数据库，而 Django 默认的数据库是 SQLite3 ，所以需要修改 setting.py 文件中的数据库信息。\n\n2. 同步数据库信息：`python manage.py migrate`\n\n3. 创建超级管理员账号，用于登录 admin 初始化后台数据库\n\n4. 访问 admin 后台： `python manage.py runserver` 启动页面，然后在主页链接后面加上 admin 路径 /admin/，用新创建的超级用户登录，就可以看到管理者后台了。\n\n##### 七、设计数据表\n\n打开 blog 目录下的 models.py 文件，加入以下代码：\n\n```\nfrom django.db import models\n\n# Create your models here.\nclass BlogsPost(models.Model):\n    title = models.CharField(max_length = 150)  # 博客标题\n    body = models.TextField()                   # 博客正文\n    timestamp = models.DateTimeField()          # 创建时间\n```\n\n然后执行 `python manage.py makemigrations blog` > `python manage.py migrate` 命令，同步数据库。\n\n##### 八、 admin 后台管理搭建：\n\n1. 打开 setting.py 文件，找到 INSTALLED_APPS 添加 `django.contrib.admin` 内置模块到元组里。\n\n2. 打开 urls.py ，配置 admin 的 url 映射，也就是添加`（r'^admin/',include(django.contrib.admin.urls')),`到文件里。\n\n3. 注册 BlogPost model，打开 blog/models.py 文件，添加以下代码,启动项目，访问 admin 路径，就可以在后台添加 blog 文章了。\n\n```\nfrom django.db import models\nfrom django.contrib import admin\n\n# Create your models here.\n\nclass BlogsPost(models.Model):\n    title = models.CharField(max_length = 150)  # 博客标题\n    body = models.TextField()                   # 博客正文\n    timestamp = models.DateTimeField()          # 创建时间\n\nadmin.site.register(BlogsPost,BlogPostAdmin)\n```\n\n4. 但是我们发现这个 blog 管理界面有点丑，怎么办？添加一个列表展示类，就可以选择我们需要展示的内容了，代码如下,打开页面，点击 title 我们可以发现会按照 title 进行文章排序，点击其他两个，一样的效果。\n\n```\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'body','timestamp')\n```\n\n##### 九、 创建文章列表模板：\n\n在 blog 项目下创建 templates 目录（mysite/blog/templates/）,在目录下创建模板文件 archive.html，内容如下：\n\n```\n{% for post in posts %}\n    <h2>{{ post.title }}</h2>\n    <p>{{ post.timestamp }}</p>\n    <p>{{ post.body }}</p>\n{% endfor %}\n```\n\n##### 十、创建视图模板\n\n打开 mysite/blog/views.py 文件，添加以下代码：\n\n```\nfrom django.template import loader,context\nfrom django.http import HttpResponse\nfrom matrixtech.blog.models import BlogsPost\n\n# Create your views here.\ndef archive(request):\n    blog_list = BlogsPost.objects.all()  # 获取所有数据\n    t  = loader.get_template('archive.html')\n    c = context({{'posts': posts }})\n    return HttpResponse(t.render(c))  # 返回blog.html页面\n```\n\n##### 十一、创建 blog 的 url\n\n1. 在 mysite/urls 里创建 url 模式，添加如下代码\n\n```\nurl(r'^blog/', include('blog.urls'))\n```\n\n2. 在 blog/urls 定义 url，添加以下代码,重启服务，就可以访问 blog 了。\n\n```\nfrom django.conf.urls.defaults import  *\nfrom matrixtech.blog.views import archive\n\nurlpatterns = [\n    url(r'^$', archive),\n]\n```\n\n##### 十二、 博客整合到网站中\n\n博客创建好之后，我需要把它整合到项目中，这里我主要是用链接的形式，把博客链接放在了主导航栏上，点击就会跳转到博客，博客导航栏有主页项，点击也可以调回来。方法是这样的：\n\n通过 url 匹配名称，查找资源位置，代码如下：\n\n```\n<a href=\"{% url 'blog' %}\">博客</a>\n```\n\n##### 十三、博客外观改善\n\n1. 外观改善主要是生成 templates 文件夹，在里面添加一个 archive.html 文件作为文章模板，还有各个 theme.html 文件作为页面主题模板，其中会涉及到一些 Django 模板语言，需要去了解下，感觉用起来爽歪歪。\n\n2. 除了模板语言之外，可以直接通过 url 来查找相关的。\n","source":"_posts/搭建 Django 博客系统.md","raw":"---\ntitle: 搭建 Django 博客系统\ndate: 2018-05-20 14:30:48\nupdated: 2018-05-20 15:10:00\ncategories: python\ntags: Django\ncomments: true\n---\n\n##### 一、 环境：\n\nwin7 系统、Django、python\n\n##### 二、 需求分析：\n\n实现博客的创建、编辑和删除功能，并开通后台 admin,加入富文本编辑器，并入项目中\n\n##### 三、 搭建 Django 网站：\n\n1. 检查 Django 版本信息，python >> import django >> django.get_version()\n\n2. 启动 DOS 命令窗口，切换到相应文件路径，输入：`django-admin startproject mysite(网站名称)` 命令，创建一个 blog 项目目录。\n\n3. `cd mysite` > `ls -l` 查看项目目录，可以看到项目目录包括：_init_.py、manage.py、setting.py、urls.py。_init_.py 会把项目目录变成一个 python 包（相关模块的一个集合)，可以方便我们用 python 的“点记号”来制定项目中的某个部分，比如 mysite.urls。\n\n4. manage.py 是项目的启动文件，我们完成之后，要在 dos 中启动的就是这个文件。\n\n5. setting.py 顾名思义，项目的配置文件，主要用来配置数据库、变量之类的基础信息。\n\n6. urls.py 有点像路由配置，就是一些路径的集合，方便在文件中调用。\n\n##### 四、 搭建 Django 博客：\n\n`cd mysite` < `python manage.py startapp blog` 利用 manage.py 创建博客 app，可以看到生成了*init.py*、models.py、views.py。同样的,_init_.py 把博客变成了一个 python 包，model.py 和 views.py 是两个空文件，先占着位置。\n\n##### 五、 修改配置文件：\n\n打开 setting.py ，找到 INSTALLED_APPS 元组，把 APP 以模块的形式添加到元组里。\n\n##### 六、 初始化后台数据库：\n\n1. 由于使用的是 mysql 数据库，而 Django 默认的数据库是 SQLite3 ，所以需要修改 setting.py 文件中的数据库信息。\n\n2. 同步数据库信息：`python manage.py migrate`\n\n3. 创建超级管理员账号，用于登录 admin 初始化后台数据库\n\n4. 访问 admin 后台： `python manage.py runserver` 启动页面，然后在主页链接后面加上 admin 路径 /admin/，用新创建的超级用户登录，就可以看到管理者后台了。\n\n##### 七、设计数据表\n\n打开 blog 目录下的 models.py 文件，加入以下代码：\n\n```\nfrom django.db import models\n\n# Create your models here.\nclass BlogsPost(models.Model):\n    title = models.CharField(max_length = 150)  # 博客标题\n    body = models.TextField()                   # 博客正文\n    timestamp = models.DateTimeField()          # 创建时间\n```\n\n然后执行 `python manage.py makemigrations blog` > `python manage.py migrate` 命令，同步数据库。\n\n##### 八、 admin 后台管理搭建：\n\n1. 打开 setting.py 文件，找到 INSTALLED_APPS 添加 `django.contrib.admin` 内置模块到元组里。\n\n2. 打开 urls.py ，配置 admin 的 url 映射，也就是添加`（r'^admin/',include(django.contrib.admin.urls')),`到文件里。\n\n3. 注册 BlogPost model，打开 blog/models.py 文件，添加以下代码,启动项目，访问 admin 路径，就可以在后台添加 blog 文章了。\n\n```\nfrom django.db import models\nfrom django.contrib import admin\n\n# Create your models here.\n\nclass BlogsPost(models.Model):\n    title = models.CharField(max_length = 150)  # 博客标题\n    body = models.TextField()                   # 博客正文\n    timestamp = models.DateTimeField()          # 创建时间\n\nadmin.site.register(BlogsPost,BlogPostAdmin)\n```\n\n4. 但是我们发现这个 blog 管理界面有点丑，怎么办？添加一个列表展示类，就可以选择我们需要展示的内容了，代码如下,打开页面，点击 title 我们可以发现会按照 title 进行文章排序，点击其他两个，一样的效果。\n\n```\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'body','timestamp')\n```\n\n##### 九、 创建文章列表模板：\n\n在 blog 项目下创建 templates 目录（mysite/blog/templates/）,在目录下创建模板文件 archive.html，内容如下：\n\n```\n{% for post in posts %}\n    <h2>{{ post.title }}</h2>\n    <p>{{ post.timestamp }}</p>\n    <p>{{ post.body }}</p>\n{% endfor %}\n```\n\n##### 十、创建视图模板\n\n打开 mysite/blog/views.py 文件，添加以下代码：\n\n```\nfrom django.template import loader,context\nfrom django.http import HttpResponse\nfrom matrixtech.blog.models import BlogsPost\n\n# Create your views here.\ndef archive(request):\n    blog_list = BlogsPost.objects.all()  # 获取所有数据\n    t  = loader.get_template('archive.html')\n    c = context({{'posts': posts }})\n    return HttpResponse(t.render(c))  # 返回blog.html页面\n```\n\n##### 十一、创建 blog 的 url\n\n1. 在 mysite/urls 里创建 url 模式，添加如下代码\n\n```\nurl(r'^blog/', include('blog.urls'))\n```\n\n2. 在 blog/urls 定义 url，添加以下代码,重启服务，就可以访问 blog 了。\n\n```\nfrom django.conf.urls.defaults import  *\nfrom matrixtech.blog.views import archive\n\nurlpatterns = [\n    url(r'^$', archive),\n]\n```\n\n##### 十二、 博客整合到网站中\n\n博客创建好之后，我需要把它整合到项目中，这里我主要是用链接的形式，把博客链接放在了主导航栏上，点击就会跳转到博客，博客导航栏有主页项，点击也可以调回来。方法是这样的：\n\n通过 url 匹配名称，查找资源位置，代码如下：\n\n```\n<a href=\"{% url 'blog' %}\">博客</a>\n```\n\n##### 十三、博客外观改善\n\n1. 外观改善主要是生成 templates 文件夹，在里面添加一个 archive.html 文件作为文章模板，还有各个 theme.html 文件作为页面主题模板，其中会涉及到一些 Django 模板语言，需要去了解下，感觉用起来爽歪歪。\n\n2. 除了模板语言之外，可以直接通过 url 来查找相关的。\n","slug":"搭建 Django 博客系统","published":1,"layout":"post","photos":[],"link":"","_id":"ck5dbgub000798ex0lh6m6g5d","content":"<h5 id=\"一、-环境：\"><a href=\"#一、-环境：\" class=\"headerlink\" title=\"一、 环境：\"></a>一、 环境：</h5><p>win7 系统、Django、python</p>\n<h5 id=\"二、-需求分析：\"><a href=\"#二、-需求分析：\" class=\"headerlink\" title=\"二、 需求分析：\"></a>二、 需求分析：</h5><p>实现博客的创建、编辑和删除功能，并开通后台 admin,加入富文本编辑器，并入项目中</p>\n<h5 id=\"三、-搭建-Django-网站：\"><a href=\"#三、-搭建-Django-网站：\" class=\"headerlink\" title=\"三、 搭建 Django 网站：\"></a>三、 搭建 Django 网站：</h5><ol>\n<li><p>检查 Django 版本信息，python &gt;&gt; import django &gt;&gt; django.get_version()</p>\n</li>\n<li><p>启动 DOS 命令窗口，切换到相应文件路径，输入：<code>django-admin startproject mysite(网站名称)</code> 命令，创建一个 blog 项目目录。</p>\n</li>\n<li><p><code>cd mysite</code> &gt; <code>ls -l</code> 查看项目目录，可以看到项目目录包括：<em>init</em>.py、manage.py、setting.py、urls.py。<em>init</em>.py 会把项目目录变成一个 python 包（相关模块的一个集合)，可以方便我们用 python 的“点记号”来制定项目中的某个部分，比如 mysite.urls。</p>\n</li>\n<li><p>manage.py 是项目的启动文件，我们完成之后，要在 dos 中启动的就是这个文件。</p>\n</li>\n<li><p>setting.py 顾名思义，项目的配置文件，主要用来配置数据库、变量之类的基础信息。</p>\n</li>\n<li><p>urls.py 有点像路由配置，就是一些路径的集合，方便在文件中调用。</p>\n</li>\n</ol>\n<h5 id=\"四、-搭建-Django-博客：\"><a href=\"#四、-搭建-Django-博客：\" class=\"headerlink\" title=\"四、 搭建 Django 博客：\"></a>四、 搭建 Django 博客：</h5><p><code>cd mysite</code> &lt; <code>python manage.py startapp blog</code> 利用 manage.py 创建博客 app，可以看到生成了<em>init.py</em>、models.py、views.py。同样的,<em>init</em>.py 把博客变成了一个 python 包，model.py 和 views.py 是两个空文件，先占着位置。</p>\n<h5 id=\"五、-修改配置文件：\"><a href=\"#五、-修改配置文件：\" class=\"headerlink\" title=\"五、 修改配置文件：\"></a>五、 修改配置文件：</h5><p>打开 setting.py ，找到 INSTALLED_APPS 元组，把 APP 以模块的形式添加到元组里。</p>\n<h5 id=\"六、-初始化后台数据库：\"><a href=\"#六、-初始化后台数据库：\" class=\"headerlink\" title=\"六、 初始化后台数据库：\"></a>六、 初始化后台数据库：</h5><ol>\n<li><p>由于使用的是 mysql 数据库，而 Django 默认的数据库是 SQLite3 ，所以需要修改 setting.py 文件中的数据库信息。</p>\n</li>\n<li><p>同步数据库信息：<code>python manage.py migrate</code></p>\n</li>\n<li><p>创建超级管理员账号，用于登录 admin 初始化后台数据库</p>\n</li>\n<li><p>访问 admin 后台： <code>python manage.py runserver</code> 启动页面，然后在主页链接后面加上 admin 路径 /admin/，用新创建的超级用户登录，就可以看到管理者后台了。</p>\n</li>\n</ol>\n<h5 id=\"七、设计数据表\"><a href=\"#七、设计数据表\" class=\"headerlink\" title=\"七、设计数据表\"></a>七、设计数据表</h5><p>打开 blog 目录下的 models.py 文件，加入以下代码：</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.db <span class=\"built_in\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your models here.</span></span><br><span class=\"line\">class BlogsPost(models.Model):</span><br><span class=\"line\">    <span class=\"attr\">title</span> = models.CharField(<span class=\"attr\">max_length</span> = <span class=\"number\">150</span>)  <span class=\"comment\"># 博客标题</span></span><br><span class=\"line\">    <span class=\"attr\">body</span> = models.TextField()                   <span class=\"comment\"># 博客正文</span></span><br><span class=\"line\">    <span class=\"attr\">timestamp</span> = models.DateTimeField()          <span class=\"comment\"># 创建时间</span></span><br></pre></td></tr></table></figure>\n<p>然后执行 <code>python manage.py makemigrations blog</code> &gt; <code>python manage.py migrate</code> 命令，同步数据库。</p>\n<h5 id=\"八、-admin-后台管理搭建：\"><a href=\"#八、-admin-后台管理搭建：\" class=\"headerlink\" title=\"八、 admin 后台管理搭建：\"></a>八、 admin 后台管理搭建：</h5><ol>\n<li><p>打开 setting.py 文件，找到 INSTALLED_APPS 添加 <code>django.contrib.admin</code> 内置模块到元组里。</p>\n</li>\n<li><p>打开 urls.py ，配置 admin 的 url 映射，也就是添加<code>（r&#39;^admin/&#39;,include(django.contrib.admin.urls&#39;)),</code>到文件里。</p>\n</li>\n<li><p>注册 BlogPost model，打开 blog/models.py 文件，添加以下代码,启动项目，访问 admin 路径，就可以在后台添加 blog 文章了。</p>\n</li>\n</ol>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"title\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># Create your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">BlogsPost</span>(<span class=\"title\">models</span>.<span class=\"type\">Model</span>):</span></span><br><span class=\"line\"><span class=\"class\">    title = models.<span class=\"type\">CharField</span>(<span class=\"title\">max_length</span> = 150)  # 博客标题</span></span><br><span class=\"line\"><span class=\"class\">    body = models.<span class=\"type\">TextField</span>()                   # 博客正文</span></span><br><span class=\"line\"><span class=\"class\">    timestamp = models.<span class=\"type\">DateTimeField</span>()          # 创建时间</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">admin.site.register(<span class=\"type\">BlogsPost</span>,<span class=\"type\">BlogPostAdmin</span>)</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>但是我们发现这个 blog 管理界面有点丑，怎么办？添加一个列表展示类，就可以选择我们需要展示的内容了，代码如下,打开页面，点击 title 我们可以发现会按照 title 进行文章排序，点击其他两个，一样的效果。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPostAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></span><br><span class=\"line\">    list_display = (<span class=\"string\">'title'</span>, <span class=\"string\">'body'</span>,<span class=\"string\">'timestamp'</span>)</span><br></pre></td></tr></table></figure>\n<h5 id=\"九、-创建文章列表模板：\"><a href=\"#九、-创建文章列表模板：\" class=\"headerlink\" title=\"九、 创建文章列表模板：\"></a>九、 创建文章列表模板：</h5><p>在 blog 项目下创建 templates 目录（mysite/blog/templates/）,在目录下创建模板文件 archive.html，内容如下：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">for</span></span> post <span class=\"keyword\">in</span> posts %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123; post.title &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123; post.timestamp &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123; post.body &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endfor</span></span> %&#125;</span><span class=\"xml\"></span></span><br></pre></td></tr></table></figure>\n<h5 id=\"十、创建视图模板\"><a href=\"#十、创建视图模板\" class=\"headerlink\" title=\"十、创建视图模板\"></a>十、创建视图模板</h5><p>打开 mysite/blog/views.py 文件，添加以下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> loader,context</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> matrixtech.blog.models <span class=\"keyword\">import</span> BlogsPost</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">archive</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    blog_list = BlogsPost.objects.all()  <span class=\"comment\"># 获取所有数据</span></span><br><span class=\"line\">    t  = loader.get_template(<span class=\"string\">'archive.html'</span>)</span><br><span class=\"line\">    c = context(&#123;&#123;<span class=\"string\">'posts'</span>: posts &#125;&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(t.render(c))  <span class=\"comment\"># 返回blog.html页面</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"十一、创建-blog-的-url\"><a href=\"#十一、创建-blog-的-url\" class=\"headerlink\" title=\"十一、创建 blog 的 url\"></a>十一、创建 blog 的 url</h5><ol>\n<li>在 mysite/urls 里创建 url 模式，添加如下代码</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^blog/'</span>, include(<span class=\"string\">'blog.urls'</span>))</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 blog/urls 定义 url，添加以下代码,重启服务，就可以访问 blog 了。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls.defaults <span class=\"keyword\">import</span>  *</span><br><span class=\"line\"><span class=\"keyword\">from</span> matrixtech.blog.views <span class=\"keyword\">import</span> archive</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>, archive),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"十二、-博客整合到网站中\"><a href=\"#十二、-博客整合到网站中\" class=\"headerlink\" title=\"十二、 博客整合到网站中\"></a>十二、 博客整合到网站中</h5><p>博客创建好之后，我需要把它整合到项目中，这里我主要是用链接的形式，把博客链接放在了主导航栏上，点击就会跳转到博客，博客导航栏有主页项，点击也可以调回来。方法是这样的：</p>\n<p>通过 url 匹配名称，查找资源位置，代码如下：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"</span></span></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">url</span></span> 'blog' %&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span>博客<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h5 id=\"十三、博客外观改善\"><a href=\"#十三、博客外观改善\" class=\"headerlink\" title=\"十三、博客外观改善\"></a>十三、博客外观改善</h5><ol>\n<li><p>外观改善主要是生成 templates 文件夹，在里面添加一个 archive.html 文件作为文章模板，还有各个 theme.html 文件作为页面主题模板，其中会涉及到一些 Django 模板语言，需要去了解下，感觉用起来爽歪歪。</p>\n</li>\n<li><p>除了模板语言之外，可以直接通过 url 来查找相关的。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"一、-环境：\"><a href=\"#一、-环境：\" class=\"headerlink\" title=\"一、 环境：\"></a>一、 环境：</h5><p>win7 系统、Django、python</p>\n<h5 id=\"二、-需求分析：\"><a href=\"#二、-需求分析：\" class=\"headerlink\" title=\"二、 需求分析：\"></a>二、 需求分析：</h5><p>实现博客的创建、编辑和删除功能，并开通后台 admin,加入富文本编辑器，并入项目中</p>\n<h5 id=\"三、-搭建-Django-网站：\"><a href=\"#三、-搭建-Django-网站：\" class=\"headerlink\" title=\"三、 搭建 Django 网站：\"></a>三、 搭建 Django 网站：</h5><ol>\n<li><p>检查 Django 版本信息，python &gt;&gt; import django &gt;&gt; django.get_version()</p>\n</li>\n<li><p>启动 DOS 命令窗口，切换到相应文件路径，输入：<code>django-admin startproject mysite(网站名称)</code> 命令，创建一个 blog 项目目录。</p>\n</li>\n<li><p><code>cd mysite</code> &gt; <code>ls -l</code> 查看项目目录，可以看到项目目录包括：<em>init</em>.py、manage.py、setting.py、urls.py。<em>init</em>.py 会把项目目录变成一个 python 包（相关模块的一个集合)，可以方便我们用 python 的“点记号”来制定项目中的某个部分，比如 mysite.urls。</p>\n</li>\n<li><p>manage.py 是项目的启动文件，我们完成之后，要在 dos 中启动的就是这个文件。</p>\n</li>\n<li><p>setting.py 顾名思义，项目的配置文件，主要用来配置数据库、变量之类的基础信息。</p>\n</li>\n<li><p>urls.py 有点像路由配置，就是一些路径的集合，方便在文件中调用。</p>\n</li>\n</ol>\n<h5 id=\"四、-搭建-Django-博客：\"><a href=\"#四、-搭建-Django-博客：\" class=\"headerlink\" title=\"四、 搭建 Django 博客：\"></a>四、 搭建 Django 博客：</h5><p><code>cd mysite</code> &lt; <code>python manage.py startapp blog</code> 利用 manage.py 创建博客 app，可以看到生成了<em>init.py</em>、models.py、views.py。同样的,<em>init</em>.py 把博客变成了一个 python 包，model.py 和 views.py 是两个空文件，先占着位置。</p>\n<h5 id=\"五、-修改配置文件：\"><a href=\"#五、-修改配置文件：\" class=\"headerlink\" title=\"五、 修改配置文件：\"></a>五、 修改配置文件：</h5><p>打开 setting.py ，找到 INSTALLED_APPS 元组，把 APP 以模块的形式添加到元组里。</p>\n<h5 id=\"六、-初始化后台数据库：\"><a href=\"#六、-初始化后台数据库：\" class=\"headerlink\" title=\"六、 初始化后台数据库：\"></a>六、 初始化后台数据库：</h5><ol>\n<li><p>由于使用的是 mysql 数据库，而 Django 默认的数据库是 SQLite3 ，所以需要修改 setting.py 文件中的数据库信息。</p>\n</li>\n<li><p>同步数据库信息：<code>python manage.py migrate</code></p>\n</li>\n<li><p>创建超级管理员账号，用于登录 admin 初始化后台数据库</p>\n</li>\n<li><p>访问 admin 后台： <code>python manage.py runserver</code> 启动页面，然后在主页链接后面加上 admin 路径 /admin/，用新创建的超级用户登录，就可以看到管理者后台了。</p>\n</li>\n</ol>\n<h5 id=\"七、设计数据表\"><a href=\"#七、设计数据表\" class=\"headerlink\" title=\"七、设计数据表\"></a>七、设计数据表</h5><p>打开 blog 目录下的 models.py 文件，加入以下代码：</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.db <span class=\"built_in\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your models here.</span></span><br><span class=\"line\">class BlogsPost(models.Model):</span><br><span class=\"line\">    <span class=\"attr\">title</span> = models.CharField(<span class=\"attr\">max_length</span> = <span class=\"number\">150</span>)  <span class=\"comment\"># 博客标题</span></span><br><span class=\"line\">    <span class=\"attr\">body</span> = models.TextField()                   <span class=\"comment\"># 博客正文</span></span><br><span class=\"line\">    <span class=\"attr\">timestamp</span> = models.DateTimeField()          <span class=\"comment\"># 创建时间</span></span><br></pre></td></tr></table></figure>\n<p>然后执行 <code>python manage.py makemigrations blog</code> &gt; <code>python manage.py migrate</code> 命令，同步数据库。</p>\n<h5 id=\"八、-admin-后台管理搭建：\"><a href=\"#八、-admin-后台管理搭建：\" class=\"headerlink\" title=\"八、 admin 后台管理搭建：\"></a>八、 admin 后台管理搭建：</h5><ol>\n<li><p>打开 setting.py 文件，找到 INSTALLED_APPS 添加 <code>django.contrib.admin</code> 内置模块到元组里。</p>\n</li>\n<li><p>打开 urls.py ，配置 admin 的 url 映射，也就是添加<code>（r&#39;^admin/&#39;,include(django.contrib.admin.urls&#39;)),</code>到文件里。</p>\n</li>\n<li><p>注册 BlogPost model，打开 blog/models.py 文件，添加以下代码,启动项目，访问 admin 路径，就可以在后台添加 blog 文章了。</p>\n</li>\n</ol>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"><span class=\"title\">from</span> django.contrib <span class=\"keyword\">import</span> admin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># Create your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">BlogsPost</span>(<span class=\"title\">models</span>.<span class=\"type\">Model</span>):</span></span><br><span class=\"line\"><span class=\"class\">    title = models.<span class=\"type\">CharField</span>(<span class=\"title\">max_length</span> = 150)  # 博客标题</span></span><br><span class=\"line\"><span class=\"class\">    body = models.<span class=\"type\">TextField</span>()                   # 博客正文</span></span><br><span class=\"line\"><span class=\"class\">    timestamp = models.<span class=\"type\">DateTimeField</span>()          # 创建时间</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">admin.site.register(<span class=\"type\">BlogsPost</span>,<span class=\"type\">BlogPostAdmin</span>)</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>但是我们发现这个 blog 管理界面有点丑，怎么办？添加一个列表展示类，就可以选择我们需要展示的内容了，代码如下,打开页面，点击 title 我们可以发现会按照 title 进行文章排序，点击其他两个，一样的效果。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlogPostAdmin</span><span class=\"params\">(admin.ModelAdmin)</span>:</span></span><br><span class=\"line\">    list_display = (<span class=\"string\">'title'</span>, <span class=\"string\">'body'</span>,<span class=\"string\">'timestamp'</span>)</span><br></pre></td></tr></table></figure>\n<h5 id=\"九、-创建文章列表模板：\"><a href=\"#九、-创建文章列表模板：\" class=\"headerlink\" title=\"九、 创建文章列表模板：\"></a>九、 创建文章列表模板：</h5><p>在 blog 项目下创建 templates 目录（mysite/blog/templates/）,在目录下创建模板文件 archive.html，内容如下：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">for</span></span> post <span class=\"keyword\">in</span> posts %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123; post.title &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123; post.timestamp &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123; post.body &#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endfor</span></span> %&#125;</span><span class=\"xml\"></span></span><br></pre></td></tr></table></figure>\n<h5 id=\"十、创建视图模板\"><a href=\"#十、创建视图模板\" class=\"headerlink\" title=\"十、创建视图模板\"></a>十、创建视图模板</h5><p>打开 mysite/blog/views.py 文件，添加以下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> loader,context</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"><span class=\"keyword\">from</span> matrixtech.blog.models <span class=\"keyword\">import</span> BlogsPost</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your views here.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">archive</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    blog_list = BlogsPost.objects.all()  <span class=\"comment\"># 获取所有数据</span></span><br><span class=\"line\">    t  = loader.get_template(<span class=\"string\">'archive.html'</span>)</span><br><span class=\"line\">    c = context(&#123;&#123;<span class=\"string\">'posts'</span>: posts &#125;&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(t.render(c))  <span class=\"comment\"># 返回blog.html页面</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"十一、创建-blog-的-url\"><a href=\"#十一、创建-blog-的-url\" class=\"headerlink\" title=\"十一、创建 blog 的 url\"></a>十一、创建 blog 的 url</h5><ol>\n<li>在 mysite/urls 里创建 url 模式，添加如下代码</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^blog/'</span>, include(<span class=\"string\">'blog.urls'</span>))</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 blog/urls 定义 url，添加以下代码,重启服务，就可以访问 blog 了。</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls.defaults <span class=\"keyword\">import</span>  *</span><br><span class=\"line\"><span class=\"keyword\">from</span> matrixtech.blog.views <span class=\"keyword\">import</span> archive</span><br><span class=\"line\"></span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>, archive),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"十二、-博客整合到网站中\"><a href=\"#十二、-博客整合到网站中\" class=\"headerlink\" title=\"十二、 博客整合到网站中\"></a>十二、 博客整合到网站中</h5><p>博客创建好之后，我需要把它整合到项目中，这里我主要是用链接的形式，把博客链接放在了主导航栏上，点击就会跳转到博客，博客导航栏有主页项，点击也可以调回来。方法是这样的：</p>\n<p>通过 url 匹配名称，查找资源位置，代码如下：</p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"</span></span></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">url</span></span> 'blog' %&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span>博客<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h5 id=\"十三、博客外观改善\"><a href=\"#十三、博客外观改善\" class=\"headerlink\" title=\"十三、博客外观改善\"></a>十三、博客外观改善</h5><ol>\n<li><p>外观改善主要是生成 templates 文件夹，在里面添加一个 archive.html 文件作为文章模板，还有各个 theme.html 文件作为页面主题模板，其中会涉及到一些 Django 模板语言，需要去了解下，感觉用起来爽歪歪。</p>\n</li>\n<li><p>除了模板语言之外，可以直接通过 url 来查找相关的。</p>\n</li>\n</ol>\n"},{"title":"数组、对象的深拷贝","comments":1,"date":"2019-06-30T06:19:26.000Z","_content":"\n## 数组的深拷贝\n\n```js\nfunction copyObjectArray(x) {\n  return [...JSON.parse(JSON.stringify(x))];\n}\n\n// example 1\nconst test = [\n  {\n    name: 'Amy',\n    age: 18,\n  },\n];\nlet test1 = copyObjectArray(test);\ntest1[0].name = 'Jack';\nconsole.log(test, test1);\n// test: [ { name: 'Amy', age: 18 } ] test1: [ { name: 'Jack', age: 18 } ]\n```\n\n## 对象的深拷贝\n\n```js\nfunction copyObject(x) {\n  return {\n    ...JSON.parse(JSON.stringify(x)),\n  };\n}\n\n// example 2\nconst test2 = {\n  name: ['jack', 'sarah', 'ray'],\n};\ntest3 = copyObject(test2);\ntest3.name[0] = '小红';\nconsole.log(test2, test3);\n// test2: { name: [ 'jack', 'sarah', 'ray' ] } test3：{ name: [ '小红', 'sarah', 'ray' ] }\n```\n","source":"_posts/数组、对象的深拷贝.md","raw":"---\ntitle: 数组、对象的深拷贝\ncomments: true\ndate: 2019-06-30 14:19:26\ncategories: web\ntags: js\n---\n\n## 数组的深拷贝\n\n```js\nfunction copyObjectArray(x) {\n  return [...JSON.parse(JSON.stringify(x))];\n}\n\n// example 1\nconst test = [\n  {\n    name: 'Amy',\n    age: 18,\n  },\n];\nlet test1 = copyObjectArray(test);\ntest1[0].name = 'Jack';\nconsole.log(test, test1);\n// test: [ { name: 'Amy', age: 18 } ] test1: [ { name: 'Jack', age: 18 } ]\n```\n\n## 对象的深拷贝\n\n```js\nfunction copyObject(x) {\n  return {\n    ...JSON.parse(JSON.stringify(x)),\n  };\n}\n\n// example 2\nconst test2 = {\n  name: ['jack', 'sarah', 'ray'],\n};\ntest3 = copyObject(test2);\ntest3.name[0] = '小红';\nconsole.log(test2, test3);\n// test2: { name: [ 'jack', 'sarah', 'ray' ] } test3：{ name: [ '小红', 'sarah', 'ray' ] }\n```\n","slug":"数组、对象的深拷贝","published":1,"updated":"2019-06-30T06:20:20.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgub2007c8ex0ak7o0cs5","content":"<h2 id=\"数组的深拷贝\"><a href=\"#数组的深拷贝\" class=\"headerlink\" title=\"数组的深拷贝\"></a>数组的深拷贝</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyObjectArray</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...JSON.parse(<span class=\"built_in\">JSON</span>.stringify(x))];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// example 1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> test = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Amy'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">let</span> test1 = copyObjectArray(test);</span><br><span class=\"line\">test1[<span class=\"number\">0</span>].name = <span class=\"string\">'Jack'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test, test1);</span><br><span class=\"line\"><span class=\"comment\">// test: [ &#123; name: 'Amy', age: 18 &#125; ] test1: [ &#123; name: 'Jack', age: 18 &#125; ]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"对象的深拷贝\"><a href=\"#对象的深拷贝\" class=\"headerlink\" title=\"对象的深拷贝\"></a>对象的深拷贝</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyObject</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ...JSON.parse(<span class=\"built_in\">JSON</span>.stringify(x)),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// example 2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> test2 = &#123;</span><br><span class=\"line\">  name: [<span class=\"string\">'jack'</span>, <span class=\"string\">'sarah'</span>, <span class=\"string\">'ray'</span>],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test3 = copyObject(test2);</span><br><span class=\"line\">test3.name[<span class=\"number\">0</span>] = <span class=\"string\">'小红'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test2, test3);</span><br><span class=\"line\"><span class=\"comment\">// test2: &#123; name: [ 'jack', 'sarah', 'ray' ] &#125; test3：&#123; name: [ '小红', 'sarah', 'ray' ] &#125;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数组的深拷贝\"><a href=\"#数组的深拷贝\" class=\"headerlink\" title=\"数组的深拷贝\"></a>数组的深拷贝</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyObjectArray</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...JSON.parse(<span class=\"built_in\">JSON</span>.stringify(x))];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// example 1</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> test = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Amy'</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">let</span> test1 = copyObjectArray(test);</span><br><span class=\"line\">test1[<span class=\"number\">0</span>].name = <span class=\"string\">'Jack'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test, test1);</span><br><span class=\"line\"><span class=\"comment\">// test: [ &#123; name: 'Amy', age: 18 &#125; ] test1: [ &#123; name: 'Jack', age: 18 &#125; ]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"对象的深拷贝\"><a href=\"#对象的深拷贝\" class=\"headerlink\" title=\"对象的深拷贝\"></a>对象的深拷贝</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyObject</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    ...JSON.parse(<span class=\"built_in\">JSON</span>.stringify(x)),</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// example 2</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> test2 = &#123;</span><br><span class=\"line\">  name: [<span class=\"string\">'jack'</span>, <span class=\"string\">'sarah'</span>, <span class=\"string\">'ray'</span>],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">test3 = copyObject(test2);</span><br><span class=\"line\">test3.name[<span class=\"number\">0</span>] = <span class=\"string\">'小红'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test2, test3);</span><br><span class=\"line\"><span class=\"comment\">// test2: &#123; name: [ 'jack', 'sarah', 'ray' ] &#125; test3：&#123; name: [ '小红', 'sarah', 'ray' ] &#125;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"日语学习笔记","comments":1,"date":"2019-03-31T05:12:13.000Z","_content":"\n### 一、日语关于介绍的基本句型\n\n1. n + は + n + です　**......是......**\n\n2. n + は + n + じや　あぃません **......不是......**\n\n3. n + は + n + ですか **......是......吗？**\n\n4. n + の + n **...的....**\n\n5. n + も + n + です **....也是.....**\n\n6. n + は + n + 歳です **....岁**\n\n7. n + から 来まぃた **来自....(国家、地区)**\n\n8. どうぞ　よるしく　お願いします **请多多指教**\n\n9. お名前は？ **你的名字叫什么**\n\n10. こちらは + n + さんです **这是...**\n","source":"_posts/日语学习笔记.md","raw":"---\ntitle: 日语学习笔记\ncomments: true\ndate: 2019-03-31 13:12:13\ncategories: 语言\ntags: 日语\n---\n\n### 一、日语关于介绍的基本句型\n\n1. n + は + n + です　**......是......**\n\n2. n + は + n + じや　あぃません **......不是......**\n\n3. n + は + n + ですか **......是......吗？**\n\n4. n + の + n **...的....**\n\n5. n + も + n + です **....也是.....**\n\n6. n + は + n + 歳です **....岁**\n\n7. n + から 来まぃた **来自....(国家、地区)**\n\n8. どうぞ　よるしく　お願いします **请多多指教**\n\n9. お名前は？ **你的名字叫什么**\n\n10. こちらは + n + さんです **这是...**\n","slug":"日语学习笔记","published":1,"updated":"2019-03-31T05:49:54.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgub3007f8ex0xmko94w1","content":"<h3 id=\"一、日语关于介绍的基本句型\"><a href=\"#一、日语关于介绍的基本句型\" class=\"headerlink\" title=\"一、日语关于介绍的基本句型\"></a>一、日语关于介绍的基本句型</h3><ol>\n<li><p>n + は + n + です　<strong>……是……</strong></p>\n</li>\n<li><p>n + は + n + じや　あぃません <strong>……不是……</strong></p>\n</li>\n<li><p>n + は + n + ですか <strong>……是……吗？</strong></p>\n</li>\n<li><p>n + の + n <strong>…的….</strong></p>\n</li>\n<li><p>n + も + n + です <strong>….也是…..</strong></p>\n</li>\n<li><p>n + は + n + 歳です <strong>….岁</strong></p>\n</li>\n<li><p>n + から 来まぃた <strong>来自….(国家、地区)</strong></p>\n</li>\n<li><p>どうぞ　よるしく　お願いします <strong>请多多指教</strong></p>\n</li>\n<li><p>お名前は？ <strong>你的名字叫什么</strong></p>\n</li>\n<li><p>こちらは + n + さんです <strong>这是…</strong></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、日语关于介绍的基本句型\"><a href=\"#一、日语关于介绍的基本句型\" class=\"headerlink\" title=\"一、日语关于介绍的基本句型\"></a>一、日语关于介绍的基本句型</h3><ol>\n<li><p>n + は + n + です　<strong>……是……</strong></p>\n</li>\n<li><p>n + は + n + じや　あぃません <strong>……不是……</strong></p>\n</li>\n<li><p>n + は + n + ですか <strong>……是……吗？</strong></p>\n</li>\n<li><p>n + の + n <strong>…的….</strong></p>\n</li>\n<li><p>n + も + n + です <strong>….也是…..</strong></p>\n</li>\n<li><p>n + は + n + 歳です <strong>….岁</strong></p>\n</li>\n<li><p>n + から 来まぃた <strong>来自….(国家、地区)</strong></p>\n</li>\n<li><p>どうぞ　よるしく　お願いします <strong>请多多指教</strong></p>\n</li>\n<li><p>お名前は？ <strong>你的名字叫什么</strong></p>\n</li>\n<li><p>こちらは + n + さんです <strong>这是…</strong></p>\n</li>\n</ol>\n"},{"title":"Tensorflow 模型训练步骤","date":"2018-05-27T01:56:27.000Z","comments":1,"_content":"\n### 使用 tensorflow 进行算法设计、训练的步骤\n\n1. 定义算法公式，也就是神经网络 forward 时的计算；\n\n2. 定义 loss，选定优化器，比如 SGD，并指定优化器 loss；\n\n3. 迭代的对数据集进行训练；\n\n4. 在测试集上对准确率进行评测；\n","source":"_posts/模型训练步骤.md","raw":"---\ntitle: tensorflow 模型训练步骤\ndate: 2018-05-27 09:56:27\ncategories: 深度学习\ntags: tensorflow\ncomments: true\n---\n\n### 使用 tensorflow 进行算法设计、训练的步骤\n\n1. 定义算法公式，也就是神经网络 forward 时的计算；\n\n2. 定义 loss，选定优化器，比如 SGD，并指定优化器 loss；\n\n3. 迭代的对数据集进行训练；\n\n4. 在测试集上对准确率进行评测；\n","slug":"模型训练步骤","published":1,"updated":"2019-05-19T05:31:44.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgub4007j8ex04mkq5x5x","content":"<h3 id=\"使用-tensorflow-进行算法设计、训练的步骤\"><a href=\"#使用-tensorflow-进行算法设计、训练的步骤\" class=\"headerlink\" title=\"使用 tensorflow 进行算法设计、训练的步骤\"></a>使用 tensorflow 进行算法设计、训练的步骤</h3><ol>\n<li><p>定义算法公式，也就是神经网络 forward 时的计算；</p>\n</li>\n<li><p>定义 loss，选定优化器，比如 SGD，并指定优化器 loss；</p>\n</li>\n<li><p>迭代的对数据集进行训练；</p>\n</li>\n<li><p>在测试集上对准确率进行评测；</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"使用-tensorflow-进行算法设计、训练的步骤\"><a href=\"#使用-tensorflow-进行算法设计、训练的步骤\" class=\"headerlink\" title=\"使用 tensorflow 进行算法设计、训练的步骤\"></a>使用 tensorflow 进行算法设计、训练的步骤</h3><ol>\n<li><p>定义算法公式，也就是神经网络 forward 时的计算；</p>\n</li>\n<li><p>定义 loss，选定优化器，比如 SGD，并指定优化器 loss；</p>\n</li>\n<li><p>迭代的对数据集进行训练；</p>\n</li>\n<li><p>在测试集上对准确率进行评测；</p>\n</li>\n</ol>\n"},{"title":"时间戳转日期","comments":1,"date":"2019-06-30T06:13:59.000Z","_content":"\n## Demo\n\n```js\nfunction timeStampFormat(x) {\n  const date = new Date(+x * 1000);\n  const [m, d] = [date.getMonth() + 1, date.getDate()];\n  return `${m}-${d}`;\n}\nconst day = timeStampFormat(1560751917);\nconsole.log(day);\n```\n\n## 解释\n\n因为 js 的时间是按毫秒算的，这里要转成秒，所以要乘以一个 1000，之后就可以调用 js 内置对象中的 Date 获取对应的日期了，年份及其他，类似。\n","source":"_posts/时间戳转日期.md","raw":"---\ntitle: 时间戳转日期\ncomments: true\ndate: 2019-06-30 14:13:59\ncategories: web\ntags: js\n---\n\n## Demo\n\n```js\nfunction timeStampFormat(x) {\n  const date = new Date(+x * 1000);\n  const [m, d] = [date.getMonth() + 1, date.getDate()];\n  return `${m}-${d}`;\n}\nconst day = timeStampFormat(1560751917);\nconsole.log(day);\n```\n\n## 解释\n\n因为 js 的时间是按毫秒算的，这里要转成秒，所以要乘以一个 1000，之后就可以调用 js 内置对象中的 Date 获取对应的日期了，年份及其他，类似。\n","slug":"时间戳转日期","published":1,"updated":"2019-06-30T06:14:58.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgub5007n8ex0sfkyrhls","content":"<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeStampFormat</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(+x * <span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [m, d] = [date.getMonth() + <span class=\"number\">1</span>, date.getDate()];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;m&#125;</span>-<span class=\"subst\">$&#123;d&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> day = timeStampFormat(<span class=\"number\">1560751917</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(day);</span><br></pre></td></tr></table></figure>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>因为 js 的时间是按毫秒算的，这里要转成秒，所以要乘以一个 1000，之后就可以调用 js 内置对象中的 Date 获取对应的日期了，年份及其他，类似。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeStampFormat</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(+x * <span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [m, d] = [date.getMonth() + <span class=\"number\">1</span>, date.getDate()];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;m&#125;</span>-<span class=\"subst\">$&#123;d&#125;</span>`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> day = timeStampFormat(<span class=\"number\">1560751917</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(day);</span><br></pre></td></tr></table></figure>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>因为 js 的时间是按毫秒算的，这里要转成秒，所以要乘以一个 1000，之后就可以调用 js 内置对象中的 Date 获取对应的日期了，年份及其他，类似。</p>\n"},{"title":"正则","comments":1,"date":"2019-08-04T04:32:20.000Z","_content":"## 一、正则表达式是什么\n\n正则表达式就是记录文本规则的代码。\n\n```js \n// 匹配中国的电话号码\n0\\d\\d-\\d\\d\\d\\d\\d\\d\\d\\d\n0\\d{2}-\\d{8}\n```\n\n## 二、安装正则测试软件\n\n地址： https://deerchao.net/tools/regester/index.htm\n\n## 三、常用元字符\n\n| 代码 | 说明                         |\n| ---- | ---------------------------- |\n| .    | 匹配除换行符以外的任意字符   |\n| \\w   | 匹配字母或数字或下划线或汉字 |\n| \\s   | 匹配任意的空白符             |\n| \\d   | 匹配数字                     |\n| \\b   | 匹配单词的开始或结束         |\n| ^    | 匹配字符串的开始             |\n| $    | 匹配字符串的结束             |\n\n\n```js\n// 匹配 qq 号，5——12位\n^\\d{5,12}$\n```\n\n## 四、字符转义\n\n常用的需要转义的字符：\\(\\\\), *(\\*), .(\\.)\n\n## 五、重复\n\n常用限定符\n\n| 代码/语法 | 说明             |\n| --------- | ---------------- |\n| *         | 重复零次或更多次 |\n| +         | 重复一次或更多次 |\n| ?         | 重复零次或一次   |\n| {n}       | 重复n次          |\n| {n,}      | 重复n次或更多次  |\n| {n,m}     | 重复n到m次       |\n\n```js\nWindows\\d+  //匹配Windows后面的1个或更多数字\n\n^\\w+  //匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)\n```\n\n## 六、字符类，直接写到中括号 [] 中即可\n\n```js\n[aeiou] //匹配任何一个英文元音字母\n\n[.?!] //匹配标点符号\n```\n\n## 七、分枝条件 (|)\n\n```js\n0\\d{2}-\\d{8}|0\\d{3}-\\d{7}   //这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)\n\n\\(0\\d{2}\\)[- ]?\\d{8}|0\\d{2}[- ]?\\d{8}   //匹配3位区号的电话号码\n\n\\d{5}-\\d{4}|\\d{5}   //匹配美国的邮政编码\n```\n\n## 八、分组 (小括号)\n\n```js\n((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)   // 匹配一个ip地址\n```\n\n## 九、反义 （字符串前面加 ^，元字符变大写）\n\n常用的反义代码\n\n| 代码/语法 | 说明                                       |\n| --------- | ------------------------------------------ |\n| \\W        | 匹配任意不是字母，数字，下划线，汉字的字符 |\n| \\S        | 匹配任意不是空白符的字符                   |\n| \\D        | 匹配任意非数字的字符                       |\n| \\B        | 匹配不是单词开头或结束的位置               |\n| [^x]      | 匹配除了x以外的任意字符                    |\n| [^aeiou]  | 匹配除了aeiou这几个字母以外的任意字符      |\n\n```js\n\\S+   //匹配不包含空白符的字符串\n\n<a[^>]+>    //匹配用尖括号括起来的以a开头的字符串\n```\n\n## 十、后向引用\n\n用于重复搜索前面某个分组匹配的文本\n","source":"_posts/正则.md","raw":"---\ntitle: 正则\ncomments: true\ndate: 2019-08-04 12:32:20\ncategories: web\ntags: 正则\n---\n## 一、正则表达式是什么\n\n正则表达式就是记录文本规则的代码。\n\n```js \n// 匹配中国的电话号码\n0\\d\\d-\\d\\d\\d\\d\\d\\d\\d\\d\n0\\d{2}-\\d{8}\n```\n\n## 二、安装正则测试软件\n\n地址： https://deerchao.net/tools/regester/index.htm\n\n## 三、常用元字符\n\n| 代码 | 说明                         |\n| ---- | ---------------------------- |\n| .    | 匹配除换行符以外的任意字符   |\n| \\w   | 匹配字母或数字或下划线或汉字 |\n| \\s   | 匹配任意的空白符             |\n| \\d   | 匹配数字                     |\n| \\b   | 匹配单词的开始或结束         |\n| ^    | 匹配字符串的开始             |\n| $    | 匹配字符串的结束             |\n\n\n```js\n// 匹配 qq 号，5——12位\n^\\d{5,12}$\n```\n\n## 四、字符转义\n\n常用的需要转义的字符：\\(\\\\), *(\\*), .(\\.)\n\n## 五、重复\n\n常用限定符\n\n| 代码/语法 | 说明             |\n| --------- | ---------------- |\n| *         | 重复零次或更多次 |\n| +         | 重复一次或更多次 |\n| ?         | 重复零次或一次   |\n| {n}       | 重复n次          |\n| {n,}      | 重复n次或更多次  |\n| {n,m}     | 重复n到m次       |\n\n```js\nWindows\\d+  //匹配Windows后面的1个或更多数字\n\n^\\w+  //匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)\n```\n\n## 六、字符类，直接写到中括号 [] 中即可\n\n```js\n[aeiou] //匹配任何一个英文元音字母\n\n[.?!] //匹配标点符号\n```\n\n## 七、分枝条件 (|)\n\n```js\n0\\d{2}-\\d{8}|0\\d{3}-\\d{7}   //这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)\n\n\\(0\\d{2}\\)[- ]?\\d{8}|0\\d{2}[- ]?\\d{8}   //匹配3位区号的电话号码\n\n\\d{5}-\\d{4}|\\d{5}   //匹配美国的邮政编码\n```\n\n## 八、分组 (小括号)\n\n```js\n((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)   // 匹配一个ip地址\n```\n\n## 九、反义 （字符串前面加 ^，元字符变大写）\n\n常用的反义代码\n\n| 代码/语法 | 说明                                       |\n| --------- | ------------------------------------------ |\n| \\W        | 匹配任意不是字母，数字，下划线，汉字的字符 |\n| \\S        | 匹配任意不是空白符的字符                   |\n| \\D        | 匹配任意非数字的字符                       |\n| \\B        | 匹配不是单词开头或结束的位置               |\n| [^x]      | 匹配除了x以外的任意字符                    |\n| [^aeiou]  | 匹配除了aeiou这几个字母以外的任意字符      |\n\n```js\n\\S+   //匹配不包含空白符的字符串\n\n<a[^>]+>    //匹配用尖括号括起来的以a开头的字符串\n```\n\n## 十、后向引用\n\n用于重复搜索前面某个分组匹配的文本\n","slug":"正则","published":1,"updated":"2019-08-04T04:34:34.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgub6007r8ex0rc5ujw98","content":"<h2 id=\"一、正则表达式是什么\"><a href=\"#一、正则表达式是什么\" class=\"headerlink\" title=\"一、正则表达式是什么\"></a>一、正则表达式是什么</h2><p>正则表达式就是记录文本规则的代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配中国的电话号码</span></span><br><span class=\"line\"><span class=\"number\">0</span>\\d\\d-\\d\\d\\d\\d\\d\\d\\d\\d</span><br><span class=\"line\"><span class=\"number\">0</span>\\d&#123;<span class=\"number\">2</span>&#125;-\\d&#123;<span class=\"number\">8</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、安装正则测试软件\"><a href=\"#二、安装正则测试软件\" class=\"headerlink\" title=\"二、安装正则测试软件\"></a>二、安装正则测试软件</h2><p>地址： <a href=\"https://deerchao.net/tools/regester/index.htm\" target=\"_blank\" rel=\"noopener\">https://deerchao.net/tools/regester/index.htm</a></p>\n<h2 id=\"三、常用元字符\"><a href=\"#三、常用元字符\" class=\"headerlink\" title=\"三、常用元字符\"></a>三、常用元字符</h2><table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>匹配除换行符以外的任意字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配字母或数字或下划线或汉字</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任意的空白符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配数字</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配单词的开始或结束</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配字符串的开始</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配字符串的结束</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配 qq 号，5——12位</span></span><br><span class=\"line\">^\\d&#123;<span class=\"number\">5</span>,<span class=\"number\">12</span>&#125;$</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、字符转义\"><a href=\"#四、字符转义\" class=\"headerlink\" title=\"四、字符转义\"></a>四、字符转义</h2><p>常用的需要转义的字符：(\\), <em>(\\</em>), .(.)</p>\n<h2 id=\"五、重复\"><a href=\"#五、重复\" class=\"headerlink\" title=\"五、重复\"></a>五、重复</h2><p>常用限定符</p>\n<table>\n<thead>\n<tr>\n<th>代码/语法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>重复零次或更多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>重复一次或更多次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>重复零次或一次</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>重复n次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>重复n次或更多次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>重复n到m次</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows\\d+  <span class=\"comment\">//匹配Windows后面的1个或更多数字</span></span><br><span class=\"line\"></span><br><span class=\"line\">^\\w+  <span class=\"comment\">//匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"六、字符类，直接写到中括号-中即可\"><a href=\"#六、字符类，直接写到中括号-中即可\" class=\"headerlink\" title=\"六、字符类，直接写到中括号 [] 中即可\"></a>六、字符类，直接写到中括号 [] 中即可</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[aeiou] <span class=\"comment\">//匹配任何一个英文元音字母</span></span><br><span class=\"line\"></span><br><span class=\"line\">[.?!] <span class=\"comment\">//匹配标点符号</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"七、分枝条件\"><a href=\"#七、分枝条件\" class=\"headerlink\" title=\"七、分枝条件 (|)\"></a>七、分枝条件 (|)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>\\d&#123;<span class=\"number\">2</span>&#125;-\\d&#123;<span class=\"number\">8</span>&#125;|<span class=\"number\">0</span>\\d&#123;<span class=\"number\">3</span>&#125;-\\d&#123;<span class=\"number\">7</span>&#125;   <span class=\"comment\">//这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\(<span class=\"number\">0</span>\\d&#123;<span class=\"number\">2</span>&#125;\\)[- ]?\\d&#123;<span class=\"number\">8</span>&#125;|<span class=\"number\">0</span>\\d&#123;<span class=\"number\">2</span>&#125;[- ]?\\d&#123;<span class=\"number\">8</span>&#125;   <span class=\"comment\">//匹配3位区号的电话号码</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\d&#123;<span class=\"number\">5</span>&#125;-\\d&#123;<span class=\"number\">4</span>&#125;|\\d&#123;<span class=\"number\">5</span>&#125;   <span class=\"comment\">//匹配美国的邮政编码</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"八、分组-小括号\"><a href=\"#八、分组-小括号\" class=\"headerlink\" title=\"八、分组 (小括号)\"></a>八、分组 (小括号)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>]|[<span class=\"number\">01</span>]?\\d\\d?)\\.)&#123;<span class=\"number\">3</span>&#125;(<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>]|[<span class=\"number\">01</span>]?\\d\\d?)   <span class=\"comment\">// 匹配一个ip地址</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"九、反义-（字符串前面加-，元字符变大写）\"><a href=\"#九、反义-（字符串前面加-，元字符变大写）\" class=\"headerlink\" title=\"九、反义 （字符串前面加 ^，元字符变大写）\"></a>九、反义 （字符串前面加 ^，元字符变大写）</h2><p>常用的反义代码</p>\n<table>\n<thead>\n<tr>\n<th>代码/语法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\W</td>\n<td>匹配任意不是字母，数字，下划线，汉字的字符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任意不是空白符的字符</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配任意非数字的字符</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配不是单词开头或结束的位置</td>\n</tr>\n<tr>\n<td>[^x]</td>\n<td>匹配除了x以外的任意字符</td>\n</tr>\n<tr>\n<td>[^aeiou]</td>\n<td>匹配除了aeiou这几个字母以外的任意字符</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\S+   <span class=\"comment\">//匹配不包含空白符的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;a[^&gt;]+&gt;    <span class=\"comment\">//匹配用尖括号括起来的以a开头的字符串</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"十、后向引用\"><a href=\"#十、后向引用\" class=\"headerlink\" title=\"十、后向引用\"></a>十、后向引用</h2><p>用于重复搜索前面某个分组匹配的文本</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、正则表达式是什么\"><a href=\"#一、正则表达式是什么\" class=\"headerlink\" title=\"一、正则表达式是什么\"></a>一、正则表达式是什么</h2><p>正则表达式就是记录文本规则的代码。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配中国的电话号码</span></span><br><span class=\"line\"><span class=\"number\">0</span>\\d\\d-\\d\\d\\d\\d\\d\\d\\d\\d</span><br><span class=\"line\"><span class=\"number\">0</span>\\d&#123;<span class=\"number\">2</span>&#125;-\\d&#123;<span class=\"number\">8</span>&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、安装正则测试软件\"><a href=\"#二、安装正则测试软件\" class=\"headerlink\" title=\"二、安装正则测试软件\"></a>二、安装正则测试软件</h2><p>地址： <a href=\"https://deerchao.net/tools/regester/index.htm\" target=\"_blank\" rel=\"noopener\">https://deerchao.net/tools/regester/index.htm</a></p>\n<h2 id=\"三、常用元字符\"><a href=\"#三、常用元字符\" class=\"headerlink\" title=\"三、常用元字符\"></a>三、常用元字符</h2><table>\n<thead>\n<tr>\n<th>代码</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.</td>\n<td>匹配除换行符以外的任意字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配字母或数字或下划线或汉字</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任意的空白符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配数字</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配单词的开始或结束</td>\n</tr>\n<tr>\n<td>^</td>\n<td>匹配字符串的开始</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配字符串的结束</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匹配 qq 号，5——12位</span></span><br><span class=\"line\">^\\d&#123;<span class=\"number\">5</span>,<span class=\"number\">12</span>&#125;$</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、字符转义\"><a href=\"#四、字符转义\" class=\"headerlink\" title=\"四、字符转义\"></a>四、字符转义</h2><p>常用的需要转义的字符：(\\), <em>(\\</em>), .(.)</p>\n<h2 id=\"五、重复\"><a href=\"#五、重复\" class=\"headerlink\" title=\"五、重复\"></a>五、重复</h2><p>常用限定符</p>\n<table>\n<thead>\n<tr>\n<th>代码/语法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>重复零次或更多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>重复一次或更多次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>重复零次或一次</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>重复n次</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>重复n次或更多次</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>重复n到m次</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Windows\\d+  <span class=\"comment\">//匹配Windows后面的1个或更多数字</span></span><br><span class=\"line\"></span><br><span class=\"line\">^\\w+  <span class=\"comment\">//匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"六、字符类，直接写到中括号-中即可\"><a href=\"#六、字符类，直接写到中括号-中即可\" class=\"headerlink\" title=\"六、字符类，直接写到中括号 [] 中即可\"></a>六、字符类，直接写到中括号 [] 中即可</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[aeiou] <span class=\"comment\">//匹配任何一个英文元音字母</span></span><br><span class=\"line\"></span><br><span class=\"line\">[.?!] <span class=\"comment\">//匹配标点符号</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"七、分枝条件\"><a href=\"#七、分枝条件\" class=\"headerlink\" title=\"七、分枝条件 (|)\"></a>七、分枝条件 (|)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span>\\d&#123;<span class=\"number\">2</span>&#125;-\\d&#123;<span class=\"number\">8</span>&#125;|<span class=\"number\">0</span>\\d&#123;<span class=\"number\">3</span>&#125;-\\d&#123;<span class=\"number\">7</span>&#125;   <span class=\"comment\">//这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\(<span class=\"number\">0</span>\\d&#123;<span class=\"number\">2</span>&#125;\\)[- ]?\\d&#123;<span class=\"number\">8</span>&#125;|<span class=\"number\">0</span>\\d&#123;<span class=\"number\">2</span>&#125;[- ]?\\d&#123;<span class=\"number\">8</span>&#125;   <span class=\"comment\">//匹配3位区号的电话号码</span></span><br><span class=\"line\"></span><br><span class=\"line\">\\d&#123;<span class=\"number\">5</span>&#125;-\\d&#123;<span class=\"number\">4</span>&#125;|\\d&#123;<span class=\"number\">5</span>&#125;   <span class=\"comment\">//匹配美国的邮政编码</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"八、分组-小括号\"><a href=\"#八、分组-小括号\" class=\"headerlink\" title=\"八、分组 (小括号)\"></a>八、分组 (小括号)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>]|[<span class=\"number\">01</span>]?\\d\\d?)\\.)&#123;<span class=\"number\">3</span>&#125;(<span class=\"number\">2</span>[<span class=\"number\">0</span><span class=\"number\">-4</span>]\\d|<span class=\"number\">25</span>[<span class=\"number\">0</span><span class=\"number\">-5</span>]|[<span class=\"number\">01</span>]?\\d\\d?)   <span class=\"comment\">// 匹配一个ip地址</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"九、反义-（字符串前面加-，元字符变大写）\"><a href=\"#九、反义-（字符串前面加-，元字符变大写）\" class=\"headerlink\" title=\"九、反义 （字符串前面加 ^，元字符变大写）\"></a>九、反义 （字符串前面加 ^，元字符变大写）</h2><p>常用的反义代码</p>\n<table>\n<thead>\n<tr>\n<th>代码/语法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\W</td>\n<td>匹配任意不是字母，数字，下划线，汉字的字符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任意不是空白符的字符</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配任意非数字的字符</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配不是单词开头或结束的位置</td>\n</tr>\n<tr>\n<td>[^x]</td>\n<td>匹配除了x以外的任意字符</td>\n</tr>\n<tr>\n<td>[^aeiou]</td>\n<td>匹配除了aeiou这几个字母以外的任意字符</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\S+   <span class=\"comment\">//匹配不包含空白符的字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;a[^&gt;]+&gt;    <span class=\"comment\">//匹配用尖括号括起来的以a开头的字符串</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"十、后向引用\"><a href=\"#十、后向引用\" class=\"headerlink\" title=\"十、后向引用\"></a>十、后向引用</h2><p>用于重复搜索前面某个分组匹配的文本</p>\n"},{"title":"每周分享第一周（5.27）","date":"2018-05-27T01:59:16.000Z","comments":1,"_content":"\n### 一、 网站\n\n1. [putlockerTV](http://putlockertv.ws/watch/dKoW20nd-westworld-season-2/episode-3.html) 在找西部世界第二季时接触到的一个视频网站，里面有很多热播的各个国家的电视剧可供免费观看，大部分还有不同语言的字母可选，我自己只看得懂英文，所以在看西部世界时就选的英文字母，体验还不错，果断收藏了。\n\n2. [马尔科夫链科普](http://setosa.io/ev/markov-chains/)，这篇文章是在阮一峰的每周分享看到的，读起来通俗易懂，还配合了多个动图，觉得写这个网页的人也是牛逼。\n\n3. [Anaconda 版本库](https://repo.continuum.io/archive/)， 这个网页是在装 tensorflow 时，因为需要 4.2.0 版本，通过官网进来的，里面有 Anaconda 的各个版本可以下载。\n\n### 二、 书籍\n\n1. **《听见坚冰融化的声音》**，这本书是刚发行的陈佩华老师写的书，主题是一些解毒成功者的故事，关于他们吸毒与原生家庭的关系以及戒毒过程中的故事，故事的叙述比较理性，还穿插了许多心理知识的科普，读来受益匪浅。\n\n2. **《大家的日语》**，大概是三月份时候买的书，用来学习日语的课本，一直没怎么翻，周四的时候心血来潮，开始学习，觉得比较像小学时候刚接触语文，给一些句子对话，每篇课文后面是单词表，单靠课本的话学起来比较吃力，还需要一些网上的视频辅助学习，搜了下，发现网易里面路德老师的免费日语教学还可以。\n\n3. **《时间效率手册》**，上个月买的书，看了大概三分之一吧，这几天又拾起来看，对于自律性比较差，处于迷茫阶段的我来说，还是不错的一本书，但是受不了里面的鸡血式的写作风格，很容易让人误以为是强鸡汤，令人厌恶，仔细翻翻还是有一定用的感觉。\n\n### 三、 笔记\n\n1. [Tensorflow 模型训练步骤](http://canace.site/2018/05/27/%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%AD%A5%E9%AA%A4/)\n\n2. [ubuntu 下配置 ss](http://canace.site/2018/05/27/ubuntu%E4%B8%8B%E9%85%8D%E7%BD%AEss/)\n\n3. [ubuntu 下 tensorflow CPU release 版安装](http://canace.site/2018/05/27/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85tensorflow/)\n","source":"_posts/每周分享第一周（5-27）.md","raw":"---\ntitle: 每周分享第一周（5.27）\ndate: 2018-05-27 09:59:16\ncategories: 随笔\ntags: 分享\ncomments: true\n---\n\n### 一、 网站\n\n1. [putlockerTV](http://putlockertv.ws/watch/dKoW20nd-westworld-season-2/episode-3.html) 在找西部世界第二季时接触到的一个视频网站，里面有很多热播的各个国家的电视剧可供免费观看，大部分还有不同语言的字母可选，我自己只看得懂英文，所以在看西部世界时就选的英文字母，体验还不错，果断收藏了。\n\n2. [马尔科夫链科普](http://setosa.io/ev/markov-chains/)，这篇文章是在阮一峰的每周分享看到的，读起来通俗易懂，还配合了多个动图，觉得写这个网页的人也是牛逼。\n\n3. [Anaconda 版本库](https://repo.continuum.io/archive/)， 这个网页是在装 tensorflow 时，因为需要 4.2.0 版本，通过官网进来的，里面有 Anaconda 的各个版本可以下载。\n\n### 二、 书籍\n\n1. **《听见坚冰融化的声音》**，这本书是刚发行的陈佩华老师写的书，主题是一些解毒成功者的故事，关于他们吸毒与原生家庭的关系以及戒毒过程中的故事，故事的叙述比较理性，还穿插了许多心理知识的科普，读来受益匪浅。\n\n2. **《大家的日语》**，大概是三月份时候买的书，用来学习日语的课本，一直没怎么翻，周四的时候心血来潮，开始学习，觉得比较像小学时候刚接触语文，给一些句子对话，每篇课文后面是单词表，单靠课本的话学起来比较吃力，还需要一些网上的视频辅助学习，搜了下，发现网易里面路德老师的免费日语教学还可以。\n\n3. **《时间效率手册》**，上个月买的书，看了大概三分之一吧，这几天又拾起来看，对于自律性比较差，处于迷茫阶段的我来说，还是不错的一本书，但是受不了里面的鸡血式的写作风格，很容易让人误以为是强鸡汤，令人厌恶，仔细翻翻还是有一定用的感觉。\n\n### 三、 笔记\n\n1. [Tensorflow 模型训练步骤](http://canace.site/2018/05/27/%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%AD%A5%E9%AA%A4/)\n\n2. [ubuntu 下配置 ss](http://canace.site/2018/05/27/ubuntu%E4%B8%8B%E9%85%8D%E7%BD%AEss/)\n\n3. [ubuntu 下 tensorflow CPU release 版安装](http://canace.site/2018/05/27/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85tensorflow/)\n","slug":"每周分享第一周（5-27）","published":1,"updated":"2019-05-19T06:12:18.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgub7007u8ex0fdmbuisg","content":"<h3 id=\"一、-网站\"><a href=\"#一、-网站\" class=\"headerlink\" title=\"一、 网站\"></a>一、 网站</h3><ol>\n<li><p><a href=\"http://putlockertv.ws/watch/dKoW20nd-westworld-season-2/episode-3.html\" target=\"_blank\" rel=\"noopener\">putlockerTV</a> 在找西部世界第二季时接触到的一个视频网站，里面有很多热播的各个国家的电视剧可供免费观看，大部分还有不同语言的字母可选，我自己只看得懂英文，所以在看西部世界时就选的英文字母，体验还不错，果断收藏了。</p>\n</li>\n<li><p><a href=\"http://setosa.io/ev/markov-chains/\" target=\"_blank\" rel=\"noopener\">马尔科夫链科普</a>，这篇文章是在阮一峰的每周分享看到的，读起来通俗易懂，还配合了多个动图，觉得写这个网页的人也是牛逼。</p>\n</li>\n<li><p><a href=\"https://repo.continuum.io/archive/\" target=\"_blank\" rel=\"noopener\">Anaconda 版本库</a>， 这个网页是在装 tensorflow 时，因为需要 4.2.0 版本，通过官网进来的，里面有 Anaconda 的各个版本可以下载。</p>\n</li>\n</ol>\n<h3 id=\"二、-书籍\"><a href=\"#二、-书籍\" class=\"headerlink\" title=\"二、 书籍\"></a>二、 书籍</h3><ol>\n<li><p><strong>《听见坚冰融化的声音》</strong>，这本书是刚发行的陈佩华老师写的书，主题是一些解毒成功者的故事，关于他们吸毒与原生家庭的关系以及戒毒过程中的故事，故事的叙述比较理性，还穿插了许多心理知识的科普，读来受益匪浅。</p>\n</li>\n<li><p><strong>《大家的日语》</strong>，大概是三月份时候买的书，用来学习日语的课本，一直没怎么翻，周四的时候心血来潮，开始学习，觉得比较像小学时候刚接触语文，给一些句子对话，每篇课文后面是单词表，单靠课本的话学起来比较吃力，还需要一些网上的视频辅助学习，搜了下，发现网易里面路德老师的免费日语教学还可以。</p>\n</li>\n<li><p><strong>《时间效率手册》</strong>，上个月买的书，看了大概三分之一吧，这几天又拾起来看，对于自律性比较差，处于迷茫阶段的我来说，还是不错的一本书，但是受不了里面的鸡血式的写作风格，很容易让人误以为是强鸡汤，令人厌恶，仔细翻翻还是有一定用的感觉。</p>\n</li>\n</ol>\n<h3 id=\"三、-笔记\"><a href=\"#三、-笔记\" class=\"headerlink\" title=\"三、 笔记\"></a>三、 笔记</h3><ol>\n<li><p><a href=\"http://canace.site/2018/05/27/%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%AD%A5%E9%AA%A4/\">Tensorflow 模型训练步骤</a></p>\n</li>\n<li><p><a href=\"http://canace.site/2018/05/27/ubuntu%E4%B8%8B%E9%85%8D%E7%BD%AEss/\">ubuntu 下配置 ss</a></p>\n</li>\n<li><p><a href=\"http://canace.site/2018/05/27/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85tensorflow/\">ubuntu 下 tensorflow CPU release 版安装</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、-网站\"><a href=\"#一、-网站\" class=\"headerlink\" title=\"一、 网站\"></a>一、 网站</h3><ol>\n<li><p><a href=\"http://putlockertv.ws/watch/dKoW20nd-westworld-season-2/episode-3.html\" target=\"_blank\" rel=\"noopener\">putlockerTV</a> 在找西部世界第二季时接触到的一个视频网站，里面有很多热播的各个国家的电视剧可供免费观看，大部分还有不同语言的字母可选，我自己只看得懂英文，所以在看西部世界时就选的英文字母，体验还不错，果断收藏了。</p>\n</li>\n<li><p><a href=\"http://setosa.io/ev/markov-chains/\" target=\"_blank\" rel=\"noopener\">马尔科夫链科普</a>，这篇文章是在阮一峰的每周分享看到的，读起来通俗易懂，还配合了多个动图，觉得写这个网页的人也是牛逼。</p>\n</li>\n<li><p><a href=\"https://repo.continuum.io/archive/\" target=\"_blank\" rel=\"noopener\">Anaconda 版本库</a>， 这个网页是在装 tensorflow 时，因为需要 4.2.0 版本，通过官网进来的，里面有 Anaconda 的各个版本可以下载。</p>\n</li>\n</ol>\n<h3 id=\"二、-书籍\"><a href=\"#二、-书籍\" class=\"headerlink\" title=\"二、 书籍\"></a>二、 书籍</h3><ol>\n<li><p><strong>《听见坚冰融化的声音》</strong>，这本书是刚发行的陈佩华老师写的书，主题是一些解毒成功者的故事，关于他们吸毒与原生家庭的关系以及戒毒过程中的故事，故事的叙述比较理性，还穿插了许多心理知识的科普，读来受益匪浅。</p>\n</li>\n<li><p><strong>《大家的日语》</strong>，大概是三月份时候买的书，用来学习日语的课本，一直没怎么翻，周四的时候心血来潮，开始学习，觉得比较像小学时候刚接触语文，给一些句子对话，每篇课文后面是单词表，单靠课本的话学起来比较吃力，还需要一些网上的视频辅助学习，搜了下，发现网易里面路德老师的免费日语教学还可以。</p>\n</li>\n<li><p><strong>《时间效率手册》</strong>，上个月买的书，看了大概三分之一吧，这几天又拾起来看，对于自律性比较差，处于迷茫阶段的我来说，还是不错的一本书，但是受不了里面的鸡血式的写作风格，很容易让人误以为是强鸡汤，令人厌恶，仔细翻翻还是有一定用的感觉。</p>\n</li>\n</ol>\n<h3 id=\"三、-笔记\"><a href=\"#三、-笔记\" class=\"headerlink\" title=\"三、 笔记\"></a>三、 笔记</h3><ol>\n<li><p><a href=\"http://canace.site/2018/05/27/%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%AD%A5%E9%AA%A4/\">Tensorflow 模型训练步骤</a></p>\n</li>\n<li><p><a href=\"http://canace.site/2018/05/27/ubuntu%E4%B8%8B%E9%85%8D%E7%BD%AEss/\">ubuntu 下配置 ss</a></p>\n</li>\n<li><p><a href=\"http://canace.site/2018/05/27/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85tensorflow/\">ubuntu 下 tensorflow CPU release 版安装</a></p>\n</li>\n</ol>\n"},{"title":"每周分享第三周（6-8)","comments":1,"date":"2018-06-08T07:54:51.000Z","_content":"\n### 一、 技术\n\n1. 计算器的四则运算算法,前几天在看自己之前写过的一些小项目，看到了大三写的[简易计算器](https://canace22.github.io/calculate/)，主要是实现四则运算和基本的归零操作。大概思路是把整个项目分成两大块，即显示部分和运算部分。首先捕捉鼠标按下的事件，获取按下的值，把数字存到一个 num 数组里，把符号保存到 symbol 数组里。显示部分是以连接 num 数字和 symbol 数字实现的。计算部分是通过边里符号数组，当是某个符号的时候就进行某个运算。比如，遍历到“+”的时候，就把“+”号前后的两个数进行加法操作。一开始这里是有问题的，因为我们的四则运算是遵循先乘除再加减的，所以这里如何保证做到这一点能？我采用的是把乘除的判断放在了加减之前，这样就可以做到了。\n\n2. 冒泡算法和快速排序算法怎么解释？用我自己的话来讲，冒泡算法就是就像我们在学校的时候排队，两两对比，个子高的站在前面，个子矮的站在后面，循环进行这种操作，最后就按照从高到矮的顺序排好队了。（当然你也可以从矮到高排的，同理）。快速排序算法就是以中间的同学为基准，两边进行对比，比中间同学高的站左边，比中间同学低的站右边，然后左右分出来的小块再循环进行这种对比，直到排序完成。\n\n### 二、 笔记\n\n1. [Sublime Text3 配置 node.js 环境](http://canace.site/2018/06/08/sublime-text-nodeJS%E9%85%8D%E7%BD%AE/)\n\n2. [ 写给大家看的算法书笔记](http://canace.site/2018/06/07/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%A6%E7%AC%94%E8%AE%B0/)\n\n3. [前端面试总结——读书郎](http://canace.site/2018/06/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E8%AF%BB%E4%B9%A6%E9%83%8E/)\n","source":"_posts/每周分享第三周（6-8).md","raw":"---\ntitle: 每周分享第三周（6-8)\ncomments: true\ndate: 2018-06-08 15:54:51\ncategories: 随笔\ntags: 分享\n---\n\n### 一、 技术\n\n1. 计算器的四则运算算法,前几天在看自己之前写过的一些小项目，看到了大三写的[简易计算器](https://canace22.github.io/calculate/)，主要是实现四则运算和基本的归零操作。大概思路是把整个项目分成两大块，即显示部分和运算部分。首先捕捉鼠标按下的事件，获取按下的值，把数字存到一个 num 数组里，把符号保存到 symbol 数组里。显示部分是以连接 num 数字和 symbol 数字实现的。计算部分是通过边里符号数组，当是某个符号的时候就进行某个运算。比如，遍历到“+”的时候，就把“+”号前后的两个数进行加法操作。一开始这里是有问题的，因为我们的四则运算是遵循先乘除再加减的，所以这里如何保证做到这一点能？我采用的是把乘除的判断放在了加减之前，这样就可以做到了。\n\n2. 冒泡算法和快速排序算法怎么解释？用我自己的话来讲，冒泡算法就是就像我们在学校的时候排队，两两对比，个子高的站在前面，个子矮的站在后面，循环进行这种操作，最后就按照从高到矮的顺序排好队了。（当然你也可以从矮到高排的，同理）。快速排序算法就是以中间的同学为基准，两边进行对比，比中间同学高的站左边，比中间同学低的站右边，然后左右分出来的小块再循环进行这种对比，直到排序完成。\n\n### 二、 笔记\n\n1. [Sublime Text3 配置 node.js 环境](http://canace.site/2018/06/08/sublime-text-nodeJS%E9%85%8D%E7%BD%AE/)\n\n2. [ 写给大家看的算法书笔记](http://canace.site/2018/06/07/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%A6%E7%AC%94%E8%AE%B0/)\n\n3. [前端面试总结——读书郎](http://canace.site/2018/06/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E8%AF%BB%E4%B9%A6%E9%83%8E/)\n","slug":"每周分享第三周（6-8)","published":1,"updated":"2019-05-19T06:12:28.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgub8007y8ex0befupan3","content":"<h3 id=\"一、-技术\"><a href=\"#一、-技术\" class=\"headerlink\" title=\"一、 技术\"></a>一、 技术</h3><ol>\n<li><p>计算器的四则运算算法,前几天在看自己之前写过的一些小项目，看到了大三写的<a href=\"https://canace22.github.io/calculate/\" target=\"_blank\" rel=\"noopener\">简易计算器</a>，主要是实现四则运算和基本的归零操作。大概思路是把整个项目分成两大块，即显示部分和运算部分。首先捕捉鼠标按下的事件，获取按下的值，把数字存到一个 num 数组里，把符号保存到 symbol 数组里。显示部分是以连接 num 数字和 symbol 数字实现的。计算部分是通过边里符号数组，当是某个符号的时候就进行某个运算。比如，遍历到“+”的时候，就把“+”号前后的两个数进行加法操作。一开始这里是有问题的，因为我们的四则运算是遵循先乘除再加减的，所以这里如何保证做到这一点能？我采用的是把乘除的判断放在了加减之前，这样就可以做到了。</p>\n</li>\n<li><p>冒泡算法和快速排序算法怎么解释？用我自己的话来讲，冒泡算法就是就像我们在学校的时候排队，两两对比，个子高的站在前面，个子矮的站在后面，循环进行这种操作，最后就按照从高到矮的顺序排好队了。（当然你也可以从矮到高排的，同理）。快速排序算法就是以中间的同学为基准，两边进行对比，比中间同学高的站左边，比中间同学低的站右边，然后左右分出来的小块再循环进行这种对比，直到排序完成。</p>\n</li>\n</ol>\n<h3 id=\"二、-笔记\"><a href=\"#二、-笔记\" class=\"headerlink\" title=\"二、 笔记\"></a>二、 笔记</h3><ol>\n<li><p><a href=\"http://canace.site/2018/06/08/sublime-text-nodeJS%E9%85%8D%E7%BD%AE/\">Sublime Text3 配置 node.js 环境</a></p>\n</li>\n<li><p><a href=\"http://canace.site/2018/06/07/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%A6%E7%AC%94%E8%AE%B0/\"> 写给大家看的算法书笔记</a></p>\n</li>\n<li><p><a href=\"http://canace.site/2018/06/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E8%AF%BB%E4%B9%A6%E9%83%8E/\">前端面试总结——读书郎</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、-技术\"><a href=\"#一、-技术\" class=\"headerlink\" title=\"一、 技术\"></a>一、 技术</h3><ol>\n<li><p>计算器的四则运算算法,前几天在看自己之前写过的一些小项目，看到了大三写的<a href=\"https://canace22.github.io/calculate/\" target=\"_blank\" rel=\"noopener\">简易计算器</a>，主要是实现四则运算和基本的归零操作。大概思路是把整个项目分成两大块，即显示部分和运算部分。首先捕捉鼠标按下的事件，获取按下的值，把数字存到一个 num 数组里，把符号保存到 symbol 数组里。显示部分是以连接 num 数字和 symbol 数字实现的。计算部分是通过边里符号数组，当是某个符号的时候就进行某个运算。比如，遍历到“+”的时候，就把“+”号前后的两个数进行加法操作。一开始这里是有问题的，因为我们的四则运算是遵循先乘除再加减的，所以这里如何保证做到这一点能？我采用的是把乘除的判断放在了加减之前，这样就可以做到了。</p>\n</li>\n<li><p>冒泡算法和快速排序算法怎么解释？用我自己的话来讲，冒泡算法就是就像我们在学校的时候排队，两两对比，个子高的站在前面，个子矮的站在后面，循环进行这种操作，最后就按照从高到矮的顺序排好队了。（当然你也可以从矮到高排的，同理）。快速排序算法就是以中间的同学为基准，两边进行对比，比中间同学高的站左边，比中间同学低的站右边，然后左右分出来的小块再循环进行这种对比，直到排序完成。</p>\n</li>\n</ol>\n<h3 id=\"二、-笔记\"><a href=\"#二、-笔记\" class=\"headerlink\" title=\"二、 笔记\"></a>二、 笔记</h3><ol>\n<li><p><a href=\"http://canace.site/2018/06/08/sublime-text-nodeJS%E9%85%8D%E7%BD%AE/\">Sublime Text3 配置 node.js 环境</a></p>\n</li>\n<li><p><a href=\"http://canace.site/2018/06/07/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%A6%E7%AC%94%E8%AE%B0/\"> 写给大家看的算法书笔记</a></p>\n</li>\n<li><p><a href=\"http://canace.site/2018/06/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E8%AF%BB%E4%B9%A6%E9%83%8E/\">前端面试总结——读书郎</a></p>\n</li>\n</ol>\n"},{"title":"每周分享第二周（6.2）","date":"2018-06-02T09:00:11.000Z","comments":1,"_content":"\n> Tomorrow is another day.\n\n### 一、 网站\n\n1. 8090，一个免费电影网站，可以免费看挺多高清电影的，不过有人说涉黄的视频也多，这个可以忽略，看自己想看的电影就可以了，免去了下载的流程。\n\n2. 鸠摩搜索，一个可以搜索电子书资源 ，并免费下载的网站，看着不错，之前一直用周读下电子书来着，界面还是更喜欢周读，不过这个看着也还行。\n\n3. 谷歌翻译 APP，据说可以进行各种语言的实时翻译，解决语言交流障碍问题，从此一部手机，一个 APP 走天下，挺起来还不错的样子。\n\n### 二、 书籍\n\n《放弃的艺术》，从心理学的角度探讨如何在适当的时候选择放弃，而不是一味坚持，看似感性，实则理性十足的一本书。\n","source":"_posts/每周分享第二周（6-2）.md","raw":"---\ntitle: 每周分享第二周（6.2）\ndate: 2018-06-2 17:00:11\ncategories: 随笔\ntags: 分享\ncomments: true\n---\n\n> Tomorrow is another day.\n\n### 一、 网站\n\n1. 8090，一个免费电影网站，可以免费看挺多高清电影的，不过有人说涉黄的视频也多，这个可以忽略，看自己想看的电影就可以了，免去了下载的流程。\n\n2. 鸠摩搜索，一个可以搜索电子书资源 ，并免费下载的网站，看着不错，之前一直用周读下电子书来着，界面还是更喜欢周读，不过这个看着也还行。\n\n3. 谷歌翻译 APP，据说可以进行各种语言的实时翻译，解决语言交流障碍问题，从此一部手机，一个 APP 走天下，挺起来还不错的样子。\n\n### 二、 书籍\n\n《放弃的艺术》，从心理学的角度探讨如何在适当的时候选择放弃，而不是一味坚持，看似感性，实则理性十足的一本书。\n","slug":"每周分享第二周（6-2）","published":1,"updated":"2019-05-19T06:12:36.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgub900818ex0bnmdn1is","content":"<blockquote>\n<p>Tomorrow is another day.</p>\n</blockquote>\n<h3 id=\"一、-网站\"><a href=\"#一、-网站\" class=\"headerlink\" title=\"一、 网站\"></a>一、 网站</h3><ol>\n<li><p>8090，一个免费电影网站，可以免费看挺多高清电影的，不过有人说涉黄的视频也多，这个可以忽略，看自己想看的电影就可以了，免去了下载的流程。</p>\n</li>\n<li><p>鸠摩搜索，一个可以搜索电子书资源 ，并免费下载的网站，看着不错，之前一直用周读下电子书来着，界面还是更喜欢周读，不过这个看着也还行。</p>\n</li>\n<li><p>谷歌翻译 APP，据说可以进行各种语言的实时翻译，解决语言交流障碍问题，从此一部手机，一个 APP 走天下，挺起来还不错的样子。</p>\n</li>\n</ol>\n<h3 id=\"二、-书籍\"><a href=\"#二、-书籍\" class=\"headerlink\" title=\"二、 书籍\"></a>二、 书籍</h3><p>《放弃的艺术》，从心理学的角度探讨如何在适当的时候选择放弃，而不是一味坚持，看似感性，实则理性十足的一本书。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Tomorrow is another day.</p>\n</blockquote>\n<h3 id=\"一、-网站\"><a href=\"#一、-网站\" class=\"headerlink\" title=\"一、 网站\"></a>一、 网站</h3><ol>\n<li><p>8090，一个免费电影网站，可以免费看挺多高清电影的，不过有人说涉黄的视频也多，这个可以忽略，看自己想看的电影就可以了，免去了下载的流程。</p>\n</li>\n<li><p>鸠摩搜索，一个可以搜索电子书资源 ，并免费下载的网站，看着不错，之前一直用周读下电子书来着，界面还是更喜欢周读，不过这个看着也还行。</p>\n</li>\n<li><p>谷歌翻译 APP，据说可以进行各种语言的实时翻译，解决语言交流障碍问题，从此一部手机，一个 APP 走天下，挺起来还不错的样子。</p>\n</li>\n</ol>\n<h3 id=\"二、-书籍\"><a href=\"#二、-书籍\" class=\"headerlink\" title=\"二、 书籍\"></a>二、 书籍</h3><p>《放弃的艺术》，从心理学的角度探讨如何在适当的时候选择放弃，而不是一味坚持，看似感性，实则理性十足的一本书。</p>\n"},{"title":"海边的曼彻斯特","date":"2018-05-20T08:59:59.000Z","_content":"看完这部影片，用一个词来形容就是安静，安静的环境下，平凡的生活，同时又夹杂着男主人过去的故事。很喜欢这种叙述方式，通过唯美的画面，渲染故事情节，将男主人公的伤心，悔恨，往事不堪回首等种种复杂心情，一一展现。\n\n整部片围绕乔的葬礼，层层铺垫，叙事朴实而又不会让人觉得乏味。\n\n在看影片的过程中，我就想：要是自己能死于这样大雪纷飞的冬天里，那该多好啊，估计此生也无憾了吧。摇荡的海水也是我喜欢的，它使人冷静而又充满了哲思。\n","source":"_posts/海边的曼彻斯特.md","raw":"---\ntitle: 海边的曼彻斯特\ndate: 2018-05-20 16:59:59\ncategories: 随笔\ntags: 影评\n---\n看完这部影片，用一个词来形容就是安静，安静的环境下，平凡的生活，同时又夹杂着男主人过去的故事。很喜欢这种叙述方式，通过唯美的画面，渲染故事情节，将男主人公的伤心，悔恨，往事不堪回首等种种复杂心情，一一展现。\n\n整部片围绕乔的葬礼，层层铺垫，叙事朴实而又不会让人觉得乏味。\n\n在看影片的过程中，我就想：要是自己能死于这样大雪纷飞的冬天里，那该多好啊，估计此生也无憾了吧。摇荡的海水也是我喜欢的，它使人冷静而又充满了哲思。\n","slug":"海边的曼彻斯特","published":1,"updated":"2018-06-08T01:41:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dbguba00848ex0m98f20wq","content":"<p>看完这部影片，用一个词来形容就是安静，安静的环境下，平凡的生活，同时又夹杂着男主人过去的故事。很喜欢这种叙述方式，通过唯美的画面，渲染故事情节，将男主人公的伤心，悔恨，往事不堪回首等种种复杂心情，一一展现。</p>\n<p>整部片围绕乔的葬礼，层层铺垫，叙事朴实而又不会让人觉得乏味。</p>\n<p>在看影片的过程中，我就想：要是自己能死于这样大雪纷飞的冬天里，那该多好啊，估计此生也无憾了吧。摇荡的海水也是我喜欢的，它使人冷静而又充满了哲思。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>看完这部影片，用一个词来形容就是安静，安静的环境下，平凡的生活，同时又夹杂着男主人过去的故事。很喜欢这种叙述方式，通过唯美的画面，渲染故事情节，将男主人公的伤心，悔恨，往事不堪回首等种种复杂心情，一一展现。</p>\n<p>整部片围绕乔的葬礼，层层铺垫，叙事朴实而又不会让人觉得乏味。</p>\n<p>在看影片的过程中，我就想：要是自己能死于这样大雪纷飞的冬天里，那该多好啊，估计此生也无憾了吧。摇荡的海水也是我喜欢的，它使人冷静而又充满了哲思。</p>\n"},{"title":"深度工作哲学解读","date":"2018-05-20T09:01:28.000Z","_content":"卡尔.纽波特的《深度工作》一书中提到，深度工作的哲学包括以下几种：\n\n1. 禁欲主义哲学；\n\n2. 双峰哲学；\n\n3. 节奏哲学；\n\n4. 新闻工作者哲学；\n\n以下是个人的一下理解：\n\n1. 深度工作与浮浅工作相对，是一种排除外界干扰，长时间连续的集中全部精力于某一项活动的工作形式。\n\n2. 以上四种深度工作哲学按专注时间从长到短的顺序排列依次是：禁欲主义哲学 > 双峰哲学 > 节奏哲学 > 新闻工作者哲学。\n\n3. 禁欲主义哲学主张工作中全力排除一切干扰，专注于工作，比如说作家隐居写作就是运用了这种深度工作哲学，适合使用这种哲学的人，一般是有很高的职业追求的人，并且这种人的职业看得到实际的产出，比如说作家一年要出多少本书。此外，使用这种哲学要求长时间的与世隔绝，过一种苦行僧式的生活。\n\n4. 双峰哲学是把生活中的时间分为部分，一部分用于深度工作，一部分用于浮浅工作。比如说一年有十二个月，可以预备三个月完全与世隔绝，用来进行深度工作。或者是每一周花一天完全与世隔绝进行深度工作。这种哲学要求要有大于一天的深度工作时间，可以说适合大部分人。\n\n5. 节奏哲学主张养成深度工作的习惯，每天花一部分的时间进行深度学习。比如八点半上班，可以五点起来进行深度工作到七点半。这是个人比较推崇的一种深度工作哲学，这种哲学可以保证每天都有一定的高效工作的时间，可以做任何自己想做的目标事物，坚持一段时间就能看到产出，还是很不错的，适合任何有有目标的人群。\n\n6. 新闻工作者哲学，顾名思义，像新闻工作者一样，随时可以进入状态。这种哲学只适合已熟使用其他哲学的少部分人，要求随时能够进入到深度工作的状态。\n\n","source":"_posts/深度工作哲学解读.md","raw":"---\ntitle: 深度工作哲学解读\ndate: 2018-05-20 17:01:28\ncategories: 随笔\ntags: 笔记\n---\n卡尔.纽波特的《深度工作》一书中提到，深度工作的哲学包括以下几种：\n\n1. 禁欲主义哲学；\n\n2. 双峰哲学；\n\n3. 节奏哲学；\n\n4. 新闻工作者哲学；\n\n以下是个人的一下理解：\n\n1. 深度工作与浮浅工作相对，是一种排除外界干扰，长时间连续的集中全部精力于某一项活动的工作形式。\n\n2. 以上四种深度工作哲学按专注时间从长到短的顺序排列依次是：禁欲主义哲学 > 双峰哲学 > 节奏哲学 > 新闻工作者哲学。\n\n3. 禁欲主义哲学主张工作中全力排除一切干扰，专注于工作，比如说作家隐居写作就是运用了这种深度工作哲学，适合使用这种哲学的人，一般是有很高的职业追求的人，并且这种人的职业看得到实际的产出，比如说作家一年要出多少本书。此外，使用这种哲学要求长时间的与世隔绝，过一种苦行僧式的生活。\n\n4. 双峰哲学是把生活中的时间分为部分，一部分用于深度工作，一部分用于浮浅工作。比如说一年有十二个月，可以预备三个月完全与世隔绝，用来进行深度工作。或者是每一周花一天完全与世隔绝进行深度工作。这种哲学要求要有大于一天的深度工作时间，可以说适合大部分人。\n\n5. 节奏哲学主张养成深度工作的习惯，每天花一部分的时间进行深度学习。比如八点半上班，可以五点起来进行深度工作到七点半。这是个人比较推崇的一种深度工作哲学，这种哲学可以保证每天都有一定的高效工作的时间，可以做任何自己想做的目标事物，坚持一段时间就能看到产出，还是很不错的，适合任何有有目标的人群。\n\n6. 新闻工作者哲学，顾名思义，像新闻工作者一样，随时可以进入状态。这种哲学只适合已熟使用其他哲学的少部分人，要求随时能够进入到深度工作的状态。\n\n","slug":"深度工作哲学解读","published":1,"updated":"2018-06-08T01:45:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dbgubb00878ex0pzxsdwdl","content":"<p>卡尔.纽波特的《深度工作》一书中提到，深度工作的哲学包括以下几种：</p>\n<ol>\n<li><p>禁欲主义哲学；</p>\n</li>\n<li><p>双峰哲学；</p>\n</li>\n<li><p>节奏哲学；</p>\n</li>\n<li><p>新闻工作者哲学；</p>\n</li>\n</ol>\n<p>以下是个人的一下理解：</p>\n<ol>\n<li><p>深度工作与浮浅工作相对，是一种排除外界干扰，长时间连续的集中全部精力于某一项活动的工作形式。</p>\n</li>\n<li><p>以上四种深度工作哲学按专注时间从长到短的顺序排列依次是：禁欲主义哲学 &gt; 双峰哲学 &gt; 节奏哲学 &gt; 新闻工作者哲学。</p>\n</li>\n<li><p>禁欲主义哲学主张工作中全力排除一切干扰，专注于工作，比如说作家隐居写作就是运用了这种深度工作哲学，适合使用这种哲学的人，一般是有很高的职业追求的人，并且这种人的职业看得到实际的产出，比如说作家一年要出多少本书。此外，使用这种哲学要求长时间的与世隔绝，过一种苦行僧式的生活。</p>\n</li>\n<li><p>双峰哲学是把生活中的时间分为部分，一部分用于深度工作，一部分用于浮浅工作。比如说一年有十二个月，可以预备三个月完全与世隔绝，用来进行深度工作。或者是每一周花一天完全与世隔绝进行深度工作。这种哲学要求要有大于一天的深度工作时间，可以说适合大部分人。</p>\n</li>\n<li><p>节奏哲学主张养成深度工作的习惯，每天花一部分的时间进行深度学习。比如八点半上班，可以五点起来进行深度工作到七点半。这是个人比较推崇的一种深度工作哲学，这种哲学可以保证每天都有一定的高效工作的时间，可以做任何自己想做的目标事物，坚持一段时间就能看到产出，还是很不错的，适合任何有有目标的人群。</p>\n</li>\n<li><p>新闻工作者哲学，顾名思义，像新闻工作者一样，随时可以进入状态。这种哲学只适合已熟使用其他哲学的少部分人，要求随时能够进入到深度工作的状态。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>卡尔.纽波特的《深度工作》一书中提到，深度工作的哲学包括以下几种：</p>\n<ol>\n<li><p>禁欲主义哲学；</p>\n</li>\n<li><p>双峰哲学；</p>\n</li>\n<li><p>节奏哲学；</p>\n</li>\n<li><p>新闻工作者哲学；</p>\n</li>\n</ol>\n<p>以下是个人的一下理解：</p>\n<ol>\n<li><p>深度工作与浮浅工作相对，是一种排除外界干扰，长时间连续的集中全部精力于某一项活动的工作形式。</p>\n</li>\n<li><p>以上四种深度工作哲学按专注时间从长到短的顺序排列依次是：禁欲主义哲学 &gt; 双峰哲学 &gt; 节奏哲学 &gt; 新闻工作者哲学。</p>\n</li>\n<li><p>禁欲主义哲学主张工作中全力排除一切干扰，专注于工作，比如说作家隐居写作就是运用了这种深度工作哲学，适合使用这种哲学的人，一般是有很高的职业追求的人，并且这种人的职业看得到实际的产出，比如说作家一年要出多少本书。此外，使用这种哲学要求长时间的与世隔绝，过一种苦行僧式的生活。</p>\n</li>\n<li><p>双峰哲学是把生活中的时间分为部分，一部分用于深度工作，一部分用于浮浅工作。比如说一年有十二个月，可以预备三个月完全与世隔绝，用来进行深度工作。或者是每一周花一天完全与世隔绝进行深度工作。这种哲学要求要有大于一天的深度工作时间，可以说适合大部分人。</p>\n</li>\n<li><p>节奏哲学主张养成深度工作的习惯，每天花一部分的时间进行深度学习。比如八点半上班，可以五点起来进行深度工作到七点半。这是个人比较推崇的一种深度工作哲学，这种哲学可以保证每天都有一定的高效工作的时间，可以做任何自己想做的目标事物，坚持一段时间就能看到产出，还是很不错的，适合任何有有目标的人群。</p>\n</li>\n<li><p>新闻工作者哲学，顾名思义，像新闻工作者一样，随时可以进入状态。这种哲学只适合已熟使用其他哲学的少部分人，要求随时能够进入到深度工作的状态。</p>\n</li>\n</ol>\n"},{"title":"文件命名为什么提倡用英文小写字母而不用大写字母","comments":1,"date":"2019-11-08T00:54:45.000Z","_content":"\n开发遇到了个问题，项目在本地编译得好好的，在 ci 上编译一直报错，说是找不到路径，本地看了好多遍路径都是对的，感觉是玄学。\n\n想了想没做什么操作，就是看不习惯之前的命名方式，好几个单词写在一起，想统一成驼峰命名法，于是把两个文件夹的两 a 个单词开头写成了大写字母~\n\n后来发现就是这个在 win 系统下手动改文件名由大写改为小写的锅，因为在 win 系统中是大小写不区分的，导致在 git push 的时候，push 上去的文件还是那个全是小写字母的，所以会一直报找不到路径的错误。但是如果文件一开始就是驼峰命名法，就不存在这个问题了，因为提交上去的就是新的文件。\n","source":"_posts/文件命名踩坑记录.md","raw":"---\ntitle: 文件命名为什么提倡用英文小写字母而不用大写字母\ncomments: true\ndate: 2019-11-08 08:54:45\ncategories: web\ntags: 开发风格\n---\n\n开发遇到了个问题，项目在本地编译得好好的，在 ci 上编译一直报错，说是找不到路径，本地看了好多遍路径都是对的，感觉是玄学。\n\n想了想没做什么操作，就是看不习惯之前的命名方式，好几个单词写在一起，想统一成驼峰命名法，于是把两个文件夹的两 a 个单词开头写成了大写字母~\n\n后来发现就是这个在 win 系统下手动改文件名由大写改为小写的锅，因为在 win 系统中是大小写不区分的，导致在 git push 的时候，push 上去的文件还是那个全是小写字母的，所以会一直报找不到路径的错误。但是如果文件一开始就是驼峰命名法，就不存在这个问题了，因为提交上去的就是新的文件。\n","slug":"文件命名踩坑记录","published":1,"updated":"2019-11-08T00:57:30.591Z","layout":"post","photos":[],"link":"","_id":"ck5dbgubb00898ex0br3jrtzb","content":"<p>开发遇到了个问题，项目在本地编译得好好的，在 ci 上编译一直报错，说是找不到路径，本地看了好多遍路径都是对的，感觉是玄学。</p>\n<p>想了想没做什么操作，就是看不习惯之前的命名方式，好几个单词写在一起，想统一成驼峰命名法，于是把两个文件夹的两 a 个单词开头写成了大写字母~</p>\n<p>后来发现就是这个在 win 系统下手动改文件名由大写改为小写的锅，因为在 win 系统中是大小写不区分的，导致在 git push 的时候，push 上去的文件还是那个全是小写字母的，所以会一直报找不到路径的错误。但是如果文件一开始就是驼峰命名法，就不存在这个问题了，因为提交上去的就是新的文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>开发遇到了个问题，项目在本地编译得好好的，在 ci 上编译一直报错，说是找不到路径，本地看了好多遍路径都是对的，感觉是玄学。</p>\n<p>想了想没做什么操作，就是看不习惯之前的命名方式，好几个单词写在一起，想统一成驼峰命名法，于是把两个文件夹的两 a 个单词开头写成了大写字母~</p>\n<p>后来发现就是这个在 win 系统下手动改文件名由大写改为小写的锅，因为在 win 系统中是大小写不区分的，导致在 git push 的时候，push 上去的文件还是那个全是小写字母的，所以会一直报找不到路径的错误。但是如果文件一开始就是驼峰命名法，就不存在这个问题了，因为提交上去的就是新的文件。</p>\n"},{"title":"火狐删除各种虚线框","comments":1,"date":"2019-02-12T01:04:08.000Z","_content":"\n1. 删除按钮虚线框\n\n   ```css\n   <!-- 火狐浏览器，去除按钮虚线框 -- > button::-moz-focus-inner,\n   input[type='reset']::-moz-focus-inner,\n   input[type='button']::-moz-focus-inner,\n   input[type='submit']::-moz-focus-inner,\n   input[type='file'] > input[type='button']::-moz-focus-inner {\n     border: none;\n   }\n   ```\n\n2. 删除 range 虚线框\n\n   ```css\n   input[type='range']:focus {\n     outline: none;\n   }\n   input[type='range']::-moz-focus-outer {\n     border: none;\n   }\n   ```\n","source":"_posts/火狐删除各种虚线框.md","raw":"---\ntitle: 火狐删除各种虚线框\ncomments: true\ndate: 2019-02-12 09:04:08\ncategories: web\ntags: css\n---\n\n1. 删除按钮虚线框\n\n   ```css\n   <!-- 火狐浏览器，去除按钮虚线框 -- > button::-moz-focus-inner,\n   input[type='reset']::-moz-focus-inner,\n   input[type='button']::-moz-focus-inner,\n   input[type='submit']::-moz-focus-inner,\n   input[type='file'] > input[type='button']::-moz-focus-inner {\n     border: none;\n   }\n   ```\n\n2. 删除 range 虚线框\n\n   ```css\n   input[type='range']:focus {\n     outline: none;\n   }\n   input[type='range']::-moz-focus-outer {\n     border: none;\n   }\n   ```\n","slug":"火狐删除各种虚线框","published":1,"updated":"2019-05-19T05:32:06.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgubd008d8ex0lqpqu0m4","content":"<ol>\n<li><p>删除按钮虚线框</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 火狐浏览器，去除按钮虚线框 <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-tag\">button</span><span class=\"selector-pseudo\">::-moz-focus-inner</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='reset']</span><span class=\"selector-pseudo\">::-moz-focus-inner</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='button']</span><span class=\"selector-pseudo\">::-moz-focus-inner</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='submit']</span><span class=\"selector-pseudo\">::-moz-focus-inner</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='file']</span> &gt; <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='button']</span><span class=\"selector-pseudo\">::-moz-focus-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除 range 虚线框</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='range']</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='range']</span><span class=\"selector-pseudo\">::-moz-focus-outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>删除按钮虚线框</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"selector-tag\">--</span> 火狐浏览器，去除按钮虚线框 <span class=\"selector-tag\">--</span> &gt; <span class=\"selector-tag\">button</span><span class=\"selector-pseudo\">::-moz-focus-inner</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='reset']</span><span class=\"selector-pseudo\">::-moz-focus-inner</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='button']</span><span class=\"selector-pseudo\">::-moz-focus-inner</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='submit']</span><span class=\"selector-pseudo\">::-moz-focus-inner</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='file']</span> &gt; <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='button']</span><span class=\"selector-pseudo\">::-moz-focus-inner</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除 range 虚线框</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='range']</span><span class=\"selector-pseudo\">:focus</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type='range']</span><span class=\"selector-pseudo\">::-moz-focus-outer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"滚动翻页","comments":1,"date":"2019-04-15T12:16:28.000Z","_content":"\n##### 一、 功能描述\n\n有一个 list，长度不确定，显示区域只能容纳四条数据，往下滚动显示当前四条数据的前四条，往下滚动则显示当前数据的后四条。除了滚动切换数据之外，还能通过上下翻页键切换数据，切换数据的交互需要跟滚动效果一样。\n\n##### 二、思路\n\n说到分页，首先想到的肯定是切割 list，因为只能容纳四条数据，就把 list 切割成 4 条每组的多个 list，每次只需要显示相应的子 list 就行了。因为要有滚动的交互效果，所以考虑的 html 结构是父级元素滚动，超出部分隐藏，子元素由多个 list 组成的块构成相应的 dom。既然是滚动翻页，肯定不希望出现滚动条，所以要考虑不同浏览器隐藏滚动条的方案。\n\n##### 三、实现\n\n**html 结构：**\n\n```html\n<div class=\"audioContainer\">\n  <img class=\"icon\" :src=\"`${baseUrl}img/last.png`\" v-show=\"lastPageShow\" @click=\"jump(0)\" />\n  <div class=\"audioWrap\">\n    <div class=\"audioGroup\" v-for=\"(value, num) in audioGroupPage\" :key=\"num\">\n      <span\n        class=\"item\"\n        v-for=\"(item, index) in audioGroup.slice(4*num, 4*(num+1))\"\n        :key=\"index\"\n        @click=\"$emit('spellAudio', item.tone, item.letter)\"\n      >\n        <ruby>{{item.text}}</ruby>\n      </span>\n    </div>\n  </div>\n  <img class=\"icon\" :src=\"`${baseUrl}img/next.png`\" v-show=\"nextPageShow\" @click=\"jump(1)\" />\n</div>\n<div></div>\n```\n\n**功能函数：**\n\n```js\nwatch: {\n    // 监听 list 的长度，如果超出可容纳数据的长度，显示下一页按钮\n    audioGroup(val) {\n      val.length > 4 ? (this.nextPageShow = true) : (this.nextPageShow = false);\n    },\n    top(val) {\n      // 监听滚动的高度，如果小于 0，则上一页按钮隐藏\n      if (val < 0) {\n        this.lastPageShow = false;\n      }\n       // 监听滚动的高度，如果大于所有 list 子元素构成的dom的高度，则下一页按钮隐藏，否则显示\n      if (val >= (Math.ceil(this.audioGroup.length / 4) - 1) * 204) {\n        this.nextPageShow = false;\n      } else {\n        this.nextPageShow = true;\n      }\n    }\n  },\n  computed: {\n    // list 分页\n    audioGroupPage() {\n      return Math.ceil(this.audioGroup.length / 4);\n    }\n  },\n  methods: {\n    // 上下翻页\n    jump(val) {\n      const el = document.getElementsByClassName(\"audioWrap\")[0];\n\n      switch (val) {\n        case 1:\n          this.lastPageShow = true;\n          el.top = el.scrollTop + 204\n          this.top = el.scrollTop + 204;\n          break;\n        case 0:\n          el.top = el.scrollTop - 204;\n          this.top = el.scrollTop - 204;\n          break;\n      }\n    }\n  }\n```\n\n##### 三、其他\n\n实现了之后肯定很丑，因为有滚动条，如何隐藏呢？如下:\n\n```css\n/* webkit 内核浏览器 */\n::-webkit-scrollbar {\n  display: none;\n}\n/* firfox浏览器 */\n.audioWrap {\n  scrollbar-width: none;\n}\n```\n","source":"_posts/滚动翻页.md","raw":"---\ntitle: 滚动翻页\ncomments: true\ndate: 2019-04-15 20:16:28\ncategories: web\ntags: 翻页\n---\n\n##### 一、 功能描述\n\n有一个 list，长度不确定，显示区域只能容纳四条数据，往下滚动显示当前四条数据的前四条，往下滚动则显示当前数据的后四条。除了滚动切换数据之外，还能通过上下翻页键切换数据，切换数据的交互需要跟滚动效果一样。\n\n##### 二、思路\n\n说到分页，首先想到的肯定是切割 list，因为只能容纳四条数据，就把 list 切割成 4 条每组的多个 list，每次只需要显示相应的子 list 就行了。因为要有滚动的交互效果，所以考虑的 html 结构是父级元素滚动，超出部分隐藏，子元素由多个 list 组成的块构成相应的 dom。既然是滚动翻页，肯定不希望出现滚动条，所以要考虑不同浏览器隐藏滚动条的方案。\n\n##### 三、实现\n\n**html 结构：**\n\n```html\n<div class=\"audioContainer\">\n  <img class=\"icon\" :src=\"`${baseUrl}img/last.png`\" v-show=\"lastPageShow\" @click=\"jump(0)\" />\n  <div class=\"audioWrap\">\n    <div class=\"audioGroup\" v-for=\"(value, num) in audioGroupPage\" :key=\"num\">\n      <span\n        class=\"item\"\n        v-for=\"(item, index) in audioGroup.slice(4*num, 4*(num+1))\"\n        :key=\"index\"\n        @click=\"$emit('spellAudio', item.tone, item.letter)\"\n      >\n        <ruby>{{item.text}}</ruby>\n      </span>\n    </div>\n  </div>\n  <img class=\"icon\" :src=\"`${baseUrl}img/next.png`\" v-show=\"nextPageShow\" @click=\"jump(1)\" />\n</div>\n<div></div>\n```\n\n**功能函数：**\n\n```js\nwatch: {\n    // 监听 list 的长度，如果超出可容纳数据的长度，显示下一页按钮\n    audioGroup(val) {\n      val.length > 4 ? (this.nextPageShow = true) : (this.nextPageShow = false);\n    },\n    top(val) {\n      // 监听滚动的高度，如果小于 0，则上一页按钮隐藏\n      if (val < 0) {\n        this.lastPageShow = false;\n      }\n       // 监听滚动的高度，如果大于所有 list 子元素构成的dom的高度，则下一页按钮隐藏，否则显示\n      if (val >= (Math.ceil(this.audioGroup.length / 4) - 1) * 204) {\n        this.nextPageShow = false;\n      } else {\n        this.nextPageShow = true;\n      }\n    }\n  },\n  computed: {\n    // list 分页\n    audioGroupPage() {\n      return Math.ceil(this.audioGroup.length / 4);\n    }\n  },\n  methods: {\n    // 上下翻页\n    jump(val) {\n      const el = document.getElementsByClassName(\"audioWrap\")[0];\n\n      switch (val) {\n        case 1:\n          this.lastPageShow = true;\n          el.top = el.scrollTop + 204\n          this.top = el.scrollTop + 204;\n          break;\n        case 0:\n          el.top = el.scrollTop - 204;\n          this.top = el.scrollTop - 204;\n          break;\n      }\n    }\n  }\n```\n\n##### 三、其他\n\n实现了之后肯定很丑，因为有滚动条，如何隐藏呢？如下:\n\n```css\n/* webkit 内核浏览器 */\n::-webkit-scrollbar {\n  display: none;\n}\n/* firfox浏览器 */\n.audioWrap {\n  scrollbar-width: none;\n}\n```\n","slug":"滚动翻页","published":1,"updated":"2019-05-19T05:31:58.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgube008g8ex05fydexwl","content":"<h5 id=\"一、-功能描述\"><a href=\"#一、-功能描述\" class=\"headerlink\" title=\"一、 功能描述\"></a>一、 功能描述</h5><p>有一个 list，长度不确定，显示区域只能容纳四条数据，往下滚动显示当前四条数据的前四条，往下滚动则显示当前数据的后四条。除了滚动切换数据之外，还能通过上下翻页键切换数据，切换数据的交互需要跟滚动效果一样。</p>\n<h5 id=\"二、思路\"><a href=\"#二、思路\" class=\"headerlink\" title=\"二、思路\"></a>二、思路</h5><p>说到分页，首先想到的肯定是切割 list，因为只能容纳四条数据，就把 list 切割成 4 条每组的多个 list，每次只需要显示相应的子 list 就行了。因为要有滚动的交互效果，所以考虑的 html 结构是父级元素滚动，超出部分隐藏，子元素由多个 list 组成的块构成相应的 dom。既然是滚动翻页，肯定不希望出现滚动条，所以要考虑不同浏览器隐藏滚动条的方案。</p>\n<h5 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h5><p><strong>html 结构：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"audioContainer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"`$&#123;baseUrl&#125;img/last.png`\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"lastPageShow\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"jump(0)\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"audioWrap\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"audioGroup\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(value, num) in audioGroupPage\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"num\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in audioGroup.slice(4*num, 4*(num+1))\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        @<span class=\"attr\">click</span>=<span class=\"string\">\"$emit('spellAudio', item.tone, item.letter)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ruby</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">ruby</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"`$&#123;baseUrl&#125;img/next.png`\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"nextPageShow\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"jump(1)\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>功能函数：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 监听 list 的长度，如果超出可容纳数据的长度，显示下一页按钮</span></span><br><span class=\"line\">    audioGroup(val) &#123;</span><br><span class=\"line\">      val.length &gt; <span class=\"number\">4</span> ? (<span class=\"keyword\">this</span>.nextPageShow = <span class=\"literal\">true</span>) : (<span class=\"keyword\">this</span>.nextPageShow = <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    top(val) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 监听滚动的高度，如果小于 0，则上一页按钮隐藏</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastPageShow = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 监听滚动的高度，如果大于所有 list 子元素构成的dom的高度，则下一页按钮隐藏，否则显示</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val &gt;= (<span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.audioGroup.length / <span class=\"number\">4</span>) - <span class=\"number\">1</span>) * <span class=\"number\">204</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextPageShow = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextPageShow = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// list 分页</span></span><br><span class=\"line\">    audioGroupPage() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.audioGroup.length / <span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 上下翻页</span></span><br><span class=\"line\">    jump(val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> el = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"audioWrap\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.lastPageShow = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          el.top = el.scrollTop + <span class=\"number\">204</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.top = el.scrollTop + <span class=\"number\">204</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">          el.top = el.scrollTop - <span class=\"number\">204</span>;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.top = el.scrollTop - <span class=\"number\">204</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"三、其他\"><a href=\"#三、其他\" class=\"headerlink\" title=\"三、其他\"></a>三、其他</h5><p>实现了之后肯定很丑，因为有滚动条，如何隐藏呢？如下:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* webkit 内核浏览器 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* firfox浏览器 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.audioWrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">scrollbar-width</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"一、-功能描述\"><a href=\"#一、-功能描述\" class=\"headerlink\" title=\"一、 功能描述\"></a>一、 功能描述</h5><p>有一个 list，长度不确定，显示区域只能容纳四条数据，往下滚动显示当前四条数据的前四条，往下滚动则显示当前数据的后四条。除了滚动切换数据之外，还能通过上下翻页键切换数据，切换数据的交互需要跟滚动效果一样。</p>\n<h5 id=\"二、思路\"><a href=\"#二、思路\" class=\"headerlink\" title=\"二、思路\"></a>二、思路</h5><p>说到分页，首先想到的肯定是切割 list，因为只能容纳四条数据，就把 list 切割成 4 条每组的多个 list，每次只需要显示相应的子 list 就行了。因为要有滚动的交互效果，所以考虑的 html 结构是父级元素滚动，超出部分隐藏，子元素由多个 list 组成的块构成相应的 dom。既然是滚动翻页，肯定不希望出现滚动条，所以要考虑不同浏览器隐藏滚动条的方案。</p>\n<h5 id=\"三、实现\"><a href=\"#三、实现\" class=\"headerlink\" title=\"三、实现\"></a>三、实现</h5><p><strong>html 结构：</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"audioContainer\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"`$&#123;baseUrl&#125;img/last.png`\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"lastPageShow\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"jump(0)\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"audioWrap\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"audioGroup\"</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(value, num) in audioGroupPage\"</span> <span class=\"attr\">:key</span>=<span class=\"string\">\"num\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">span</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-for</span>=<span class=\"string\">\"(item, index) in audioGroup.slice(4*num, 4*(num+1))\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:key</span>=<span class=\"string\">\"index\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        @<span class=\"attr\">click</span>=<span class=\"string\">\"$emit('spellAudio', item.tone, item.letter)\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ruby</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">ruby</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span> <span class=\"attr\">:src</span>=<span class=\"string\">\"`$&#123;baseUrl&#125;img/next.png`\"</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"nextPageShow\"</span> @<span class=\"attr\">click</span>=<span class=\"string\">\"jump(1)\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>功能函数：</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 监听 list 的长度，如果超出可容纳数据的长度，显示下一页按钮</span></span><br><span class=\"line\">    audioGroup(val) &#123;</span><br><span class=\"line\">      val.length &gt; <span class=\"number\">4</span> ? (<span class=\"keyword\">this</span>.nextPageShow = <span class=\"literal\">true</span>) : (<span class=\"keyword\">this</span>.nextPageShow = <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    top(val) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 监听滚动的高度，如果小于 0，则上一页按钮隐藏</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.lastPageShow = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 监听滚动的高度，如果大于所有 list 子元素构成的dom的高度，则下一页按钮隐藏，否则显示</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (val &gt;= (<span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.audioGroup.length / <span class=\"number\">4</span>) - <span class=\"number\">1</span>) * <span class=\"number\">204</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextPageShow = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nextPageShow = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// list 分页</span></span><br><span class=\"line\">    audioGroupPage() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.ceil(<span class=\"keyword\">this</span>.audioGroup.length / <span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 上下翻页</span></span><br><span class=\"line\">    jump(val) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> el = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"audioWrap\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (val) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.lastPageShow = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          el.top = el.scrollTop + <span class=\"number\">204</span></span><br><span class=\"line\">          <span class=\"keyword\">this</span>.top = el.scrollTop + <span class=\"number\">204</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">          el.top = el.scrollTop - <span class=\"number\">204</span>;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.top = el.scrollTop - <span class=\"number\">204</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"三、其他\"><a href=\"#三、其他\" class=\"headerlink\" title=\"三、其他\"></a>三、其他</h5><p>实现了之后肯定很丑，因为有滚动条，如何隐藏呢？如下:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* webkit 内核浏览器 */</span></span><br><span class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* firfox浏览器 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.audioWrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">scrollbar-width</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Web 优化 ——— 添加骨架屏","comments":1,"date":"2019-09-26T00:40:14.000Z","_content":"\n摘要：\n最近做网页优化，发现页面会有一段白屏时间，给人的体验就是网页会有一闪而出的感觉，也就是我们常说的闪屏，查了一些资料，发现实现思路都是异曲同工的，就是在页面节点还没加载之前，先插一段静态网页，节点加载了再去掉这段静态代码，显示数据渲染出来界面。一般需要加骨架屏的界面，是一些动态加载数据的界面，因为数据没出来，会有一段比较长的白屏时间会给用户网加载慢的感觉。加了骨架屏，用会觉得网页加载比较快，属于一种视觉欺骗的手段吧。\n\n下面来讲讲 vue-cli3 添骨架屏方法。\n\n为节省时间成本，我没有自己去造轮子，而是选择了一个现成的轮子 vue-skeleton-webpack-plugin，骨架屏的实现步骤如下：\n\n1、安装轮子的包：`yarn add vue-skeleton-webpack-plugin`\n\n2、webpack 中引入该插件(vue.config.js)，具体的配置项可以去看看该插件的[说明](https://github.com/lavas-project/vue-skeleton-webpack-plugin)：\n\n```js\nconst SkeletonWebpackPlugin = require('vue-skeleton-webpack-plugin');\n\nconfigureWebpack: {\n  plugins: [\n    new SkeletonWebpackPlugin({\n      webpackConfig: {\n        entry: {\n          app: path.join(__dirname, './src/common/skeleton.js'),\n        },\n      },\n      minimize: true,\n      quiet: true,\n      router: {\n        mode: 'hash',\n        routes: [\n          {\n            path: '/',\n            skeletonId: 'skeleton-home',\n          },\n          {\n            path: '/home',\n            skeletonId: 'skeleton-home',\n          },\n        ],\n      },\n    }),\n  ],\n},\n```\n\n3、添加一个骨架组件，skeleton.js 中引入\n\n```js\nimport Vue from \"vue\";\nimport Skeleton from \"../components/skeletonPage.vue\";\n\nexport default new Vue({\n  components: {\n    Skeleton\n  },\n  render: h => h(Skeleton)\n});\n```\n\n4、因为在 vue-cli 里默认样式是不分离的，打包出来的骨架屏会没有样式，所以需要设置一下样式分离：\n\n```js\ncss: {\n  extract: true,\n},\n```\n\n5、因为 vue-cli 脚手架打包出来的样式是带 tag 的，骨架的样式依然不可用，这里我是先启用样式分离，编译出 css ，然后手动去掉 tag，放到 public/index 里，再关闭样式分离，这样骨架屏就正常了。\n\n6、按照文档做了上面这些，会发现骨架屏还是无效的，还需要修改一下 main.js 的组件挂载方式\n\n```js\nconst app = new Vue({\n  router,\n  components: {\n    App\n  },\n  render: h => h(App)\n});\n\nwindow.mountApp = () => {\n  app.$mount(\"#app\");\n};\n\nwindow.mountApp();\n```\n\n7、此外需要注意：\n\n- App.vue 文件引用组件的方式不要用 router-view，改用直接引入组件\n\n- 首屏的组件不要懒加载，不然会有闪屏的问题\n\n- 目前只测试了单页应用，多页面的应用还未尝试，有待探索\n","source":"_posts/添加骨架屏.md","raw":"---\ntitle: web 优化 ——— 添加骨架屏\ncomments: true\ndate: 2019-09-26 08:40:14\ncategories: web\ntags: PWA\n---\n\n摘要：\n最近做网页优化，发现页面会有一段白屏时间，给人的体验就是网页会有一闪而出的感觉，也就是我们常说的闪屏，查了一些资料，发现实现思路都是异曲同工的，就是在页面节点还没加载之前，先插一段静态网页，节点加载了再去掉这段静态代码，显示数据渲染出来界面。一般需要加骨架屏的界面，是一些动态加载数据的界面，因为数据没出来，会有一段比较长的白屏时间会给用户网加载慢的感觉。加了骨架屏，用会觉得网页加载比较快，属于一种视觉欺骗的手段吧。\n\n下面来讲讲 vue-cli3 添骨架屏方法。\n\n为节省时间成本，我没有自己去造轮子，而是选择了一个现成的轮子 vue-skeleton-webpack-plugin，骨架屏的实现步骤如下：\n\n1、安装轮子的包：`yarn add vue-skeleton-webpack-plugin`\n\n2、webpack 中引入该插件(vue.config.js)，具体的配置项可以去看看该插件的[说明](https://github.com/lavas-project/vue-skeleton-webpack-plugin)：\n\n```js\nconst SkeletonWebpackPlugin = require('vue-skeleton-webpack-plugin');\n\nconfigureWebpack: {\n  plugins: [\n    new SkeletonWebpackPlugin({\n      webpackConfig: {\n        entry: {\n          app: path.join(__dirname, './src/common/skeleton.js'),\n        },\n      },\n      minimize: true,\n      quiet: true,\n      router: {\n        mode: 'hash',\n        routes: [\n          {\n            path: '/',\n            skeletonId: 'skeleton-home',\n          },\n          {\n            path: '/home',\n            skeletonId: 'skeleton-home',\n          },\n        ],\n      },\n    }),\n  ],\n},\n```\n\n3、添加一个骨架组件，skeleton.js 中引入\n\n```js\nimport Vue from \"vue\";\nimport Skeleton from \"../components/skeletonPage.vue\";\n\nexport default new Vue({\n  components: {\n    Skeleton\n  },\n  render: h => h(Skeleton)\n});\n```\n\n4、因为在 vue-cli 里默认样式是不分离的，打包出来的骨架屏会没有样式，所以需要设置一下样式分离：\n\n```js\ncss: {\n  extract: true,\n},\n```\n\n5、因为 vue-cli 脚手架打包出来的样式是带 tag 的，骨架的样式依然不可用，这里我是先启用样式分离，编译出 css ，然后手动去掉 tag，放到 public/index 里，再关闭样式分离，这样骨架屏就正常了。\n\n6、按照文档做了上面这些，会发现骨架屏还是无效的，还需要修改一下 main.js 的组件挂载方式\n\n```js\nconst app = new Vue({\n  router,\n  components: {\n    App\n  },\n  render: h => h(App)\n});\n\nwindow.mountApp = () => {\n  app.$mount(\"#app\");\n};\n\nwindow.mountApp();\n```\n\n7、此外需要注意：\n\n- App.vue 文件引用组件的方式不要用 router-view，改用直接引入组件\n\n- 首屏的组件不要懒加载，不然会有闪屏的问题\n\n- 目前只测试了单页应用，多页面的应用还未尝试，有待探索\n","slug":"添加骨架屏","published":1,"updated":"2020-01-08T01:00:24.547Z","layout":"post","photos":[],"link":"","_id":"ck5dbgubf008k8ex0lzagx38a","content":"<p>摘要：<br>最近做网页优化，发现页面会有一段白屏时间，给人的体验就是网页会有一闪而出的感觉，也就是我们常说的闪屏，查了一些资料，发现实现思路都是异曲同工的，就是在页面节点还没加载之前，先插一段静态网页，节点加载了再去掉这段静态代码，显示数据渲染出来界面。一般需要加骨架屏的界面，是一些动态加载数据的界面，因为数据没出来，会有一段比较长的白屏时间会给用户网加载慢的感觉。加了骨架屏，用会觉得网页加载比较快，属于一种视觉欺骗的手段吧。</p>\n<p>下面来讲讲 vue-cli3 添骨架屏方法。</p>\n<p>为节省时间成本，我没有自己去造轮子，而是选择了一个现成的轮子 vue-skeleton-webpack-plugin，骨架屏的实现步骤如下：</p>\n<p>1、安装轮子的包：<code>yarn add vue-skeleton-webpack-plugin</code></p>\n<p>2、webpack 中引入该插件(vue.config.js)，具体的配置项可以去看看该插件的<a href=\"https://github.com/lavas-project/vue-skeleton-webpack-plugin\" target=\"_blank\" rel=\"noopener\">说明</a>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> SkeletonWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-skeleton-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">configureWebpack: &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> SkeletonWebpackPlugin(&#123;</span><br><span class=\"line\">      webpackConfig: &#123;</span><br><span class=\"line\">        entry: &#123;</span><br><span class=\"line\">          app: path.join(__dirname, <span class=\"string\">'./src/common/skeleton.js'</span>),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      minimize: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      quiet: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      router: &#123;</span><br><span class=\"line\">        mode: <span class=\"string\">'hash'</span>,</span><br><span class=\"line\">        routes: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">            skeletonId: <span class=\"string\">'skeleton-home'</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            path: <span class=\"string\">'/home'</span>,</span><br><span class=\"line\">            skeletonId: <span class=\"string\">'skeleton-home'</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>3、添加一个骨架组件，skeleton.js 中引入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Skeleton <span class=\"keyword\">from</span> <span class=\"string\">\"../components/skeletonPage.vue\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Skeleton</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(Skeleton)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>4、因为在 vue-cli 里默认样式是不分离的，打包出来的骨架屏会没有样式，所以需要设置一下样式分离：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">css: &#123;</span><br><span class=\"line\">  extract: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>5、因为 vue-cli 脚手架打包出来的样式是带 tag 的，骨架的样式依然不可用，这里我是先启用样式分离，编译出 css ，然后手动去掉 tag，放到 public/index 里，再关闭样式分离，这样骨架屏就正常了。</p>\n<p>6、按照文档做了上面这些，会发现骨架屏还是无效的，还需要修改一下 main.js 的组件挂载方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    App</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.mountApp = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  app.$mount(<span class=\"string\">\"#app\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.mountApp();</span><br></pre></td></tr></table></figure>\n<p>7、此外需要注意：</p>\n<ul>\n<li><p>App.vue 文件引用组件的方式不要用 router-view，改用直接引入组件</p>\n</li>\n<li><p>首屏的组件不要懒加载，不然会有闪屏的问题</p>\n</li>\n<li><p>目前只测试了单页应用，多页面的应用还未尝试，有待探索</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>摘要：<br>最近做网页优化，发现页面会有一段白屏时间，给人的体验就是网页会有一闪而出的感觉，也就是我们常说的闪屏，查了一些资料，发现实现思路都是异曲同工的，就是在页面节点还没加载之前，先插一段静态网页，节点加载了再去掉这段静态代码，显示数据渲染出来界面。一般需要加骨架屏的界面，是一些动态加载数据的界面，因为数据没出来，会有一段比较长的白屏时间会给用户网加载慢的感觉。加了骨架屏，用会觉得网页加载比较快，属于一种视觉欺骗的手段吧。</p>\n<p>下面来讲讲 vue-cli3 添骨架屏方法。</p>\n<p>为节省时间成本，我没有自己去造轮子，而是选择了一个现成的轮子 vue-skeleton-webpack-plugin，骨架屏的实现步骤如下：</p>\n<p>1、安装轮子的包：<code>yarn add vue-skeleton-webpack-plugin</code></p>\n<p>2、webpack 中引入该插件(vue.config.js)，具体的配置项可以去看看该插件的<a href=\"https://github.com/lavas-project/vue-skeleton-webpack-plugin\" target=\"_blank\" rel=\"noopener\">说明</a>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> SkeletonWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'vue-skeleton-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">configureWebpack: &#123;</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> SkeletonWebpackPlugin(&#123;</span><br><span class=\"line\">      webpackConfig: &#123;</span><br><span class=\"line\">        entry: &#123;</span><br><span class=\"line\">          app: path.join(__dirname, <span class=\"string\">'./src/common/skeleton.js'</span>),</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      minimize: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      quiet: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      router: &#123;</span><br><span class=\"line\">        mode: <span class=\"string\">'hash'</span>,</span><br><span class=\"line\">        routes: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">            skeletonId: <span class=\"string\">'skeleton-home'</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            path: <span class=\"string\">'/home'</span>,</span><br><span class=\"line\">            skeletonId: <span class=\"string\">'skeleton-home'</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>3、添加一个骨架组件，skeleton.js 中引入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">\"vue\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Skeleton <span class=\"keyword\">from</span> <span class=\"string\">\"../components/skeletonPage.vue\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Skeleton</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(Skeleton)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>4、因为在 vue-cli 里默认样式是不分离的，打包出来的骨架屏会没有样式，所以需要设置一下样式分离：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">css: &#123;</span><br><span class=\"line\">  extract: <span class=\"literal\">true</span>,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>5、因为 vue-cli 脚手架打包出来的样式是带 tag 的，骨架的样式依然不可用，这里我是先启用样式分离，编译出 css ，然后手动去掉 tag，放到 public/index 里，再关闭样式分离，这样骨架屏就正常了。</p>\n<p>6、按照文档做了上面这些，会发现骨架屏还是无效的，还需要修改一下 main.js 的组件挂载方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    App</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.mountApp = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  app.$mount(<span class=\"string\">\"#app\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.mountApp();</span><br></pre></td></tr></table></figure>\n<p>7、此外需要注意：</p>\n<ul>\n<li><p>App.vue 文件引用组件的方式不要用 router-view，改用直接引入组件</p>\n</li>\n<li><p>首屏的组件不要懒加载，不然会有闪屏的问题</p>\n</li>\n<li><p>目前只测试了单页应用，多页面的应用还未尝试，有待探索</p>\n</li>\n</ul>\n"},{"layout":"ubuntu","title":"登陆华南师范大学校园网的方法","date":"2018-05-20T09:00:51.000Z","_content":"\n最近刚装了 unbuntu 系统,刚开始网络连接遇到了点小问题,原来是校园网不知道怎么认证,于是向好基友请教了下,得出快捷的方法如下:\n\n1. 下载学校网络的认证客户端,记住位置,一般都是默认下载地址是 Download.\n\n2. 使用快捷键`Ctrl+Alt+T`打开终端，使用命令 `cd ~/下载` 或 `cd ～/Downloads`（如果您的系统语言为英文）进入文件下载目录。\n\n3. `unzip *.zip` 解压刚刚下载的客户端压缩文件,\n\n4. 如果您的下载目录不止一个 zip 文件，请把名字打全一点，如：`unzip RG_*.zip`,RG 为文件名.\n\n5. 如果提示 unzip 未安装，请安装它： `sudo apt-get install unzip` ；若提示输入密码，请输入您的系统账户密码，输入过程中不会有\\*\\*\\*的显示；若提示需要联网下载，请先用 Wifi（比如手机热点），安装文件并不大。\n\n6 以后的步骤,以后我们每次打开电脑都用这几行代码进行认证,可以复制到一个文件里,懒得每次都打代码\n\n6. `cd ~/下载` --切换到安装目录\n\n7. `cd rjsup*` --进入文件夹.\n\n8. `sudo chmod +x ./rjsupplicant.sh` --给予 sh 文件最高权限\n\n9. `(sudo ./rj*.sh --dhcp=1 --nic=enp2s0 --user=201***** --password=****** &)`进行认证,user 后是校园网账号,password 后是校园网密码.\n\n10. `service network-manager restart` 重新显示网络中心图标\n\n切记以后每次认证网络都用\n\n```\n  cd ~/下载\n  cd rjsup*\n  sudo chmod +x ./rjsupplicant.sh\n  (sudo ./rj*.sh --dhcp=1 --nic=enp2s0 --user=20143702058 --password=232824 &)\n  service network-manager restart\n```\n\n这几行代码,一条代码执行完再执行下一条.\n\n本文是看完 blackstorm 的博客之后的笔记,因为对于小白来说,他写的文章太晦涩了,第一次看很懵懂,所以我就把他的文章简化了.\n","source":"_posts/登陆华南师范大学校园网的方法.md","raw":"---\nlayout: ubuntu\ntitle: 登陆华南师范大学校园网的方法\ndate: 2018-05-20 17:00:51\ncategories: web\ntags: http\n---\n\n最近刚装了 unbuntu 系统,刚开始网络连接遇到了点小问题,原来是校园网不知道怎么认证,于是向好基友请教了下,得出快捷的方法如下:\n\n1. 下载学校网络的认证客户端,记住位置,一般都是默认下载地址是 Download.\n\n2. 使用快捷键`Ctrl+Alt+T`打开终端，使用命令 `cd ~/下载` 或 `cd ～/Downloads`（如果您的系统语言为英文）进入文件下载目录。\n\n3. `unzip *.zip` 解压刚刚下载的客户端压缩文件,\n\n4. 如果您的下载目录不止一个 zip 文件，请把名字打全一点，如：`unzip RG_*.zip`,RG 为文件名.\n\n5. 如果提示 unzip 未安装，请安装它： `sudo apt-get install unzip` ；若提示输入密码，请输入您的系统账户密码，输入过程中不会有\\*\\*\\*的显示；若提示需要联网下载，请先用 Wifi（比如手机热点），安装文件并不大。\n\n6 以后的步骤,以后我们每次打开电脑都用这几行代码进行认证,可以复制到一个文件里,懒得每次都打代码\n\n6. `cd ~/下载` --切换到安装目录\n\n7. `cd rjsup*` --进入文件夹.\n\n8. `sudo chmod +x ./rjsupplicant.sh` --给予 sh 文件最高权限\n\n9. `(sudo ./rj*.sh --dhcp=1 --nic=enp2s0 --user=201***** --password=****** &)`进行认证,user 后是校园网账号,password 后是校园网密码.\n\n10. `service network-manager restart` 重新显示网络中心图标\n\n切记以后每次认证网络都用\n\n```\n  cd ~/下载\n  cd rjsup*\n  sudo chmod +x ./rjsupplicant.sh\n  (sudo ./rj*.sh --dhcp=1 --nic=enp2s0 --user=20143702058 --password=232824 &)\n  service network-manager restart\n```\n\n这几行代码,一条代码执行完再执行下一条.\n\n本文是看完 blackstorm 的博客之后的笔记,因为对于小白来说,他写的文章太晦涩了,第一次看很懵懂,所以我就把他的文章简化了.\n","slug":"登陆华南师范大学校园网的方法","published":1,"updated":"2019-05-19T06:01:48.000Z","comments":1,"photos":[],"link":"","_id":"ck5dbgubh008n8ex0eev83xe8","content":"<p>最近刚装了 unbuntu 系统,刚开始网络连接遇到了点小问题,原来是校园网不知道怎么认证,于是向好基友请教了下,得出快捷的方法如下:</p>\n<ol>\n<li><p>下载学校网络的认证客户端,记住位置,一般都是默认下载地址是 Download.</p>\n</li>\n<li><p>使用快捷键<code>Ctrl+Alt+T</code>打开终端，使用命令 <code>cd ~/下载</code> 或 <code>cd ～/Downloads</code>（如果您的系统语言为英文）进入文件下载目录。</p>\n</li>\n<li><p><code>unzip *.zip</code> 解压刚刚下载的客户端压缩文件,</p>\n</li>\n<li><p>如果您的下载目录不止一个 zip 文件，请把名字打全一点，如：<code>unzip RG_*.zip</code>,RG 为文件名.</p>\n</li>\n<li><p>如果提示 unzip 未安装，请安装它： <code>sudo apt-get install unzip</code> ；若提示输入密码，请输入您的系统账户密码，输入过程中不会有***的显示；若提示需要联网下载，请先用 Wifi（比如手机热点），安装文件并不大。</p>\n</li>\n</ol>\n<p>6 以后的步骤,以后我们每次打开电脑都用这几行代码进行认证,可以复制到一个文件里,懒得每次都打代码</p>\n<ol start=\"6\">\n<li><p><code>cd ~/下载</code> –切换到安装目录</p>\n</li>\n<li><p><code>cd rjsup*</code> –进入文件夹.</p>\n</li>\n<li><p><code>sudo chmod +x ./rjsupplicant.sh</code> –给予 sh 文件最高权限</p>\n</li>\n<li><p><code>(sudo ./rj*.sh --dhcp=1 --nic=enp2s0 --user=201***** --password=****** &amp;)</code>进行认证,user 后是校园网账号,password 后是校园网密码.</p>\n</li>\n<li><p><code>service network-manager restart</code> 重新显示网络中心图标</p>\n</li>\n</ol>\n<p>切记以后每次认证网络都用</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/下载</span><br><span class=\"line\">cd rjsup*</span><br><span class=\"line\">sudo chmod +x ./rjsupplicant.sh</span><br><span class=\"line\">(sudo ./rj*.sh <span class=\"attribute\">--dhcp</span>=1 <span class=\"attribute\">--nic</span>=enp2s0 <span class=\"attribute\">--user</span>=20143702058 <span class=\"attribute\">--password</span>=232824 &amp;)</span><br><span class=\"line\">service network-manager restart</span><br></pre></td></tr></table></figure>\n<p>这几行代码,一条代码执行完再执行下一条.</p>\n<p>本文是看完 blackstorm 的博客之后的笔记,因为对于小白来说,他写的文章太晦涩了,第一次看很懵懂,所以我就把他的文章简化了.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近刚装了 unbuntu 系统,刚开始网络连接遇到了点小问题,原来是校园网不知道怎么认证,于是向好基友请教了下,得出快捷的方法如下:</p>\n<ol>\n<li><p>下载学校网络的认证客户端,记住位置,一般都是默认下载地址是 Download.</p>\n</li>\n<li><p>使用快捷键<code>Ctrl+Alt+T</code>打开终端，使用命令 <code>cd ~/下载</code> 或 <code>cd ～/Downloads</code>（如果您的系统语言为英文）进入文件下载目录。</p>\n</li>\n<li><p><code>unzip *.zip</code> 解压刚刚下载的客户端压缩文件,</p>\n</li>\n<li><p>如果您的下载目录不止一个 zip 文件，请把名字打全一点，如：<code>unzip RG_*.zip</code>,RG 为文件名.</p>\n</li>\n<li><p>如果提示 unzip 未安装，请安装它： <code>sudo apt-get install unzip</code> ；若提示输入密码，请输入您的系统账户密码，输入过程中不会有***的显示；若提示需要联网下载，请先用 Wifi（比如手机热点），安装文件并不大。</p>\n</li>\n</ol>\n<p>6 以后的步骤,以后我们每次打开电脑都用这几行代码进行认证,可以复制到一个文件里,懒得每次都打代码</p>\n<ol start=\"6\">\n<li><p><code>cd ~/下载</code> –切换到安装目录</p>\n</li>\n<li><p><code>cd rjsup*</code> –进入文件夹.</p>\n</li>\n<li><p><code>sudo chmod +x ./rjsupplicant.sh</code> –给予 sh 文件最高权限</p>\n</li>\n<li><p><code>(sudo ./rj*.sh --dhcp=1 --nic=enp2s0 --user=201***** --password=****** &amp;)</code>进行认证,user 后是校园网账号,password 后是校园网密码.</p>\n</li>\n<li><p><code>service network-manager restart</code> 重新显示网络中心图标</p>\n</li>\n</ol>\n<p>切记以后每次认证网络都用</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~/下载</span><br><span class=\"line\">cd rjsup*</span><br><span class=\"line\">sudo chmod +x ./rjsupplicant.sh</span><br><span class=\"line\">(sudo ./rj*.sh <span class=\"attribute\">--dhcp</span>=1 <span class=\"attribute\">--nic</span>=enp2s0 <span class=\"attribute\">--user</span>=20143702058 <span class=\"attribute\">--password</span>=232824 &amp;)</span><br><span class=\"line\">service network-manager restart</span><br></pre></td></tr></table></figure>\n<p>这几行代码,一条代码执行完再执行下一条.</p>\n<p>本文是看完 blackstorm 的博客之后的笔记,因为对于小白来说,他写的文章太晦涩了,第一次看很懵懂,所以我就把他的文章简化了.</p>\n"},{"title":"盒模型","comments":1,"date":"2018-06-08T01:56:03.000Z","_content":"\n### 1. 标准盒模型：\n\n因为 `width = margin_box_width(left_width + right_width) + border_width + padding_box_width(left_width + right_width) + content_box_width`，所以，同样宽度的内容因为 `margin`和`padding` 值不一样，撑开了内容块的宽度，显示出来的效果不尽相同。为了解决这个问题，IE8+可以用设置 `box-sizing：border-box` 来避免内容块的宽度被撑开。因此，一般可以进行如下设置，使 `content_box_width = width` 。\n\n```\n*{\n    -webkit-box-sizing:border-box;\n    -moz-box-sizing:border-box;\n    box-sizing:border-box;\n    }\n```\n\n### 2. 弹性盒模型：\n\n弹性布局相比传统的块布局要简洁很多，但是实现原理差别挺大的。首先，要想进行弹性布局，要设置 `display:flex`，确定弹性容器。然后要知道弹性容器里面的内容块定位是由两条轴即主轴和测轴确定的。主轴由 `flex-direction` 属性值确定是横向还是纵向，`justify-content` 属性则确定内容块在主轴上的分布形式。内容块在测轴上的分布形式由 `align-item` 确定，也可以用 `align-self` 确定单个的内容块分布形式，不过这会覆盖掉 `align-item` 的值。目前弹性盒布局还没有完全普及，PC 端浏览器支持还不是很好，更多的是用于手机端的布局。\n","source":"_posts/盒模型.md","raw":"---\ntitle: 盒模型\ncomments: true\ndate: 2018-06-08 09:56:03\ncategories: web\ntags: css\n---\n\n### 1. 标准盒模型：\n\n因为 `width = margin_box_width(left_width + right_width) + border_width + padding_box_width(left_width + right_width) + content_box_width`，所以，同样宽度的内容因为 `margin`和`padding` 值不一样，撑开了内容块的宽度，显示出来的效果不尽相同。为了解决这个问题，IE8+可以用设置 `box-sizing：border-box` 来避免内容块的宽度被撑开。因此，一般可以进行如下设置，使 `content_box_width = width` 。\n\n```\n*{\n    -webkit-box-sizing:border-box;\n    -moz-box-sizing:border-box;\n    box-sizing:border-box;\n    }\n```\n\n### 2. 弹性盒模型：\n\n弹性布局相比传统的块布局要简洁很多，但是实现原理差别挺大的。首先，要想进行弹性布局，要设置 `display:flex`，确定弹性容器。然后要知道弹性容器里面的内容块定位是由两条轴即主轴和测轴确定的。主轴由 `flex-direction` 属性值确定是横向还是纵向，`justify-content` 属性则确定内容块在主轴上的分布形式。内容块在测轴上的分布形式由 `align-item` 确定，也可以用 `align-self` 确定单个的内容块分布形式，不过这会覆盖掉 `align-item` 的值。目前弹性盒布局还没有完全普及，PC 端浏览器支持还不是很好，更多的是用于手机端的布局。\n","slug":"盒模型","published":1,"updated":"2019-05-19T06:02:04.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgubi008q8ex0ftpa8118","content":"<h3 id=\"1-标准盒模型：\"><a href=\"#1-标准盒模型：\" class=\"headerlink\" title=\"1. 标准盒模型：\"></a>1. 标准盒模型：</h3><p>因为 <code>width = margin_box_width(left_width + right_width) + border_width + padding_box_width(left_width + right_width) + content_box_width</code>，所以，同样宽度的内容因为 <code>margin</code>和<code>padding</code> 值不一样，撑开了内容块的宽度，显示出来的效果不尽相同。为了解决这个问题，IE8+可以用设置 <code>box-sizing：border-box</code> 来避免内容块的宽度被撑开。因此，一般可以进行如下设置，使 <code>content_box_width = width</code> 。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-sizing</span>:border-box;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-box-sizing</span>:border-box;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-弹性盒模型：\"><a href=\"#2-弹性盒模型：\" class=\"headerlink\" title=\"2. 弹性盒模型：\"></a>2. 弹性盒模型：</h3><p>弹性布局相比传统的块布局要简洁很多，但是实现原理差别挺大的。首先，要想进行弹性布局，要设置 <code>display:flex</code>，确定弹性容器。然后要知道弹性容器里面的内容块定位是由两条轴即主轴和测轴确定的。主轴由 <code>flex-direction</code> 属性值确定是横向还是纵向，<code>justify-content</code> 属性则确定内容块在主轴上的分布形式。内容块在测轴上的分布形式由 <code>align-item</code> 确定，也可以用 <code>align-self</code> 确定单个的内容块分布形式，不过这会覆盖掉 <code>align-item</code> 的值。目前弹性盒布局还没有完全普及，PC 端浏览器支持还不是很好，更多的是用于手机端的布局。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-标准盒模型：\"><a href=\"#1-标准盒模型：\" class=\"headerlink\" title=\"1. 标准盒模型：\"></a>1. 标准盒模型：</h3><p>因为 <code>width = margin_box_width(left_width + right_width) + border_width + padding_box_width(left_width + right_width) + content_box_width</code>，所以，同样宽度的内容因为 <code>margin</code>和<code>padding</code> 值不一样，撑开了内容块的宽度，显示出来的效果不尽相同。为了解决这个问题，IE8+可以用设置 <code>box-sizing：border-box</code> 来避免内容块的宽度被撑开。因此，一般可以进行如下设置，使 <code>content_box_width = width</code> 。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-sizing</span>:border-box;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-box-sizing</span>:border-box;</span><br><span class=\"line\">    <span class=\"attribute\">box-sizing</span>:border-box;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-弹性盒模型：\"><a href=\"#2-弹性盒模型：\" class=\"headerlink\" title=\"2. 弹性盒模型：\"></a>2. 弹性盒模型：</h3><p>弹性布局相比传统的块布局要简洁很多，但是实现原理差别挺大的。首先，要想进行弹性布局，要设置 <code>display:flex</code>，确定弹性容器。然后要知道弹性容器里面的内容块定位是由两条轴即主轴和测轴确定的。主轴由 <code>flex-direction</code> 属性值确定是横向还是纵向，<code>justify-content</code> 属性则确定内容块在主轴上的分布形式。内容块在测轴上的分布形式由 <code>align-item</code> 确定，也可以用 <code>align-self</code> 确定单个的内容块分布形式，不过这会覆盖掉 <code>align-item</code> 的值。目前弹性盒布局还没有完全普及，PC 端浏览器支持还不是很好，更多的是用于手机端的布局。</p>\n"},{"title":"碎片化阅读知识系统化方法","date":"2018-05-20T08:59:38.000Z","_content":"1. 认识： 碎片化阅读分为两个维度，即阅读时间碎片化和阅读内容碎片化。\n\n2. 高效阅读是指在读完大量书籍之后能记住书中的有效信息，可以讲出读过的书的主要内容，能讲的核心是学会做笔记和整理笔记。\n\n3. 阅读材料分类，基础的分类：专业精读、兴趣泛读、休闲轻松（阅读材料分级）。\n\n4. 个人阅读时间规划（阅读时间分级），大致可以分为：长时段（周末超过2小时的长时段、晚饭后到睡前1-4小时不等的时间）、每日恒定时间（乘坐各种交通工具上下班/学的时间，午饭/晚饭前、后的半小时，学生的课间）、机动时间（偶然状况空闲）。随机时间的应对策略：随身带书或者阅读器（要求：能做笔记、输出笔记）。\n\n5. 阅读的材料与时间段合理 配比，比如：长时间段→阅读专业精读书目、每日恒定时间→阅读兴趣泛读书目、机动时间→阅读休闲轻松书目。注意：无论选用哪种时间与书目的配比类型，一周之内都需要一个完整的时间段来完成全部笔记的整理工作，只有这样才能永久性保证阅读质量。\n","source":"_posts/碎片化阅读知识系统化方法.md","raw":"---\ntitle: 碎片化阅读知识系统化方法\ndate: 2018-05-20 16:59:38\ncategories: 随笔\ntags: 笔记\n---\n1. 认识： 碎片化阅读分为两个维度，即阅读时间碎片化和阅读内容碎片化。\n\n2. 高效阅读是指在读完大量书籍之后能记住书中的有效信息，可以讲出读过的书的主要内容，能讲的核心是学会做笔记和整理笔记。\n\n3. 阅读材料分类，基础的分类：专业精读、兴趣泛读、休闲轻松（阅读材料分级）。\n\n4. 个人阅读时间规划（阅读时间分级），大致可以分为：长时段（周末超过2小时的长时段、晚饭后到睡前1-4小时不等的时间）、每日恒定时间（乘坐各种交通工具上下班/学的时间，午饭/晚饭前、后的半小时，学生的课间）、机动时间（偶然状况空闲）。随机时间的应对策略：随身带书或者阅读器（要求：能做笔记、输出笔记）。\n\n5. 阅读的材料与时间段合理 配比，比如：长时间段→阅读专业精读书目、每日恒定时间→阅读兴趣泛读书目、机动时间→阅读休闲轻松书目。注意：无论选用哪种时间与书目的配比类型，一周之内都需要一个完整的时间段来完成全部笔记的整理工作，只有这样才能永久性保证阅读质量。\n","slug":"碎片化阅读知识系统化方法","published":1,"updated":"2018-06-08T01:44:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck5dbgubi008t8ex0ekjoifh1","content":"<ol>\n<li><p>认识： 碎片化阅读分为两个维度，即阅读时间碎片化和阅读内容碎片化。</p>\n</li>\n<li><p>高效阅读是指在读完大量书籍之后能记住书中的有效信息，可以讲出读过的书的主要内容，能讲的核心是学会做笔记和整理笔记。</p>\n</li>\n<li><p>阅读材料分类，基础的分类：专业精读、兴趣泛读、休闲轻松（阅读材料分级）。</p>\n</li>\n<li><p>个人阅读时间规划（阅读时间分级），大致可以分为：长时段（周末超过2小时的长时段、晚饭后到睡前1-4小时不等的时间）、每日恒定时间（乘坐各种交通工具上下班/学的时间，午饭/晚饭前、后的半小时，学生的课间）、机动时间（偶然状况空闲）。随机时间的应对策略：随身带书或者阅读器（要求：能做笔记、输出笔记）。</p>\n</li>\n<li><p>阅读的材料与时间段合理 配比，比如：长时间段→阅读专业精读书目、每日恒定时间→阅读兴趣泛读书目、机动时间→阅读休闲轻松书目。注意：无论选用哪种时间与书目的配比类型，一周之内都需要一个完整的时间段来完成全部笔记的整理工作，只有这样才能永久性保证阅读质量。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>认识： 碎片化阅读分为两个维度，即阅读时间碎片化和阅读内容碎片化。</p>\n</li>\n<li><p>高效阅读是指在读完大量书籍之后能记住书中的有效信息，可以讲出读过的书的主要内容，能讲的核心是学会做笔记和整理笔记。</p>\n</li>\n<li><p>阅读材料分类，基础的分类：专业精读、兴趣泛读、休闲轻松（阅读材料分级）。</p>\n</li>\n<li><p>个人阅读时间规划（阅读时间分级），大致可以分为：长时段（周末超过2小时的长时段、晚饭后到睡前1-4小时不等的时间）、每日恒定时间（乘坐各种交通工具上下班/学的时间，午饭/晚饭前、后的半小时，学生的课间）、机动时间（偶然状况空闲）。随机时间的应对策略：随身带书或者阅读器（要求：能做笔记、输出笔记）。</p>\n</li>\n<li><p>阅读的材料与时间段合理 配比，比如：长时间段→阅读专业精读书目、每日恒定时间→阅读兴趣泛读书目、机动时间→阅读休闲轻松书目。注意：无论选用哪种时间与书目的配比类型，一周之内都需要一个完整的时间段来完成全部笔记的整理工作，只有这样才能永久性保证阅读质量。</p>\n</li>\n</ol>\n"},{"title":"网页或Html元素在浏览器上全屏解决方案","comments":1,"date":"2019-02-20T07:05:52.000Z","_content":"\n1. **全屏是什么**：\n\n   个人理解，全屏指的是去掉浏览器的导航栏，浏览器的全部空间被页面所占有，网页即 html 文档，网页全屏即 dom 全屏\n\n2. 不同的浏览器又不同的全屏事件可以调用，但是不同浏览器的全屏事件并不一致，因为还没被写入规范中，所以需要判断在特定的浏览器下，哪个事件可以用，以下是全屏事件的封装：\n\n   ```js\n   // el 是需要全屏的 dom\n   requestFullscreen(el: Element): void {\n     if (el.requestFullscreen) {\n       el.requestFullscreen();\n     } else if (el.mozRequestFullScreen) {\n       el.mozRequestFullScreen();\n     } else if (el.webkitRequestFullscreen) {\n       el.webkitRequestFullscreen();\n     } else if (el.msRequestFullscreen) {\n       el.msRequestFullscreen();\n     }\n   }\n   ```\n\n3. 网页全屏之后，还需要退出全屏，退出全屏的方式有多种，比如按 esc 键退出全屏，点击全屏按钮退出全屏等，其中按 esc 退出全屏，一般的浏览器在打开了全屏之后，都可以进行这个操作，不需要人工另外操作。点击按钮退出全屏，需要调用到关闭全屏的事件，同样，在不同的浏览器有不同的实现，需要一一进行判断，封装的事件如下：\n\n   ```js\n   // document 即 html 文档，不需要改变\n   exitFullscreen(): void {\n     if (document.exitFullscreen) {\n       document.exitFullscreen();\n     } else if (document.mozCancelFullScreen) {\n       document.mozCancelFullScreen();\n     } else if (document.webkitExitFullscreen) {\n       document.webkitExitFullscreen();\n     } else if (document.msExitFullscreen) {\n       document.msExitFullscreen();\n     }\n   }\n   ```\n\n4. **如何判断是否处于全屏状态？**\n\n   要判断是否处于全屏的状态，需要调用到相关的浏览器事件，在不同的浏览器，实现方式也不尽相同，因此同样需要判断，封装的代码如下：\n\n   ```js\n   // 判断全屏元素是否存在，并返回相应的项\n   fullscreenElement(): Element {\n     return (\n       document.fullscreenElement ||\n       document.webkitFullscreenElement ||\n       document.msFullscreenElement ||\n       document.mozFullScreenElement ||\n       null\n     );\n   }\n   // 判断是否处于全屏状态\n   isFullScreen() {\n     return !!(document.webkitIsFullScreen || this.fullscreenElement());\n   }\n   ```\n","source":"_posts/网页或html元素在浏览器上全屏解决方案.md","raw":"---\ntitle: 网页或html元素在浏览器上全屏解决方案\ncomments: true\ndate: 2019-02-20 15:05:52\ncategories: web\ntags: js\n---\n\n1. **全屏是什么**：\n\n   个人理解，全屏指的是去掉浏览器的导航栏，浏览器的全部空间被页面所占有，网页即 html 文档，网页全屏即 dom 全屏\n\n2. 不同的浏览器又不同的全屏事件可以调用，但是不同浏览器的全屏事件并不一致，因为还没被写入规范中，所以需要判断在特定的浏览器下，哪个事件可以用，以下是全屏事件的封装：\n\n   ```js\n   // el 是需要全屏的 dom\n   requestFullscreen(el: Element): void {\n     if (el.requestFullscreen) {\n       el.requestFullscreen();\n     } else if (el.mozRequestFullScreen) {\n       el.mozRequestFullScreen();\n     } else if (el.webkitRequestFullscreen) {\n       el.webkitRequestFullscreen();\n     } else if (el.msRequestFullscreen) {\n       el.msRequestFullscreen();\n     }\n   }\n   ```\n\n3. 网页全屏之后，还需要退出全屏，退出全屏的方式有多种，比如按 esc 键退出全屏，点击全屏按钮退出全屏等，其中按 esc 退出全屏，一般的浏览器在打开了全屏之后，都可以进行这个操作，不需要人工另外操作。点击按钮退出全屏，需要调用到关闭全屏的事件，同样，在不同的浏览器有不同的实现，需要一一进行判断，封装的事件如下：\n\n   ```js\n   // document 即 html 文档，不需要改变\n   exitFullscreen(): void {\n     if (document.exitFullscreen) {\n       document.exitFullscreen();\n     } else if (document.mozCancelFullScreen) {\n       document.mozCancelFullScreen();\n     } else if (document.webkitExitFullscreen) {\n       document.webkitExitFullscreen();\n     } else if (document.msExitFullscreen) {\n       document.msExitFullscreen();\n     }\n   }\n   ```\n\n4. **如何判断是否处于全屏状态？**\n\n   要判断是否处于全屏的状态，需要调用到相关的浏览器事件，在不同的浏览器，实现方式也不尽相同，因此同样需要判断，封装的代码如下：\n\n   ```js\n   // 判断全屏元素是否存在，并返回相应的项\n   fullscreenElement(): Element {\n     return (\n       document.fullscreenElement ||\n       document.webkitFullscreenElement ||\n       document.msFullscreenElement ||\n       document.mozFullScreenElement ||\n       null\n     );\n   }\n   // 判断是否处于全屏状态\n   isFullScreen() {\n     return !!(document.webkitIsFullScreen || this.fullscreenElement());\n   }\n   ```\n","slug":"网页或html元素在浏览器上全屏解决方案","published":1,"updated":"2019-05-19T06:02:52.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgubj008x8ex0p0ywhc13","content":"<ol>\n<li><p><strong>全屏是什么</strong>：</p>\n<p>个人理解，全屏指的是去掉浏览器的导航栏，浏览器的全部空间被页面所占有，网页即 html 文档，网页全屏即 dom 全屏</p>\n</li>\n<li><p>不同的浏览器又不同的全屏事件可以调用，但是不同浏览器的全屏事件并不一致，因为还没被写入规范中，所以需要判断在特定的浏览器下，哪个事件可以用，以下是全屏事件的封装：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// el 是需要全屏的 dom</span></span><br><span class=\"line\">requestFullscreen(el: Element): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (el.requestFullscreen) &#123;</span><br><span class=\"line\">    el.requestFullscreen();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.mozRequestFullScreen) &#123;</span><br><span class=\"line\">    el.mozRequestFullScreen();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.webkitRequestFullscreen) &#123;</span><br><span class=\"line\">    el.webkitRequestFullscreen();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.msRequestFullscreen) &#123;</span><br><span class=\"line\">    el.msRequestFullscreen();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>网页全屏之后，还需要退出全屏，退出全屏的方式有多种，比如按 esc 键退出全屏，点击全屏按钮退出全屏等，其中按 esc 退出全屏，一般的浏览器在打开了全屏之后，都可以进行这个操作，不需要人工另外操作。点击按钮退出全屏，需要调用到关闭全屏的事件，同样，在不同的浏览器有不同的实现，需要一一进行判断，封装的事件如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// document 即 html 文档，不需要改变</span></span><br><span class=\"line\">exitFullscreen(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.exitFullscreen) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.exitFullscreen();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.mozCancelFullScreen) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.mozCancelFullScreen();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.webkitExitFullscreen) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.webkitExitFullscreen();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.msExitFullscreen) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.msExitFullscreen();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>如何判断是否处于全屏状态？</strong></p>\n<p>要判断是否处于全屏的状态，需要调用到相关的浏览器事件，在不同的浏览器，实现方式也不尽相同，因此同样需要判断，封装的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断全屏元素是否存在，并返回相应的项</span></span><br><span class=\"line\">fullscreenElement(): Element &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.fullscreenElement ||</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.webkitFullscreenElement ||</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.msFullscreenElement ||</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.mozFullScreenElement ||</span><br><span class=\"line\">    <span class=\"literal\">null</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断是否处于全屏状态</span></span><br><span class=\"line\">isFullScreen() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !!(<span class=\"built_in\">document</span>.webkitIsFullScreen || <span class=\"keyword\">this</span>.fullscreenElement());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p><strong>全屏是什么</strong>：</p>\n<p>个人理解，全屏指的是去掉浏览器的导航栏，浏览器的全部空间被页面所占有，网页即 html 文档，网页全屏即 dom 全屏</p>\n</li>\n<li><p>不同的浏览器又不同的全屏事件可以调用，但是不同浏览器的全屏事件并不一致，因为还没被写入规范中，所以需要判断在特定的浏览器下，哪个事件可以用，以下是全屏事件的封装：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// el 是需要全屏的 dom</span></span><br><span class=\"line\">requestFullscreen(el: Element): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (el.requestFullscreen) &#123;</span><br><span class=\"line\">    el.requestFullscreen();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.mozRequestFullScreen) &#123;</span><br><span class=\"line\">    el.mozRequestFullScreen();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.webkitRequestFullscreen) &#123;</span><br><span class=\"line\">    el.webkitRequestFullscreen();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el.msRequestFullscreen) &#123;</span><br><span class=\"line\">    el.msRequestFullscreen();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>网页全屏之后，还需要退出全屏，退出全屏的方式有多种，比如按 esc 键退出全屏，点击全屏按钮退出全屏等，其中按 esc 退出全屏，一般的浏览器在打开了全屏之后，都可以进行这个操作，不需要人工另外操作。点击按钮退出全屏，需要调用到关闭全屏的事件，同样，在不同的浏览器有不同的实现，需要一一进行判断，封装的事件如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// document 即 html 文档，不需要改变</span></span><br><span class=\"line\">exitFullscreen(): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.exitFullscreen) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.exitFullscreen();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.mozCancelFullScreen) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.mozCancelFullScreen();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.webkitExitFullscreen) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.webkitExitFullscreen();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.msExitFullscreen) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.msExitFullscreen();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>如何判断是否处于全屏状态？</strong></p>\n<p>要判断是否处于全屏的状态，需要调用到相关的浏览器事件，在不同的浏览器，实现方式也不尽相同，因此同样需要判断，封装的代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 判断全屏元素是否存在，并返回相应的项</span></span><br><span class=\"line\">fullscreenElement(): Element &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.fullscreenElement ||</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.webkitFullscreenElement ||</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.msFullscreenElement ||</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.mozFullScreenElement ||</span><br><span class=\"line\">    <span class=\"literal\">null</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断是否处于全屏状态</span></span><br><span class=\"line\">isFullScreen() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> !!(<span class=\"built_in\">document</span>.webkitIsFullScreen || <span class=\"keyword\">this</span>.fullscreenElement());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"获取最长公共前缀","comments":1,"date":"2019-09-15T09:57:38.000Z","_content":"```python\n# Write a function to find the longest common prefix string amongst an array of strings.\n\n# If there is no common prefix, return an empty string \"\".\n\n# Example 1:\n# Input: [\"flower\", \"flow\", \"flight\"]\n# Output: \"fl\"\n\n# Example 2:\n# Input: [\"dog\", \"racecar\", \"car\"]\n# Output: \"\"\n# Explanation: There is no common prefix among the input strings.\n\n# Note:\n# All given inputs are in lowercase letters a-z.\n\n# 来源：力扣（LeetCode）\n# 链接：https: // leetcode-cn.com/problems/longest-common-prefix\n\nclass Solution:\n    def longestCommonPrefix(self, strs) -> str:\n        if not strs:\n            return ''\n        r = []\n        for item in zip(*strs):  # 将 str 转换为二维矩阵式，遍历每个单元\n            # 若二维矩阵式每一项用 set 方式去重，三个都为重复的话，长度将为 1，此时 str 中每个元素该位置的值相同，将 true 添加到结果集合中\n            r.append(len(set(item)) == 1)\n        # 用于解决全部字符串相等时的情况，在后面加个 0，可以截取整个数组\n        r += [0]\n        # r.index(0) 表示相同字符串的截取位置，res 则为最长公共前缀\n        res = strs[0][:r.index(0)]\n        return res\n\n    def __init__(self, arr):\n        for item in ex:\n            print(self.longestCommonPrefix(item))\n\nex = [[\"dog\", \"racecar\", \"car\"], [\"flower\", \"flow\", \"flight\"], []]\nSolution(ex)\n```\n这道题用到了 python 的一个独有的数据处理能力，把数组转置为矩阵，通过判断矩阵每行的重复数为 1，判别数组中的每个元素的公共前缀。有点曲径通幽处的感觉，很妙。题解是我看了一个老哥的解答之后优化的，那老哥直接用了生成器，两行搞定了，可能理解上需要花点时间，我就按照自己的理解写成了一般式了。\n","source":"_posts/获取最长公共前缀.md","raw":"---\ntitle: 获取最长公共前缀\ncomments: true\ndate: 2019-09-15 17:57:38\ncategories: 算法\ntags: algorithmn-simple\n---\n```python\n# Write a function to find the longest common prefix string amongst an array of strings.\n\n# If there is no common prefix, return an empty string \"\".\n\n# Example 1:\n# Input: [\"flower\", \"flow\", \"flight\"]\n# Output: \"fl\"\n\n# Example 2:\n# Input: [\"dog\", \"racecar\", \"car\"]\n# Output: \"\"\n# Explanation: There is no common prefix among the input strings.\n\n# Note:\n# All given inputs are in lowercase letters a-z.\n\n# 来源：力扣（LeetCode）\n# 链接：https: // leetcode-cn.com/problems/longest-common-prefix\n\nclass Solution:\n    def longestCommonPrefix(self, strs) -> str:\n        if not strs:\n            return ''\n        r = []\n        for item in zip(*strs):  # 将 str 转换为二维矩阵式，遍历每个单元\n            # 若二维矩阵式每一项用 set 方式去重，三个都为重复的话，长度将为 1，此时 str 中每个元素该位置的值相同，将 true 添加到结果集合中\n            r.append(len(set(item)) == 1)\n        # 用于解决全部字符串相等时的情况，在后面加个 0，可以截取整个数组\n        r += [0]\n        # r.index(0) 表示相同字符串的截取位置，res 则为最长公共前缀\n        res = strs[0][:r.index(0)]\n        return res\n\n    def __init__(self, arr):\n        for item in ex:\n            print(self.longestCommonPrefix(item))\n\nex = [[\"dog\", \"racecar\", \"car\"], [\"flower\", \"flow\", \"flight\"], []]\nSolution(ex)\n```\n这道题用到了 python 的一个独有的数据处理能力，把数组转置为矩阵，通过判断矩阵每行的重复数为 1，判别数组中的每个元素的公共前缀。有点曲径通幽处的感觉，很妙。题解是我看了一个老哥的解答之后优化的，那老哥直接用了生成器，两行搞定了，可能理解上需要花点时间，我就按照自己的理解写成了一般式了。\n","slug":"获取最长公共前缀","published":1,"updated":"2019-09-15T10:01:56.000Z","layout":"post","photos":[],"link":"","_id":"ck5dbgubl00908ex0ab24j5f1","content":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Write a function to find the longest common prefix string amongst an array of strings.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If there is no common prefix, return an empty string \"\".</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 1:</span></span><br><span class=\"line\"><span class=\"comment\"># Input: [\"flower\", \"flow\", \"flight\"]</span></span><br><span class=\"line\"><span class=\"comment\"># Output: \"fl\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 2:</span></span><br><span class=\"line\"><span class=\"comment\"># Input: [\"dog\", \"racecar\", \"car\"]</span></span><br><span class=\"line\"><span class=\"comment\"># Output: \"\"</span></span><br><span class=\"line\"><span class=\"comment\"># Explanation: There is no common prefix among the input strings.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># <span class=\"doctag\">Note:</span></span></span><br><span class=\"line\"><span class=\"comment\"># All given inputs are in lowercase letters a-z.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 来源：力扣（LeetCode）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接：https: // leetcode-cn.com/problems/longest-common-prefix</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(self, strs)</span> -&gt; str:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> strs:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">        r = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> zip(*strs):  <span class=\"comment\"># 将 str 转换为二维矩阵式，遍历每个单元</span></span><br><span class=\"line\">            <span class=\"comment\"># 若二维矩阵式每一项用 set 方式去重，三个都为重复的话，长度将为 1，此时 str 中每个元素该位置的值相同，将 true 添加到结果集合中</span></span><br><span class=\"line\">            r.append(len(set(item)) == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 用于解决全部字符串相等时的情况，在后面加个 0，可以截取整个数组</span></span><br><span class=\"line\">        r += [<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"comment\"># r.index(0) 表示相同字符串的截取位置，res 则为最长公共前缀</span></span><br><span class=\"line\">        res = strs[<span class=\"number\">0</span>][:r.index(<span class=\"number\">0</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, arr)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> ex:</span><br><span class=\"line\">            print(self.longestCommonPrefix(item))</span><br><span class=\"line\"></span><br><span class=\"line\">ex = [[<span class=\"string\">\"dog\"</span>, <span class=\"string\">\"racecar\"</span>, <span class=\"string\">\"car\"</span>], [<span class=\"string\">\"flower\"</span>, <span class=\"string\">\"flow\"</span>, <span class=\"string\">\"flight\"</span>], []]</span><br><span class=\"line\">Solution(ex)</span><br></pre></td></tr></table></figure>\n<p>这道题用到了 python 的一个独有的数据处理能力，把数组转置为矩阵，通过判断矩阵每行的重复数为 1，判别数组中的每个元素的公共前缀。有点曲径通幽处的感觉，很妙。题解是我看了一个老哥的解答之后优化的，那老哥直接用了生成器，两行搞定了，可能理解上需要花点时间，我就按照自己的理解写成了一般式了。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Write a function to find the longest common prefix string amongst an array of strings.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If there is no common prefix, return an empty string \"\".</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 1:</span></span><br><span class=\"line\"><span class=\"comment\"># Input: [\"flower\", \"flow\", \"flight\"]</span></span><br><span class=\"line\"><span class=\"comment\"># Output: \"fl\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Example 2:</span></span><br><span class=\"line\"><span class=\"comment\"># Input: [\"dog\", \"racecar\", \"car\"]</span></span><br><span class=\"line\"><span class=\"comment\"># Output: \"\"</span></span><br><span class=\"line\"><span class=\"comment\"># Explanation: There is no common prefix among the input strings.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># <span class=\"doctag\">Note:</span></span></span><br><span class=\"line\"><span class=\"comment\"># All given inputs are in lowercase letters a-z.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 来源：力扣（LeetCode）</span></span><br><span class=\"line\"><span class=\"comment\"># 链接：https: // leetcode-cn.com/problems/longest-common-prefix</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">longestCommonPrefix</span><span class=\"params\">(self, strs)</span> -&gt; str:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> strs:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">        r = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> zip(*strs):  <span class=\"comment\"># 将 str 转换为二维矩阵式，遍历每个单元</span></span><br><span class=\"line\">            <span class=\"comment\"># 若二维矩阵式每一项用 set 方式去重，三个都为重复的话，长度将为 1，此时 str 中每个元素该位置的值相同，将 true 添加到结果集合中</span></span><br><span class=\"line\">            r.append(len(set(item)) == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 用于解决全部字符串相等时的情况，在后面加个 0，可以截取整个数组</span></span><br><span class=\"line\">        r += [<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"comment\"># r.index(0) 表示相同字符串的截取位置，res 则为最长公共前缀</span></span><br><span class=\"line\">        res = strs[<span class=\"number\">0</span>][:r.index(<span class=\"number\">0</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, arr)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> ex:</span><br><span class=\"line\">            print(self.longestCommonPrefix(item))</span><br><span class=\"line\"></span><br><span class=\"line\">ex = [[<span class=\"string\">\"dog\"</span>, <span class=\"string\">\"racecar\"</span>, <span class=\"string\">\"car\"</span>], [<span class=\"string\">\"flower\"</span>, <span class=\"string\">\"flow\"</span>, <span class=\"string\">\"flight\"</span>], []]</span><br><span class=\"line\">Solution(ex)</span><br></pre></td></tr></table></figure>\n<p>这道题用到了 python 的一个独有的数据处理能力，把数组转置为矩阵，通过判断矩阵每行的重复数为 1，判别数组中的每个元素的公共前缀。有点曲径通幽处的感觉，很妙。题解是我看了一个老哥的解答之后优化的，那老哥直接用了生成器，两行搞定了，可能理解上需要花点时间，我就按照自己的理解写成了一般式了。</p>\n"},{"title":"统计函数","comments":1,"date":"2019-08-11T02:41:10.000Z","_content":"\n摘要：\n本文集合了 JS 数组统计的各种案例，包括：统计数组中每个元素出现的次数、数组数据总和统计等。\n\n1、统计数组中每个元素出现的次数\n\n```js\nconst nums = [3, 5, 6, 22, 1, 4, 3, 5, 22, 0];\n\nconst result = nums.reduce((tally, amt) => {\n  tally[amt] ? tally[amt]++ : (tally[amt] = 1);\n  return tally;\n}, {});\n\nconsole.log(result);\n//{ '1': 1, '3': 2, '4': 1, '5': 2, '6': 1, '82': 2 }\n```\n\n2、数组数据总和\n\n```js\nconst books = [\n  {\n    title: \"Showings\",\n    author: \"Julian of Norwich\",\n    checkouts: 45\n  },\n  {\n    title: \"The Triads\",\n    author: \"Gregory Palamas\",\n    checkouts: 32\n  },\n  {\n    title: \"The Praktikos\",\n    author: \"Evagrius Ponticus\",\n    checkouts: 29\n  }\n];\n\nconst total = books\n  .map(b => {\n    return b.checkouts;\n  })\n  .reduce((p, c) => {\n    return p + c;\n  });\n\nconsole.log(total); //106\n```\n","source":"_posts/统计函数.md","raw":"---\ntitle: 统计函数\ncomments: true\ndate: 2019-08-11 10:41:10\ncategories: web\ntags: js\n---\n\n摘要：\n本文集合了 JS 数组统计的各种案例，包括：统计数组中每个元素出现的次数、数组数据总和统计等。\n\n1、统计数组中每个元素出现的次数\n\n```js\nconst nums = [3, 5, 6, 22, 1, 4, 3, 5, 22, 0];\n\nconst result = nums.reduce((tally, amt) => {\n  tally[amt] ? tally[amt]++ : (tally[amt] = 1);\n  return tally;\n}, {});\n\nconsole.log(result);\n//{ '1': 1, '3': 2, '4': 1, '5': 2, '6': 1, '82': 2 }\n```\n\n2、数组数据总和\n\n```js\nconst books = [\n  {\n    title: \"Showings\",\n    author: \"Julian of Norwich\",\n    checkouts: 45\n  },\n  {\n    title: \"The Triads\",\n    author: \"Gregory Palamas\",\n    checkouts: 32\n  },\n  {\n    title: \"The Praktikos\",\n    author: \"Evagrius Ponticus\",\n    checkouts: 29\n  }\n];\n\nconst total = books\n  .map(b => {\n    return b.checkouts;\n  })\n  .reduce((p, c) => {\n    return p + c;\n  });\n\nconsole.log(total); //106\n```\n","slug":"统计函数","published":1,"updated":"2019-11-01T01:26:45.336Z","layout":"post","photos":[],"link":"","_id":"ck5dbgubm00948ex0g4enmlqo","content":"<p>摘要：<br>本文集合了 JS 数组统计的各种案例，包括：统计数组中每个元素出现的次数、数组数据总和统计等。</p>\n<p>1、统计数组中每个元素出现的次数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">22</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">22</span>, <span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = nums.reduce(<span class=\"function\">(<span class=\"params\">tally, amt</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  tally[amt] ? tally[amt]++ : (tally[amt] = <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tally;</span><br><span class=\"line\">&#125;, &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//&#123; '1': 1, '3': 2, '4': 1, '5': 2, '6': 1, '82': 2 &#125;</span></span><br></pre></td></tr></table></figure>\n<p>2、数组数据总和</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> books = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"Showings\"</span>,</span><br><span class=\"line\">    author: <span class=\"string\">\"Julian of Norwich\"</span>,</span><br><span class=\"line\">    checkouts: <span class=\"number\">45</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"The Triads\"</span>,</span><br><span class=\"line\">    author: <span class=\"string\">\"Gregory Palamas\"</span>,</span><br><span class=\"line\">    checkouts: <span class=\"number\">32</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"The Praktikos\"</span>,</span><br><span class=\"line\">    author: <span class=\"string\">\"Evagrius Ponticus\"</span>,</span><br><span class=\"line\">    checkouts: <span class=\"number\">29</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> total = books</span><br><span class=\"line\">  .map(<span class=\"function\"><span class=\"params\">b</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.checkouts;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .reduce(<span class=\"function\">(<span class=\"params\">p, c</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p + c;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total); <span class=\"comment\">//106</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>摘要：<br>本文集合了 JS 数组统计的各种案例，包括：统计数组中每个元素出现的次数、数组数据总和统计等。</p>\n<p>1、统计数组中每个元素出现的次数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nums = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">22</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">22</span>, <span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = nums.reduce(<span class=\"function\">(<span class=\"params\">tally, amt</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  tally[amt] ? tally[amt]++ : (tally[amt] = <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tally;</span><br><span class=\"line\">&#125;, &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\"><span class=\"comment\">//&#123; '1': 1, '3': 2, '4': 1, '5': 2, '6': 1, '82': 2 &#125;</span></span><br></pre></td></tr></table></figure>\n<p>2、数组数据总和</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> books = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"Showings\"</span>,</span><br><span class=\"line\">    author: <span class=\"string\">\"Julian of Norwich\"</span>,</span><br><span class=\"line\">    checkouts: <span class=\"number\">45</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"The Triads\"</span>,</span><br><span class=\"line\">    author: <span class=\"string\">\"Gregory Palamas\"</span>,</span><br><span class=\"line\">    checkouts: <span class=\"number\">32</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    title: <span class=\"string\">\"The Praktikos\"</span>,</span><br><span class=\"line\">    author: <span class=\"string\">\"Evagrius Ponticus\"</span>,</span><br><span class=\"line\">    checkouts: <span class=\"number\">29</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> total = books</span><br><span class=\"line\">  .map(<span class=\"function\"><span class=\"params\">b</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.checkouts;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .reduce(<span class=\"function\">(<span class=\"params\">p, c</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p + c;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total); <span class=\"comment\">//106</span></span><br></pre></td></tr></table></figure>\n"},{"title":"计算机图形学 —————— 空间中的物体（2）","comments":1,"date":"2019-11-12T00:17:47.000Z","_content":"\n在计算机图形学 —————— 空间中的物体（1）中，我讲到了网页中颜色的填充方法，这一篇，我来讲讲网页中的视点。有空间观念的话，应该知道我们的眼睛看物体总是越近的物体看得越清楚，越大，越远的物体显得越渺小，也就是近大远小的规律。\n\n空间中的物体，从不同角度看，给我们的视觉效也是不一样的，而视点又有上下左右之分，每个方向的视点位置也同样会影响到物体的视觉效果。\n\n综上，要展示一个空间中的物体，我们还需要三个值，即：视点，视角以及物体的远近值，可以这么表示：\n\n```js\nclass PerspectiveCamera {\n  constructor(eye, front, up, fov) {\n    // @eye：视点, @front：视野前方坐标点, @up：视野后方坐标点, @fov：视野远近，近大远小;\n    this.eye = eye;\n    this.front = front;\n    this.refUp = up;\n    this.fov = fov;\n  }\n\n  initialize() {\n    this.right = this.front.cross(this.refUp);\n    this.up = this.right.cross(this.front);\n    this.fovScale = Math.tan((this.fov * 0.5 * Math.PI) / 180) * 2;\n  }\n}\n```\n","source":"_posts/计算机图形学-2.md","raw":"---\ntitle: 计算机图形学 —————— 空间中的物体（2）\ncomments: true\ndate: 2019-11-12 08:17:47\ncategories: web\ntags: 3D\n---\n\n在计算机图形学 —————— 空间中的物体（1）中，我讲到了网页中颜色的填充方法，这一篇，我来讲讲网页中的视点。有空间观念的话，应该知道我们的眼睛看物体总是越近的物体看得越清楚，越大，越远的物体显得越渺小，也就是近大远小的规律。\n\n空间中的物体，从不同角度看，给我们的视觉效也是不一样的，而视点又有上下左右之分，每个方向的视点位置也同样会影响到物体的视觉效果。\n\n综上，要展示一个空间中的物体，我们还需要三个值，即：视点，视角以及物体的远近值，可以这么表示：\n\n```js\nclass PerspectiveCamera {\n  constructor(eye, front, up, fov) {\n    // @eye：视点, @front：视野前方坐标点, @up：视野后方坐标点, @fov：视野远近，近大远小;\n    this.eye = eye;\n    this.front = front;\n    this.refUp = up;\n    this.fov = fov;\n  }\n\n  initialize() {\n    this.right = this.front.cross(this.refUp);\n    this.up = this.right.cross(this.front);\n    this.fovScale = Math.tan((this.fov * 0.5 * Math.PI) / 180) * 2;\n  }\n}\n```\n","slug":"计算机图形学-2","published":1,"updated":"2019-11-12T01:19:00.803Z","layout":"post","photos":[],"link":"","_id":"ck5dbgubm00978ex0xrupwggg","content":"<p>在计算机图形学 —————— 空间中的物体（1）中，我讲到了网页中颜色的填充方法，这一篇，我来讲讲网页中的视点。有空间观念的话，应该知道我们的眼睛看物体总是越近的物体看得越清楚，越大，越远的物体显得越渺小，也就是近大远小的规律。</p>\n<p>空间中的物体，从不同角度看，给我们的视觉效也是不一样的，而视点又有上下左右之分，每个方向的视点位置也同样会影响到物体的视觉效果。</p>\n<p>综上，要展示一个空间中的物体，我们还需要三个值，即：视点，视角以及物体的远近值，可以这么表示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PerspectiveCamera</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(eye, front, up, fov) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// @eye：视点, @front：视野前方坐标点, @up：视野后方坐标点, @fov：视野远近，近大远小;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.eye = eye;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.front = front;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.refUp = up;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fov = fov;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  initialize() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.right = <span class=\"keyword\">this</span>.front.cross(<span class=\"keyword\">this</span>.refUp);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.up = <span class=\"keyword\">this</span>.right.cross(<span class=\"keyword\">this</span>.front);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fovScale = <span class=\"built_in\">Math</span>.tan((<span class=\"keyword\">this</span>.fov * <span class=\"number\">0.5</span> * <span class=\"built_in\">Math</span>.PI) / <span class=\"number\">180</span>) * <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在计算机图形学 —————— 空间中的物体（1）中，我讲到了网页中颜色的填充方法，这一篇，我来讲讲网页中的视点。有空间观念的话，应该知道我们的眼睛看物体总是越近的物体看得越清楚，越大，越远的物体显得越渺小，也就是近大远小的规律。</p>\n<p>空间中的物体，从不同角度看，给我们的视觉效也是不一样的，而视点又有上下左右之分，每个方向的视点位置也同样会影响到物体的视觉效果。</p>\n<p>综上，要展示一个空间中的物体，我们还需要三个值，即：视点，视角以及物体的远近值，可以这么表示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PerspectiveCamera</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(eye, front, up, fov) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// @eye：视点, @front：视野前方坐标点, @up：视野后方坐标点, @fov：视野远近，近大远小;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.eye = eye;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.front = front;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.refUp = up;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fov = fov;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  initialize() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.right = <span class=\"keyword\">this</span>.front.cross(<span class=\"keyword\">this</span>.refUp);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.up = <span class=\"keyword\">this</span>.right.cross(<span class=\"keyword\">this</span>.front);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fovScale = <span class=\"built_in\">Math</span>.tan((<span class=\"keyword\">this</span>.fov * <span class=\"number\">0.5</span> * <span class=\"built_in\">Math</span>.PI) / <span class=\"number\">180</span>) * <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"软件版本号定义","description":"软件版本相关知识科普","comments":1,"toc":true,"date":"2020-01-14T03:24:02.000Z","_content":"一般来讲大部分的软件版本号分3段，比如 A.B.C,\n\nA 表示大版本号，一般当软件整体重写，或出现不向后兼容的改变时，增加A，A为零时表示软件还在开发阶段。\n\nB 表示功能更新，出现新功能时增加B\n\nC 表示小修改，如修复bug，只要有修改就增加C\n\n除了版本号之外还会有一些修饰的词，比如：\n\nalpha: 内部版本\n\nbeta: 测试版\n\nrc: 即将作为正式版发布\n\nlts: 长期维护\n\n来源：[知乎](https://www.zhihu.com/question/20289602/answer/20068112)","source":"_posts/软件版本号定义.md","raw":"---\ntitle: 软件版本号定义\ncategories: web\ntags: 分享\ndescription: 软件版本相关知识科普\ncomments: true\ntoc: true\ndate: 2020-01-14 11:24:02\n---\n一般来讲大部分的软件版本号分3段，比如 A.B.C,\n\nA 表示大版本号，一般当软件整体重写，或出现不向后兼容的改变时，增加A，A为零时表示软件还在开发阶段。\n\nB 表示功能更新，出现新功能时增加B\n\nC 表示小修改，如修复bug，只要有修改就增加C\n\n除了版本号之外还会有一些修饰的词，比如：\n\nalpha: 内部版本\n\nbeta: 测试版\n\nrc: 即将作为正式版发布\n\nlts: 长期维护\n\n来源：[知乎](https://www.zhihu.com/question/20289602/answer/20068112)","slug":"软件版本号定义","published":1,"updated":"2020-01-14T03:28:17.554Z","layout":"post","photos":[],"link":"","_id":"ck5dbgubn009a8ex03k62hmta","content":"<p>一般来讲大部分的软件版本号分3段，比如 A.B.C,</p>\n<p>A 表示大版本号，一般当软件整体重写，或出现不向后兼容的改变时，增加A，A为零时表示软件还在开发阶段。</p>\n<p>B 表示功能更新，出现新功能时增加B</p>\n<p>C 表示小修改，如修复bug，只要有修改就增加C</p>\n<p>除了版本号之外还会有一些修饰的词，比如：</p>\n<p>alpha: 内部版本</p>\n<p>beta: 测试版</p>\n<p>rc: 即将作为正式版发布</p>\n<p>lts: 长期维护</p>\n<p>来源：<a href=\"https://www.zhihu.com/question/20289602/answer/20068112\" target=\"_blank\" rel=\"noopener\">知乎</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一般来讲大部分的软件版本号分3段，比如 A.B.C,</p>\n<p>A 表示大版本号，一般当软件整体重写，或出现不向后兼容的改变时，增加A，A为零时表示软件还在开发阶段。</p>\n<p>B 表示功能更新，出现新功能时增加B</p>\n<p>C 表示小修改，如修复bug，只要有修改就增加C</p>\n<p>除了版本号之外还会有一些修饰的词，比如：</p>\n<p>alpha: 内部版本</p>\n<p>beta: 测试版</p>\n<p>rc: 即将作为正式版发布</p>\n<p>lts: 长期维护</p>\n<p>来源：<a href=\"https://www.zhihu.com/question/20289602/answer/20068112\" target=\"_blank\" rel=\"noopener\">知乎</a></p>\n"},{"title":"Web 性能优化 —— 首屏优化","comments":1,"date":"2018-12-02T08:44:23.000Z","_content":"\n花了两周多，终于完成了一个基本无 bug 的项目，但是有个比较大的问题就是：在 webpack 测试环境下，编译时间太久了，app.js 太大了，导致页面初始化极其的慢，虽然说正式环境下不会有这个问题，同事也说测试环境 1000 kb 左右正常，不用优化，但是自己的页面打开慢还是让人感到极其不爽的，花了两个钟左右，我把 app.js 从 1983 kb 缩小到了 1083 kb，压缩之后为 273 kb，首屏运行速度从原来的可能要十多秒，提升到了 166 ms，我是怎么做到这些的呢？主要策略如下：\n\n首先，从包开始优化，我用的包就一个 elementUI，用过的人应该都知道，这个包有几百 kb，简直就是恶魔啊，所以，必须要打压他一下。这里的主要策略就是按需引入 elementUI，关于 elementUI 的按需引入，官方有介绍，看[这里](http://element-cn.eleme.io/#/zh-CN/component/quickstart)，这里我要讲的是，官方可能叫你这么引入这个库的：\n\n```js\n在 main.js 引入改库\nimport Vue from 'vue';\nimport { Button, Select } from 'element-ui';\nimport App from './App.vue';\n\nVue.component(Button.name, Button);\nVue.component(Select.name, Select);\n/* 或写为\n * Vue.use(Button)\n * Vue.use(Select)\n */\n\nnew Vue({\n  el: '#app',\n  render: h => h(App)\n});\n```\n\n这种引用方式在实际引用中，会大大增加 app.js 的体积，所以，这里，我是把 elemenui 相关的引用放到相应的组件里面，以组件的形式去引用，这样，app.js 的体积会缩小很多。\n\n然后，就是写代码的习惯了，比如引用组件，尽量用以下形式，代替 import from 的方式：\n\n```js\nconst Loading = () => import('@/components/Common/loading');\n```\n\n这种方式引入组件的好处是，webpack 会对代码进行自动分割，异步加载组件，从而实现路由的懒加载，根据需求引入不同的组件，而不是第一次加载就全部引入。更详细的解释看[这里](https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E6%8A%8A%E7%BB%84%E4%BB%B6%E6%8C%89%E7%BB%84%E5%88%86%E5%9D%97)\n\n接着就是把代码里的 console 相关的语句去掉啦，别看 console 只是稍微的调用了一下函数，看起来对性能影响不大，但是代码里满是 console 语句，就会有一点影响了，所以还是能去掉就去掉为好。除了去除 console 相关语句，别忘了把多余的代码和组件也去掉，这会一定程度上减少包的体积。\n\n最后就是网络请求能少则少啦，但是个人不太推荐用缓存的，问题太多了，后期。\n","source":"_posts/首屏优化.md","raw":"---\ntitle: web 性能优化 —— 首屏优化\ncomments: true\ndate: 2018-12-02 16:44:23\ncategories: web\ntags: 性能优化\n---\n\n花了两周多，终于完成了一个基本无 bug 的项目，但是有个比较大的问题就是：在 webpack 测试环境下，编译时间太久了，app.js 太大了，导致页面初始化极其的慢，虽然说正式环境下不会有这个问题，同事也说测试环境 1000 kb 左右正常，不用优化，但是自己的页面打开慢还是让人感到极其不爽的，花了两个钟左右，我把 app.js 从 1983 kb 缩小到了 1083 kb，压缩之后为 273 kb，首屏运行速度从原来的可能要十多秒，提升到了 166 ms，我是怎么做到这些的呢？主要策略如下：\n\n首先，从包开始优化，我用的包就一个 elementUI，用过的人应该都知道，这个包有几百 kb，简直就是恶魔啊，所以，必须要打压他一下。这里的主要策略就是按需引入 elementUI，关于 elementUI 的按需引入，官方有介绍，看[这里](http://element-cn.eleme.io/#/zh-CN/component/quickstart)，这里我要讲的是，官方可能叫你这么引入这个库的：\n\n```js\n在 main.js 引入改库\nimport Vue from 'vue';\nimport { Button, Select } from 'element-ui';\nimport App from './App.vue';\n\nVue.component(Button.name, Button);\nVue.component(Select.name, Select);\n/* 或写为\n * Vue.use(Button)\n * Vue.use(Select)\n */\n\nnew Vue({\n  el: '#app',\n  render: h => h(App)\n});\n```\n\n这种引用方式在实际引用中，会大大增加 app.js 的体积，所以，这里，我是把 elemenui 相关的引用放到相应的组件里面，以组件的形式去引用，这样，app.js 的体积会缩小很多。\n\n然后，就是写代码的习惯了，比如引用组件，尽量用以下形式，代替 import from 的方式：\n\n```js\nconst Loading = () => import('@/components/Common/loading');\n```\n\n这种方式引入组件的好处是，webpack 会对代码进行自动分割，异步加载组件，从而实现路由的懒加载，根据需求引入不同的组件，而不是第一次加载就全部引入。更详细的解释看[这里](https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E6%8A%8A%E7%BB%84%E4%BB%B6%E6%8C%89%E7%BB%84%E5%88%86%E5%9D%97)\n\n接着就是把代码里的 console 相关的语句去掉啦，别看 console 只是稍微的调用了一下函数，看起来对性能影响不大，但是代码里满是 console 语句，就会有一点影响了，所以还是能去掉就去掉为好。除了去除 console 相关语句，别忘了把多余的代码和组件也去掉，这会一定程度上减少包的体积。\n\n最后就是网络请求能少则少啦，但是个人不太推荐用缓存的，问题太多了，后期。\n","slug":"首屏优化","published":1,"updated":"2020-01-08T01:00:24.547Z","layout":"post","photos":[],"link":"","_id":"ck5dbgubo009e8ex06h0qjb3w","content":"<p>花了两周多，终于完成了一个基本无 bug 的项目，但是有个比较大的问题就是：在 webpack 测试环境下，编译时间太久了，app.js 太大了，导致页面初始化极其的慢，虽然说正式环境下不会有这个问题，同事也说测试环境 1000 kb 左右正常，不用优化，但是自己的页面打开慢还是让人感到极其不爽的，花了两个钟左右，我把 app.js 从 1983 kb 缩小到了 1083 kb，压缩之后为 273 kb，首屏运行速度从原来的可能要十多秒，提升到了 166 ms，我是怎么做到这些的呢？主要策略如下：</p>\n<p>首先，从包开始优化，我用的包就一个 elementUI，用过的人应该都知道，这个包有几百 kb，简直就是恶魔啊，所以，必须要打压他一下。这里的主要策略就是按需引入 elementUI，关于 elementUI 的按需引入，官方有介绍，看<a href=\"http://element-cn.eleme.io/#/zh-CN/component/quickstart\" target=\"_blank\" rel=\"noopener\">这里</a>，这里我要讲的是，官方可能叫你这么引入这个库的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 main.js 引入改库</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button, Select &#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(Button.name, Button);</span><br><span class=\"line\">Vue.component(Select.name, Select);</span><br><span class=\"line\"><span class=\"comment\">/* 或写为</span></span><br><span class=\"line\"><span class=\"comment\"> * Vue.use(Button)</span></span><br><span class=\"line\"><span class=\"comment\"> * Vue.use(Select)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这种引用方式在实际引用中，会大大增加 app.js 的体积，所以，这里，我是把 elemenui 相关的引用放到相应的组件里面，以组件的形式去引用，这样，app.js 的体积会缩小很多。</p>\n<p>然后，就是写代码的习惯了，比如引用组件，尽量用以下形式，代替 import from 的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Loading = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/components/Common/loading'</span>);</span><br></pre></td></tr></table></figure>\n<p>这种方式引入组件的好处是，webpack 会对代码进行自动分割，异步加载组件，从而实现路由的懒加载，根据需求引入不同的组件，而不是第一次加载就全部引入。更详细的解释看<a href=\"https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E6%8A%8A%E7%BB%84%E4%BB%B6%E6%8C%89%E7%BB%84%E5%88%86%E5%9D%97\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>接着就是把代码里的 console 相关的语句去掉啦，别看 console 只是稍微的调用了一下函数，看起来对性能影响不大，但是代码里满是 console 语句，就会有一点影响了，所以还是能去掉就去掉为好。除了去除 console 相关语句，别忘了把多余的代码和组件也去掉，这会一定程度上减少包的体积。</p>\n<p>最后就是网络请求能少则少啦，但是个人不太推荐用缓存的，问题太多了，后期。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>花了两周多，终于完成了一个基本无 bug 的项目，但是有个比较大的问题就是：在 webpack 测试环境下，编译时间太久了，app.js 太大了，导致页面初始化极其的慢，虽然说正式环境下不会有这个问题，同事也说测试环境 1000 kb 左右正常，不用优化，但是自己的页面打开慢还是让人感到极其不爽的，花了两个钟左右，我把 app.js 从 1983 kb 缩小到了 1083 kb，压缩之后为 273 kb，首屏运行速度从原来的可能要十多秒，提升到了 166 ms，我是怎么做到这些的呢？主要策略如下：</p>\n<p>首先，从包开始优化，我用的包就一个 elementUI，用过的人应该都知道，这个包有几百 kb，简直就是恶魔啊，所以，必须要打压他一下。这里的主要策略就是按需引入 elementUI，关于 elementUI 的按需引入，官方有介绍，看<a href=\"http://element-cn.eleme.io/#/zh-CN/component/quickstart\" target=\"_blank\" rel=\"noopener\">这里</a>，这里我要讲的是，官方可能叫你这么引入这个库的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在 main.js 引入改库</span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button, Select &#125; <span class=\"keyword\">from</span> <span class=\"string\">'element-ui'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.component(Button.name, Button);</span><br><span class=\"line\">Vue.component(Select.name, Select);</span><br><span class=\"line\"><span class=\"comment\">/* 或写为</span></span><br><span class=\"line\"><span class=\"comment\"> * Vue.use(Button)</span></span><br><span class=\"line\"><span class=\"comment\"> * Vue.use(Select)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这种引用方式在实际引用中，会大大增加 app.js 的体积，所以，这里，我是把 elemenui 相关的引用放到相应的组件里面，以组件的形式去引用，这样，app.js 的体积会缩小很多。</p>\n<p>然后，就是写代码的习惯了，比如引用组件，尽量用以下形式，代替 import from 的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Loading = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">'@/components/Common/loading'</span>);</span><br></pre></td></tr></table></figure>\n<p>这种方式引入组件的好处是，webpack 会对代码进行自动分割，异步加载组件，从而实现路由的懒加载，根据需求引入不同的组件，而不是第一次加载就全部引入。更详细的解释看<a href=\"https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E6%8A%8A%E7%BB%84%E4%BB%B6%E6%8C%89%E7%BB%84%E5%88%86%E5%9D%97\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>接着就是把代码里的 console 相关的语句去掉啦，别看 console 只是稍微的调用了一下函数，看起来对性能影响不大，但是代码里满是 console 语句，就会有一点影响了，所以还是能去掉就去掉为好。除了去除 console 相关语句，别忘了把多余的代码和组件也去掉，这会一定程度上减少包的体积。</p>\n<p>最后就是网络请求能少则少啦，但是个人不太推荐用缓存的，问题太多了，后期。</p>\n"},{"title":"项目模块化原则","comments":1,"date":"2019-11-08T00:58:03.000Z","_content":"\n1、组件划分为业务组件和 UI 组件\n\n2、按照先业务后功能的方式去颗粒化组件\n\n3、数据驱动，业务操作在业务组件里完成\n\n4、ＵＩ组件不参与业务，不处理业务逻辑，只做展示之用\n\n5、公共的组件、接口、css，抽离出来，不掺杂在业务逻辑里\n","source":"_posts/项目模块化原则.md","raw":"---\ntitle: 项目模块化原则\ncomments: true\ndate: 2019-11-08 08:58:03\ncategories: web\ntags: 项目模块化\n---\n\n1、组件划分为业务组件和 UI 组件\n\n2、按照先业务后功能的方式去颗粒化组件\n\n3、数据驱动，业务操作在业务组件里完成\n\n4、ＵＩ组件不参与业务，不处理业务逻辑，只做展示之用\n\n5、公共的组件、接口、css，抽离出来，不掺杂在业务逻辑里\n","slug":"项目模块化原则","published":1,"updated":"2019-11-08T01:00:35.413Z","layout":"post","photos":[],"link":"","_id":"ck5dbgubp009h8ex08j6dfou7","content":"<p>1、组件划分为业务组件和 UI 组件</p>\n<p>2、按照先业务后功能的方式去颗粒化组件</p>\n<p>3、数据驱动，业务操作在业务组件里完成</p>\n<p>4、ＵＩ组件不参与业务，不处理业务逻辑，只做展示之用</p>\n<p>5、公共的组件、接口、css，抽离出来，不掺杂在业务逻辑里</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、组件划分为业务组件和 UI 组件</p>\n<p>2、按照先业务后功能的方式去颗粒化组件</p>\n<p>3、数据驱动，业务操作在业务组件里完成</p>\n<p>4、ＵＩ组件不参与业务，不处理业务逻辑，只做展示之用</p>\n<p>5、公共的组件、接口、css，抽离出来，不掺杂在业务逻辑里</p>\n"},{"title":"计算机图形学 ———— 空间中的物体（1）","comments":1,"date":"2019-11-11T00:54:30.000Z","_content":"\n学过素描的应该都知道，物体的空间感/立体感是通过阴影渲染出来的，要画出一个具有立体感的物体，要清楚的区分出黑白灰三面，还有五调子，其中的黑灰是根据光线的强弱来判别的，比如光线的聚点，可能就是高光的位置，比较亮，而背面则是阴影，是比较暗的，但是这并不是最暗的位置，最暗的的位置应该是明暗交界线。\n\n想要在网页上展现一个有立体感的物体，也可以用类似的原理。等等，计算机怎么去渲染这么有层次的颜色呢？画素描的时候都是一条线一条线的去画，才能勉强画出这种层次感，计算机去画就更难了。别担心，计算机显示画面不是一个像素一个像素的显示嘛，那么我们就一个像素一个像素的填充颜色，只要算法写的好，还怕填充不出来吗？\n\n说到网页画图，我们首先想到的应是 canvas 吧，所以我们可以先给出一张画布：\n\n```js\nconst ctx = canvas.getContext(\"2d\");\nconst w = canvas.attributes.width.value;\nconst h = canvas.attributes.height.value;\nctx.fillRect(0, 0, w, h);\n```\n\n有了画布之后，我们可以获取他里面所有的像素点集合 pixels：\n\n```js\nconst imgdata = ctx.getImageData(0, 0, w, h);\nconst pixels = imgdata.data;\n```\n\n有了像素点集合之后，我们可以往里面填充颜色\n\n```js\nlet i = 0;\nfor (let y = 0; y < h; y++)\n  for (let x = 0; x < w; x++) {\n    pixels[i++] = 0;\n    pixels[i++] = 255;\n  }\nctx.putImageData(imgdata, 0, 0);\n```\n\n因为像素点集合是二维的，所以，y 表示从上到下的像素点， x 表示从左往右的像素点，这样我们就格子里填充颜色了。做到了这一步，相当于你已经会画线条了，接下来应该要熟悉一下构图了。\n","source":"_posts/计算机图形学-1.md","raw":"---\ntitle: 计算机图形学 ———— 空间中的物体（1）\ncomments: true\ndate: 2019-11-11 08:54:30\ncategories: web\ntags: 3D\n---\n\n学过素描的应该都知道，物体的空间感/立体感是通过阴影渲染出来的，要画出一个具有立体感的物体，要清楚的区分出黑白灰三面，还有五调子，其中的黑灰是根据光线的强弱来判别的，比如光线的聚点，可能就是高光的位置，比较亮，而背面则是阴影，是比较暗的，但是这并不是最暗的位置，最暗的的位置应该是明暗交界线。\n\n想要在网页上展现一个有立体感的物体，也可以用类似的原理。等等，计算机怎么去渲染这么有层次的颜色呢？画素描的时候都是一条线一条线的去画，才能勉强画出这种层次感，计算机去画就更难了。别担心，计算机显示画面不是一个像素一个像素的显示嘛，那么我们就一个像素一个像素的填充颜色，只要算法写的好，还怕填充不出来吗？\n\n说到网页画图，我们首先想到的应是 canvas 吧，所以我们可以先给出一张画布：\n\n```js\nconst ctx = canvas.getContext(\"2d\");\nconst w = canvas.attributes.width.value;\nconst h = canvas.attributes.height.value;\nctx.fillRect(0, 0, w, h);\n```\n\n有了画布之后，我们可以获取他里面所有的像素点集合 pixels：\n\n```js\nconst imgdata = ctx.getImageData(0, 0, w, h);\nconst pixels = imgdata.data;\n```\n\n有了像素点集合之后，我们可以往里面填充颜色\n\n```js\nlet i = 0;\nfor (let y = 0; y < h; y++)\n  for (let x = 0; x < w; x++) {\n    pixels[i++] = 0;\n    pixels[i++] = 255;\n  }\nctx.putImageData(imgdata, 0, 0);\n```\n\n因为像素点集合是二维的，所以，y 表示从上到下的像素点， x 表示从左往右的像素点，这样我们就格子里填充颜色了。做到了这一步，相当于你已经会画线条了，接下来应该要熟悉一下构图了。\n","slug":"计算机图形学-1","published":1,"updated":"2019-11-12T01:19:14.171Z","layout":"post","photos":[],"link":"","_id":"ck5dbgubr009l8ex0vqyn4odw","content":"<p>学过素描的应该都知道，物体的空间感/立体感是通过阴影渲染出来的，要画出一个具有立体感的物体，要清楚的区分出黑白灰三面，还有五调子，其中的黑灰是根据光线的强弱来判别的，比如光线的聚点，可能就是高光的位置，比较亮，而背面则是阴影，是比较暗的，但是这并不是最暗的位置，最暗的的位置应该是明暗交界线。</p>\n<p>想要在网页上展现一个有立体感的物体，也可以用类似的原理。等等，计算机怎么去渲染这么有层次的颜色呢？画素描的时候都是一条线一条线的去画，才能勉强画出这种层次感，计算机去画就更难了。别担心，计算机显示画面不是一个像素一个像素的显示嘛，那么我们就一个像素一个像素的填充颜色，只要算法写的好，还怕填充不出来吗？</p>\n<p>说到网页画图，我们首先想到的应是 canvas 吧，所以我们可以先给出一张画布：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> w = canvas.attributes.width.value;</span><br><span class=\"line\"><span class=\"keyword\">const</span> h = canvas.attributes.height.value;</span><br><span class=\"line\">ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);</span><br></pre></td></tr></table></figure>\n<p>有了画布之后，我们可以获取他里面所有的像素点集合 pixels：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> imgdata = ctx.getImageData(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pixels = imgdata.data;</span><br></pre></td></tr></table></figure>\n<p>有了像素点集合之后，我们可以往里面填充颜色</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> y = <span class=\"number\">0</span>; y &lt; h; y++)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x = <span class=\"number\">0</span>; x &lt; w; x++) &#123;</span><br><span class=\"line\">    pixels[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pixels[i++] = <span class=\"number\">255</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">ctx.putImageData(imgdata, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>因为像素点集合是二维的，所以，y 表示从上到下的像素点， x 表示从左往右的像素点，这样我们就格子里填充颜色了。做到了这一步，相当于你已经会画线条了，接下来应该要熟悉一下构图了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>学过素描的应该都知道，物体的空间感/立体感是通过阴影渲染出来的，要画出一个具有立体感的物体，要清楚的区分出黑白灰三面，还有五调子，其中的黑灰是根据光线的强弱来判别的，比如光线的聚点，可能就是高光的位置，比较亮，而背面则是阴影，是比较暗的，但是这并不是最暗的位置，最暗的的位置应该是明暗交界线。</p>\n<p>想要在网页上展现一个有立体感的物体，也可以用类似的原理。等等，计算机怎么去渲染这么有层次的颜色呢？画素描的时候都是一条线一条线的去画，才能勉强画出这种层次感，计算机去画就更难了。别担心，计算机显示画面不是一个像素一个像素的显示嘛，那么我们就一个像素一个像素的填充颜色，只要算法写的好，还怕填充不出来吗？</p>\n<p>说到网页画图，我们首先想到的应是 canvas 吧，所以我们可以先给出一张画布：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> w = canvas.attributes.width.value;</span><br><span class=\"line\"><span class=\"keyword\">const</span> h = canvas.attributes.height.value;</span><br><span class=\"line\">ctx.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);</span><br></pre></td></tr></table></figure>\n<p>有了画布之后，我们可以获取他里面所有的像素点集合 pixels：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> imgdata = ctx.getImageData(<span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pixels = imgdata.data;</span><br></pre></td></tr></table></figure>\n<p>有了像素点集合之后，我们可以往里面填充颜色</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> y = <span class=\"number\">0</span>; y &lt; h; y++)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x = <span class=\"number\">0</span>; x &lt; w; x++) &#123;</span><br><span class=\"line\">    pixels[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pixels[i++] = <span class=\"number\">255</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">ctx.putImageData(imgdata, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>因为像素点集合是二维的，所以，y 表示从上到下的像素点， x 表示从左往右的像素点，这样我们就格子里填充颜色了。做到了这一步，相当于你已经会画线条了，接下来应该要熟悉一下构图了。</p>\n"},{"title":"说说网页自适应和响应式布局","comments":1,"date":"2019-11-05T14:34:43.000Z","_content":"\n忙完一段时间，发布了一版之后，习惯性的放下手头一些需求，去整理之前的项目，看看存在什么问题，是否有可优化的空间。发现我写的页面存在一个很大的问题，那就是多分辨率适配的问题。之前一直用着响应式的理念，根据页面调整布局，但是发现与产品的需求相悖，他们希望看到的是所有分辨率的显示屏显示的效果一致。\n\n要做到我们产品的这种需求，那就只能用 web 2.0 时期的百分比 + float 布局了，也就是我们常说的网页自适应，这种页面布局方式在老版本的网页体现的比较明显，其应用场景一般比较局限于 pc 浏览区。\n\n而响应式布局是互联网新时代的产物，是随着移动端的兴起而发展起来的，这种布局方式，根据屏幕的分辨率不同，给用户呈现不同的视觉效果，更进一步发展为现在常说的 pwa ，渐进式网页布局，多用于屏幕分辨率比较广泛的环境。\n\n说说现在的自适应怎么做，我总结出以下原则：\n\n1、 viewport: content=\"width=device-width, initial-scale=1\"\n\n2、使相对宽度(vw)或者百分比宽度\n\n3、适当使用相对大小的字体（rem)\n\n4、使用 float 布局\n\n5、使用媒体查询，有选择的加载 CSS\n\n6、图片自适应\n","source":"_posts/说说网页自适应和响应式布局.md","raw":"---\ntitle: 说说网页自适应和响应式布局\ncomments: true\ndate: 2019-11-05 22:34:43\ncategories: web\ntags: css\n---\n\n忙完一段时间，发布了一版之后，习惯性的放下手头一些需求，去整理之前的项目，看看存在什么问题，是否有可优化的空间。发现我写的页面存在一个很大的问题，那就是多分辨率适配的问题。之前一直用着响应式的理念，根据页面调整布局，但是发现与产品的需求相悖，他们希望看到的是所有分辨率的显示屏显示的效果一致。\n\n要做到我们产品的这种需求，那就只能用 web 2.0 时期的百分比 + float 布局了，也就是我们常说的网页自适应，这种页面布局方式在老版本的网页体现的比较明显，其应用场景一般比较局限于 pc 浏览区。\n\n而响应式布局是互联网新时代的产物，是随着移动端的兴起而发展起来的，这种布局方式，根据屏幕的分辨率不同，给用户呈现不同的视觉效果，更进一步发展为现在常说的 pwa ，渐进式网页布局，多用于屏幕分辨率比较广泛的环境。\n\n说说现在的自适应怎么做，我总结出以下原则：\n\n1、 viewport: content=\"width=device-width, initial-scale=1\"\n\n2、使相对宽度(vw)或者百分比宽度\n\n3、适当使用相对大小的字体（rem)\n\n4、使用 float 布局\n\n5、使用媒体查询，有选择的加载 CSS\n\n6、图片自适应\n","slug":"说说网页自适应和响应式布局","published":1,"updated":"2019-11-08T00:57:36.337Z","layout":"post","photos":[],"link":"","_id":"ck5dbgubr009o8ex0rua5jhk8","content":"<p>忙完一段时间，发布了一版之后，习惯性的放下手头一些需求，去整理之前的项目，看看存在什么问题，是否有可优化的空间。发现我写的页面存在一个很大的问题，那就是多分辨率适配的问题。之前一直用着响应式的理念，根据页面调整布局，但是发现与产品的需求相悖，他们希望看到的是所有分辨率的显示屏显示的效果一致。</p>\n<p>要做到我们产品的这种需求，那就只能用 web 2.0 时期的百分比 + float 布局了，也就是我们常说的网页自适应，这种页面布局方式在老版本的网页体现的比较明显，其应用场景一般比较局限于 pc 浏览区。</p>\n<p>而响应式布局是互联网新时代的产物，是随着移动端的兴起而发展起来的，这种布局方式，根据屏幕的分辨率不同，给用户呈现不同的视觉效果，更进一步发展为现在常说的 pwa ，渐进式网页布局，多用于屏幕分辨率比较广泛的环境。</p>\n<p>说说现在的自适应怎么做，我总结出以下原则：</p>\n<p>1、 viewport: content=”width=device-width, initial-scale=1”</p>\n<p>2、使相对宽度(vw)或者百分比宽度</p>\n<p>3、适当使用相对大小的字体（rem)</p>\n<p>4、使用 float 布局</p>\n<p>5、使用媒体查询，有选择的加载 CSS</p>\n<p>6、图片自适应</p>\n","site":{"data":{}},"excerpt":"","more":"<p>忙完一段时间，发布了一版之后，习惯性的放下手头一些需求，去整理之前的项目，看看存在什么问题，是否有可优化的空间。发现我写的页面存在一个很大的问题，那就是多分辨率适配的问题。之前一直用着响应式的理念，根据页面调整布局，但是发现与产品的需求相悖，他们希望看到的是所有分辨率的显示屏显示的效果一致。</p>\n<p>要做到我们产品的这种需求，那就只能用 web 2.0 时期的百分比 + float 布局了，也就是我们常说的网页自适应，这种页面布局方式在老版本的网页体现的比较明显，其应用场景一般比较局限于 pc 浏览区。</p>\n<p>而响应式布局是互联网新时代的产物，是随着移动端的兴起而发展起来的，这种布局方式，根据屏幕的分辨率不同，给用户呈现不同的视觉效果，更进一步发展为现在常说的 pwa ，渐进式网页布局，多用于屏幕分辨率比较广泛的环境。</p>\n<p>说说现在的自适应怎么做，我总结出以下原则：</p>\n<p>1、 viewport: content=”width=device-width, initial-scale=1”</p>\n<p>2、使相对宽度(vw)或者百分比宽度</p>\n<p>3、适当使用相对大小的字体（rem)</p>\n<p>4、使用 float 布局</p>\n<p>5、使用媒体查询，有选择的加载 CSS</p>\n<p>6、图片自适应</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck5dbgu8d00018ex0zimkqcqe","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu8u000e8ex0k88y7xms"},{"post_id":"ck5dbgu8o00078ex0fmdjq626","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu8w000h8ex0tx5irejz"},{"post_id":"ck5dbgu8s000b8ex0ujrjw370","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu8x000l8ex0cpy9704i"},{"post_id":"ck5dbgu8i00028ex0gdexmpxk","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu8y000o8ex0dgpvelzd"},{"post_id":"ck5dbgu8l00058ex0w02cfcsc","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu8z000r8ex0mxervpld"},{"post_id":"ck5dbgu8w000j8ex08btpb101","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu91000v8ex0kwx8mugw"},{"post_id":"ck5dbgu8x000n8ex0zgzp197c","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu93000y8ex0mpu249bt"},{"post_id":"ck5dbgu8m00068ex065lqlkyr","category_id":"ck5dbgu8x000k8ex0951wq2kf","_id":"ck5dbgu9400128ex06uvcwghh"},{"post_id":"ck5dbgu8y000q8ex022p83rkk","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9600168ex0qrmq6bz6"},{"post_id":"ck5dbgu90000u8ex0kog29uyi","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9600198ex0eczeyj4i"},{"post_id":"ck5dbgu8t000c8ex0k1grfk2c","category_id":"ck5dbgu8z000s8ex0lvlk42xv","_id":"ck5dbgu98001d8ex0gewpb06h"},{"post_id":"ck5dbgu92000x8ex0nunyfwpj","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu99001g8ex06jy2ypkv"},{"post_id":"ck5dbgu9400118ex0guxflag0","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9a001l8ex0210xkocr"},{"post_id":"ck5dbgu8v000g8ex0fajjeozm","category_id":"ck5dbgu93000z8ex0go6s7lle","_id":"ck5dbgu9b001o8ex0d9mtbos8"},{"post_id":"ck5dbgu9500158ex0uukp7ql0","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9c001s8ex0cqirt3xw"},{"post_id":"ck5dbgu9600188ex0fgz7wvrg","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9d001v8ex0yvplj4ic"},{"post_id":"ck5dbgu9a001n8ex09pb891cu","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9f00208ex0qr7fapt7"},{"post_id":"ck5dbgu97001c8ex0odgccqbw","category_id":"ck5dbgu99001j8ex0eic2uhom","_id":"ck5dbgu9g00238ex0ri8hd35f"},{"post_id":"ck5dbgu9b001q8ex0vwd9ia2n","category_id":"ck5dbgu99001j8ex0eic2uhom","_id":"ck5dbgu9g00258ex04qi14pka"},{"post_id":"ck5dbgu9d001u8ex0prui6y94","category_id":"ck5dbgu99001j8ex0eic2uhom","_id":"ck5dbgu9h00298ex0ry12k3jd"},{"post_id":"ck5dbgu98001f8ex08gn4qvet","category_id":"ck5dbgu99001j8ex0eic2uhom","_id":"ck5dbgu9i002c8ex0z03spvh2"},{"post_id":"ck5dbgu9e001y8ex0mg9lwdoh","category_id":"ck5dbgu99001j8ex0eic2uhom","_id":"ck5dbgu9j002g8ex0po11u69o"},{"post_id":"ck5dbgu9f00228ex0i6lvy1ly","category_id":"ck5dbgu99001j8ex0eic2uhom","_id":"ck5dbgu9k002j8ex0ydxy1lhf"},{"post_id":"ck5dbgu99001k8ex0g7lzdzau","category_id":"ck5dbgu99001j8ex0eic2uhom","_id":"ck5dbgu9l002m8ex0ln938wk9"},{"post_id":"ck5dbgu9i002b8ex0gc6428qj","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9m002p8ex0yxnuxpwh"},{"post_id":"ck5dbgu9j002f8ex030bt3a0l","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9n002t8ex006f6ywm8"},{"post_id":"ck5dbgu9g00248ex0fe84fgt8","category_id":"ck5dbgu9i002a8ex078mnmm0f","_id":"ck5dbgu9o002w8ex0wl1bhsff"},{"post_id":"ck5dbgu9j002h8ex0mycguqhm","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9p002z8ex0vvsyyos9"},{"post_id":"ck5dbgu9k002l8ex08stm87e1","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9q00328ex0kpzma4fg"},{"post_id":"ck5dbgu9h00288ex0azut27a0","category_id":"ck5dbgu9i002a8ex078mnmm0f","_id":"ck5dbgu9q00368ex0yvchxchx"},{"post_id":"ck5dbgu9l002o8ex0kggjfizv","category_id":"ck5dbgu8z000s8ex0lvlk42xv","_id":"ck5dbgu9r00398ex0nofjqs1x"},{"post_id":"ck5dbgu9m002s8ex05t26z5h2","category_id":"ck5dbgu93000z8ex0go6s7lle","_id":"ck5dbgu9s003d8ex0woyy8aau"},{"post_id":"ck5dbgu9n002v8ex0pte2p72e","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9w003g8ex0nxl63lqm"},{"post_id":"ck5dbgu9o002y8ex0dppuxsqg","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9x003l8ex0rnaddmgh"},{"post_id":"ck5dbgu9p00318ex02hl0ykgj","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9y003o8ex0dmvt6mam"},{"post_id":"ck5dbgu9q00358ex0tsrqdac4","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgu9z003s8ex0o1tg2j80"},{"post_id":"ck5dbgu9r00388ex0turu4t32","category_id":"ck5dbgu99001j8ex0eic2uhom","_id":"ck5dbgua0003v8ex09ja7voeo"},{"post_id":"ck5dbgu9v003f8ex0i1tb6tpq","category_id":"ck5dbgu8x000k8ex0951wq2kf","_id":"ck5dbgua1003z8ex044zqvfcg"},{"post_id":"ck5dbgu9x003k8ex0nshj6fji","category_id":"ck5dbgu8x000k8ex0951wq2kf","_id":"ck5dbgua200428ex0pl5e6ygn"},{"post_id":"ck5dbgu9y003n8ex0ket6scma","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgua300458ex09j4dcar3"},{"post_id":"ck5dbgu9s003c8ex0ilre2tje","category_id":"ck5dbgu9w003i8ex008sz6kg1","_id":"ck5dbgua400498ex0e7bo7gt7"},{"post_id":"ck5dbgu9z003r8ex0d1l1wbmy","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgua5004b8ex0b2vgwux6"},{"post_id":"ck5dbgua0003u8ex0cbq4e825","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgua6004f8ex08m58exnk"},{"post_id":"ck5dbgua100418ex03w3gsw0w","category_id":"ck5dbgu8z000s8ex0lvlk42xv","_id":"ck5dbgua7004h8ex03ef88rlx"},{"post_id":"ck5dbgua200448ex0go64cbws","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgua8004k8ex0diz8owmq"},{"post_id":"ck5dbgua300488ex0ajnpp945","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgua9004n8ex0kviuxtdh"},{"post_id":"ck5dbgua1003y8ex0p8sam9ix","category_id":"ck5dbgua200438ex0uii34x9p","_id":"ck5dbguaa004q8ex037qwmo7k"},{"post_id":"ck5dbgua4004a8ex0cmlhrn0d","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguab004t8ex0zt9hvcr9"},{"post_id":"ck5dbgua6004e8ex0ntpfu80q","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguad004x8ex0sh426eza"},{"post_id":"ck5dbgua6004g8ex0ap8vb56a","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguaf00508ex06g3zjvmd"},{"post_id":"ck5dbgua7004j8ex00qs62x4a","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguag00528ex0yrbgr7gt"},{"post_id":"ck5dbgua8004m8ex0982sjbwj","category_id":"ck5dbgu99001j8ex0eic2uhom","_id":"ck5dbguah00568ex010it5c6k"},{"post_id":"ck5dbgua9004p8ex0z858cyvm","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguai00588ex0wlgskpxv"},{"post_id":"ck5dbguaa004s8ex0lxyt8qqr","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguaj005c8ex06wj394d2"},{"post_id":"ck5dbguab004w8ex0pqba33ox","category_id":"ck5dbgu9i002a8ex078mnmm0f","_id":"ck5dbguaj005f8ex06vlq1eai"},{"post_id":"ck5dbguae004z8ex0hzd3sr3r","category_id":"ck5dbgu8x000k8ex0951wq2kf","_id":"ck5dbgual005j8ex08e4lsc7d"},{"post_id":"ck5dbguaf00518ex0vd3l27ni","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguam005m8ex05t7o8m8f"},{"post_id":"ck5dbguag00558ex0zc8fqqb6","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguan005q8ex02zccgqfs"},{"post_id":"ck5dbguah00578ex0inzcyojx","category_id":"ck5dbgu93000z8ex0go6s7lle","_id":"ck5dbguao005t8ex0f6zzehnz"},{"post_id":"ck5dbguaj005e8ex0l2bfselg","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguao005v8ex0x9odvqrw"},{"post_id":"ck5dbguak005i8ex0bat4e2ok","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguaq005z8ex0m1h0p9st"},{"post_id":"ck5dbgual005l8ex04s96pu27","category_id":"ck5dbgu93000z8ex0go6s7lle","_id":"ck5dbguaq00628ex0tmbdob0z"},{"post_id":"ck5dbguai005b8ex0qcftidvy","category_id":"ck5dbguak005h8ex08ciffg2a","_id":"ck5dbguar00668ex0i8iyh5t9"},{"post_id":"ck5dbguam005p8ex0wnbx64ka","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguas00698ex0i19dbrhy"},{"post_id":"ck5dbguan005s8ex04zi0dbzu","category_id":"ck5dbgu93000z8ex0go6s7lle","_id":"ck5dbguat006d8ex0w4btppuo"},{"post_id":"ck5dbguao005u8ex0asevmvr1","category_id":"ck5dbgu93000z8ex0go6s7lle","_id":"ck5dbguau006g8ex0pec1a1s7"},{"post_id":"ck5dbguap005y8ex0u9m44psv","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguav006k8ex0duv39dgy"},{"post_id":"ck5dbguaq00618ex0ti6l4o9p","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguav006n8ex0hnfdgmwi"},{"post_id":"ck5dbguar00658ex0k59ox2d2","category_id":"ck5dbgu93000z8ex0go6s7lle","_id":"ck5dbguaw006r8ex02cgnz0z4"},{"post_id":"ck5dbguas00688ex0ocj4bby7","category_id":"ck5dbgu99001j8ex0eic2uhom","_id":"ck5dbguax006u8ex094sbqfqt"},{"post_id":"ck5dbguas006c8ex0s1wmzdx0","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguay006x8ex0lw8seq6i"},{"post_id":"ck5dbguat006f8ex0ebokc71q","category_id":"ck5dbguak005h8ex08ciffg2a","_id":"ck5dbguay00718ex0xx2echdf"},{"post_id":"ck5dbguau006j8ex0xcglbs4d","category_id":"ck5dbgu93000z8ex0go6s7lle","_id":"ck5dbguaz00748ex0o83i1muk"},{"post_id":"ck5dbguav006m8ex00jlbmd3p","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgub000778ex0hrldql7a"},{"post_id":"ck5dbguaw006q8ex05jfdbwsw","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgub1007a8ex0bohkgacb"},{"post_id":"ck5dbguaw006t8ex03tcbjr7v","category_id":"ck5dbgu8x000k8ex0951wq2kf","_id":"ck5dbgub2007d8ex03f1249k7"},{"post_id":"ck5dbguax006w8ex017k867ye","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgub3007g8ex0vbzel4f5"},{"post_id":"ck5dbguay00708ex0jaq8zo6v","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgub5007k8ex0x5h0k985"},{"post_id":"ck5dbguaz00738ex0r623dn9j","category_id":"ck5dbgu93000z8ex0go6s7lle","_id":"ck5dbgub6007o8ex0jsd3waki"},{"post_id":"ck5dbgub000768ex0c7rgutvb","category_id":"ck5dbgu93000z8ex0go6s7lle","_id":"ck5dbgub7007s8ex0c45d879r"},{"post_id":"ck5dbgub000798ex0lh6m6g5d","category_id":"ck5dbgu8x000k8ex0951wq2kf","_id":"ck5dbgub8007v8ex0lbaux6os"},{"post_id":"ck5dbgub2007c8ex0ak7o0cs5","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgub9007z8ex0ximg9lxs"},{"post_id":"ck5dbgub4007j8ex04mkq5x5x","category_id":"ck5dbgua200438ex0uii34x9p","_id":"ck5dbgub900828ex0xjficqiz"},{"post_id":"ck5dbgub5007n8ex0sfkyrhls","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbguba00858ex0gvw5yc7x"},{"post_id":"ck5dbgub6007r8ex0rc5ujw98","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubb00888ex0mp4t94a6"},{"post_id":"ck5dbgub3007f8ex0xmko94w1","category_id":"ck5dbgub5007l8ex06vpiauya","_id":"ck5dbgubc008a8ex0wf69q6zo"},{"post_id":"ck5dbgub7007u8ex0fdmbuisg","category_id":"ck5dbguak005h8ex08ciffg2a","_id":"ck5dbgube008e8ex0pljagyfw"},{"post_id":"ck5dbgub8007y8ex0befupan3","category_id":"ck5dbguak005h8ex08ciffg2a","_id":"ck5dbgubf008h8ex0v2c2hezd"},{"post_id":"ck5dbgub900818ex0bnmdn1is","category_id":"ck5dbguak005h8ex08ciffg2a","_id":"ck5dbgubg008l8ex0nxd276j5"},{"post_id":"ck5dbguba00848ex0m98f20wq","category_id":"ck5dbguak005h8ex08ciffg2a","_id":"ck5dbgubh008o8ex0wlgeauzw"},{"post_id":"ck5dbgubb00878ex0pzxsdwdl","category_id":"ck5dbguak005h8ex08ciffg2a","_id":"ck5dbgubi008r8ex0xthzmkcf"},{"post_id":"ck5dbgubb00898ex0br3jrtzb","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubj008u8ex0mn6bevst"},{"post_id":"ck5dbgubd008d8ex0lqpqu0m4","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubk008y8ex0sxbjihb8"},{"post_id":"ck5dbgube008g8ex05fydexwl","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubl00918ex081hh0oms"},{"post_id":"ck5dbgubf008k8ex0lzagx38a","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubm00958ex04v7fq86a"},{"post_id":"ck5dbgubh008n8ex0eev83xe8","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubn00988ex0627z90tb"},{"post_id":"ck5dbgubi008q8ex0ftpa8118","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubo009b8ex0l77x2mnm"},{"post_id":"ck5dbgubi008t8ex0ekjoifh1","category_id":"ck5dbguak005h8ex08ciffg2a","_id":"ck5dbgubp009f8ex0y9buxau0"},{"post_id":"ck5dbgubj008x8ex0p0ywhc13","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubq009i8ex0e5uivkin"},{"post_id":"ck5dbgubl00908ex0ab24j5f1","category_id":"ck5dbgu93000z8ex0go6s7lle","_id":"ck5dbgubr009m8ex0ghpevjc3"},{"post_id":"ck5dbgubm00948ex0g4enmlqo","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubt009p8ex01ofjg0jr"},{"post_id":"ck5dbgubm00978ex0xrupwggg","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubt009r8ex0b6utrkzh"},{"post_id":"ck5dbgubn009a8ex03k62hmta","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubu009t8ex0warcgddf"},{"post_id":"ck5dbgubo009e8ex06h0qjb3w","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubu009w8ex0aq8w9341"},{"post_id":"ck5dbgubp009h8ex08j6dfou7","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubu009y8ex0gykkrahr"},{"post_id":"ck5dbgubr009l8ex0vqyn4odw","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubu009z8ex0m98sy2ep"},{"post_id":"ck5dbgubr009o8ex0rua5jhk8","category_id":"ck5dbgu8j00038ex0paeaapyn","_id":"ck5dbgubu00a28ex0ssl761bc"}],"PostTag":[{"post_id":"ck5dbgu8d00018ex0zimkqcqe","tag_id":"ck5dbgu8l00048ex0phe7gzi7","_id":"ck5dbgu8s000a8ex0fvcsnzgw"},{"post_id":"ck5dbgu8i00028ex0gdexmpxk","tag_id":"ck5dbgu8p00098ex0hjpy1xt7","_id":"ck5dbgu8w000i8ex0noi016sn"},{"post_id":"ck5dbgu8l00058ex0w02cfcsc","tag_id":"ck5dbgu8u000f8ex0esrjexa1","_id":"ck5dbgu8y000p8ex08pthuedl"},{"post_id":"ck5dbgu8m00068ex065lqlkyr","tag_id":"ck5dbgu8x000m8ex0zl4bwoix","_id":"ck5dbgu91000w8ex0u3zgsqae"},{"post_id":"ck5dbgu8y000q8ex022p83rkk","tag_id":"ck5dbgu8p00098ex0hjpy1xt7","_id":"ck5dbgu9300108ex0ps6zg5w5"},{"post_id":"ck5dbgu90000u8ex0kog29uyi","tag_id":"ck5dbgu8p00098ex0hjpy1xt7","_id":"ck5dbgu9500148ex03syk1mls"},{"post_id":"ck5dbgu8o00078ex0fmdjq626","tag_id":"ck5dbgu8z000t8ex0dfxyf1yn","_id":"ck5dbgu9600178ex0azm2dygg"},{"post_id":"ck5dbgu9400118ex0guxflag0","tag_id":"ck5dbgu8u000f8ex0esrjexa1","_id":"ck5dbgu97001b8ex0bsvpbxij"},{"post_id":"ck5dbgu9500158ex0uukp7ql0","tag_id":"ck5dbgu8p00098ex0hjpy1xt7","_id":"ck5dbgu98001e8ex06rzbliw1"},{"post_id":"ck5dbgu8s000b8ex0ujrjw370","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbgu99001i8ex0kl7auqsb"},{"post_id":"ck5dbgu8t000c8ex0k1grfk2c","tag_id":"ck5dbgu97001a8ex0c3pan1bp","_id":"ck5dbgu9a001m8ex026w2u9f4"},{"post_id":"ck5dbgu8v000g8ex0fajjeozm","tag_id":"ck5dbgu99001h8ex0k6kbuz4f","_id":"ck5dbgu9d001t8ex0a6gxnyt5"},{"post_id":"ck5dbgu9a001n8ex09pb891cu","tag_id":"ck5dbgu8p00098ex0hjpy1xt7","_id":"ck5dbgu9e001w8ex0q6hx5a1o"},{"post_id":"ck5dbgu8w000j8ex08btpb101","tag_id":"ck5dbgu8z000t8ex0dfxyf1yn","_id":"ck5dbgu9f00218ex0e5613kw6"},{"post_id":"ck5dbgu8x000n8ex0zgzp197c","tag_id":"ck5dbgu9e001x8ex0581dtarj","_id":"ck5dbgu9h00278ex07wxjt5tl"},{"post_id":"ck5dbgu92000x8ex0nunyfwpj","tag_id":"ck5dbgu9e001x8ex0581dtarj","_id":"ck5dbgu9j002e8ex0p0swsrue"},{"post_id":"ck5dbgu9600188ex0fgz7wvrg","tag_id":"ck5dbgu9i002d8ex06w4n1xdu","_id":"ck5dbgu9l002n8ex0hvb89h8o"},{"post_id":"ck5dbgu9k002l8ex08stm87e1","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbgu9m002r8ex0s0gcxck0"},{"post_id":"ck5dbgu97001c8ex0odgccqbw","tag_id":"ck5dbgu9k002k8ex0pxq9jpvm","_id":"ck5dbgu9n002u8ex0azhl5g4r"},{"post_id":"ck5dbgu98001f8ex08gn4qvet","tag_id":"ck5dbgu9m002q8ex0bgppgdwp","_id":"ck5dbgu9p00308ex09g5cr3pr"},{"post_id":"ck5dbgu9n002v8ex0pte2p72e","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbgu9q00338ex0lzdcrhu1"},{"post_id":"ck5dbgu9o002y8ex0dppuxsqg","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbgu9r00378ex0lnu5matt"},{"post_id":"ck5dbgu99001k8ex0g7lzdzau","tag_id":"ck5dbgu9m002q8ex0bgppgdwp","_id":"ck5dbgu9s003a8ex077pvlvyp"},{"post_id":"ck5dbgu9q00358ex0tsrqdac4","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbgu9t003e8ex0iiyqdofo"},{"post_id":"ck5dbgu9b001q8ex0vwd9ia2n","tag_id":"ck5dbgu9m002q8ex0bgppgdwp","_id":"ck5dbgu9w003h8ex0re7wduqx"},{"post_id":"ck5dbgu9s003c8ex0ilre2tje","tag_id":"ck5dbgu97001a8ex0c3pan1bp","_id":"ck5dbgu9y003m8ex0q5ztppvs"},{"post_id":"ck5dbgu9d001u8ex0prui6y94","tag_id":"ck5dbgu9m002q8ex0bgppgdwp","_id":"ck5dbgu9z003p8ex0zry406jg"},{"post_id":"ck5dbgu9e001y8ex0mg9lwdoh","tag_id":"ck5dbgu9m002q8ex0bgppgdwp","_id":"ck5dbgua0003t8ex0gnz4b512"},{"post_id":"ck5dbgu9z003r8ex0d1l1wbmy","tag_id":"ck5dbgu8p00098ex0hjpy1xt7","_id":"ck5dbgua0003w8ex0i19pz53k"},{"post_id":"ck5dbgu9f00228ex0i6lvy1ly","tag_id":"ck5dbgu9m002q8ex0bgppgdwp","_id":"ck5dbgua100408ex0le9p6n14"},{"post_id":"ck5dbgu9g00248ex0fe84fgt8","tag_id":"ck5dbgua0003x8ex02ot0npkk","_id":"ck5dbgua300478ex0d3hr8wx8"},{"post_id":"ck5dbgu9h00288ex0azut27a0","tag_id":"ck5dbgua0003x8ex02ot0npkk","_id":"ck5dbgua5004d8ex0oxiv5alq"},{"post_id":"ck5dbgu9i002b8ex0gc6428qj","tag_id":"ck5dbgua5004c8ex014sdcogm","_id":"ck5dbgua8004l8ex0qtn7vlt9"},{"post_id":"ck5dbgu9j002f8ex030bt3a0l","tag_id":"ck5dbgua7004i8ex00sd662um","_id":"ck5dbguaa004r8ex0nbgf73b5"},{"post_id":"ck5dbgua9004p8ex0z858cyvm","tag_id":"ck5dbgu9e001x8ex0581dtarj","_id":"ck5dbguab004u8ex0h99m3bsf"},{"post_id":"ck5dbgu9j002h8ex0mycguqhm","tag_id":"ck5dbgua9004o8ex01b0sx8vg","_id":"ck5dbguae004y8ex0qzyzx8a5"},{"post_id":"ck5dbgu9l002o8ex0kggjfizv","tag_id":"ck5dbguab004v8ex0t0cidfv6","_id":"ck5dbguag00548ex0lnla9viz"},{"post_id":"ck5dbguag00558ex0zc8fqqb6","tag_id":"ck5dbgu8p00098ex0hjpy1xt7","_id":"ck5dbguai005a8ex0oz5ixcho"},{"post_id":"ck5dbgu9m002s8ex05t26z5h2","tag_id":"ck5dbguag00538ex0yhf4r9hi","_id":"ck5dbguaj005d8ex0s8f00r7u"},{"post_id":"ck5dbgu9p00318ex02hl0ykgj","tag_id":"ck5dbguai00598ex0b513wn6l","_id":"ck5dbgual005k8ex07kab6n1w"},{"post_id":"ck5dbguaj005e8ex0l2bfselg","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbguam005n8ex0bpexg4at"},{"post_id":"ck5dbgu9r00388ex0turu4t32","tag_id":"ck5dbguak005g8ex0m52mn2tl","_id":"ck5dbguan005r8ex074hq240r"},{"post_id":"ck5dbgu9v003f8ex0i1tb6tpq","tag_id":"ck5dbguam005o8ex0ndyny17t","_id":"ck5dbguap005x8ex0svsy4pln"},{"post_id":"ck5dbguao005u8ex0asevmvr1","tag_id":"ck5dbguam005o8ex0ndyny17t","_id":"ck5dbguaq00608ex0tyoxj3ji"},{"post_id":"ck5dbguap005y8ex0u9m44psv","tag_id":"ck5dbgu8p00098ex0hjpy1xt7","_id":"ck5dbguar00648ex0pc6mp66g"},{"post_id":"ck5dbgu9x003k8ex0nshj6fji","tag_id":"ck5dbguam005o8ex0ndyny17t","_id":"ck5dbguas00678ex01hzvhzy6"},{"post_id":"ck5dbguaq00618ex0ti6l4o9p","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbguas006b8ex02mcvz8bu"},{"post_id":"ck5dbgu9y003n8ex0ket6scma","tag_id":"ck5dbguaq00638ex0o2j7ztyt","_id":"ck5dbguat006e8ex0wm3axttr"},{"post_id":"ck5dbguas00688ex0ocj4bby7","tag_id":"ck5dbgu9m002q8ex0bgppgdwp","_id":"ck5dbguau006i8ex0pbccvwyj"},{"post_id":"ck5dbguas006c8ex0s1wmzdx0","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbguav006l8ex05jh4xr9m"},{"post_id":"ck5dbgua0003u8ex0cbq4e825","tag_id":"ck5dbguas006a8ex096gr96zq","_id":"ck5dbguaw006p8ex00j05jk20"},{"post_id":"ck5dbgua1003y8ex0p8sam9ix","tag_id":"ck5dbguau006h8ex0k7nc9tao","_id":"ck5dbguaw006s8ex031dq8rzn"},{"post_id":"ck5dbguav006m8ex00jlbmd3p","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbguax006v8ex0qvjhoxnh"},{"post_id":"ck5dbguaw006q8ex05jfdbwsw","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbguay006z8ex0nhtso4x6"},{"post_id":"ck5dbgua100418ex03w3gsw0w","tag_id":"ck5dbguav006o8ex0lwwtr6wv","_id":"ck5dbguaz00728ex03upib6wj"},{"post_id":"ck5dbgua200448ex0go64cbws","tag_id":"ck5dbguay006y8ex0w6x3240b","_id":"ck5dbgub000788ex03gesedcb"},{"post_id":"ck5dbgua300488ex0ajnpp945","tag_id":"ck5dbguaz00758ex0zbiyd8uf","_id":"ck5dbgub2007e8ex0rg7csxmi"},{"post_id":"ck5dbgub2007c8ex0ak7o0cs5","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbgub4007i8ex0ewvkmvlk"},{"post_id":"ck5dbgua4004a8ex0cmlhrn0d","tag_id":"ck5dbgua9004o8ex01b0sx8vg","_id":"ck5dbgub5007m8ex0wcu0x4ym"},{"post_id":"ck5dbgub4007j8ex04mkq5x5x","tag_id":"ck5dbguau006h8ex0k7nc9tao","_id":"ck5dbgub6007q8ex0cpogc9vu"},{"post_id":"ck5dbgua6004e8ex0ntpfu80q","tag_id":"ck5dbgua9004o8ex01b0sx8vg","_id":"ck5dbgub7007t8ex04irs95lr"},{"post_id":"ck5dbgub5007n8ex0sfkyrhls","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbgub8007x8ex0dbxzak4i"},{"post_id":"ck5dbgua6004g8ex0ap8vb56a","tag_id":"ck5dbgua9004o8ex01b0sx8vg","_id":"ck5dbgub900808ex0l25llrdo"},{"post_id":"ck5dbgua7004j8ex00qs62x4a","tag_id":"ck5dbgub8007w8ex0xbkmi4gp","_id":"ck5dbgubb00868ex0lu39jd2l"},{"post_id":"ck5dbgubb00878ex0pzxsdwdl","tag_id":"ck5dbguam005o8ex0ndyny17t","_id":"ck5dbgubd008c8ex0994nk2r6"},{"post_id":"ck5dbgua8004m8ex0982sjbwj","tag_id":"ck5dbguba00838ex0lfu7gac2","_id":"ck5dbgube008f8ex0jfta7c5s"},{"post_id":"ck5dbgubd008d8ex0lqpqu0m4","tag_id":"ck5dbgu8p00098ex0hjpy1xt7","_id":"ck5dbgubf008j8ex0526pd28j"},{"post_id":"ck5dbguaa004s8ex0lxyt8qqr","tag_id":"ck5dbguaq00638ex0o2j7ztyt","_id":"ck5dbgubg008m8ex0ukks38nt"},{"post_id":"ck5dbguab004w8ex0pqba33ox","tag_id":"ck5dbgubf008i8ex0cu2h06n7","_id":"ck5dbgubi008s8ex0lo3uh3wx"},{"post_id":"ck5dbgubh008n8ex0eev83xe8","tag_id":"ck5dbgu9e001x8ex0581dtarj","_id":"ck5dbgubj008v8ex0qrurfzow"},{"post_id":"ck5dbgubi008q8ex0ftpa8118","tag_id":"ck5dbgu8p00098ex0hjpy1xt7","_id":"ck5dbgubk008z8ex0yta8itkm"},{"post_id":"ck5dbguae004z8ex0hzd3sr3r","tag_id":"ck5dbgubh008p8ex02sh3zsk8","_id":"ck5dbgubl00928ex0saz7pb2s"},{"post_id":"ck5dbgubi008t8ex0ekjoifh1","tag_id":"ck5dbguam005o8ex0ndyny17t","_id":"ck5dbgubm00968ex0nrlnlb0w"},{"post_id":"ck5dbgubj008x8ex0p0ywhc13","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbgubn00998ex03f265np4"},{"post_id":"ck5dbguaf00518ex0vd3l27ni","tag_id":"ck5dbgubj008w8ex0b1rpq4si","_id":"ck5dbgubo009d8ex0lwznlx6a"},{"post_id":"ck5dbgubm00948ex0g4enmlqo","tag_id":"ck5dbgu9400138ex0ie1i4ciu","_id":"ck5dbgubp009g8ex00q7bykp2"},{"post_id":"ck5dbguah00578ex0inzcyojx","tag_id":"ck5dbgubl00938ex0elslgtwf","_id":"ck5dbgubq009j8ex0bkkn1di4"},{"post_id":"ck5dbguai005b8ex0qcftidvy","tag_id":"ck5dbgubo009c8ex0vioz8247","_id":"ck5dbgubr009n8ex0g1u0m8x9"},{"post_id":"ck5dbguak005i8ex0bat4e2ok","tag_id":"ck5dbgubq009k8ex04usfsa89","_id":"ck5dbgubu009s8ex098qg7q77"},{"post_id":"ck5dbgubr009o8ex0rua5jhk8","tag_id":"ck5dbgu8p00098ex0hjpy1xt7","_id":"ck5dbgubu009u8ex0mfmvlbun"},{"post_id":"ck5dbgual005l8ex04s96pu27","tag_id":"ck5dbgubt009q8ex0npmttdbc","_id":"ck5dbgubu009x8ex0hsu37zcd"},{"post_id":"ck5dbguam005p8ex0wnbx64ka","tag_id":"ck5dbgubu009v8ex09q0c8y4r","_id":"ck5dbgubu00a18ex0c5t9gaug"},{"post_id":"ck5dbguan005s8ex04zi0dbzu","tag_id":"ck5dbgubu00a08ex0urdpdi8s","_id":"ck5dbgubv00a48ex0m4xhq91l"},{"post_id":"ck5dbguar00658ex0k59ox2d2","tag_id":"ck5dbgubu00a08ex0urdpdi8s","_id":"ck5dbgubv00a68ex0ow708ibq"},{"post_id":"ck5dbguat006f8ex0ebokc71q","tag_id":"ck5dbgubv00a58ex0b5r7grsc","_id":"ck5dbgubv00a88ex02uh8afd3"},{"post_id":"ck5dbguau006j8ex0xcglbs4d","tag_id":"ck5dbgubu00a08ex0urdpdi8s","_id":"ck5dbgubw00aa8ex0j028sq6q"},{"post_id":"ck5dbguaw006t8ex03tcbjr7v","tag_id":"ck5dbgubv00a98ex0hyxfmw8j","_id":"ck5dbgubw00ac8ex03ioj94oh"},{"post_id":"ck5dbguax006w8ex017k867ye","tag_id":"ck5dbgubw00ab8ex0iiz8vhe0","_id":"ck5dbgubw00ae8ex0cmvyb6s4"},{"post_id":"ck5dbguay00708ex0jaq8zo6v","tag_id":"ck5dbgubv00a98ex0hyxfmw8j","_id":"ck5dbgubx00ag8ex06882edpr"},{"post_id":"ck5dbguaz00738ex0r623dn9j","tag_id":"ck5dbgubu00a08ex0urdpdi8s","_id":"ck5dbgubx00ai8ex0g195hkrg"},{"post_id":"ck5dbgub000768ex0c7rgutvb","tag_id":"ck5dbgubu00a08ex0urdpdi8s","_id":"ck5dbgubx00ak8ex0u150y1zf"},{"post_id":"ck5dbgub000798ex0lh6m6g5d","tag_id":"ck5dbgubx00aj8ex0u7t49u7o","_id":"ck5dbgubx00am8ex0jycy0gzp"},{"post_id":"ck5dbgub3007f8ex0xmko94w1","tag_id":"ck5dbgubx00al8ex06vgxq4ec","_id":"ck5dbgubx00ao8ex0l4srkf6c"},{"post_id":"ck5dbgub6007r8ex0rc5ujw98","tag_id":"ck5dbgubx00an8ex0onaqi0ja","_id":"ck5dbguby00aq8ex0hlzyolw5"},{"post_id":"ck5dbgub7007u8ex0fdmbuisg","tag_id":"ck5dbguby00ap8ex0jt7sjehw","_id":"ck5dbguby00as8ex0ezjtvszh"},{"post_id":"ck5dbgub8007y8ex0befupan3","tag_id":"ck5dbguby00ap8ex0jt7sjehw","_id":"ck5dbguby00au8ex0xpa5tl1v"},{"post_id":"ck5dbgub900818ex0bnmdn1is","tag_id":"ck5dbguby00ap8ex0jt7sjehw","_id":"ck5dbgubz00aw8ex0s3xykt0l"},{"post_id":"ck5dbguba00848ex0m98f20wq","tag_id":"ck5dbgubv00a58ex0b5r7grsc","_id":"ck5dbgubz00ay8ex0r7xjbwtr"},{"post_id":"ck5dbgubb00898ex0br3jrtzb","tag_id":"ck5dbgubz00ax8ex01zcputir","_id":"ck5dbgubz00b08ex0jjpsw9q6"},{"post_id":"ck5dbgube008g8ex05fydexwl","tag_id":"ck5dbgubz00az8ex058kh9rww","_id":"ck5dbgubz00b28ex041lnuwvq"},{"post_id":"ck5dbgubf008k8ex0lzagx38a","tag_id":"ck5dbgubz00b18ex0f4emdeev","_id":"ck5dbguc000b48ex0w5asycuz"},{"post_id":"ck5dbgubl00908ex0ab24j5f1","tag_id":"ck5dbgubu00a08ex0urdpdi8s","_id":"ck5dbguc000b68ex0cmi0j8il"},{"post_id":"ck5dbgubm00978ex0xrupwggg","tag_id":"ck5dbguc000b58ex038fzup9e","_id":"ck5dbguc000b88ex0b7iet0ja"},{"post_id":"ck5dbgubn009a8ex03k62hmta","tag_id":"ck5dbguby00ap8ex0jt7sjehw","_id":"ck5dbguc100ba8ex03dooztoi"},{"post_id":"ck5dbgubo009e8ex06h0qjb3w","tag_id":"ck5dbgubq009k8ex04usfsa89","_id":"ck5dbguc100bc8ex0we7f3xj6"},{"post_id":"ck5dbgubp009h8ex08j6dfou7","tag_id":"ck5dbguc100bb8ex0lsu8l8ma","_id":"ck5dbguc100be8ex09o0op4p9"},{"post_id":"ck5dbgubr009l8ex0vqyn4odw","tag_id":"ck5dbguc000b58ex038fzup9e","_id":"ck5dbguc200bf8ex0pqoa1f0z"}],"Tag":[{"name":"CKeditor","_id":"ck5dbgu8l00048ex0phe7gzi7"},{"name":"css","_id":"ck5dbgu8p00098ex0hjpy1xt7"},{"name":"canvas","_id":"ck5dbgu8u000f8ex0esrjexa1"},{"name":"django","_id":"ck5dbgu8x000m8ex0zl4bwoix"},{"name":"angular","_id":"ck5dbgu8z000t8ex0dfxyf1yn"},{"name":"js","_id":"ck5dbgu9400138ex0ie1i4ciu"},{"name":"mysql","_id":"ck5dbgu97001a8ex0c3pan1bp"},{"name":"KNN","_id":"ck5dbgu99001h8ex0k6kbuz4f"},{"name":"http","_id":"ck5dbgu9e001x8ex0581dtarj"},{"name":"egg","_id":"ck5dbgu9i002d8ex06w4n1xdu"},{"name":"ci","_id":"ck5dbgu9k002k8ex0pxq9jpvm"},{"name":"git","_id":"ck5dbgu9m002q8ex0bgppgdwp"},{"name":"hexo","_id":"ck5dbgua0003x8ex02ot0npkk"},{"name":"html","_id":"ck5dbgua5004c8ex014sdcogm"},{"name":"文本转换","_id":"ck5dbgua7004i8ex00sd662um"},{"name":"vue","_id":"ck5dbgua9004o8ex01b0sx8vg"},{"name":"linux","_id":"ck5dbguab004v8ex0t0cidfv6"},{"name":"矩阵","_id":"ck5dbguag00538ex0yhf4r9hi"},{"name":"nodeJs","_id":"ck5dbguai00598ex0b513wn6l"},{"name":"npm","_id":"ck5dbguak005g8ex0m52mn2tl"},{"name":"笔记","_id":"ck5dbguam005o8ex0ndyny17t"},{"name":"编辑器","_id":"ck5dbguaq00638ex0o2j7ztyt"},{"name":"ts","_id":"ck5dbguas006a8ex096gr96zq"},{"name":"tensorflow","_id":"ck5dbguau006h8ex0k7nc9tao"},{"name":"科学上网","_id":"ck5dbguav006o8ex0lwwtr6wv"},{"name":"环境配置","_id":"ck5dbguay006y8ex0w6x3240b"},{"name":"2D","_id":"ck5dbguaz00758ex0zbiyd8uf"},{"name":"react","_id":"ck5dbgub8007w8ex0xbkmi4gp"},{"name":"webpack","_id":"ck5dbguba00838ex0lfu7gac2"},{"name":"wordpress","_id":"ck5dbgubf008i8ex0cu2h06n7"},{"name":"文本操作","_id":"ck5dbgubh008p8ex02sh3zsk8"},{"name":"vue 组件","_id":"ck5dbgubj008w8ex0b1rpq4si"},{"name":"leetcode","_id":"ck5dbgubl00938ex0elslgtwf"},{"name":"个人管理","_id":"ck5dbgubo009c8ex0vioz8247"},{"name":"性能优化","_id":"ck5dbgubq009k8ex04usfsa89"},{"name":"分页","_id":"ck5dbgubt009q8ex0npmttdbc"},{"name":"面试","_id":"ck5dbgubu009v8ex09q0c8y4r"},{"name":"algorithmn-simple","_id":"ck5dbgubu00a08ex0urdpdi8s"},{"name":"影评","_id":"ck5dbgubv00a58ex0b5r7grsc"},{"name":"经验","_id":"ck5dbgubv00a98ex0hyxfmw8j"},{"name":"小程序","_id":"ck5dbgubw00ab8ex0iiz8vhe0"},{"name":"Django","_id":"ck5dbgubx00aj8ex0u7t49u7o"},{"name":"日语","_id":"ck5dbgubx00al8ex06vgxq4ec"},{"name":"正则","_id":"ck5dbgubx00an8ex0onaqi0ja"},{"name":"分享","_id":"ck5dbguby00ap8ex0jt7sjehw"},{"name":"开发风格","_id":"ck5dbgubz00ax8ex01zcputir"},{"name":"翻页","_id":"ck5dbgubz00az8ex058kh9rww"},{"name":"PWA","_id":"ck5dbgubz00b18ex0f4emdeev"},{"name":"3D","_id":"ck5dbguc000b58ex038fzup9e"},{"name":"项目模块化","_id":"ck5dbguc100bb8ex0lsu8l8ma"}]}}