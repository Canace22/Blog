<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flow简易教程</title>
      <link href="/2020/11/09/flow%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/"/>
      <url>/2020/11/09/flow%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、初始化"><a href="#一、初始化" class="headerlink" title="一、初始化"></a>一、初始化</h2><h3 id="1、安装-babel-并进行配置"><a href="#1、安装-babel-并进行配置" class="headerlink" title="1、安装 babel 并进行配置"></a>1、安装 babel 并进行配置</h3><p>(1) 安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add --dev @babel/core @babel/cli @babel/preset-flow</span><br></pre></td></tr></table></figure><p>(2) 配置</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .babelrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-flow&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pakage.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;my-project&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;lib/index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;babel src/ -d lib/&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;prepublish&quot;</span>: <span class="string">&quot;yarn build&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、安装-flow-并配置"><a href="#2、安装-flow-并配置" class="headerlink" title="2、安装 flow 并配置"></a>2、安装 flow 并配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add --dev flow-bin</span><br></pre></td></tr></table></figure><p>在项目中局部安装的，要运行 flow，需要配置一下</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;flow&quot;: &quot;./node_modules/.bin/flow&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="3、初始化"><a href="#3、初始化" class="headerlink" title="3、初始化"></a>3、初始化</h3><p>(1) 项目中初始化 flow</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn flow init</span><br></pre></td></tr></table></figure><p>(2) 运行 flow，检查代码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn flow</span><br></pre></td></tr></table></figure><h2 id="二、类型概述"><a href="#二、类型概述" class="headerlink" title="二、类型概述"></a>二、类型概述</h2><h3 id="1、原始类型"><a href="#1、原始类型" class="headerlink" title="1、原始类型"></a>1、原始类型</h3><p>除了undefined，字面量形式的原始类型是对应的小写英文单词，包装对象形式的原始类型用大写(用构造函数生成)，undefined 类型是 void</p><h3 id="2、可选类型"><a href="#2、可选类型" class="headerlink" title="2、可选类型"></a>2、可选类型</h3><p>(1) 可选原始类型</p><p>可选原始类型形如:?string，类型值可以是字符串，也可以是 null 或者 void</p><p>(2) 可选对象属性和可选函数参数</p><p>可选对象属性形如: { foo?: string },可选函数参数形如: param?: string, 二者都可以省略不写或者为 void 类型，但是不能是 null</p><p>(3) 函数参数的默认值</p><p>这个比较神奇，得这么写: value: string = “foo”，同样可以省略或者是 void 类型，但是不能是 null</p><h3 id="3、使用原始类型值作为类型"><a href="#3、使用原始类型值作为类型" class="headerlink" title="3、使用原始类型值作为类型"></a>3、使用原始类型值作为类型</h3><p>这个比较有意思，感觉也比较好用，用法照搬官网的:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @flow</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getColor</span>(<span class="params">name: <span class="string">&quot;success&quot;</span> | <span class="string">&quot;warning&quot;</span> | <span class="string">&quot;danger&quot;</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;success&quot;</span> : <span class="keyword">return</span> <span class="string">&quot;green&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;warning&quot;</span> : <span class="keyword">return</span> <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;danger&quot;</span>  : <span class="keyword">return</span> <span class="string">&quot;red&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getColor(<span class="string">&quot;success&quot;</span>); <span class="comment">// Works!</span></span><br><span class="line">getColor(<span class="string">&quot;danger&quot;</span>);  <span class="comment">// Works!</span></span><br><span class="line"><span class="comment">// $ExpectError</span></span><br><span class="line">getColor(<span class="string">&quot;error&quot;</span>);   <span class="comment">// Error!</span></span><br></pre></td></tr></table></figure><p>上述 demo 中要求只能输入文字集合 [“success”,”warning”,”danger”] 中的一个，其他的值均会被认为是错误的</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态类型检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序小技巧</title>
      <link href="/2020/11/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B8%A9%E5%9D%91/"/>
      <url>/2020/11/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h3 id="一、配置相关"><a href="#一、配置相关" class="headerlink" title="一、配置相关"></a>一、配置相关</h3><p>1、 暂时还没有转发到朋友圈的 api，可以通过 canvas 绘制图片 保存到用户相册，用户通过小程序码自行分享到朋友圈的方式实现，git 上有一个比较成熟的组件；</p><p>2、 微信开发工具有时会抽风，处理方式是清除缓存 =&gt; 重启；</p><p>3、 在 request 之前，确保服务器域名配置跟 request 的域名一致，不然会报 403 错误；</p><p>4、调用 getUserInfo 若是发现数据不对，调用 getSetting 看看用户有没授权</p><h3 id="二、组件相关"><a href="#二、组件相关" class="headerlink" title="二、组件相关"></a>二、组件相关</h3><h4 id="1、自定义-tabBar"><a href="#1、自定义-tabBar" class="headerlink" title="1、自定义 tabBar"></a>1、自定义 tabBar</h4><p>(1) 在项目根目录新建 custom-tab-bar 组件，这里我放到 components 目录下一直无效，折腾了一会发现必须要放在根目录下。</p><p>(2) tabBar 配置项，开启 cunstom: true</p><p>(3) 对应的 page 在 onShow 阶段调用 getTabBar 方法，selected 为当前 tab 的索引：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">onShow() &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span>.getTabBar === <span class="string">&#x27;function&#x27;</span> &amp;&amp;</span><br><span class="line">      <span class="built_in">this</span>.getTabBar()) &#123;</span><br><span class="line">    <span class="built_in">this</span>.getTabBar().setData(&#123;</span><br><span class="line">      selected: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) 自定义 tabBar 组件调用 switchtab 切换 tab</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">switchTab(e) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = e.currentTarget.dataset</span><br><span class="line">  <span class="keyword">const</span> url = data.path</span><br><span class="line">  wx.switchTab(&#123; url &#125;)</span><br><span class="line">  <span class="built_in">this</span>.selected = data.index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、网络请求"><a href="#三、网络请求" class="headerlink" title="三、网络请求"></a>三、网络请求</h3><p>写惯了 axios， 小程序的网络请求模块用着总是不是那么顺手，来封装一层吧，我们可以通过调用 get，post 去获取数据，并且可以在这一层做一些预处理的事情，比如设置必须的参数，参数加密等</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  get (config) &#123;</span><br><span class="line">    <span class="built_in">this</span>.pre(config)</span><br><span class="line">    config.method = <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    wx.request(config)</span><br><span class="line">  &#125;,</span><br><span class="line">  postJson (config) &#123;</span><br><span class="line">    <span class="built_in">this</span>.pre(config)</span><br><span class="line">    config.method = <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    config.header[<span class="string">&#x27;content-type&#x27;</span>] = <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    wx.request(config)</span><br><span class="line">  &#125;,</span><br><span class="line">  post (config) &#123;</span><br><span class="line">    <span class="built_in">this</span>.pre(config)</span><br><span class="line">    config.method = <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    config.header[<span class="string">&#x27;content-type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    wx.request(config)</span><br><span class="line">  &#125;,</span><br><span class="line">  pre (config) &#123;</span><br><span class="line">    config.header = config.header || &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> success = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.success) &#123;</span><br><span class="line">      success = config.success</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> fail = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.fail) &#123;</span><br><span class="line">      fail = config.fail</span><br><span class="line">    &#125;</span><br><span class="line">    config.success = <span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line">      success(resp.data)</span><br><span class="line">    &#125;</span><br><span class="line">    config.fail = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">&#x27;系统错误&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      &#125;)</span><br><span class="line">      fail()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，用起来就很方便了</p><h3 id="四、其他奇怪的问题"><a href="#四、其他奇怪的问题" class="headerlink" title="四、其他奇怪的问题"></a>四、其他奇怪的问题</h3><h4 id="1、函数传参"><a href="#1、函数传参" class="headerlink" title="1、函数传参"></a>1、函数传参</h4><p>函数传参传对象的时候，是个拷贝值，跟原始的对象不一致，所以在修改某个参数的状态时，最好用原始值修改，示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in items&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rb-button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:type</span>=<span class="string">&quot;item.isQuot ? &#x27;error&#x27; : &#x27;primary&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:styles</span>=<span class="string">&quot;quotStyle&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">tap</span>=<span class="string">&quot;quot(item,index)&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span>&#123;&#123; item.isQuot ? &#x27;移除&#x27; : &#x27;引用&#x27; &#125;&#125;<span class="tag">&lt;/<span class="name">rb-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">quot(item, i) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item === <span class="built_in">this</span>.courseList[i]) <span class="comment">// false</span></span><br><span class="line">  item.isQuot = !item.isQuot <span class="comment">//无效</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.courseList[i]) &#123;</span><br><span class="line">    <span class="built_in">this</span>.courseList[i].isQuot = !<span class="built_in">this</span>.courseList[i].isQuot <span class="comment">// 有效</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、日期转时间戳的正确姿势"><a href="#2、日期转时间戳的正确姿势" class="headerlink" title="2、日期转时间戳的正确姿势"></a>2、日期转时间戳的正确姿势</h4><p>小程序的日期转时间戳不支持 2020-10-12 这种格式，需要转为成 2020/10/12 这样才能正常的解析，所以在日期转时间戳的时候得这么写：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;2020-10-12&#x27;</span></span><br><span class="line"><span class="keyword">const</span> newDateStr = str.replace(<span class="regexp">/\-/g</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(newDateStr)</span><br></pre></td></tr></table></figure><h4 id="3、属性值和文本"><a href="#3、属性值和文本" class="headerlink" title="3、属性值和文本"></a>3、属性值和文本</h4><p>(1) 属性不支持三元表达式</p><p>(2) 文本数据支持三元表达式但是不支持函数，可以通过 wxs 扩展</p><h4 id="4、button-去不掉-border-怎么办"><a href="#4、button-去不掉-border-怎么办" class="headerlink" title="4、button 去不掉 border 怎么办"></a>4、button 去不掉 border 怎么办</h4><p>有一个 button,控制台也没看到有 border 设置，但就是一直存在，设置了 border:none 也没用，查了下资料发现，这是小程序自己在 button::after 里面加了个 border 设置，去掉即可</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 单元测试</title>
      <link href="/2020/10/28/vue-test-unit/"/>
      <url>/2020/10/28/vue-test-unit/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Vue-cli-安装测试模块"><a href="#一、Vue-cli-安装测试模块" class="headerlink" title="一、Vue-cli 安装测试模块"></a>一、Vue-cli 安装测试模块</h3><p>1、安装相关依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @vue/<span class="built_in">test</span>-utils @vue/cli-plugin-unit-jest</span><br></pre></td></tr></table></figure><p>2、根目录创建 jest.config.js 文件并进行基础配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 显示每一个测试的结果</span></span><br><span class="line">  verbose: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// support the same @ -&gt; src alias mapping in source code</span></span><br><span class="line">  moduleNameMapper: &#123;</span><br><span class="line">    <span class="string">&quot;^@/(.*)$&quot;</span>: <span class="string">&quot;&lt;rootDir&gt;/src/$1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  moduleFileExtensions: [</span><br><span class="line">    <span class="string">&quot;js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;json&quot;</span>,</span><br><span class="line">    <span class="comment">// tell Jest to handle `*.vue` files</span></span><br><span class="line">    <span class="string">&quot;vue&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 测试覆盖率相关</span></span><br><span class="line">  collectCoverage: <span class="literal">true</span>,</span><br><span class="line">  coverageReporters: [<span class="string">&quot;html&quot;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3、支持并配置 Babel </p><p>(1) 安装相关依赖</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @vue/cli-plugin-babel</span><br></pre></td></tr></table></figure><p>(2) jest.config.js 添加以下配置</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">preset: &quot;@vue/cli-plugin-unit-jest&quot;,</span><br></pre></td></tr></table></figure><p>(3) babel.config.js 添加以下配置 </p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">presets: [&quot;@vue/cli-plugin-babel/preset&quot;]</span><br></pre></td></tr></table></figure><h3 id="二、测试可用性"><a href="#二、测试可用性" class="headerlink" title="二、测试可用性"></a>二、测试可用性</h3><p>根目录创建 tests/unit/example.spec.js, 随手一些段 jest 测试代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sum &#125; <span class="keyword">from</span> <span class="string">&quot;./test&quot;</span>;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&quot;test sum&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect(sum(<span class="number">1</span>, <span class="number">1</span>)).toBe(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建 tests/unit/test.js 文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br></pre></td></tr></table></figure><p>package.json script 加一个脚本配置: <code>&quot;test:unit&quot;: &quot;vue-cli-service test:unit&quot;</code></p><p>然后执行: <code>yarn test:unit</code></p><p>就可以看到控制台输出如下字符，说明测试可以正常运行</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">PASS</span>  tests/example<span class="number">.</span>spec<span class="number">.</span>js</span><br><span class="line">✓ test <span class="built_in">sum</span> (<span class="number">1</span>ms)</span><br></pre></td></tr></table></figure><h3 id="三、测试覆盖率"><a href="#三、测试覆盖率" class="headerlink" title="三、测试覆盖率"></a>三、测试覆盖率</h3><p>1、配置</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  collectCoverage: true,</span><br><span class="line">  <span class="comment">// 报告形式</span></span><br><span class="line">  coverageReporters: [&quot;html&quot;, &quot;text-summary&quot;],</span><br><span class="line">  <span class="comment">//需要测试覆盖率的文件路径</span></span><br><span class="line">  collectCoverageFrom: [ </span><br><span class="line">    &quot;src/**/*.&#123;js,vue&#125;&quot;,</span><br><span class="line">    &quot;!src/App.vue&quot;,</span><br><span class="line">    &quot;!src/main.js&quot;,</span><br><span class="line">    &quot;!src/router.js&quot;,</span><br><span class="line">    &quot;!src/plugin/*.&#123;js,ts,vue&#125;&quot;,</span><br><span class="line">    <span class="string">&quot;!src/store.js&quot;</span></span><br><span class="line">  ],</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 指定测试最低覆盖率</span></span><br><span class="line"><span class="comment">   * 一般由开发人员商定，项目复杂程序越高，覆盖率指数越低</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  coverageThreshold: &#123;</span><br><span class="line">    global: &#123;</span><br><span class="line">      branches: 80,</span><br><span class="line">      functions: 80,</span><br><span class="line">      lines: 80,</span><br><span class="line">      statements: 80</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、报告中的几个指标说明</p><p>(1) Statements: 语句覆盖率</p><p>(2) Branches: 选择分支覆盖率</p><p>(3) Functions: 函数覆盖率</p><p>(4) Lines: 行覆盖率</p><p>3、tips</p><p>静态组件是不会被输出到覆盖率报告的(没有操作方法的组件)</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从浏览器地址栏输入 URL 到界面被渲染出来看前端知识</title>
      <link href="/2020/10/12/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E6%98%BE%E7%A4%BA%E7%94%BB%E9%9D%A2%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>/2020/10/12/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E6%98%BE%E7%A4%BA%E7%94%BB%E9%9D%A2%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>经常会有各种文章啥的都有提到从浏览器地址栏输入 URL 到浏览器渲染出页面的过程是怎样的。</p><p>之前我的认识是：DNS 解析，请求静态资源，渲染页面。</p><p>然而，事实上我还是太不专业了，看到的都只是一些表象，从表象往专业看，其实这里蕴含了多个方向的前端知识，下面就来谈谈个人的一些拙见。</p><h3 id="一、从输入-URL-到-DNS-解析"><a href="#一、从输入-URL-到-DNS-解析" class="headerlink" title="一、从输入 URL 到 DNS 解析"></a>一、从输入 URL 到 DNS 解析</h3><p>浏览器每开一个窗口，就会新建一个进程，这个可以打开 chrome 的 task manager 或者 win 的任务管理器自行验证。在浏览器地址栏输入一个网址，比如 <a href="https://canace.site:8080/a?name=b">https://canace.site:8080/a?name=b</a>, 回车, 浏览器回去解析这个 URL，这个例子解析出来的结构可能是这样的</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="attr">protocol:</span> <span class="string">&quot;https:&quot;</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">&quot;canace.site&quot;</span></span><br><span class="line"><span class="attr">port:</span> <span class="string">&quot;8080&quot;</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">&quot;/a&quot;</span></span><br><span class="line"><span class="attr">query:</span> &#123;<span class="attr">name:</span> a&#125;</span><br></pre></td></tr></table></figure><p>拿到 URL 的解析之后，浏览器内核进程根据 url 解析出的协议和域名，开一个网络请求线程。</p><h4 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h4><p>完成以上步骤后，通过 DNS 查询去找出”canace.site”对应的 ip 地址, DNS 的查找顺序一般是: 浏览器缓存(chrome://net-internals/#DNS) =&gt; 操作系统缓存 =&gt; 本地host文件 -&gt; 路由器缓存 =&gt; ISP(网络运营商，比如电信) DNS缓存 =&gt; 顶级DNS服务器/根DNS服务器, 可以看出 DNS 寻址还是会花点时间的，所以在一个页面中还是用少一点域名比较好。</p><p>这里有个比较有意思的应用,就是有的时候手机上能用到 wifi，但是电脑不行，网上的教程一般是建议改 DNS 为: 114.114.114.114 或者 8.8.8.8，114.114.114.114 这个地址是国内移动、电信和联通通用的DNS,8.8.8.8 是谷歌提供的全球通用的 DNS,修改本地 DNS 为这两个地址，对于使用 DNS 引导内容分发的网站，解析成功率相对来说更高, 而且速度相对快且稳定。</p><p>既然 DNS 可以被修改，那么必然会存在安全隐患，这里就要讲到 DNS 劫持了，这里需要思考 DNS 劫持是什么,DNS 劫持是怎么实现的,DNS 劫持有哪几种等，下面来理一下:</p><p><strong>DNS 劫持是什么</strong></p><p>DNS 劫持即通过某种技术手段，篡改正确域名和IP地址的映射关系，使得域名映射到了错误的IP地址，因此可以认为DNS劫持是一种DNS重定向攻击</p><p><strong>DNS 劫持的分类</strong></p><p>按照寻址路径，DNS 劫持可以分为以下几类: </p><p><strong>(1)本地DNS劫持</strong></p><ul><li><p>黑客通过木马病毒或者恶意程序入侵电脑，串改 DNS 配置(hosts 文件, DNS 服务器地址或者 DNS 缓存等)</p></li><li><p>黑客利用路由器漏洞或者破解路由器管理账号入侵路由器并篡改 DNS 配置</p></li><li><p>一些企业代理设备针对企业内部场景对特定的域名做 DNS 劫持并解析为指定的结果</p></li></ul><p><strong>(2)DNS解析路径劫持</strong></p><p>发生在客户端和服务端网络通信阶段</p><ul><li><p>DNS 请求转发, 通过技术手段(中间盒子，软件等)将DNS流量重定向到其他DNS服务器</p></li><li><p>DNS 请求复制, 利用分光等设备将DNS查询复制到网络设备，并先于正常应答返回DNS劫持的结果</p></li><li><p>DNS 请求代答, 网络设备或者软件直接代替DNS服务器对DNS查询进行应答</p></li></ul><p><strong>(3)篡改DNS服务器记录</strong></p><p>黑客非法入侵DNS服务器记录管理账号，直接修改DNS记录的行为</p><p>上面提到了进程和线程，就顺带说一下这两个经常被搞混的难兄难弟。</p><h4 id="进程-VS-线程"><a href="#进程-VS-线程" class="headerlink" title="进程 VS 线程"></a>进程 VS 线程</h4><p>(1) 进程是 cpu 资源分配的最小单位，系统会为每一个进程分配一定的内存</p><p>(2) 进程之间相互独立</p><p>(3) 线程是 cpu 调度的最小单位</p><p>(4) 一个进程由一个或多个线程组成</p><p>(5) 同一进程下的各个线程之间共享程序的内存空间（包括代码段、数据集、堆等）</p><h4 id="浏览器进程-线程模型"><a href="#浏览器进程-线程模型" class="headerlink" title="浏览器进程/线程模型"></a>浏览器进程/线程模型</h4><p>浏览器是多进程的，每打开一个标签页会创建一个新的进程(有时会进行进程合并)</p><p>浏览器的主要进程包括以下几种:</p><p>(1) <strong>Browser进程</strong>, 浏览器的主进程（负责协调、主控），只有一个, Browser进程的作用有以下几个:</p><ul><li><p>负责浏览器界面显示，与用户交互。如前进，后退等</p></li><li><p>负责各个页面的管理，创建和销毁其他进程</p></li><li><p>将Renderer进程得到的内存中的Bitmap，绘制到用户界面上</p></li><li><p>网络资源的管理，下载等</p></li></ul><p>Browser进程的主要线程有以下几种:</p><ul><li><p>UI线程: 控制浏览器上的按钮及输入框</p></li><li><p>网络线程: 处理网络请求，从网上获取数据</p></li><li><p>storage线程: 控制文件等的访问</p></li></ul><p>(2) <strong>浏览器渲染进程, 亦被称为浏览器内核进程, Renderer进程,</strong> 内部是多线程的, Renderer 进程默认每个 Tab 页面一个进程，互不影响,主要用于页面渲染，脚本执行，事件处理等，Renderer 进程包括的主要线程如下:</p><p>(3) <strong>GUI渲染线程</strong></p><ul><li><p>负责渲染浏览器界面，解析 HTML，CSS，构建 DOM 树和 RenderObject 树，布局和绘制等。</p></li><li><p>当界面需要重绘（Repaint）或由于某种操作引发回流(reflow)时，该线程就会执行</p></li><li><p>GUI 渲染线程与 JS 引擎线程是互斥的，当 JS 引擎执行时 GUI 线程会被挂起（相当于被冻结了），GUI 更新会被保存在一个队列中等到JS 引擎空闲时立即被执行。</p></li></ul><p>(4) <strong>JS 引擎线程</strong></p><ul><li><p>也称为JS内核，负责处理 Javascript 脚本程序（例如V8引擎）</p></li><li><p>JS 引擎线程负责解析 Javascript 脚本，运行代码</p></li><li><p>JS 引擎一直等待着任务队列中任务的到来，然后加以处理，一个Tab页（renderer进程）中无论什么时候都只有一个 JS 线程在运行JS程序</p></li><li><p>GUI 渲染线程与 JS 引擎线程是互斥的，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。<br>需要大量计算的时候，可以创建一个 Web Worker，向浏览器申请多开一个线程, 专门用于计算 </p></li></ul><p>(5) <strong>事件触发线程</strong></p><ul><li><p>归属于浏览器而不是 JS 引擎，用来控制事件循环</p></li><li><p>当 JS 引擎执行代码块如setTimeOut时（也可来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件线程中</p></li><li><p>当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待 JS 引擎的处理</p></li><li><p>由于 JS 的单线程关系，所以这些待处理队列中的事件都得排队等待 JS 引擎处理（当 JS 引擎空闲时才会去执行）</p></li></ul><p>(6) <strong>定时触发器线程</strong></p><ul><li><p>传说中的 setInterval 与 setTimeout 所在线程</p></li><li><p>浏览器定时计数器并不是由 JavaScript 引擎计数的,（因为 JavaScript 引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确）因此通过单独线程来计时并触发定时（计时完毕后，添加到事件队列中，等待 JS 引擎空闲后执行）</p></li><li><p>W3C 在 HTML 标准中规定，规定要求 setTimeout 中低于 4ms 的时间间隔算为 4ms</p></li></ul><p>(7) <strong>异步 http 请求线程</strong></p><ul><li><p>XMLHttpRequest 在连接后是通过浏览器新开一个网络线程请求</p></li><li><p>将检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将这个回调再放入事件队列中。再由 JavaScript 引擎执行。</p></li></ul><p>(8) <strong>Subframe 进程</strong></p><p>iframe 的渲染 — Site Isolation, Site Isolation 机制从 Chrome 67 开始默认启用，这种机制允许在同一个 Tab 下的跨站 iframe 使用单独的进程来渲染</p><h3 id="二、网络连接建立到获取内容断开"><a href="#二、网络连接建立到获取内容断开" class="headerlink" title="二、网络连接建立到获取内容断开"></a>二、网络连接建立到获取内容断开</h3><p>DNS 解析完成之后，会向对应 ip 的服务器发起请求，从发起请求到请求完毕经历了三次握手、客户端与服务端 http 交互以及四次挥手，下面来具体讲讲这三个阶段都发生了什么</p><h4 id="1、三次握手建立连接"><a href="#1、三次握手建立连接" class="headerlink" title="1、三次握手建立连接"></a>1、三次握手建立连接</h4><p><strong>(1) 三次握手的作用</strong></p><ul><li><p>明确客户端和服务端的收、发能力是否正常</p></li><li><p>指定服务端和客户端的初始化序列号为后面的可靠性传送做准备</p></li></ul><p><strong>(2) 三次握手的过程</strong></p><ul><li><p>客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN(c)。此时客户端处于 SYN_SEND 状态</p></li><li><p>服务端发送自己的 SYN 报文作为应答，同样指明自己的ISN(s)。为了确认客户端的 SYN，将 ISN(c)+1 作为 ACK 数值。这样，每发送一个SYN，序列号就会加 1, 如果有丢失的情况，则会重传, 此时服务器处于 SYN_RCVD 的状态</p></li><li><p>为了确认服务器端的 SYN，客户端将 ISN(s)+1 作为返回的 ACK 数值, 此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，双方建立起连接成功</p></li></ul><p><strong>(3) SYN 攻击</strong></p><p>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器容易受到 SYN 洪泛攻击。</p><p>SYN 攻击就是 Client 在短时间内伪造大量不存在的 IP 地址，并向 Server 不断地发送 SYN 包，Server 则回复确认包，并等待 Client确认，由于源地址不存在，因此 Server 需要不断重发直至超时，这些伪造的 SYN 包将长时间占用未连接队列，导致正常的 SYN 请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS/DDoS 攻击。</p><h4 id="2、客户端与服务端-http-交互"><a href="#2、客户端与服务端-http-交互" class="headerlink" title="2、客户端与服务端 http 交互"></a>2、客户端与服务端 http 交互</h4><p>前后端的交互用的一般是 http 协议, 经常会涉及到的内容包括 http 报文头部信息, 状态码, 缓存, 跨域等</p><p><strong>(1) http 报文结构</strong></p><p>随便打开一个网页查看网络请求，都会发现有三个一样的字段: General、Response Header 以及 Request Header, 在网页调试中，我们也经常会去看这三个地方</p><p><strong>General(通用头部)</strong></p><p>在获取网页内容时，会把网页文件的地址和请求方法放到 http 报文头部,请求完之后，控制台一般会有以下的一些信息</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">Request Url: 请求的web服务器地址</span><br><span class="line"></span><br><span class="line">Request <span class="function"><span class="keyword">Method</span>:</span> 请求方式</span><br><span class="line">（Get、POST、OPTIONS、PUT、HEAD、DELETE、CONNECT、TRACE）</span><br><span class="line"></span><br><span class="line">Status Code: 请求的返回状态码，如<span class="number">200</span>代表成功</span><br><span class="line"></span><br><span class="line">Remote Address: 请求的远程服务器地址（会转为IP）</span><br></pre></td></tr></table></figure><p>上面是对每个字段的描述，其中 method 按照协议可以分为</p><ul><li><p>HTTP1.0 method: GET, POST 和 HEAD</p></li><li><p>HTTP1.1 method: GET、POST、HEAD、OPTIONS, PUT, DELETE, TRACE 和 CONNECT</p></li></ul><p>常用状态码分类:</p><ul><li><p>1xx——指示信息，表示请求已接收，继续处理</p></li><li><p>2xx——成功，表示请求已被成功接收、理解、接受</p></li><li><p>3xx——重定向，要完成请求必须进行更进一步的操作</p></li><li><p>4xx——客户端错误，请求有语法错误或请求无法实现</p></li><li><p>5xx——服务器端错误，服务器未能实现合法的请求</p></li></ul><p>常用状态码:</p><ul><li><p>200——表明该请求被成功地完成，所请求的资源发送回客户端</p></li><li><p>304——自从上次请求后，请求的网页未修改过，请客户端使用本地缓存</p></li><li><p>400——客户端请求有错（譬如可以是安全模块拦截）</p></li><li><p>401——请求未经授权</p></li><li><p>403——禁止访问（譬如可以是未登录时禁止）</p></li><li><p>404——资源未找到</p></li><li><p>500——服务器内部错误</p></li><li><p>503——服务不可用</p></li></ul><p><strong>Request Header(请求头部)</strong></p><p>常用请求头部</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Accept: 接收类型，表示浏览器支持的MIME类型</span><br><span class="line">（对标服务端返回的Content-Type）</span><br><span class="line"></span><br><span class="line">Accept-Encoding：浏览器支持的压缩类型,如gzip等,超出类型不能接收</span><br><span class="line"></span><br><span class="line">Content-Type：客户端发送出去实体内容的类型</span><br><span class="line"></span><br><span class="line">缓存相关</span><br><span class="line"><span class="keyword">Cache</span>-Control: 指定请求和响应遵循的缓存机制，如<span class="keyword">no</span>-<span class="keyword">cache</span></span><br><span class="line"><span class="keyword">If</span>-Modified-Since(http1<span class="number">.0</span>)：对应服务端的<span class="keyword">Last</span>-Modified，用来匹配看文件是否变动，只能精确到<span class="number">1</span>s之内</span><br><span class="line">Expires(http1<span class="number">.0</span>)：缓存控制，在这个时间内不会请求，直接使用缓存，而且是服务端时间</span><br><span class="line"><span class="keyword">Max</span>-age(http1<span class="number">.1</span>)：代表资源在本地缓存多少秒，有效时间内不会请求，而是使用缓存</span><br><span class="line"><span class="keyword">If</span>-<span class="keyword">None</span>-<span class="keyword">Match</span>(http1<span class="number">.1</span>)：对应服务端的ETag，用来匹配文件内容是否改变（非常精确）</span><br><span class="line"></span><br><span class="line">Cookie: 有cookie并且同域访问时会自动带上</span><br><span class="line"></span><br><span class="line"><span class="keyword">Connection</span>: 当浏览器与服务器通信时对于长连接如何进行处理,如<span class="keyword">keep</span>-alive</span><br><span class="line"></span><br><span class="line">Host：请求的服务器<span class="keyword">URL</span></span><br><span class="line"></span><br><span class="line">Origin：最初的请求是从哪里发起的（只会精确到端口）,Origin比Referer更尊重隐私</span><br><span class="line"></span><br><span class="line">Referer：该页面的来源<span class="keyword">URL</span>(适用于所有类型的请求，会精确到详细页面地址，csrf拦截常用到这个字段)</span><br><span class="line"></span><br><span class="line"><span class="keyword">User</span>-<span class="keyword">Agent</span>：用户客户端的一些必要信息，如UA头部等</span><br></pre></td></tr></table></figure><p><strong>Response Header(响应头部)</strong></p><p>常用响应头部</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Headers</span>: 服务器端允许的请求Headers</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span>: 服务器端允许的请求方法</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span>: 服务器端允许的请求Origin头部（譬如为*）</span><br><span class="line"></span><br><span class="line"><span class="attribute">Content-Type：服务端返回的实体内容的类型</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">Date：数据从服务器发送的时间</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">缓存相关</span></span><br><span class="line"><span class="attribute">Cache-Control：告诉浏览器或其他客户，什么环境可以安全的缓存文档</span></span><br><span class="line"><span class="attribute">Last-Modified：请求资源的最后修改时间</span></span><br><span class="line"><span class="attribute">Expires：应该在什么时候认为文档已经过期,从而不再缓存它</span></span><br><span class="line"><span class="attribute">Max-age：客户端的本地资源应该缓存多少秒，开启了Cache-Control后有效</span></span><br><span class="line"><span class="attribute">ETag：请求变量的实体标签的当前值</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">Set-Cookie：设置和页面关联的cookie，服务器通过这个头部把cookie传给客户端</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line">Keep-Alive：如果客户端有keep-alive，服务端也会有响应（如timeout=38）</span><br><span class="line"></span><br><span class="line"><span class="attribute">Server：服务器的一些相关信息</span></span><br></pre></td></tr></table></figure><p>跨域请求时，请求头部的Origin要匹配响应头部的Access-Control-Allow-Origin，否则会报跨域错误</p><p>在使用缓存时，请求头部的If-Modified-Since、If-None-Match分别和响应头部的Last-Modified、ETag对应</p><p>写的有点累，得空再写了</p><p>未完待续……</p><p>参考文献:</p><p><a href="https://zhuanlan.zhihu.com/p/86538629">聊一聊DNS劫持那些事</a></p><p><a href="https://dailc.github.io/2018/03/12/whenyouenteraurl.html">从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！</a></p><p><a href="https://zhuanlan.zhihu.com/p/47407398">图解浏览器的基本工作原理</a></p><p><a href="https://blog.csdn.net/zhezhebie/article/details/79191776">常用dns114.114.114.114与8.8.8.8的区别</a></p><p><a href="https://zhuanlan.zhihu.com/p/53374516">“三次握手，四次挥手”你真的懂吗？</a></p><p><a href="https://juejin.im/post/6844903958624878606">面试官，不要再问我三次握手和四次挥手</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 文档</title>
      <link href="/2020/10/10/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/10/10/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="一、配置"><a href="#一、配置" class="headerlink" title="一、配置"></a>一、配置</h3><h4 id="1、编辑配置文件"><a href="#1、编辑配置文件" class="headerlink" title="1、编辑配置文件"></a>1、编辑配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.gitconfig</span><br></pre></td></tr></table></figure><h4 id="2、配置操作"><a href="#2、配置操作" class="headerlink" title="2、配置操作"></a>2、配置操作</h4><p>(1) 设置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config &lt;配置信息名&gt;</span><br><span class="line">git config --global user.name &lt;name&gt;</span><br><span class="line">git config --global user.email &lt;email&gt;</span><br></pre></td></tr></table></figure><p>(2) 查看</p><p><code>git config -l</code></p><p>(3) 删除</p><p><code>git config unset &lt;配置信息名&gt;</code></p><h3 id="二、分支操作"><a href="#二、分支操作" class="headerlink" title="二、分支操作"></a>二、分支操作</h3><h4 id="1、创建分支"><a href="#1、创建分支" class="headerlink" title="1、创建分支"></a>1、创建分支</h4><p>(1) 创建本地分支</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>(2) 创建远程分支</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;git push origin &lt;branch&gt;:&lt;branch&gt;&#96;</span><br></pre></td></tr></table></figure><h4 id="2、删除分支"><a href="#2、删除分支" class="headerlink" title="2、删除分支"></a>2、删除分支</h4><p>(1) 删除本地分支</p><p><code>git branch -d &lt;BranchName&gt;</code></p><p>(2) 删除远程分支</p><p><code>git push origin --delete &lt;BranchName&gt;</code></p><p>(3) 删除已被远程分支删除的分支</p><p><code>git remote prune origin</code></p><h4 id="3、分支版本管理"><a href="#3、分支版本管理" class="headerlink" title="3、分支版本管理"></a>3、分支版本管理</h4><p>(1) 版本回退</p><p><code>git reset --hard &lt;head&gt;</code> =&gt; <code>git push -f</code></p><p>(2) 远程分支打版本标签</p><p><code>git tag -a &lt;版本号&gt; -m &lt;描述信息&gt;</code> =&gt; <code>git push origin &lt;版本号&gt;</code></p><h4 id="4、分支推送"><a href="#4、分支推送" class="headerlink" title="4、分支推送"></a>4、分支推送</h4><p>(1) 新的分支推送到远程并跟踪</p><p><code>git push --set-upstream origin &lt;branch&gt;</code></p><h4 id="5、分支暂存"><a href="#5、分支暂存" class="headerlink" title="5、分支暂存"></a>5、分支暂存</h4><p><code>git stash -u -&gt; git stash pop</code></p><h4 id="6、跟踪远程分支"><a href="#6、跟踪远程分支" class="headerlink" title="6、跟踪远程分支"></a>6、跟踪远程分支</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to&#x3D;origin&#x2F;develop develop</span><br><span class="line">git branch --set-upstream-to&#x3D;origin&#x2F;master master</span><br></pre></td></tr></table></figure><h4 id="7、分支状态查看"><a href="#7、分支状态查看" class="headerlink" title="7、分支状态查看"></a>7、分支状态查看</h4><p>(1) 查看 log 树状图：</p><p><code>git log --oneline --graph --decorate --all</code></p><p>(2) 查看所有成员的提交总数</p><p><code>git shortlog -sn</code></p><p>(3) 查看所有成员的未合并提交总数</p><p><code>git shortlog -sn --no-merges</code></p><p>(4) 查看所有分支的最新提交</p><p><code>git  branch -v</code></p><p>(5) 查看所有分支的最新提交及对应的远程分支</p><p><code>git branch -vv</code></p><h3 id="三、远程仓库操作"><a href="#三、远程仓库操作" class="headerlink" title="三、远程仓库操作"></a>三、远程仓库操作</h3><p>(1) 改变 git 远程仓库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote set-url origin git@gitlab.dreamdev.cn:ebag&#x2F;live-experiment.git</span><br><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>(2) 删除远程仓库文件或文件夹</p><p><code>git rm -r --cached file/folder name</code> =&gt; <code>git commit</code> =&gt; <code>git push</code></p><p>(3) fork 远程的上游仓库</p><ul><li><p>查看远程分支状态：<code>git remote -v</code></p></li><li><p>确定一个将被同步给 fork 远程的上游仓库：<code>git remote add upstream &lt;origin.git&gt;</code></p></li><li><p>再次查看状态确认是否配置成功：<code>git remote -v</code></p></li><li><p>从上游仓库 fetch 分支和提交点，提交给本地 master： <code>git fetch upstream</code></p></li><li><p>把 upstream/master 分支合并到本地 master 上：<code>git merge upstream/master</code></p></li></ul><h3 id="四、初始化项目"><a href="#四、初始化项目" class="headerlink" title="四、初始化项目"></a>四、初始化项目</h3><h4 id="1、-Create-a-new-repository"><a href="#1、-Create-a-new-repository" class="headerlink" title="1、 Create a new repository"></a>1、 Create a new repository</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone &lt;repositry&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;add README&quot;</span><br></pre></td></tr></table></figure><h4 id="2、-Push-an-existing-folder"><a href="#2、-Push-an-existing-folder" class="headerlink" title="2、 Push an existing folder"></a>2、 Push an existing folder</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd existing_folder</span><br><span class="line">git init</span><br><span class="line">git remote add origin &lt;repositry&gt;</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br></pre></td></tr></table></figure><h4 id="3、-Push-an-existing-Git-repository"><a href="#3、-Push-an-existing-Git-repository" class="headerlink" title="3、 Push an existing Git repository"></a>3、 Push an existing Git repository</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd existing_repo</span><br><span class="line">git remote rename origin old-origin</span><br><span class="line">git remote add origin &lt;repositry&gt;</span><br></pre></td></tr></table></figure><h3 id="五、提交代码模板"><a href="#五、提交代码模板" class="headerlink" title="五、提交代码模板"></a>五、提交代码模板</h3><p><code>git status</code> =&gt; <code>git add &lt;文件名&gt;</code> =&gt; <code>git commit -m &lt;描述&gt;</code> =&gt; <code>git pull origin &lt;远程主机名&gt; :&lt;远程分支名&gt;</code> =&gt; <code>git push &lt;分支&gt;</code></p><h3 id="六、一些-tips"><a href="#六、一些-tips" class="headerlink" title="六、一些 tips"></a>六、一些 tips</h3><h4 id="1、推送不了代码可能的原因："><a href="#1、推送不了代码可能的原因：" class="headerlink" title="1、推送不了代码可能的原因："></a>1、推送不了代码可能的原因：</h4><p>远程仓库已更新，本地代码没有及时更新，git pull 更新一下代码试试，不行就强推（不建议）</p><h4 id="2、ping-不同-github-com-报-403"><a href="#2、ping-不同-github-com-报-403" class="headerlink" title="2、ping 不同 github.com 报 403"></a>2、ping 不同 github.com 报 403</h4><p>可能是设置了代理，<code>shift+command+G</code> =&gt; <code>/private/etc</code> =&gt; 复制 hosts 文件，把里面关于 github 的设置去掉，保存，替换回去 =&gt; 重启浏览器或命令界面，可以正常 ping 了</p><h4 id="3、不小心上传了大文件，一直存在记录解决方法"><a href="#3、不小心上传了大文件，一直存在记录解决方法" class="headerlink" title="3、不小心上传了大文件，一直存在记录解决方法"></a>3、不小心上传了大文件，一直存在记录解决方法</h4><p>(1) 找出历史提交文件中占用空间大的文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rev-list --objects --all | grep &quot;$(git verify-pack -v .git&#x2F;objects&#x2F;pack&#x2F;*.idx | sort -k </span><br><span class="line">3 -n | tail -5 | awk &#39;&#123;print$1&#125;&#39;)&quot;</span><br></pre></td></tr></table></figure><p>(2) 重写commit，删除大文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git filter-branch --force --index-filter &#39;git rm -rf --cached --ignore-unmatch &lt;file-name&gt;&#39; --prune-empty --tag-name-filter cat -- --all</span><br></pre></td></tr></table></figure><p>(3) 强制 push</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">push</span> -f</span><br></pre></td></tr></table></figure><p>(4) 清理和回收空间</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf .git&#x2F;refs&#x2F;original&#x2F;</span><br><span class="line">git reflog expire --expire&#x3D;now --all</span><br><span class="line">git gc --prune&#x3D;now</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础 —— 基本数据类型与引用类型的异同</title>
      <link href="/2020/10/10/javascript%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BC%82%E5%90%8C/"/>
      <url>/2020/10/10/javascript%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BC%82%E5%90%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="一、不同点"><a href="#一、不同点" class="headerlink" title="一、不同点"></a>一、不同点</h3><h4 id="1、保存方式"><a href="#1、保存方式" class="headerlink" title="1、保存方式"></a>1、保存方式</h4><p>(1) 基本数据类型值保存在变量中，操作的是实际值，不能直接追加属性和方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.name = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">a <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>(2) 引用类型保存在内存中，操作的是对象的引用，可以直接追加属性和方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="attr">name</span>:<span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line">a.age = <span class="number">18</span></span><br><span class="line">a <span class="comment">// &#123;name: &quot;a&quot;, age: 18&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2、复制变量的方式"><a href="#2、复制变量的方式" class="headerlink" title="2、复制变量的方式"></a>2、复制变量的方式</h4><p>(1) 基本数据类型复制变量，实际上是把原始值的副本复制给变量，变量的改变不会影响到原始值，是深拷贝</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = a</span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">a <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>(2) 引用类型复制变量，是把指针复制给变量，指针实际的指向还是原始对象的内存地址，变量的改变会影响到原始值，是浅拷贝</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = &#123;&#125;</span><br><span class="line">b = a</span><br><span class="line">b.name = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">a <span class="comment">// &#123;name: &quot;b&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="二、相同点"><a href="#二、相同点" class="headerlink" title="二、相同点"></a>二、相同点</h3><p>参数的传递方式都是按值传递给局部变量</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础 —— 类型转换</title>
      <link href="/2020/10/09/javascript%E5%9F%BA%E7%A1%80-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/10/09/javascript%E5%9F%BA%E7%A1%80-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在红宝书第三版中,有说到 ECMAScript 中有 5 种简单数据类型(也称为基本数据类型):Undefined、Null、Boolean、Number 和 String。还有 1 种复杂数据类型——Object。</p><h2 id="一、显式转换"><a href="#一、显式转换" class="headerlink" title="一、显式转换"></a>一、显式转换</h2><p>JavaScript 的显式类型转换比较容易理解就是利用对应类型的类型转换函数去转换。</p><p>显式类型转换又可以分为基本数据类型之间的转换、基本数据类型转引用类型以以及Object类型转基本数据类型等，下面来描述一下这几种类型转换的形式。</p><h3 id="一-基本数据类型之间转换的方法"><a href="#一-基本数据类型之间转换的方法" class="headerlink" title="(一) 基本数据类型之间转换的方法"></a>(一) 基本数据类型之间转换的方法</h3><h4 id="1、基本数据类型转换-Boolean"><a href="#1、基本数据类型转换-Boolean" class="headerlink" title="1、基本数据类型转换 Boolean"></a>1、基本数据类型转换 Boolean</h4><p>(1) Boolean 转 Boolean</p><p>直接调用 Boolean 类型转换函数不传参数，返回的是 false，这里需要注意一下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>() <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">true</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">false</span>)  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>(2) String 转 Boolean</p><p>任何非空字符串转 Boolean，都返回 true, 空字符串转 Boolean 返回 false</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="string">&#x27;undefined&#x27;</span>)  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">&#x27;NaN&#x27;</span>)  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">&#x27;null&#x27;</span>) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">&#x27; &#x27;</span>)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>(3) Number 转 Boolean</p><p>任何非零数字值(包括无穷大)转 Boolean 都返回 true, 0 和 NaN 转 Boolean 返回 false</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="literal">Infinity</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(-<span class="literal">Infinity</span>) <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">-1</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">1</span>/<span class="number">2</span>)  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">NaN</span>)  <span class="comment">//false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">-0</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>(4) Undefined 和 Null 转 Boolean</p><p>undefined 和 null 转 Boolean， 都返回 false</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>)  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>总结: 基本类型布尔值为 false 的情况有以下几种: </p><ul><li><p>调用 Boolean 类型转换函数不传参(这个不知道怎么归类，放到这里先)</p></li><li><p>空字符串</p></li><li><p>0 和 NaN</p></li><li><p>null</p></li><li><p>undefined</p></li></ul><h4 id="2、基本数据类型转-Number"><a href="#2、基本数据类型转-Number" class="headerlink" title="2、基本数据类型转 Number"></a>2、基本数据类型转 Number</h4><p>Number 类型转换函数可以转换各种类型值为数值类型，parseInt()和 parseFloat() 专门用于把字符串转换成数值</p><p>(1) Boolean 转 Number</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>)  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>(2) Number 转 Number</p><p>只是简单的传入和返回</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>()  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">Infinity</span>)  <span class="comment">//Infinity</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="number">0</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">NaN</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>(3) null 转 Number</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>(4) undefined 转 Number</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>(5) String 转 Number</p><p>A. 字符串只包含数字，忽略前导 0，转换为十进制数值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;001234&#x27;</span>)  <span class="comment">// 1234</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;-001234&#x27;</span>) <span class="comment">// -1234</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;0x12&#x27;</span>)  <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;Infinity&#x27;</span>)  <span class="comment">// Infinity</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;NaN&#x27;</span>) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>B. 字符串包含有效浮点格式，忽略前导 0，转换为浮点数值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;1.2333&#x27;</span>)  <span class="comment">// 1.2333</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;.2333&#x27;</span>) <span class="comment">// 0.2333</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;2333.&#x27;</span>) <span class="comment">// 2333</span></span><br></pre></td></tr></table></figure><p>C. 字符串为空，返回 0</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;&#x27;</span>)  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>D. 除以上格式之外的字符，返回 NaN</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;123a&#x27;</span>)  <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p>总结：基本数据类型转换为 Number 类型为 0 的情况有以下几种</p><ul><li><p>调用 Number 类型转换函数参数为空</p></li><li><p>0</p></li><li><p>空字符串</p></li><li><p>null</p></li><li><p>false</p></li></ul><p>基本数据类型转换为 Number 类型值为 NaN 的情况</p><ul><li><p>undefined</p></li><li><p>字符串中包含非数字</p></li><li><p>NaN</p></li></ul><h4 id="3、基本数据类型转-String"><a href="#3、基本数据类型转-String" class="headerlink" title="3、基本数据类型转 String"></a>3、基本数据类型转 String</h4><p>除 undefined 和 null 外的其他类型转 String的转换规则为：调用 toString 方法返回相应的值, null 和 undefined 没有 toString 方法，直接返回对应的字符串</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>)  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">false</span>) <span class="comment">//false</span></span><br><span class="line"><span class="built_in">String</span>(<span class="number">0</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>)  <span class="comment">// null</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">NaN</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">Infinity</span>)  <span class="comment">// Infinity</span></span><br><span class="line"><span class="built_in">String</span>()  <span class="comment">// &quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="二-Object-类型转基本数据类型"><a href="#二-Object-类型转基本数据类型" class="headerlink" title="(二) Object 类型转基本数据类型"></a>(二) Object 类型转基本数据类型</h3><h4 id="1、对象转-Boolean"><a href="#1、对象转-Boolean" class="headerlink" title="1、对象转 Boolean"></a>1、对象转 Boolean</h4><p>任何对象转 Boolean，返回值都是 true</p><h4 id="2、对象转-Number-规则"><a href="#2、对象转-Number-规则" class="headerlink" title="2、对象转 Number 规则"></a>2、对象转 Number 规则</h4><p>(1) 调用对象的 valueOf()方法，若结果是基本数据类型，依照基本数据类型转 Number 规则转换。</p><p>(2) 如果 valueOf() 方法返回的值不是基本数据类型或者转换的结果是 NaN，则调用对象的 toString()方法，依照基本数据类型转 Number 规则转换</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (&#123;a:0&#125;).valueOf() =&gt; &#123;a:0&#125; =&gt; (&#123;a:0&#125;).toString() =&gt; &quot;[object Object]&quot; </span></span><br><span class="line"><span class="comment">// =&gt; Number(&quot;[object Object]&quot;) =&gt; NaN </span></span><br><span class="line"><span class="built_in">Number</span>(&#123;<span class="attr">a</span>:<span class="number">0</span>&#125;) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h4 id="3、对象转-String-规则"><a href="#3、对象转-String-规则" class="headerlink" title="3、对象转 String 规则"></a>3、对象转 String 规则</h4><p>(1) 调用对象的 toString() 方法, 若结果是基本数据类型, 依照基本数据类型转 String 规则转换</p><p>(2) 如果 toString() 方法返回的值不是基本数据类型, 则调用对象的 valueOf()方法，依照基本数据类型转 Number 规则转换</p><h2 id="二、隐式转换"><a href="#二、隐式转换" class="headerlink" title="二、隐式转换"></a>二、隐式转换</h2><p>隐式类型转换顾名思义，就是不直接调用转换函数，而发生的类型转换，主要分为以下几种: 一元操作符类型转换、二元操作符类型转换, 相等操作符类型转换以及其他操作符类型转换，下面我举例子来说明一下这几种类型转换的形式</p><h3 id="1、一元操作符类型转换"><a href="#1、一元操作符类型转换" class="headerlink" title="1、一元操作符类型转换"></a>1、一元操作符类型转换</h3><p>一元操作符会把操作数据类型转换为 Number 类型(规则同上)，再进行加减或者自增自减</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">++ a  <span class="comment">// ++Number(a) =&gt; 2</span></span><br><span class="line"></span><br><span class="line">b = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">b-- <span class="comment">// Number(b)--</span></span><br><span class="line">b <span class="comment">//  0</span></span><br><span class="line"></span><br><span class="line">+<span class="string">&#x27;1&#x27;</span>  <span class="comment">// Number(&#x27;1&#x27;) =&gt; 1</span></span><br><span class="line">-<span class="string">&#x27;1&#x27;</span> <span class="comment">// -Number(&#x27;1&#x27;) =&gt; -1</span></span><br><span class="line"></span><br><span class="line">+[] <span class="comment">// [].valueOf() =&gt; [] =&gt; [].toString() =&gt; &quot;&quot; =&gt; Number(&quot;&quot;) =&gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;].valueOf() =&gt; [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;] </span></span><br><span class="line"><span class="comment">// =&gt; [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;].toString() =&gt; &quot;1,2,3&quot;</span></span><br><span class="line"><span class="comment">// Number(&quot;1,2,3&quot;) =&gt; NaN</span></span><br><span class="line">+[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment">// (&#123;&#125;).valueOf() =&gt; &#123;&#125; =&gt; (&#123;&#125;).toString() =&gt; &quot;[object Object]&quot; </span></span><br><span class="line"><span class="comment">// =&gt; Number(&quot;[object Object]&quot;) =&gt; NaN</span></span><br><span class="line">+&#123;&#125; </span><br><span class="line"></span><br><span class="line">+<span class="literal">true</span> <span class="comment">// Number(true) =&gt; 1</span></span><br></pre></td></tr></table></figure><h3 id="2、二元操作符类型转换"><a href="#2、二元操作符类型转换" class="headerlink" title="2、二元操作符类型转换"></a>2、二元操作符类型转换</h3><p>二元操作符类型转换我们用的最多的就属 “+” 了, 先来看看 “+” 是如何进行类型转换的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">&#x27;a&#x27;</span> <span class="comment">// &#x27;1a&#x27;</span></span><br><span class="line"><span class="literal">NaN</span> + <span class="string">&#x27;a&#x27;</span> <span class="comment">// &quot;NaN&quot;</span></span><br><span class="line">[] + <span class="string">&#x27;a&#x27;</span> <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span> + <span class="number">1</span> <span class="comment">// 2</span></span><br><span class="line"><span class="literal">NaN</span> + <span class="number">1</span> <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">undefined</span> + <span class="number">1</span> <span class="comment">// NaN</span></span><br><span class="line"><span class="literal">null</span> + <span class="number">1</span>  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>] + []  <span class="comment">// &quot;1,2,3&quot;</span></span><br><span class="line">[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>] + <span class="number">1</span> <span class="comment">//  &quot;1,2,31&quot;</span></span><br></pre></td></tr></table></figure><p>从上面的例子我们不难看出二元操作符 “+” 进行类型转换的规则:</p><p>(1) x + y 中存在一个操作数为 String 类型, 则把另一个操作数转换为 String 类型，再把两个字符串拼接在一起</p><p>(2) x + y 中存在一个操作数为 Boolean、Undefined、NaN 或者 null 值, 另一个操作数为 Number，则将非 Number 的操作数转换为 Number 类型，在进行运算, NaN + 任何值都为 NaN</p><p>(3) 若有一个操作数是对象，则把该操作数转为 String 类型, 回到规则(1)</p><p>再来看看另一个常用的二元操作符 ‘-‘，这个操作符的类型转换规则就简单多了, 若x - y 中含有一个不是 Number 类型的操作数，则把该操作数转换为 Number 类型，除此之外 ‘*’, ‘/‘等操作符转换规则也基本一样</p><h3 id="3、相等操作符类型转换"><a href="#3、相等操作符类型转换" class="headerlink" title="3、相等操作符类型转换"></a>3、相等操作符类型转换</h3><p>(1) 如果有一个操作数是布尔值，则在比较相等性之前先将该操作数转换为 Number 类型</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span> == <span class="number">0</span>  <span class="comment">// Number(false) =&gt; 0 =&gt; true</span></span><br><span class="line"><span class="literal">true</span> == <span class="number">1</span> <span class="comment">//Number(true) =&gt; 1 =&gt; true</span></span><br></pre></td></tr></table></figure><p>(2)  null 和 undefined 不转换，并且 null == undefined</p><p>(3) x == y, 中含有一个操作数为 NaN 则为 false</p><p>(4) 若 x == y 中有一个不是数值, 则将该操作数转换为 Number 类型</p><p>(5) x == y 中, x, y 都为对象, 则比较二者是否指向同一个地址</p><p>除此之外还有其他的操作符会进行类型转换，这里就不一一列举了，有了这些基础应该可以触类旁通了。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="/2020/09/24/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2020/09/24/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="一、函数式编程有什么好处"><a href="#一、函数式编程有什么好处" class="headerlink" title="一、函数式编程有什么好处"></a>一、函数式编程有什么好处</h3><p>1、代码简洁</p><p>2、函数间耦合度低，便于代码管理和迭代更新</p><h3 id="二、什么是纯函数"><a href="#二、什么是纯函数" class="headerlink" title="二、什么是纯函数"></a>二、什么是纯函数</h3><p>类似于数学里的函数，x-y 是一一对应关系，一个函数只有一个输出值，函数能只进行运算，不进行其他处理，这也被称为无副作用，简言之函数只管函数内部的事情，外面的一概不管。</p><h3 id="三、柯里化（curry）"><a href="#三、柯里化（curry）" class="headerlink" title="三、柯里化（curry）"></a>三、柯里化（curry）</h3><p>只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数,示例:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> increment = add(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> addTen = add(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">increment(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">addTen(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 12</span></span><br></pre></td></tr></table></figure><p>以上代码中的 add 函数返回一个函数，这个函数接受一个 y 值，但是并未执行，需要调用的时候才会被执行。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端 Docker 指南</title>
      <link href="/2020/09/16/docker%E6%8C%87%E5%8D%97/"/>
      <url>/2020/09/16/docker%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h3><p>mac，下载完之后安装即可</p><p>(1) 下载: <a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac/">地址</a></p><p>(2) 创建容器：<code>docker run -dp 80:80 docker/getting-started</code></p><h3 id="二、nginx-docker"><a href="#二、nginx-docker" class="headerlink" title="二、nginx docker"></a>二、nginx docker</h3><h4 id="1、新建-docker-文件夹"><a href="#1、新建-docker-文件夹" class="headerlink" title="1、新建 docker 文件夹"></a>1、新建 docker 文件夹</h4><p>(1) 文件夹下新建 Dockerfile 文件, 内容如下</p><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:latest</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> dist /usr/share/nginx/html</span></span><br><span class="line"><span class="comment">#　修改nginx的配置项</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> docker/default.conf /etc/nginx/conf.d</span></span><br></pre></td></tr></table></figure><p>(2) 端口映射，文件夹下新建 default.conf 文件, 内容如下:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  _;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect<span class="built_in"> server </span><span class="builtin-name">error</span> pages <span class="keyword">to</span> the static<span class="built_in"> page </span>/50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、编译-docker-镜像"><a href="#2、编译-docker-镜像" class="headerlink" title="2、编译 docker 镜像"></a>2、编译 docker 镜像</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">docker build -t <span class="tag">&lt;<span class="name">webserver</span>&gt;</span> -f docker/Dockerfile .</span><br></pre></td></tr></table></figure><h4 id="3、上传镜像"><a href="#3、上传镜像" class="headerlink" title="3、上传镜像"></a>3、上传镜像</h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">push</span></span><br></pre></td></tr></table></figure><h4 id="4、关闭容器"><a href="#4、关闭容器" class="headerlink" title="4、关闭容器"></a>4、关闭容器</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">docker container <span class="built_in">stop</span> web</span><br></pre></td></tr></table></figure><h4 id="5、创建容器-并将容器指向一个镜像版本"><a href="#5、创建容器-并将容器指向一个镜像版本" class="headerlink" title="5、创建容器, 并将容器指向一个镜像版本"></a>5、创建容器, 并将容器指向一个镜像版本</h4><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -it --rm -d -p 80:80 --name web &lt;webserver&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>three.js 基础实战 —— 创建画布</title>
      <link href="/2020/09/14/three-js%E5%9F%BA%E7%A1%80%E5%AE%9E%E6%88%98/"/>
      <url>/2020/09/14/three-js%E5%9F%BA%E7%A1%80%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h3 id="一、场景创建"><a href="#一、场景创建" class="headerlink" title="一、场景创建"></a>一、场景创建</h3><p>要显示一个画面需要有以下三个元素: scene, camera 和 renderer，renderer 渲染器是根据 scene 和 camera 进行渲染的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建 scene</span></span><br><span class="line"><span class="keyword">const</span> scene = <span class="keyword">new</span> THREE.Scene();</span><br><span class="line"><span class="comment">// 创建 camera</span></span><br><span class="line"><span class="keyword">const</span> fov = <span class="number">75</span>;</span><br><span class="line"><span class="keyword">const</span> aspect = <span class="number">2</span>; <span class="comment">// the canvas default</span></span><br><span class="line"><span class="keyword">const</span> near = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> far = <span class="number">0.1</span>;</span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> THREE.PerspectiveCamera(fov, aspect, near, far);</span><br><span class="line">camera.position.z = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 创建渲染器</span></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#c&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> renderer = <span class="keyword">new</span> THREE.WebGLRenderer(&#123; canvas &#125;);</span><br><span class="line">renderer.setSize(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="二、添加物体"><a href="#二、添加物体" class="headerlink" title="二、添加物体"></a>二、添加物体</h3><p>1、通过 BoxGeometry 对象创建一个正方体实例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> boxWidth = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> boxHeight = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> boxDepth = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> geometry = <span class="keyword">new</span> THREE.BoxGeometry(boxWidth, boxHeight, boxDepth);</span><br></pre></td></tr></table></figure><p>2、创建一个基础材质实例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123; <span class="attr">color</span>: <span class="number">0x44aa88</span> &#125;);</span><br></pre></td></tr></table></figure><p>3、创建一个网格实例，里面包含上述正方体和材质</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> cube = <span class="keyword">new</span> THREE.Mesh(geometry, material);</span><br></pre></td></tr></table></figure><p>4、把正方体添加到场景里</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">scene.add(cube);</span><br></pre></td></tr></table></figure><p>以上把一个网格模式下的正方体添加到了画布上，不难看出 three.js 的组织方式可以用下图表示</p><p><img src="/images/threejs-1cube-no-light-scene.svg" alt="three.js 组织方式"></p><h3 id="三、渲染物体"><a href="#三、渲染物体" class="headerlink" title="三、渲染物体"></a>三、渲染物体</h3><p>以上只是把物体加到了画布上，但是并没有渲染, 下面我们来看 three.js 的渲染方式</p><p>1、静态渲染，这会使物体看起来就像 2d 一样</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">renderer.render(scene, camera);</span><br></pre></td></tr></table></figure><p>2、动态渲染，使物体看起来更有 3d 效果</p><p>使用 requestAnimationFrame api 一帧一帧的渲染场景，同时在每一帧旋转一下正方体</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">  time *= <span class="number">0.001</span>; <span class="comment">// convert time to seconds</span></span><br><span class="line">  cube.rotation.x = time;</span><br><span class="line">  cube.rotation.y = time;</span><br><span class="line">  renderer.render(scene, camera);</span><br><span class="line">  requestAnimationFrame(render);</span><br><span class="line">&#125;</span><br><span class="line">requestAnimationFrame(render);</span><br></pre></td></tr></table></figure><h3 id="四、添加光线"><a href="#四、添加光线" class="headerlink" title="四、添加光线"></a>四、添加光线</h3><p>为了使正方形看起来更加有立体感，我们可以给他加点光线，在加光线之前，我们需要先把目前的材质替换成可以受光影响的材质</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const material = new THREE.MeshBasicMaterial(&#123; color: 0x44aa88 &#125;);</span></span><br><span class="line"><span class="keyword">const</span> material = <span class="keyword">new</span> THREE.MeshPhongMaterial(&#123; <span class="attr">color</span>: <span class="number">0x44aa88</span> &#125;); <span class="comment">// 这种材质会受光线影响</span></span><br></pre></td></tr></table></figure><p>替换了材质之后就可以添加光线了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> color = <span class="number">0xfffff0</span>;</span><br><span class="line"><span class="keyword">const</span> intensity = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> light = <span class="keyword">new</span> THREE.DirectionalLight(color, intensity);</span><br><span class="line">light.position.set(<span class="number">-1</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">scene.add(light);</span><br></pre></td></tr></table></figure><h3 id="五、检测浏览器是否支持-webGL"><a href="#五、检测浏览器是否支持-webGL" class="headerlink" title="五、检测浏览器是否支持 webGL"></a>五、检测浏览器是否支持 webGL</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (WEBGL.isWebGLAvailable()) &#123;</span><br><span class="line">  requestAnimationFrame(render);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> warning = WEBGL.getWebGLErrorMessage();</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;container&quot;</span>).appendChild(warning);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文档:</p><p><a href="https://threejsfundamentals.org/threejs/lessons/threejs-fundamentals.html">Three.js Fundamentals</a></p><p><a href="https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene">Creating a scene</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用正则表达式</title>
      <link href="/2020/09/14/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/09/14/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="1、-html-相关"><a href="#1、-html-相关" class="headerlink" title="1、 html 相关"></a>1、 html 相关</h3><p>(1) 去掉所有 html 标签，并保留内容: <code>/&lt;[^&gt;]+&gt;/g</code></p><p>(2) 去除 html 注释并删除其中的内容: <code>/&lt;!--[\s\S]*--&gt;/g</code></p><h3 id="2、-字符串匹配"><a href="#2、-字符串匹配" class="headerlink" title="2、 字符串匹配"></a>2、 字符串匹配</h3><p>(1) 匹配任意空白字符: <code>/\s+/</code></p><p>(2) 匹配中文字符: <code>[\u4E00-\u9FA5]+</code></p><h3 id="3、-字符截取"><a href="#3、-字符截取" class="headerlink" title="3、 字符截取"></a>3、 字符截取</h3><p>(1) 截取两个字符串之间的内容 </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strSplitBetween</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  str = str.match(<span class="regexp">/3(\S*)d/</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = strSplitBetween(<span class="string">&#x27;21312tsdasd&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test); <span class="comment">// 12tsdas</span></span><br></pre></td></tr></table></figure><p>(2) 截取某个字符串前面的内容，同上，不过拿掉了前面的字符串</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strSplitBefore</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  str = str.match(<span class="regexp">/(\S*)d/</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = strSplitBefore(<span class="string">&quot;21312tsdasd&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test); <span class="comment">// 21312tsdas</span></span><br></pre></td></tr></table></figure><p>(3) 截取某个字符串后面的内容，第一个示例拿掉后面的字符</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strSplitafter</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  str = str.match(<span class="regexp">/12(\S*)/</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = strSplitafter(<span class="string">&quot;21312tsdasd&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test);  <span class="comment">// tsdasd</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见算法思想</title>
      <link href="/2020/09/09/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/"/>
      <url>/2020/09/09/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="一、穷举"><a href="#一、穷举" class="headerlink" title="一、穷举"></a>一、穷举</h3><p>通过穷举所有的组合，得出结论，🌰:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 今有鸡兔同笼，上有三十五头，下有九十四足，问鸡兔各几何？</span></span><br><span class="line"><span class="comment"> * 解法：通过题目可以知道，鸡和兔的总数量为0-35只，</span></span><br><span class="line"><span class="comment"> * 我们可以假设鸡为0，兔子为35，用鸡的个数*2+兔子的个数*4就可以得到总的脚</span></span><br><span class="line"><span class="comment"> 的数量，如果等于94，那么便是答案，</span></span><br><span class="line"><span class="comment"> * 如果不等，则鸡的数量+1，兔子数量-1，依次类推，穷举所有情况直到得到答案</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> enumeratingAlgorithm = <span class="function">(<span class="params">head, foot</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> j;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= head; i++) &#123;</span><br><span class="line">    <span class="comment">//i代表鸡的数量</span></span><br><span class="line">    <span class="comment">//j代表兔子的数量</span></span><br><span class="line">    j = head - i;</span><br><span class="line">    <span class="keyword">if</span> (i * <span class="number">2</span> + j * <span class="number">4</span> === foot) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;鸡的个数为[ %d ]只,兔子的个数为[ %d ]只。&quot;</span>, i, j);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">enumeratingAlgorithm(<span class="number">35</span>, <span class="number">94</span>); </span><br><span class="line"><span class="comment">// 鸡的个数为[ 23 ]只,兔子的个数为[ 12 ]只。</span></span><br></pre></td></tr></table></figure><h3 id="二、递推"><a href="#二、递推" class="headerlink" title="二、递推"></a>二、递推</h3><p>通过前面的子集推出最终的结论, 🌰:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果一对两个月大的兔子以后每一个月都可以生一对小兔子，而一对新生的兔子出生两个月后才可以生</span></span><br><span class="line"><span class="comment"> 小兔子。</span></span><br><span class="line"><span class="comment"> * 那么假定一年没有产生兔子死亡事件，问一年后共有多少对兔子？</span></span><br><span class="line"><span class="comment"> * 解法：</span></span><br><span class="line"><span class="comment"> * 头两个月，兔子都是只有一对，第三个月是2对，第四个月是3对，第五个月是5对。。。</span></span><br><span class="line"><span class="comment"> * 由此可以看出。从第三个月开始，每个月的兔子对数，等于前两个月之和。</span></span><br><span class="line"><span class="comment"> * 所以第n个月的兔子对数为 fₙ = fₙ₋₂ + fₙ₋₁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>month 月份</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> recursiveDeduceAlgorithm = <span class="function">(<span class="params">month</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> f1, f2;</span><br><span class="line">  <span class="keyword">if</span> (month === <span class="number">1</span> || month === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  f1 = recursiveDeduceAlgorithm(month - <span class="number">1</span>); <span class="comment">//递归调用</span></span><br><span class="line">  f2 = recursiveDeduceAlgorithm(month - <span class="number">2</span>); <span class="comment">//递归调用</span></span><br><span class="line">  <span class="keyword">return</span> f1 + f2; <span class="comment">//根据fₙ₋₁和fₙ₋₂，推导出fₙ</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> month = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">const</span> num = recursiveDeduceAlgorithm(month);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;经过 [%d] 个月，共有 [%d] 对兔子。&quot;</span>, month, num);  </span><br><span class="line"><span class="comment">// 经过 [12] 个月，共有 [144] 对兔子。</span></span><br></pre></td></tr></table></figure><h3 id="三、递归"><a href="#三、递归" class="headerlink" title="三、递归"></a>三、递归</h3><p>函数自己调用自己，直到满足基准条件方停止, 🌰:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归算法思想</span></span><br><span class="line"><span class="comment"> * 求阶乘(factorial)问题</span></span><br><span class="line"><span class="comment"> * n的阶乘为：n! = n * (n-1) * (n-2) * ······ * 2 * 1</span></span><br><span class="line"><span class="comment"> * 解法，每一项都等于前一项-1，结果也等于之前的结果*前一项-1</span></span><br><span class="line"><span class="comment"> * 我们这里用int，要注意int的取值范围，不要超过int的上限。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>n 求n的阶乘</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return </span>n的阶乘</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> recursiveAlgorithm = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n * recursiveAlgorithm(n - <span class="number">1</span>); <span class="comment">//递归调用</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> n = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> result = recursiveAlgorithm(n);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;%d 的阶乘为： %d&quot;</span>, n, result); <span class="comment">// 8 的阶乘为： 40320</span></span><br></pre></td></tr></table></figure><h3 id="四、分治"><a href="#四、分治" class="headerlink" title="四、分治"></a>四、分治</h3><p>把大问题分解为多个子问题，根据各子问题的解得出大问题的解, 🌰:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序(分治算法思想)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMedianSortedArrays = <span class="function"><span class="keyword">function</span> (<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> merged = [];</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> [lenA, lenB] = [nums1.length, nums2.length];</span><br><span class="line">  <span class="keyword">while</span> (i &lt; lenA &amp;&amp; j &lt; lenB) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">      merged.push(nums1[i]);</span><br><span class="line">      i++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      merged.push(nums2[j]);</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; lenA) &#123;</span><br><span class="line">    merged.push(nums1[i]);</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (j &lt; lenB) &#123;</span><br><span class="line">    merged.push(nums2[j]);</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = merged;</span><br><span class="line">  <span class="keyword">return</span> length % <span class="number">2</span> === <span class="number">1</span></span><br><span class="line">    ? merged[<span class="built_in">Math</span>.floor(length / <span class="number">2</span>)]</span><br><span class="line">    : (merged[length / <span class="number">2</span>] + merged[length / <span class="number">2</span> - <span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = [</span><br><span class="line">  [[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>]],</span><br><span class="line">  [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">test.forEach(<span class="function">(<span class="params">ele</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = findMedianSortedArrays(ele[<span class="number">0</span>], ele[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="五、概率"><a href="#五、概率" class="headerlink" title="五、概率"></a>五、概率</h3><p>概率算法依照概率统计的思路来求解问题, 求出的是近似解，常见概率算法有: </p><p>(1) 数值概率算法</p><p>(2) 蒙特卡罗(Monte Carlo)算法</p><p>(3) 拉斯维加斯(Las Vegas)算法</p><p>(4) 舍伍德(Sherwood)算法</p><p>🌰</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 概率算法思想</span></span><br><span class="line"><span class="comment"> * 蒙特卡罗算法</span></span><br><span class="line"><span class="comment"> * 蒙特卡罗算法计算圆周率</span></span><br><span class="line"><span class="comment"> * 一个半径为1的圆，（如图6-23）阴影部分面积，也就是四分之一的圆的面积</span></span><br><span class="line"><span class="comment"> * 计算公式，s₁=s/4=(π*r²)/4=π/4</span></span><br><span class="line"><span class="comment"> * 而图中的正方形面积为S₂=r²=1；</span></span><br><span class="line"><span class="comment"> * 按照图中建议一个坐标系，均匀的向正方形内撒点，那么落入阴影部分的点数比上全部的点数应该就是</span></span><br><span class="line"><span class="comment"> s₁/S₂=π/4</span></span><br><span class="line"><span class="comment"> * 根据概率统计的规律，只要撒点足够多，那么将得到近似的结果。这就是蒙特卡罗算法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>n 撒点数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> monteCarloPI = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> PI; <span class="comment">//圆周率π</span></span><br><span class="line">  <span class="keyword">let</span> valid = <span class="number">0</span>; <span class="comment">//有效点数，也就是落入阴影部分的点数</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">Math</span>.random(); <span class="comment">//产生0~1之间的一个随机数</span></span><br><span class="line">    <span class="keyword">let</span> y = <span class="built_in">Math</span>.random();</span><br><span class="line">    <span class="keyword">if</span> (x * x + y * y &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">//点在有效区域内，根据图，有效点距离原点的距离小于等于1，也就是x²+y²&lt;=1</span></span><br><span class="line">      valid++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  PI = (<span class="number">4.0</span> * valid) / n;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;撒点数：%d,有效点数%d,圆周率π ≈ %f\n&quot;</span>, n, valid, PI);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">500000</span>; i &lt; <span class="number">800000</span>; i += <span class="number">50000</span>) &#123;</span><br><span class="line">  monteCarloPI(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 撒点数：500000,有效点数392676,圆周率π ≈ 3.141408</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 撒点数：550000,有效点数432507,圆周率π ≈ 3.1455054545454546</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 撒点数：600000,有效点数471223,圆周率π ≈ 3.1414866666666668</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 撒点数：650000,有效点数510384,圆周率π ≈ 3.1408246153846155</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 撒点数：700000,有效点数549614,圆周率π ≈ 3.1406514285714286</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 撒点数：750000,有效点数588973,圆周率π ≈ 3.141189333333333</span></span><br></pre></td></tr></table></figure><p>参考文章:</p><p><a href="https://zhuanlan.zhihu.com/p/36903717">常用算法指南(一)基本算法思想</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列文章 —— 文本处理</title>
      <link href="/2020/09/04/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
      <url>/2020/09/04/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一、font-size"><a href="#一、font-size" class="headerlink" title="一、font-size"></a>一、font-size</h3><p>chrom 默认有字体限制最小是 12px，也就是小于 12 px 的字号都相当于 12px，但是 font-size: 0 例外，还是会保持为 0，利用这个特性可以实现可访问性隐藏</p><h3 id="二、font-family"><a href="#二、font-family" class="headerlink" title="二、font-family"></a>二、font-family</h3><p>1、属性值可以是字体家族也可以是字体名，字体名需要写在字体家族前面，否则在 chrom 下只有字体家族会生效</p><p>2、字体名有空格的话，需要用引号包起来，多个字体名用逗号隔开</p><p>3、<strong>字体家族</strong></p><p>(1) <strong>衬线字体 vs 非衬线字体</strong></p><ul><li><p>衬线字体(serif), 笔画开始、结束的地方有额外装饰而且笔画的粗细会有所不同，比如中文的宋体，英文的 Times New Roman、Georgia </p></li><li><p>非衬线字体(sans-serif), 没有额外的装饰，而且笔画的粗细差不多, 比如微软雅黑</p></li></ul><p>(2) <strong>等宽字体(monospace)</strong></p><ul><li><p>每一个字符宽度一样</p></li><li><p>应用</p><ul><li><p>代码呈现</p></li><li><p>图形绘制</p></li><li><p>与 ch 配合，做一个一个出现的动效</p></li></ul></li></ul><p>4、<strong>Windows 中常见内置中文字体和对应英文名称</strong></p><p><img src="/images/win-font.png" alt="Windows 中常见内置中文字体和对应英文名称"></p><p>5、<strong>OS X 常见内置中文字体和对应英文名称</strong></p><p><img src="/images/osx-font.png" alt="OS X 常见内置中文字体和对应英文名称"></p><h3 id="三、font-weight"><a href="#三、font-weight" class="headerlink" title="三、font-weight"></a>三、font-weight</h3><p>数字关键字, 100 - 900, 100为一个档，400 对应 normal, 700对应 bold，其他数值根据字体支持，才有不同的变化</p><h3 id="四、word-break"><a href="#四、word-break" class="headerlink" title="四、word-break"></a>四、word-break</h3><p>单词拆分换行控制，主要属性值有下面几个：</p><p>(1) normal: 使用默认的换行规则</p><p>(2) break-all: 允许任意非 CJK(Chinese/Japanese/Korean)文本间的单词断行</p><p>(3) keep-all: 不允许 CJK 文本中的单词换行，只能在半角空格或连字符处换行, 非 CJK 文本的行为和 normal 一致</p><h3 id="五、word-wrap"><a href="#五、word-wrap" class="headerlink" title="五、word-wrap"></a>五、word-wrap</h3><p>单词换行控制, 主要属性如下:</p><p>(1) normal: 正常的换行规则</p><p>(2) break-word: 一行单词中实在没有其他靠谱的换行点的时候换行</p><h3 id="六、white-space"><a href="#六、white-space" class="headerlink" title="六、white-space"></a>六、white-space</h3><p>控制空白字符的显示和自动换行机制, 主要属性值如下:</p><p>(1) normal: 默认值， 合并空白字符和换行符，会自动换行</p><p>(2) pre: 空白字符和换行符保持原状, 不会自动换行</p><p>(3) nowrap: 空格被合并，换行符无效，不会自动换行</p><p>(4) pre-wrap: 保留空格和换行符，且可以自动换行</p><p>(5) pre-line: 合并空白字符，保留换行符，会自动换行</p><h3 id="七、伪类-vs-伪元素"><a href="#七、伪类-vs-伪元素" class="headerlink" title="七、伪类 vs 伪元素"></a>七、伪类 vs 伪元素</h3><p>伪元素前接 ::, 伪类前接 :</p><p>参考文章:</p><p>《CSS 世界》</p><p><a href="https://juejin.im/post/6844903667863126030">彻底搞懂word-break、word-wrap、white-space</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPM Package.json 字段列表(包括非官方字段)</title>
      <link href="/2020/09/02/package-json%E5%AD%97%E6%AE%B5%E5%88%97%E8%A1%A8/"/>
      <url>/2020/09/02/package-json%E5%AD%97%E6%AE%B5%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>得空看看一些源码，发现 Package.json 文档里有些字段是不常见的，自然也不知道配置的是什么，查<a href="https://docs.npmjs.com/files/package.json.html">官方文档</a>, 发现有些找不到，看到一篇不错的英文文档，翻译一下，以后好查看。</p><h3 id="一、基本字段"><a href="#一、基本字段" class="headerlink" title="一、基本字段"></a>一、基本字段</h3><h4 id="1、name"><a href="#1、name" class="headerlink" title="1、name"></a>1、name</h4><p>自如其名，不多加解释，这个字段的使用需要注意一下几个要点</p><p>(1) 若项目是要作为包发布到 npm 上的话，需要是独一无二的名字</p><p>(2) 若要发布的包隶属于某个机构或者私有仓库，需要在前面加上@组织名称，比如这样, @ebag/exp-ui</p><p>(3) 名称总字符长度不能超过 214</p><p>(4) 不能以大写字母、斜划线或者点开头</p><p>(5) 只能使用 url 安全字符，因为我们的名称可能会被别人在终端使用，比如: <code>npm i lyp-pagination</code> 或者 ‘<a href="https://www.npmjs.com/package/lyp-pagination">https://www.npmjs.com/package/lyp-pagination</a>‘</p><h4 id="2、version"><a href="#2、version" class="headerlink" title="2、version"></a>2、version</h4><p>version 跟 name 组成已发布包的每个版本唯一ID, 这就意味着，我们每发布一个版本就需要更新一下版本号。此外，版本号应该有一个固定的可以让 node-semver 解析的结构，比如我们常见的 npm 包版本号都是由三个被点分隔的数字组成，比如这样: 1.1.2, 有些包可能后面还接一个可选的标签，比如这样: 1.1.2-alphal。这路需要注意，不应该给版本降级，特别是当包已经被广泛使用的时候。</p><h3 id="二、信息类字段"><a href="#二、信息类字段" class="headerlink" title="二、信息类字段"></a>二、信息类字段</h3><h4 id="1、description"><a href="#1、description" class="headerlink" title="1、description"></a>1、description</h4><p>一些关于包的描述信息，这些描述信息会被显示在搜索包的时候，显示在列表里或者其他地方，让用户清楚的知道它是用来干嘛的, 不过这只是一些项目的简短描述信息，更具体的描述应该写在 README.md 文件里。</p><h4 id="2、keywords"><a href="#2、keywords" class="headerlink" title="2、keywords"></a>2、keywords</h4><p>keywords 可以提升包的 SEO, 这个字符串数组里的关键字起的好的话，可以在提升包的搜索曝光率。</p><h4 id="3、license"><a href="#3、license" class="headerlink" title="3、license"></a>3、license</h4><p>license 是一个简单但是却非常重要的字段，有了这个字段，用户可以清楚的知道包的分享遵循的条款，这个字段对应字符串值应该是 SPDX 认证的 license，比如，MIT, GPL-3.0 等。若不知道哪些 license 适合当前包，可以查看<a href="https://tldrlegal.com/">这里</a>。写了这个字段之后，最好在项目目录加上 LICENSE.md file 文件。</p><h4 id="4、homepage"><a href="#4、homepage" class="headerlink" title="4、homepage"></a>4、homepage</h4><p>若包有一个主页，可以把链接放在这里，这个链接会被放在 npm 页面和很多其他地方。</p><h4 id="5、repository"><a href="#5、repository" class="headerlink" title="5、repository"></a>5、repository</h4><p>源码地址，字符穿类型，如果是开源的项目，可以加上 git clone 地址</p><h4 id="6、bugs"><a href="#6、bugs" class="headerlink" title="6、bugs"></a>6、bugs</h4><p>issues 页面地址</p><h4 id="7、author"><a href="#7、author" class="headerlink" title="7、author"></a>7、author</h4><p>author 的值有两个类型，Object 和 String, Object 类型适用于有多个开发者的项目，包括 name, email 和 url 三个属性，其中 url 一般是该作者的个人网站,这些属性都是可选的。String 类型的值一般用于单个开发者的项目，写法一般是这样的 <code>&quot;name &lt;email&gt; (url)&quot;</code></p><h4 id="8、contributors"><a href="#8、contributors" class="headerlink" title="8、contributors"></a>8、contributors</h4><p>contributors 字段类似 author 字段，但是 contributors 的值类型是对象数组或者字符串。该字段另一个有趣的点是再项目根目录创建 AUTHORS.md 文件，逐行写上贡献者信息，这里面的信息会作为 contributors 的默认值。</p><h3 id="三、文件类字段"><a href="#三、文件类字段" class="headerlink" title="三、文件类字段"></a>三、文件类字段</h3><h4 id="1、files"><a href="#1、files" class="headerlink" title="1、files"></a>1、files</h4><p>files 字段值的类型是字符串数组,数组里面的字符串填写需要发布到 NPM 的文件名。当然也可以在根目录下创建 .npmignore 文件，把不需要上传到 NPM 的文件名填进去。不过有些文件或者目录比如, README.md 或者 LICENSE.md 是默认就会被打包。也有默认不会被打包的目录或者文件，比如, node_modules 或者 .git。</p><h4 id="2、main"><a href="#2、main" class="headerlink" title="2、main"></a>2、main</h4><p>main 字段的值是入口文件,即使不包括在 files 字段里，也会被打包。</p><h4 id="3、browser"><a href="#3、browser" class="headerlink" title="3、browser"></a>3、browser</h4><p>当需要打包多个版本时，设置 browser 字段，可以根据浏览器的不同环境变量，使用不同的版本</p><h4 id="4、unpkg"><a href="#4、unpkg" class="headerlink" title="4、unpkg"></a>4、unpkg</h4><p>提供一个给 UNPKG, 用于支持 CDN 服务，有点类似 browser </p><h4 id="5、module"><a href="#5、module" class="headerlink" title="5、module"></a>5、module</h4><p>若项目中有封装模块，可以设置 module, 也就是设置一个模块的入口, 该字段目前比较前卫</p><h4 id="6、typings-types"><a href="#6、typings-types" class="headerlink" title="6、typings/types"></a>6、typings/types</h4><p>TypeScript 解析文件的入口, 该文件会被发布到 NPM, 并且可以被下载，为用户提供更加好的 IDE 支持。</p><h4 id="7、bin"><a href="#7、bin" class="headerlink" title="7、bin"></a>7、bin</h4><p>若项目中包含一些可执行文件，可以把文件名在 bin 字段下, 当只有一个 Node.js 文件入口时, 可以是 string 值，当有多个的时候,可以用键值对的形式写。不过要执行这些文件，需要在文件头部加上 <code>#!/usr/bin/env node</code></p><h4 id="8、man"><a href="#8、man" class="headerlink" title="8、man"></a>8、man</h4><p>若需要提供命令行输出文档，可以用 man 字段指明,当只有一个文件时, 可以是一个字符串值, 当有多个文件时, 可以是一个字符串数组。</p><h3 id="四、任务类"><a href="#四、任务类" class="headerlink" title="四、任务类"></a>四、任务类</h3><h4 id="1、scripts"><a href="#1、scripts" class="headerlink" title="1、scripts"></a>1、scripts</h4><p>该字段应该都熟悉了，存放一些可执行脚本文件的对象</p><h4 id="2、config"><a href="#2、config" class="headerlink" title="2、config"></a>2、config</h4><p>设置一些用于可执行脚本的配置,</p><h3 id="五、依赖类"><a href="#五、依赖类" class="headerlink" title="五、依赖类"></a>五、依赖类</h3><h4 id="1、dependencies"><a href="#1、dependencies" class="headerlink" title="1、dependencies"></a>1、dependencies</h4><p>用于管理项目所需依赖的对象, npm install / yarn  会默认下载这个字段下的所有依赖</p><h4 id="2、devDependencies"><a href="#2、devDependencies" class="headerlink" title="2、devDependencies"></a>2、devDependencies</h4><p>通过 —save-dev or —dev 安装的依赖放在 devDependencies 目录下，这部分依赖在开发阶段用于框架、模块测试或者编译代码，所以在使用编译后的包时，不会下载这部分依赖，比如 vue 的所有依赖都是放在该字段下的。</p><h4 id="3、peerDependencies"><a href="#3、peerDependencies" class="headerlink" title="3、peerDependencies"></a>3、peerDependencies</h4><p>NPM v3开始，peerDependencies 字段需要自己配置，用于指定一个兼容项目的依赖，该字段的值是一个对象，对象的 key 是兼容包的名称，对象的值是该包的指定版本。</p><h4 id="4、optionalDependencies"><a href="#4、optionalDependencies" class="headerlink" title="4、optionalDependencies"></a>4、optionalDependencies</h4><p>optionalDependencies 字段用于设置一些项目中的可选包，这些包不一定要下载，但是却很有用，设置在该字段下后，对应的包只会在需要的时候被下载，比如  fsevents 模块，尽在 mac 下有效。</p><h4 id="5、bundledDependencies"><a href="#5、bundledDependencies" class="headerlink" title="5、bundledDependencies"></a>5、bundledDependencies</h4><p>bundledDependencies 字段是一个字符串数组，数组元素是需要跟最终包一起打包出去的依赖名称。</p><h3 id="六、平台类"><a href="#六、平台类" class="headerlink" title="六、平台类"></a>六、平台类</h3><h4 id="1、engines"><a href="#1、engines" class="headerlink" title="1、engines"></a>1、engines</h4><p>engines 字段可以指定编译的运行时和库，是一个对象类型，该对象的 key 是运行时或者库的名称，值是对应的具体版本。当打包需要用到一些比较新的特性时，可以用到这个字段，字段配置的环境通常是全局安装好的。</p><h4 id="2、os"><a href="#2、os" class="headerlink" title="2、os"></a>2、os</h4><p>os 字段可以指明操作系统类别，是字符串数组类型。</p><h4 id="3、cpu"><a href="#3、cpu" class="headerlink" title="3、cpu"></a>3、cpu</h4><p>指明 cpu 类型，也是字符串数组</p><h3 id="七、发布类"><a href="#七、发布类" class="headerlink" title="七、发布类"></a>七、发布类</h3><h4 id="1、private"><a href="#1、private" class="headerlink" title="1、private"></a>1、private</h4><p>private 设置为 true，可以保证包不会被发布到 NPM，即使手误了点了 publish，也不会被发布</p><h4 id="2、publishConfig"><a href="#2、publishConfig" class="headerlink" title="2、publishConfig"></a>2、publishConfig</h4><p>设置 NPM config,会覆盖掉原有设置, 是一个对象类型。</p><p>除此之外还可能会针对特定场景使用一些字段，比如，UNPKG, Babel, Prettier 等，这些对应的字段通常会在搭配他们使用的工具的文档上有写，这里就不一一列举了。不过，建议把这些其他配置独立出去，便于维护。</p><p>参考文章:</p><p><a href="https://areknawo.com/whats-what-package-json-cheatsheet/">Package.json cheatsheet!</a></p><p><a href="https://docs.npmjs.com/files/package.json">npm-package.json-Specifics of npm’s package.json handling</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 支持数学公式</title>
      <link href="/2020/09/01/hexo%E6%94%AF%E6%8C%81%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <url>/2020/09/01/hexo%E6%94%AF%E6%8C%81%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、版本"><a href="#一、版本" class="headerlink" title="一、版本"></a>一、版本</h3><p>hexo: 3.0.0</p><p>theme: maupassant</p><h3 id="二、快速开始"><a href="#二、快速开始" class="headerlink" title="二、快速开始"></a>二、快速开始</h3><h4 id="1、安装插件"><a href="#1、安装插件" class="headerlink" title="1、安装插件"></a>1、安装插件</h4><p>(1) 升级 hexo 到 3.0+，因为 hexo-math 插件只支持高版本</p><p>(2) 安装 hexo-math 插件</p><h4 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h4><p>根目录的 _config.yml 配置文件加一行 <code>mathjax: true</code>, 在需要用到插件公式的文档头部加上 <code>mathjax: true</code>, 试着编辑一条公式，比如: <code>log_2n</code> ，发现没反应，还编译报错了，解决这两个问题方法如下</p><p>(1) 公式生效前提: 在公式的前后加上$$符号</p><p>(2) 编译出错: 进入node_modules\kramed\lib\rules\inline.js，修改文档的 escape 和 em 字段，修改前后如下</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改前：</span></span><br><span class="line">escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span><br><span class="line"><span class="comment">// 修改后：</span></span><br><span class="line">escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改前：</span></span><br><span class="line">em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line"><span class="comment">// 修改后：</span></span><br><span class="line">em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure><p>此外由于升级之后配置有所变化(升级了相应主题)，还报了一个 minivaline 的错，在配置文件中加上相应配置就好，比如这样</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">minivaline:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间复杂度 vs 空间复杂度</title>
      <link href="/2020/09/01/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6vs%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2020/09/01/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6vs%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="一、时间复杂度"><a href="#一、时间复杂度" class="headerlink" title="一、时间复杂度"></a>一、时间复杂度</h3><h4 id="1、是什么"><a href="#1、是什么" class="headerlink" title="1、是什么"></a>1、是什么</h4><p>一般情况下，算法中基本操作重复执行的次数是问题规模 n 的某个函数，用 T(n) 表示，若有某个辅助函数 f(n),使得当 n 趋近于无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称 f(n) 是 T(n) 的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度，时间复杂度反映了程序执行时间随输入规模增长而增长的量级，在很大程度上能很好反映出算法的优劣与否。</p><h4 id="2、怎么算"><a href="#2、怎么算" class="headerlink" title="2、怎么算"></a>2、怎么算</h4><p>(1) 找出算法中的基本语句，一般为最内层循环的循环体</p><p>(2) 计算基本语句的执行次数的数量级, 即求出随着 n 的增长，呈现的规律公式</p><p>(3) 用「 大O 符号表示法 」，表示时间复杂度</p><h4 id="3、常见时间复杂度"><a href="#3、常见时间复杂度" class="headerlink" title="3、常见时间复杂度"></a>3、常见时间复杂度</h4><ul><li><p>常数阶 O(1),代码在执行的时候，它消耗的时间并不随着某个变量的增长而增长, 比如下面的语句:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> j = <span class="number">2</span>;</span><br><span class="line">++i;</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">const</span> m = i + j;</span><br></pre></td></tr></table></figure></li><li><p>对数阶 O(<script type="math/tex">log_2n</script>), </p></li><li><p>线性阶 O(n), 消耗的时间是随着变量 n 的变化而呈线性变化, 比如一层 for 循环</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>; i&lt;=n; ++i)&#123;</span><br><span class="line">  j = i;</span><br><span class="line">  j++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线性对数阶 O(<script type="math/tex">nlog_2n</script>)</p></li><li><p>指数阶：平方阶O(<script type="math/tex">n^2</script>)</p></li><li><p>立方阶 O(<script type="math/tex">n^3</script>),…， k次方阶O(<script type="math/tex">n^k</script>)</p></li><li><p>指数阶 O(<script type="math/tex">2^n</script>)</p></li><li><p>阶乘 Ο(n!)</p></li></ul><p>随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低</p><h3 id="二、空间复杂度"><a href="#二、空间复杂度" class="headerlink" title="二、空间复杂度"></a>二、空间复杂度</h3><p>1、是什么</p><p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，用 S(n) 来定义</p><p>3、常见空间复杂度</p><p>O(1)、O(n)、O(n²)</p><p>参考文献:</p><p><a href="https://blog.csdn.net/zolalad/article/details/11848739">算法的时间复杂度和空间复杂度-总结</a><br><a href="https://zhuanlan.zhihu.com/p/50479555">算法的时间与空间复杂度（一看就懂）</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 小技巧</title>
      <link href="/2020/08/31/CSS-%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/08/31/CSS-%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="一、文本末尾添加省略号"><a href="#一、文本末尾添加省略号" class="headerlink" title="一、文本末尾添加省略号"></a>一、文本末尾添加省略号</h3><p>有时候需要控制文本不折行, 并且以 “….”, 代替超出的文本部分,也就是相当于 more 功能, 用 css 实现方式如下:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 单行文本 */</span></span><br><span class="line"><span class="selector-class">.noWrap</span>&#123;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 多行文本 */</span></span><br><span class="line"><span class="selector-class">.noWrap</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: -o-ellipsis-lastline;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">line-clamp</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上 css 代码中主要用到了 csss3 的一些特性, 除了以上代码,注意给个宽度, 不然不知道什么时候需要用”…”代替文本, 更多相关内容可以查看 w3c 文档。</p><h3 id="二、导航栏位置固定"><a href="#二、导航栏位置固定" class="headerlink" title="二、导航栏位置固定"></a>二、导航栏位置固定</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;</span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span><br><span class="line"><span class="selector-tag">z-index</span>: 50;</span><br></pre></td></tr></table></figure><p>fixed 定位, 固定元素位置, 超出部分隐藏, 给背景颜色是因为内容是往上滑的,会跟导航栏有重叠部分, 设置 z-index 也是为了处理内容重叠的问题。</p><h3 id="三、隐藏浏览器默认滚动条："><a href="#三、隐藏浏览器默认滚动条：" class="headerlink" title="三、隐藏浏览器默认滚动条："></a>三、隐藏浏览器默认滚动条：</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、鼠标移动到某个元素，显示列表，重点是列表跟该元素同级，若不同级就比较烧脑了，就算用-js-也不好控制"><a href="#四、鼠标移动到某个元素，显示列表，重点是列表跟该元素同级，若不同级就比较烧脑了，就算用-js-也不好控制" class="headerlink" title="四、鼠标移动到某个元素，显示列表，重点是列表跟该元素同级，若不同级就比较烧脑了，就算用 js 也不好控制"></a>四、鼠标移动到某个元素，显示列表，重点是列表跟该元素同级，若不同级就比较烧脑了，就算用 js 也不好控制</h3><p>结构：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>鼠标移动到我，显示列表<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>样式：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">wrap</span> &#123;</span><br><span class="line">  ul &#123;</span><br><span class="line">    <span class="selector-tag">list-style</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">none</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    ul &#123;</span><br><span class="line">      <span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、Android-端阴影"><a href="#五、Android-端阴影" class="headerlink" title="五、Android 端阴影"></a>五、Android 端阴影</h3><p>Android 端，img 和 button，点击之后出现一块阴影区域，一开始以为是 user-select 作怪，设置为 none 无果，后来发现是 curser：pointer 的锅，在 Android 端 cursor 设置为 none，即可解决问题</p><h3 id="六、导航条样式操作"><a href="#六、导航条样式操作" class="headerlink" title="六、导航条样式操作"></a>六、导航条样式操作</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* The emerging W3C standard</span></span><br><span class="line"><span class="comment">that is currently Firefox-only */</span></span><br><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">scrollbar-width</span>: thin;</span><br><span class="line">  <span class="attribute">scrollbar-color</span>: blue orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Works on Chrome/Edge/Safari */</span></span><br><span class="line">*<span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line">*<span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line">*<span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Handle on hover */</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-thumb</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">14</span>, <span class="number">77</span>, <span class="number">136</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七、图片自适应："><a href="#七、图片自适应：" class="headerlink" title="七、图片自适应："></a>七、图片自适应：</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八、网页适应大屏幕和小屏幕的方案："><a href="#八、网页适应大屏幕和小屏幕的方案：" class="headerlink" title="八、网页适应大屏幕和小屏幕的方案："></a>八、网页适应大屏幕和小屏幕的方案：</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1400px</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">1200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="九、利用-max-height-实现展开、收起效果"><a href="#九、利用-max-height-实现展开、收起效果" class="headerlink" title="九、利用 max-height 实现展开、收起效果:"></a>九、利用 max-height 实现展开、收起效果:</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.element</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">700px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: ease <span class="number">0.25s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十、利用-content-属性设置序号"><a href="#十、利用-content-属性设置序号" class="headerlink" title="十、利用 content 属性设置序号"></a>十、利用 content 属性设置序号</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.reset</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">counter-reset</span>: wangxiaoer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.counter</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counters</span>(wangxiaoer, <span class="string">&quot;-&quot;</span>) <span class="string">&quot;. &quot;</span>;</span><br><span class="line">  <span class="attribute">counter-increment</span>: wangxiaoer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十一、管道符号："><a href="#十一、管道符号：" class="headerlink" title="十一、管道符号："></a>十一、管道符号：</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> + <span class="selector-tag">a</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">3px</span> <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">1px</span> solid gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十二、flex-布局最后一行左对齐"><a href="#十二、flex-布局最后一行左对齐" class="headerlink" title="十二、flex 布局最后一行左对齐"></a>十二、flex 布局最后一行左对齐</h3><p>用 flex 布局一时爽，但是里面还是有些坑需要避一避的。比如说想要有间隔的布局，但是用 space-around 和 space-between 都会有一个瑕疵，那就是，最后一行并不是左对齐的，有人会说用 aligh-content，交叉轴对其啊，但是 jusfy-content 需要 flex-start 才能做到这种效果，这样子的话，就没有居中效果了，因此，只能另辟蹊径。我采用的方法比较笨拙，就是在最后一个块级元素的后面，加多两个空的等宽的块级元素，高度设置为 0，完美实现想要的效果。</p><h3 id="十三、文本模糊效果"><a href="#十三、文本模糊效果" class="headerlink" title="十三、文本模糊效果"></a>十三、文本模糊效果</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.blurry</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十四、自定义文本选中样式"><a href="#十四、自定义文本选中样式" class="headerlink" title="十四、自定义文本选中样式"></a>十四、自定义文本选中样式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.element</span><span class="selector-pseudo">::-moz-selection</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十五、页面右上角贴纸"><a href="#十五、页面右上角贴纸" class="headerlink" title="十五、页面右上角贴纸"></a>十五、页面右上角贴纸</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ribbon</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">226</span>, <span class="number">160</span>, <span class="number">17</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgb</span>(<span class="number">82</span>, <span class="number">72</span>, <span class="number">72</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ribbon</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#faa</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font</span>: bold <span class="number">81.25%</span> <span class="string">&quot;Helvetica Neue&quot;</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十六、input-placeholder-样式修改"><a href="#十六、input-placeholder-样式修改" class="headerlink" title="十六、input placeholder 样式修改"></a>十六、input placeholder 样式修改</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>: orange;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#f9f7f7</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-tag">input</span><span class="selector-pseudo">::-moz-input-placeholder</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>: orange;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#f9f7f7</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-tag">input</span><span class="selector-pseudo">::-ms-input-placeholder</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>: orange;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#f9f7f7</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="十七、移除常用标签默认的-margin-和-padding"><a href="#十七、移除常用标签默认的-margin-和-padding" class="headerlink" title="十七、移除常用标签默认的 margin 和 padding"></a>十七、移除常用标签默认的 margin 和 padding</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">dl</span>,</span><br><span class="line"><span class="selector-tag">dd</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">figure</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">form</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十八、部分元素继承父元素样式并取消-outline"><a href="#十八、部分元素继承父元素样式并取消-outline" class="headerlink" title="十八、部分元素继承父元素样式并取消 outline"></a>十八、部分元素继承父元素样式并取消 outline</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">select</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">option</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">optgroup</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: inherit;</span><br><span class="line">  <span class="attribute">font-size</span>: inherit;</span><br><span class="line">  <span class="attribute">font-weight</span>: inherit;</span><br><span class="line">  <span class="attribute">font-style</span>: inherit;</span><br><span class="line">  <span class="attribute">line-height</span>: inherit;</span><br><span class="line">  <span class="attribute">color</span>: inherit;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列文章 —— 层叠</title>
      <link href="/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-%E5%B1%82%E5%8F%A0/"/>
      <url>/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-%E5%B1%82%E5%8F%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、层叠上下文"><a href="#一、层叠上下文" class="headerlink" title="一、层叠上下文"></a>一、层叠上下文</h3><p>1、<strong>特性</strong></p><p>(1) 层叠上下文的层叠水平要比普通元素高</p><p>(2) 层叠上下文可以阻断元素的混合模式</p><p>(3) 层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的“层叠上下文”</p><p>(4) 每个层叠上下文和兄弟元素独立，也就是说，当进行层叠变化或渲染的时候，只需要考虑后代元素</p><p>(5) 每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中</p><p>2、<strong>创建</strong></p><p>(1) 页面根元素默认具有层叠上下文，称为根层叠上下文</p><p>(2) z-index 值为数值的定位元素</p><p>(3) 其他 CSS3 属性</p><ul><li><p>元素为 flex 布局元素(父元素 display:flex|inline-flex)，同时 z-index值不是 auto</p></li><li><p>元素的 opacity 值不是 1</p></li><li><p>元素的 transform 值不是 none</p></li><li><p>元素 mix-blend-mode 值不是 normal</p></li><li><p>元素的 filter 值不是 none</p></li><li><p>元素的 isolation 值是 isolate</p></li><li><p>元素的 will-change 属性值为上面 2~6 的任意一个</p></li><li><p>元素的-webkit-overflow-scrolling 设为 touch</p></li></ul><h3 id="二、层叠顺序"><a href="#二、层叠顺序" class="headerlink" title="二、层叠顺序"></a>二、层叠顺序</h3><p>1、若层叠上下文元素不依赖 z-index 数值，则其层叠顺序是 z-index:auto，可看成 z:index:0 级别</p><p>2、若层叠上下文元素依赖 z-index 数值，则其层叠顺序由 z-index 值决定</p><p>3、兄弟层叠顺序一样，后者会覆盖前者，在上面</p><p>4、<strong>z-index 负值</strong></p><p>(1) 层叠顺序在层叠上下文元素的背景色之上，块状元素之下</p><p>(2) <strong>应用</strong></p><ul><li><p>可访问性隐藏</p></li><li><p>IE8 下的多背景模拟</p></li><li><p>定位在元素的后面 </p></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列文章 —— 流的破坏与保护</title>
      <link href="/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-%E6%B5%81%E7%9A%84%E7%A0%B4%E5%9D%8F%E4%B8%8E%E4%BF%9D%E6%8A%A4/"/>
      <url>/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-%E6%B5%81%E7%9A%84%E7%A0%B4%E5%9D%8F%E4%B8%8E%E4%BF%9D%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="一、float"><a href="#一、float" class="headerlink" title="一、float"></a>一、float</h3><p>1、<strong>本质:</strong> 实现文字环绕效果</p><p>2、<strong>作用机制</strong></p><p>(1) 破坏文档流</p><p>(2) 让父元素的高度塌陷</p><p>(3) 行框盒子区域限制</p><p>3、<strong>特性</strong></p><p>(1) 包裹性</p><p>(2) 块状化并格式化上下文</p><p>(3) 破坏文档流</p><p>(4) 没有任何 margin 合并</p><p>4、<strong>流体布局</strong></p><p>(1) 核心: 一侧定宽一侧自适应</p><p>(2) 问题： 纯浮动布局容错性差，容易出现比较严重的布局问题</p><h3 id="二、clear"><a href="#二、clear" class="headerlink" title="二、clear"></a>二、clear</h3><p>1、<strong>目的</strong>：处理 float 属性带来的高度塌陷等问题</p><p>2、<strong>作用本质</strong>: 让自己不和 float 元素在一行显示</p><p>3、<strong>值</strong></p><p>(1) none:默认值，左右浮动</p><p>(2) left: 去除左侧浮动</p><p>(3) right:去除右侧浮动</p><p>(4) both: 去除两遍浮动</p><p>4、<strong>tips</strong></p><p>(1) 块级元素才有效</p><p>(2) 借助伪元素清除浮动，需要配合 display 一起使用</p><p>(3) 只能在一定程度上消除浮动的影响</p><h3 id="三、BFC-block-formatting-context-块级格式化上下文"><a href="#三、BFC-block-formatting-context-块级格式化上下文" class="headerlink" title="三、BFC(block formatting context), 块级格式化上下文"></a>三、BFC(block formatting context), 块级格式化上下文</h3><p>1、<strong>作用</strong></p><p>(1) BFC 元素，不发生 margin 重叠</p><p>(2) 可以用来清除浮动的影响</p><p>2、<strong>触发场景</strong></p><p>(1) html 根元素</p><p>(2) float 的值不为 none;</p><p>(3) overflow 的值为 auto、scroll 或 hidden;</p><p>(4) display 的值为 table-cell、table-caption 和 inline-block 中的任何一个;</p><p>(5) position 的值不为 relative 和 static。</p><p>3、<strong>流体布局</strong></p><p>(1) 自适应内容由于封闭而更健壮，容错性更强</p><p>(2) 自适应内容自动填满浮动以外区域，无须关心浮动元素宽度，可以整站大规模应用</p><h3 id="四、overflow"><a href="#四、overflow" class="headerlink" title="四、overflow"></a>四、overflow</h3><p>1、<strong>支持的属性</strong></p><p>(1) visible:默认值</p><p>(2) hidden:剪裁</p><ul><li><p>剪裁界线是 border box 内边缘</p></li><li><p>可以用于清除浮动</p></li></ul><p>(3) scroll:滚动条区域一直在</p><p>(4) auto:不足以滚动时没有滚动条，可以滚动时滚动条出现</p><p>2、<strong>tips</strong></p><p>(1) 如果容器可滚动(假设是垂直滚动)，则 padding-bottom 也算在滚动尺寸之内</p><p>(2) 如果 overflow-x 和 overflow-y 属性中的一个值设置为 visible 而另外一个设置为 scroll、auto 或 hidden，则 visible 的样式表现会如同 auto</p><p>(3) 默认产生滚动条的标签: html、textarea</p><p>(4) 在 PC 端，无论是什么浏览器，默认滚动条均来自 html，而不是 body 标签</p><p>(5) 在PC端，窗体滚动高度可以使用 document.documentElement.scrollTop 获取，但是在移动端，可能就要使用 document.body.scrollTop 获取。</p><p>(6) 获取滚动条宽度的方式：width - document.getElementById(“ele”).clientWidth</p><p>3、<strong>自定义滚动条</strong></p><p>(1) 整体部分，::-webkit-scrollbar</p><p>(2) 两端按钮，::-webkit-scrollbar-button</p><p>(3) 外层轨道，::-webkit-scrollbar-track</p><p>(4) 内层轨道，::-webkit-scrollbar-track-piece</p><p>(5) 滚动滑块，::-webkit-scrollbar-thumb</p><p>(6) 边角，::-webkit-scrollbar-corner</p><p>4、<strong>依赖 overflow 的样式效果</strong>: text-overflow:ellipsis 实现单行文字超出显示 ……</p><h3 id="五、position-absolute"><a href="#五、position-absolute" class="headerlink" title="五、position:absolute"></a>五、position:absolute</h3><p>1、<strong>特性</strong></p><p>(1) 块级格式化上下文</p><p>(2) 脱离文档流</p><p>(3) 包裹性</p><p>(4) 计算和定位是相对于祖先定位元素的 padding box</p><p>2、<strong>包含块(containing block)</strong></p><p>(1) <strong>是什么</strong>: 元素用来计算和定位的一个框</p><p>(2) <strong>计算规则</strong></p><ul><li><p>根元素(很多场景下可以看成是<html>)被称为“初始包含块”，其尺寸等同于浏览器可视窗口的大小</p></li><li><p>对于其他元素，如果该元素的 position 是 relative 或者 static，则“包含块”由其最近的块容器祖先盒的 content box 边界形成</p></li><li><p>如果元素 position:fixed，则“包含块”是“初始包含块”</p></li><li><p>如果元素 position:absolute，则“包含块”由最近的 position 不为 static的祖先元素建立</p></li></ul><p>3、<strong>absolute 元素</strong></p><p>(1) 只有在父元素是定位元素，absolute 元素才会被 overflow 影响</p><p>(2) absolute 元素设置了对立定位，会格式化宽度/高度，不设置宽度 width/height 会变为 100%</p><p>(3) absolute 元素设置 margin:auto</p><ul><li><p>如果一侧定值，一侧 auto，auto 为剩余空间大小;</p></li><li><p>如果两侧均是 auto，则平分剩余空间。</p></li></ul><p>4、<strong>与 clip 属性配合</strong></p><p>(1) 可以剪裁 fixed</p><p>(2) 配合 absolute，可以实现可访问性元素隐藏，比如经常要用到一些 checkbox 之类的，但是原本的样式太丑了，可以选择用着这种方案隐藏掉原来的 checkbox，但是又不影响点击</p><p>5、<strong>tips</strong></p><p>(1) 无依赖绝对定位:只对当前元素设置绝对定位和偏移值，不影响其他元素的样式</p><p>(2) 有的时候 fixed 元素或者 absolute 元素莫名的滚动了，可能是 transform 属性在作妖</p><p>(3) 父元素 relative 定位会限制 absolute 子元素</p><p>(4) 为了减小当前元素的样式对其他元素样式的影响，可以尽量减小 relative 的作用范围</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列文章——盒尺寸</title>
      <link href="/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-%E7%9B%92%E5%B0%BA%E5%AF%B8/"/>
      <url>/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-%E7%9B%92%E5%B0%BA%E5%AF%B8/</url>
      
        <content type="html"><![CDATA[<p>盒尺寸分为以下四种：content box、padding box、border box 以及 margin box，也就是容器盒子中的内在盒子的尺寸。</p><h3 id="一、替换元素"><a href="#一、替换元素" class="headerlink" title="一、替换元素"></a>一、替换元素</h3><p>1、🎓是<strong>什么</strong></p><p>通过修改某个属性值呈现内容可以被替换掉的元素</p><p>2、🎓<strong>替换元素有哪些</strong></p><p>🌰img, object, video, ifram, texarea, input 等</p><p>3、🎓<strong>特性</strong>：</p><p>(1) 样式表现在 CSS 作用域之外，即内容上的外观不受页面上的 CSS 影响</p><p>(2) 有默认尺寸，🌰video/ifram/canvas(300px x 150px)，img(0)等</p><p>(3) 在很多 CSS 属性上有自己的一套表现规则，🌰vertical-align 的基线不是 baseline，而是下边缘</p><p>4、🎓替换元素在不同浏览器的 display 值可能会不一样</p><p>5、🎓<strong>尺寸计算规则</strong></p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">📚<span class="strong">**相关概念**</span></span><br><span class="line">​</span><br><span class="line">(1) 固有尺寸，即元素本身的尺寸，不可改变</span><br><span class="line"></span><br><span class="line">(2) HTML 尺寸，只能通过 HTML 原生属性改变</span><br><span class="line"></span><br><span class="line">(3) CSS 尺寸，可以通过 CSS 的 width 和 height 或者 max-width/min-width 和</span><br><span class="line">max-height/min-height 设置的尺寸，对应盒尺寸中的 content box</span><br></pre></td></tr></table></figure><p>(1) 若没有 CSS 尺寸和 HTML 尺寸，则使用固有尺寸作为最终宽高</p><p>(2) 若没有 CSS 尺寸，则使用 HTML 尺寸作为最终宽高</p><p>(3) 若没有 CSS 尺寸，则最终尺寸由 CSS 属性决定</p><p>(4) 若”固有尺寸“含有固有的宽高比例，同时仅设置了宽度或仅设置了高度，则元素依然按照固有的宽高比例显示</p><p>(5) 若上述条件都不符合，则宽高表现为默认宽高值的比</p><p>6、🎓<strong>替换元素不设置 src，表现为普通内联元素</strong></p><p>基于伪元素的图片内容生成技术</p><p>(1) 图片不设置 src</p><p>(2) after 伪元素 content 设置为 attr(alt);</p><p>7、🎓<strong>content 属性</strong></p><p>(1) content 属性生成的对象被称为”匿名替换元素”</p><p>(2) 📚实用技术: </p><ul><li><p>content 辅助元素生成</p></li><li><p>content 字符内容生成</p></li><li><p>content 图片生成(使用 url 显示图片)</p></li><li><p>content 计数器(counter-reset,counter-increment,counter(counter-reset),counters(name, string)，实现计数嵌套)</p></li></ul><h3 id="二、padding"><a href="#二、padding" class="headerlink" title="二、padding"></a>二、padding</h3><p>1、🎓默认模式下，使用 padding 会<strong>增加元素尺寸</strong></p><p>2、🎓内联元素 padding 对视觉层和布局层具有双重影响</p><p>3、🎓<strong>属性值特性</strong></p><p>(1) 百分比值相对于宽度计算</p><p>(2) 不支持负值</p><ul><li><p>ol/ul 列表内置 padding-left，单位是 px, 🌰Chrome 浏览器下是 40px</p></li><li><p>很多表单元素都内置 padding</p></li></ul><p>4、<strong>📚运用</strong></p><p>(1) 增加点击区域</p><p>(2) 实现管道符</p><p>(3) 实现一些图标,比如,双层圆环和三道杠</p><h3 id="三、border"><a href="#三、border" class="headerlink" title="三、border"></a>三、border</h3><p>1、🎓<strong>基本常识</strong></p><p>(1) 不支持百分比值</p><p>(2) 关键字: thin(1px)、medium(3px)、thick(4px)</p><p>(3) 默认宽度 medium</p><p>2、<strong>border-style</strong></p><p>(1) 默认值：none</p><p>(2) 常用值：solid、dashed、dotted、double</p><p>(3) 重置边框性能高的方法</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">🌰<span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">0</span> none;</span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><p>3、<strong>border-color</strong></p><p>默认值：currentColor</p><p>4、📚<strong>运用</strong></p><p>(1) 增加点击区域</p><p>(2) 利用 transparent 等特性生成三角形、梯形等图形</p><p>(3) 实现等高布局</p><h3 id="四、margin"><a href="#四、margin" class="headerlink" title="四、margin"></a>四、margin</h3><p>1、📚<strong>margin 失效的情况</strong></p><p>(1) display 计算值 inline 的非替换元素的垂直 margin</p><p>(2) 表格中的 tr 和 td 元素或设置 display 计算值是table-cell 或 table-row 的元素</p><p>(3) margin 合并时，更改 margin 值时</p><p>(4) 绝对定位元素非定位方位的 margin 值</p><p>(5) 定高容器的子元素 margin-bottom</p><p>(6) 定宽元素的子元素 margin-right</p><p>(7) 内联特性导致的 margin 无效</p><p>2、<strong>margin:auto 填充规则</strong></p><p>(1) 如果一侧定值，一侧 auto，则 auto 为剩余空间大小</p><p>(2) 若两侧均是 auto，则平分剩余空间</p><p>3、<strong>margin 合并</strong></p><p>(1) 🎓<strong>是什么</strong></p><p>块级元素的 margin-top 和 margin-bottom 合并</p><p>(2) 🎓<strong>发生 margin 合并的场景</strong></p><ul><li><p>相邻兄弟元素</p></li><li><p>父级元素和第一个子元素/最后一个子元素, 阻止合并方法</p><ul><li><p>父元素设置为块级格式化上下文</p></li><li><p>设置border-top/border-bottom</p></li><li><p>设置padding-top/padding-bottom</p></li><li><p>父元素和第一个子元素或最后一个子元素间添加内联元素进行分隔</p></li><li><p>父元素设置 height，min-height或max-height（margin-bottom合并）</p></li></ul></li><li><p>空块级元素, 阻止合并方法</p><ul><li><p>设置垂直方向border</p></li><li><p>设置垂直方向 padding</p></li><li><p>内部添加内联元素</p></li><li><p>设置height / min-height</p></li></ul></li><li><p>计算规则</p><ul><li><p>正正取大值</p></li><li><p>正负值相加</p></li><li><p>负负取绝对负值最大的值</p></li></ul></li></ul><p>4、🔧<strong>运用</strong></p><p>(1) <strong>margin 设置负值实现两端对齐</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">🌰<span class="selector-class">.parent</span> &#123; </span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">20px</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.child</span> &#123; </span><br><span class="line">  <span class="attribute">float</span>: left; </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>; </span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>; </span><br><span class="line">&#125;​​​</span><br></pre></td></tr></table></figure><p>(2) 滚动模式下底部留白使用padding会有兼容问题，使用子元素 margin 比较靠谱</p><p>(3) <strong>实现等高布局</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">🌰<span class="selector-class">.box</span> &#123; </span><br><span class="line">  <span class="attribute">overflow</span>: hidden; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span> &#123; </span><br><span class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">9999px</span>; </span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">9999px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列文章——CSS 中的流与尺寸</title>
      <link href="/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-CSS%20%E4%B8%AD%E7%9A%84%E6%B5%81%E4%B8%8E%E5%B0%BA%E5%AF%B8/"/>
      <url>/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-CSS%20%E4%B8%AD%E7%9A%84%E6%B5%81%E4%B8%8E%E5%B0%BA%E5%AF%B8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、流与宽度"><a href="#一、流与宽度" class="headerlink" title="一、流与宽度"></a>一、流与宽度</h3><p>1、一个水平流上只能单独显示一个元素，多个块级元素换行显示</p><p>2、<strong>外部尺寸与流体特性</strong></p><p>(1) 正常流下，块级元素宽度是容器的 100%，即充满容器</p><p>(2) 流动性，是一种 margin/border/padding 和 content 内容区域自动分配水平空间的机制</p><p>(3) 格式化宽度，仅出现在”绝对定位模型”中，对于非替换元素，当 left/top 或 top/bottom 对立方位的属性值同时存在的时候，元素的宽度表现为“格式化宽度”，其宽度大小相对于最近的具有定位特性(position 属性值不是 static)的祖先元素计算</p><p>3、<strong>内部尺寸与流体特性</strong></p><p>(1) 内部尺寸，元素的尺寸由内部的元素决定，若元素无内容，宽度表现为 0</p><p>(2) 具有包裹性，自适应性，即，超过容器自动换行，inline-block 元素，浮动元素以及绝对定位元素都具有包裹性</p><h3 id="二、说说-width"><a href="#二、说说-width" class="headerlink" title="二、说说 width"></a>二、说说 width</h3><p>1、<strong>默认值：</strong> auto</p><p>2、<strong>表现：</strong></p><p>(1) 充分利用可用空间(fill-availiable),块级元素的默认宽度是父级容器的 100%</p><p>(2) 收缩与包裹(shrink-to-fit)，比如，浮动、绝对定位等</p><p>(3) 收缩到最小(min-content)，当每一列空间都不够时，文字能断就断</p><p>(4) 超出容器限制，默认的 width 设置，元素一般不会超出，除非设置了 white-space: noWrap 或者内容是很长的连续英文或数字</p><p>3、<strong>首选最小宽度</strong></p><p>(1) 东亚文字最小宽度为每个汉字的宽度</p><p>(2) 西方文字最小宽度由特定的连续英文字符单元决定，一般以空格或者非英文字符作为分隔</p><p>(3) 类似图片这样的替换元素的最小宽度是该元素内容本身的宽度</p><p>4、<strong>最大宽度</strong></p><p>若内部没有块级元素或块级元素未设定宽度，最大宽度是最大的连续内联盒子的宽度</p><p>5、<strong>设置 width 值的影响</strong></p><p>(1) width 默认作用在 content box 上，设置 padding、margin 等会增大宽度</p><p>(2) 流动性丢失</p><p>(3) 表现不一致</p><p>6、<strong>宽度分离</strong></p><p>(1) width 属性不与影响宽度的 padding/border 属性共存</p><p>(2) 方法：width 独占一层标签，padding、border 以及 margin 利用流动性在内部自适应</p><h3 id="三、改变-width-height-作用细节-box-sizing"><a href="#三、改变-width-height-作用细节-box-sizing" class="headerlink" title="三、改变 width/height 作用细节: box-sizing"></a>三、改变 width/height 作用细节: box-sizing</h3><p>1、box-sizing，默认值：content-box</p><p>2、box-sizing 设计的初衷：解决替换元素宽度自适应问题</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">img</span>,<span class="selector-tag">video</span>,<span class="selector-tag">object</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box</span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><h3 id="四、说说-height"><a href="#四、说说-height" class="headerlink" title="四、说说 height"></a>四、说说 height</h3><p>1、父元素 height: auto，正常文档流下，子元素百分比值无效</p><p>2、解决方法</p><p>(1) 绝对定位</p><p>(2) 给父元素高度设置固定值</p><h3 id="五、min-width-max-width"><a href="#五、min-width-max-width" class="headerlink" title="五、min-width/max-width"></a>五、min-width/max-width</h3><p>1、<strong>适用场景：</strong>自适应布局/流体布局</p><p>2、<strong>屏幕自适应</strong></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">🌰<span class="selector-class">.container</span> &#123;</span><br><span class="line"><span class="attribute">min-width</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">max-width</span>: <span class="number">1400px</span>;</span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><p>3、<strong>图片自适应</strong></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">🌰<span class="selector-tag">img</span> &#123;</span><br><span class="line"><span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: auto;</span><br><span class="line">​&#125;</span><br></pre></td></tr></table></figure><p>4、min-width/min-height 的初始值是 auto，max-width/max-height 的初始值是 none</p><p>5、会覆盖 width, 包括设置了 !important 的 width</p><p>6、二者冲突时， min-width 会覆盖 max-width</p><p>7、<strong>应用实例</strong></p><p>通过改变 max-height 值实现任意高度元素的展开收起动画效果，但是 max-height 值需要设置足够小的安全值，避免动画延迟</p><h3 id="六、CSS-中的盒子"><a href="#六、CSS-中的盒子" class="headerlink" title="六、CSS 中的盒子"></a>六、CSS 中的盒子</h3><p>1、块级盒子(block-level box)</p><p>2、<strong>内联盒子(inline-box)</strong></p><p>内联盒模型</p><p>(1) 内容区域(content area)</p><p>(2) 内联盒子(inline box)，分为内联盒子和匿名内联盒子</p><p>(3) 行宽盒子(line box)</p><p>(4) 包含盒子(containing box)</p><p>(5) 标记盒子(marker box)</p><p>(6) 容器盒子(content-box, 宽高作用的盒子)，容器盒子里面又包含：content box、padding box、border box、margin box，这些称为内在盒子</p><p>3、<strong>内联元素，外部盒子是内联盒子</strong></p><p>🌰button(默认值:inline-block)、img、表单控件等</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列文章 —— 内联元素与流</title>
      <link href="/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0%E4%B8%8E%E6%B5%81/"/>
      <url>/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-%E5%86%85%E8%81%94%E5%85%83%E7%B4%A0%E4%B8%8E%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h3 id="一、x-height"><a href="#一、x-height" class="headerlink" title="一、x-height"></a>一、x-height</h3><p>1、<strong>是什么:</strong> 指小写字母 x 的高度，术语描述就是基线和等分线(mean line)(也称作中线，midline)之间的距离</p><p>2、内联元素默认都是基线对齐的, 即 x-height/2</p><p>3、<strong>ex</strong>: 实现不受字体和字号影响的内联元素的垂直居中对齐(1ex = x-height)</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.icon-arrow</span> &#123; </span><br><span class="line">  <span class="attribute">display</span>: inline-block; </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1ex</span>; </span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(arrow.png) no-repeat center; &#125;</span><br></pre></td></tr></table></figure><h3 id="二、line-height"><a href="#二、line-height" class="headerlink" title="二、line-height"></a>二、line-height</h3><p>1、<strong>默认值</strong>：normal，支持数值、百分比值以及长度值</p><p>2、无论内联元素 line-height 如何设置，最终父级元素的高度都是由数值大的那个 line-height 决定的，称之为“内联元素 line-height 的大值特性</p><p>3、🔧<strong>运用</strong></p><p>(1) 利用行距的上下等分机制，实现内联元素垂直居中</p><p>(2)  通过调整 line-height 实现多行文本垂直居中</p><h3 id="三、vertical-align"><a href="#三、vertical-align" class="headerlink" title="三、vertical-align"></a>三、vertical-align</h3><p>1、<strong>默认值</strong>是 baseline，即基线对齐(相对字母 x 的下边缘对齐)</p><p>2、<strong>属性值分类</strong></p><p>(1) <strong>线类</strong>，如 baseline(默认值)、top、middle、bottom</p><ul><li><p>一个 inline-block 元素，如果里面没有内联元素，或者 overflow 不是 visible，则该元素的基线就是其 margin 底边缘;否则其基线就是元素里面最后一行内联元素的基线。</p></li><li><p>vertial-align:top/bottom ，就是垂直上/下边缘对齐，具体定义如下:</p><ul><li><p>内联元素:元素底部和当前行框盒子的顶部/底部对齐</p></li><li><p>table-cell 元素:元素底 padding 边缘和表格行的顶部/底部对齐</p></li></ul></li><li><p>vertial- align:middle</p><ul><li><p>内联元素:元素的垂直中心点和行框盒子基线往上 1/2 x-height 处对齐。(近似居中)</p></li><li><p>table-cell 元素:单元格填充盒子相对于外面的表格行居中对齐。</p></li><li><p>如果想要实现真正意义上的垂直居中对齐，只要想办法让字符 x 的中心位置就是容器的垂直中心位置即可，通常的做法是设置 font-size:0</p></li></ul></li></ul><p>(2) <strong>文本类</strong>，如 text-top、text-bottom</p><ul><li><p>vertical-align:text-top:盒子的顶部和父级内容区域的顶部对齐</p></li><li><p>vertical-align:text-bottom:盒子的底部和父级内容区域的底部对齐。</p></li><li><p>特点</p><ul><li><p>文本类属性值的垂直对齐与左右文字大小和高度都没有关系</p></li><li><p>文本类属性值的垂直对齐可以像素级精确控制</p></li></ul></li></ul><p>(3) <strong>上标下标类</strong>，如 sub、super</p><p>(4) <strong>数值</strong>, 如 20px、2em</p><ul><li>根据计算值的不同，相对于基线往上或往下偏移，到底是往上还是往下取决于 vertical- align 的计算值是正值还是负值，如果是负值，往下偏移，如果是正值，往上偏移</li></ul><p>(5) <strong>百分比类</strong>，如 20%等</p><p>相对于 line-height 的计算值计算的</p><p>3、<strong>有效的前提</strong></p><p>(1) 只能应用于内联元素以及 display 值为 table-cell 的元素</p><p>(2) 对 table-cell 元素而言，vertical-align 起作用的是 table-cell元素自身</p><p>4、<strong>无效的情况</strong></p><p>浮动和绝对定位使元素块状化</p><p>5、任意一个块级元素，里面若有图片，则块级元素高度基本上都要比图片的高度高</p><p>6、<strong>幽灵空白节点</strong></p><p>(1) 产生原因：字母 x 往下的行高产生的多余的间隙</p><p>(2) 解决方法</p><ul><li><p>图片块状化。可以一口气干掉“幽灵空白节点”、line-height 和 vertical-align。</p></li><li><p>容器 line-height 足够小。只要半行间距小到字母 x 的下边缘位置或者再往上，自然就没有了撑开底部间隙高度空间了。比方说，容器设置 line-height:0。</p></li><li><p>容器 font-size 足够小。此方法要想生效，需要容器的 line-height 属性值和当前 font-size 相关，如 line-height:1.5 或者 line-height:150%之类;否则只会让下面的间隙变得更大，因为基线位置因字符 x 变小而往上升了。</p></li><li><p>图片设置其他 vertical-align 属性值。间隙的产生原因之一就是基线对齐，所以我们设置 vertical-align 的值为 top、middle、bottom 中的任意一个都是可以的。</p></li></ul><p>7、<strong>20px 图标对齐的处理技巧</strong></p><p>(1) 图标高度和当前行高都是 20px。很多小图标背景合并工具都是图标宽高多大生成的CSS 宽高就是多大，这其实并不利于形成可以整站通用的 CSS 策略，建议图标原图先扩展成统一规格，比方说这里的 20px×20px，然后再进行合并，可以节约大量 CSS 以及对每个图标对齐进行不同处理的开发成本。</p><p>(2) 图标标签里面永远有字符。这个可以借助:before 或:after 伪元素生成一个空格字符轻松搞定。</p><p>(3) 图标 CSS 不使用 overflow:hidden 保证基线为里面字符的基线，但是要让里面潜在的字符不可见。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列文章——CSS 基础知多少</title>
      <link href="/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-CSS%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E5%A4%9A%E5%B0%91/"/>
      <url>/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-CSS%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E5%A4%9A%E5%B0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="一、CSS-是怎么组织的"><a href="#一、CSS-是怎么组织的" class="headerlink" title="一、CSS 是怎么组织的"></a>一、CSS 是怎么组织的</h3><p>先看一段 demo：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.icon</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 demo 是我们常见的 CSS 代码，那么他是如何组织的呢？首先，可以看到花括号里面有 width, height 之类的描述词，这种描述词就是 <strong>CSS 属性</strong>，而 width， height 后面会有进一步细化的描述，20px, 30px 等，这就是<strong>属性值</strong>。每一个属性值对后面都有个分号，比如，”width: 20px;”，我们称这是一条 CSS <strong>声明</strong>。所有的 CSS 声明被放在了一个大的花括号里，花括号以及它所包含的声明，被称为 CSS <strong>声明块</strong>。而一段 CSS 名称 + 后面紧跟的块，形成一个 CSS <strong>规则集</strong>。</p><h3 id="二、CSS-属性值的常用类型"><a href="#二、CSS-属性值的常用类型" class="headerlink" title="二、CSS 属性值的常用类型"></a>二、CSS 属性值的常用类型</h3><h4 id="1、距离值-数值-长度单位"><a href="#1、距离值-数值-长度单位" class="headerlink" title="1、距离值(数值 + 长度单位)"></a>1、距离值(数值 + 长度单位)</h4><h5 id="1-相对长度单位"><a href="#1-相对长度单位" class="headerlink" title="(1)相对长度单位"></a>(1)相对长度单位</h5><p>A. 文字长度单位</p><ul><li><p>ch, 字符’0’（Unicode值是U+0030）所占据的宽度</p></li><li><p>em, 元素的计算字体大小。如果用于字体大小属性本身，则表示元素的继承字体大小</p></li><li><p>ex, 元素当前的x-height，也就是字母’x’的高度</p></li><li><p>rem， 相对于根元素的字体大小</p></li><li><p>rlh， 相对于根元素的行高大小</p></li></ul><p>B. 视区长度单位</p><ul><li><p>vh, 浏览器窗口视区 1% 的高度</p></li><li><p>vw, 浏览器窗口视区 1% 的宽度</p></li><li><p>vmin, 等于 vh 和 vw 较小的值</p></li><li><p>vmax, 等于 vh 和 vw 较大的值</p></li></ul><h5 id="2-绝对长度单位"><a href="#2-绝对长度单位" class="headerlink" title="(2)绝对长度单位"></a>(2)绝对长度单位</h5><ul><li><p>px, 对于屏幕显示，1 像素通常表示一个设备像素（点）。然而，对于打印机和高分辨率屏幕，一个CSS像素意味着多个设备像素。1px=1英寸的1/96。</p></li><li><p>cm, 厘米，1cm = 96px/2.54</p></li><li><p>mm, 毫米，1mm = 1cm/10 = 96px/2.54/10</p></li><li><p>in, 英寸, 1in = 2.54cm = 96px</p></li><li><p>pc, 派卡，1pc = 12pt = 1in/6</p></li><li><p>pt, 点，1pt = 1in/72</p></li></ul><h4 id="2、角度值-数值-角度单位"><a href="#2、角度值-数值-角度单位" class="headerlink" title="2、角度值(数值 + 角度单位)"></a>2、角度值(数值 + 角度单位)</h4><p>(1) deg，度，一个完整的圆是 360 deg</p><p>(2) grad, 百分度，角的测量单位， 一个完整的圆是 400 grad</p><p>(3) rad，弧度，弧长与半径之比，一个完整的圆是 2π 弧度, 大约是 6.2832rad, 1rad = 180 / π</p><p>(4) turn，圈数，一个完整的圆是 1turn, 1/4 圆是 0.25turn</p><h4 id="3、颜色值"><a href="#3、颜色值" class="headerlink" title="3、颜色值"></a>3、颜色值</h4><p>(1) 颜色值关键字，颜色值的英文单词，比如: ‘red’, ‘blue’等，目前共有 147 个，详细颜色值<a href="https://www.zhangxinxu.com/wordpress/2010/08/css3%e4%b8%8b%e7%9a%84147%e4%b8%aa%e9%a2%9c%e8%89%b2%e5%90%8d%e7%a7%b0%e5%8f%8a%e5%af%b9%e5%ba%94%e9%a2%9c%e8%89%b2%e5%80%bc/">戳这里</a></p><p>(2) transparent, 透明</p><p>(3) currentColor, 颜色变量, 当前的标签所继承的文字颜色</p><p>(4) RGB 颜色，语法包括：#RRGGBB[AA]，#RGB[A]，rgb<a href="R, G, B[, A]">a</a>以及rgb<a href="R G B[ / A]">a</a></p><p>(5) HSL 颜色，语法包括：hsl<a href="H, S, L[, A]">a</a>，以及CSS Colors Level 4中新增的hsl<a href="H S L[ / A]">a</a></p><h4 id="4、百分比值"><a href="#4、百分比值" class="headerlink" title="4、百分比值"></a>4、百分比值</h4><p>相对于父辈元素对象计算占比</p><h4 id="5、数值"><a href="#5、数值" class="headerlink" title="5、数值"></a>5、数值</h4><p>数值包括小数和整数，比如 <code>line-height: 1.2</code></p><h4 id="6、关键字"><a href="#6、关键字" class="headerlink" title="6、关键字"></a>6、关键字</h4><p>比如 <code>border: solid</code> 中的 solid</p><h4 id="7、函数值"><a href="#7、函数值" class="headerlink" title="7、函数值"></a>7、函数值</h4><p>比如，<code>height: calc(100% - 20px)</code> 中的 “calc(100% - 20px)”</p><h3 id="三、CSS-选择器"><a href="#三、CSS-选择器" class="headerlink" title="三、CSS 选择器"></a>三、CSS 选择器</h3><p>1、类选择器</p><p>形如: <code>.icon &#123;&#125;</code></p><p>2、ID 选择器</p><p>形如: <code>#title&#123;&#125;</code>, 具有唯一性，不建议一个文档中多处用</p><p>3、属性选择器</p><p>形如: <code>[title~=hello] &#123; color:red; &#125;</code>，这个例子为包含指定值的 title 属性的所有元素设置颜色为红色</p><p>4、伪类选择器</p><p>形如：<code>selector : pseudo-class &#123;property: value&#125;</code></p><p>6、伪元素选择器</p><p><code>selector:pseudo-element &#123;property:value;&#125;</code></p><h3 id="四、关系选择器"><a href="#四、关系选择器" class="headerlink" title="四、关系选择器"></a>四、关系选择器</h3><p>1、 后代选择器</p><p>形如: <code>#yayunhui h1&#123;&#125;</code>, 该实例会对带有 ‘yayunhui’ ID 的所有子元素 h1 应用样式</p><p>2、子元素选择器</p><p>以 ‘&gt;’ 连接，形如: <code>#wrap&gt;h1 &#123;&#125;</code>，该实例只会对带有 ‘wrap’ ID 的直接子元素 h1 应用样式</p><p>3、兄弟选择器</p><p>以 ‘~’ 连接，形如: <code>.title~h1</code>，该实例会对带有 title 类的所有同级元素应用样式</p><p>4、相邻兄弟选择器</p><p>以 ‘+’ 连接, 形如: <code>.title+h1</code>, 该实例只会对带有 title 类的相邻同级元素应用样式</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列文章——CSS历史及文档流</title>
      <link href="/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-CSS%E5%8E%86%E5%8F%B2%E5%8F%8A%E6%96%87%E6%A1%A3%E6%B5%81/"/>
      <url>/2020/08/27/CSS%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0-CSS%E5%8E%86%E5%8F%B2%E5%8F%8A%E6%96%87%E6%A1%A3%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h3 id="一、CSS-简史"><a href="#一、CSS-简史" class="headerlink" title="一、CSS 简史"></a>一、CSS 简史</h3><p>1、1994 年被提议</p><p>2、1996 年 W3C 正式推出 CSS1</p><p>3、1998 年 W3C 正式推出 CSS2，推行内容和表现分离，table 布局开始没落</p><p>4、2007 年发布 CSS2.1，IE8 开始全面支持 CSS2.1</p><p>5、CSS3 在 CSS 2.1 的基础上进行改进，布局方法更多样(flex,grid,媒体查询等），视觉表现更丰富</p><h3 id="二、CSS1-及-CSS2-的目的"><a href="#二、CSS1-及-CSS2-的目的" class="headerlink" title="二、CSS1 及 CSS2 的目的"></a>二、CSS1 及 CSS2 的目的</h3><p>为图文信息展示服务</p><h3 id="三、文档流-流"><a href="#三、文档流-流" class="headerlink" title="三、文档流(流)"></a>三、文档流(流)</h3><h4 id="1、是什么"><a href="#1、是什么" class="headerlink" title="1、是什么"></a>1、是什么</h4><p>元素的基本定位和布局机制</p><h4 id="2、文档流是如何影响元素布局的"><a href="#2、文档流是如何影响元素布局的" class="headerlink" title="2、文档流是如何影响元素布局的"></a>2、文档流是如何影响元素布局的</h4><p>(1) 正常文档流</p><p>(2) 破坏文档流，实现特殊布局</p><p>(3) 改变文档流，实现更加丰富的布局效果</p><h4 id="3、流体布局"><a href="#3、流体布局" class="headerlink" title="3、流体布局"></a>3、流体布局</h4><p>“div+css” 布局，比如有名的双飞燕布局、圣杯布局等</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web 安全概述</title>
      <link href="/2020/08/17/web%E5%AE%89%E5%85%A8/"/>
      <url>/2020/08/17/web%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h3><p>防止网站受到未授权的访问、使用、修改或者破坏</p><h3 id="二、常见-Web-安全问题"><a href="#二、常见-Web-安全问题" class="headerlink" title="二、常见 Web 安全问题"></a>二、常见 Web 安全问题</h3><p>1、XSS(Cross-site scripting) 攻击</p><p>(1) 是什么</p><p>XSS 是一个用来描述一类攻击的术语，它允许攻击者通过网站将客户端脚本注入到其他用户的浏览器中</p><p>(2) 分类：</p><ul><li><p>反射型 XSS 攻击, 传递给服务器的用户数据被立即返回并在浏览器中原样显示时发生</p></li><li><p>持久型 XSS 攻击,  存储在站点中的恶意脚本在用户不知情的情况下执行，再原样地返回给其他用户</p></li></ul><p>(3) 防范方法</p><p>删除或禁用任何可能包含可运行代码指令的标记</p><p>2、SQL 注入</p><p>(1) 是什么</p><p>恶意用户通过脚本，能够在数据库上执行任意SQL代码，从而允许访问、修改或删除数据</p><p>(2) 发生场景</p><p>传递给底层SQL语句的用户输入可以修改该语句的语义</p><p>3、CSRF (Cross-site request forgery)</p><p>(1) 是什么</p><p>恶意用户通过表单等手段，窃取用户的身份信息，在另一个用户不知情的情况下利用其身份信息执行操作</p><p>(2) 防范方法</p><p>服务器端要求每个 POST 请求都包含一个用户特定的由站点生成的密钥</p><h3 id="三、常见-Web-安全策略"><a href="#三、常见-Web-安全策略" class="headerlink" title="三、常见 Web 安全策略"></a>三、常见 Web 安全策略</h3><p>1、内容安全策略(CSP)</p><p>(1) 是什么</p><p>一个安全层，用于检测并削弱某些特定类型的攻击，比如, 跨站脚本 (XSS) 和数据注入攻击等</p><p>(2)怎么做</p><ul><li><p>客户端, 头部加上 http-equiv=”Content-Security-Policy”, 并添加相应的策略描述， 比如这样</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; img-src https://*; child-src &#x27;none&#x27;;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>服务端, 返回数据时，http 头部加上 Content-Security-Policy</p></li></ul><p>2、通信安全策略</p><p>(1) 传输层安全协议(TSL)</p><p>(2) HTTPS</p><p>参考文档：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP">内容安全策略( CSP )</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Website_security">Website security</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科普</title>
      <link href="/2020/08/13/%E7%A7%91%E6%99%AE/"/>
      <url>/2020/08/13/%E7%A7%91%E6%99%AE/</url>
      
        <content type="html"><![CDATA[<p>1、西北太平洋生成的热带气旋叫做”台风”（typhoon），其他海域生成的叫做”飓风”（hurricane）</p><p>2、通常情况下，经济增长一定伴随资源消耗的增长和自然环境的压力。一旦经济进入成熟阶段以后，增长可能会带来资源消耗的减少。</p><p>3、<strong>非暴力交流</strong></p><p>(1) Observe Facts - observe the specific facts that are affecting our wellbeing, and bring them up with the other person（陈述现状）</p><p>(2) Note Feelings - introspect about what exactly we are feeling in response to what we’ve observed, and communicate these feelings（说明感受）</p><p>(3) Uncover Desires - figure out the desires, wants and values that are creating our feelings, and explain them to the other person（说明内心的期望值）</p><p>(4) Make Requests - ask for concrete actions to help resolve the situation（提出请求）</p><p>(5)不好的🌰Felix, you always leave your dirty socks on the floor! It’s disgusting! Clean this up before you do anything else.</p><p>(6)好的🌰[1. Observe Facts] Felix, when I see two balls of soiled socks under the coffee table, [2. Note Feelings] I feel irritated because [3. Uncover Desires] I want more order in the rooms that we share in common - [4. Make Requests] would you be willing to put your socks in the washing machine?</p><p>4、<strong>提升表达效果的方法</strong></p><p>(1)拆分：内容尽量拆分成一系列简短而明确的小观点，粒度要细到每个观点都可以让人快速地、一目了然地领会。 </p><p>(2)反复：开头的几点用来吸引读者的注意力，然后进入核心部分时，采用各种形式反复展示，就是翻来覆去地讲，力求给人留下深刻印象。</p><p>5、根据爱因斯坦最著名的质能公式 E=mc²，能量即质量，任何释放能量的物体都必然会减轻质量。</p><p>6、如果你想快速了解一个新事物是什么，一个简单的方法就是在这个词的后面加上”vs”，谷歌会自动提示跟它最接近的事物。</p><p>7、现在一个月还贷一万元，好像很多钱的样子；但过了20年，你还是每月还贷一万元，那时由于货币贬值，这点钱已经不足挂齿了。只要货币一直在贬值，而房子不贬值（通常如此），那么银行贷款就是对你的补助。</p><p>8、数据分析可以分成两个层次。</p><ul><li><p>基础层：发现数据包含的趋势，对产品经理和业务人员比较有用。</p></li><li><p>进阶层：运用数据去构造模型，再用来处理新的数据，对算法人员和开发者比较有用。</p></li></ul><p>9、数据分析工具</p><ul><li><p>Python 语言：数据处理的基本语法。</p></li><li><p>科学计算库：pandas、matplotlib、scikit-learn 等，提供封装好的各种数学工具。</p></li><li><p>SQL 和 Mysql：数据查询语法和储存引擎。</p></li><li><p>Hive：海量数据分析工具，可以进行分布式数据处理。</p></li></ul><p>10、中证传媒=A股游戏版块</p><p>11、债基，主要看基金经理历史业绩和风格</p><p>12、基金就是很多人一起集资去投资</p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特浓鸡汤</title>
      <link href="/2020/08/13/%E7%89%B9%E6%B5%93%E9%B8%A1%E6%B1%A4/"/>
      <url>/2020/08/13/%E7%89%B9%E6%B5%93%E9%B8%A1%E6%B1%A4/</url>
      
        <content type="html"><![CDATA[<p>1、每个人都有自己擅长的领域，不要去做自己不擅长的事情</p><p>2、如果你不是在一个经常下雨的地方，就不要去卖伞</p><p>3、企业需要程序员做什么</p><ul><li><p>企业最关心的（或者说唯一在乎的）事情，就是增加收入、降低成本。</p></li><li><p>企业实际上需要的不是程序员，而是能够帮助它们增加收入、降低成本的人。</p></li><li><p>企业雇佣你，是为了让你帮它们完成某个可以增加收入、降低成本的项目，而不是为了让你追求个人的软件成就。</p></li></ul><p>4、新手程序员需要做的事情</p><ul><li><p>了解技术架构</p></li><li><p>了解开发流程</p></li><li><p>补强基础知识</p></li><li><p>从微小的改善入手</p></li><li><p>为团队贡献文档</p></li></ul><p>5、我们都知道，如果可以回到过去，改变任何一件小事情，都将极大地改变未来。然而，几乎没有人想到，今天只要小小改变，就会改变自己的未来。</p><p>6、我口袋里有一个小设备，可以访问几乎全部的人类知识。我却用它与不认识的人进行毫无意义的争论，并看猫的照片。</p><p>7、不去追逐你所渴求，你将永远不会拥有。羞涩不善开口，回答永远是No。畏惧向前行走，你将永远停留。</p><p>8、你只需要问自己一个问题：即使没有报酬，你也会去干的工作是什么？ 如果一种工作根本得不到报酬，你也愿意去做，这就是你最喜欢、最有热情的事情，千万要珍惜。</p><p>9、虽然知道万事皆空，仍然能够生活得兴致勃勃</p><p>10、这个世界上，最厉害的人就是既懂得制造，又懂得销售的人。如果我们把自己的人生看成是一个项目，人生成功也是如此，既要有真才实学，也要懂得推销自己。Naval 说，通常情况下，Maker（制造者）学习 sales（销售）比较容易，Sales 学习 make 比较难。比如，程序员学习运营，要比运营人员学习编程容易。</p><p>11、所谓完美，不是指不能再添加别的东西了，而是指没有东西可以从其中拿掉了。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些概念</title>
      <link href="/2020/08/13/%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/08/13/%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="不要构建系统，而要构建子系统"><a href="#不要构建系统，而要构建子系统" class="headerlink" title="不要构建系统，而要构建子系统"></a>不要构建系统，而要构建子系统</h3><p>这就像 Unix 哲学：每个工具做好一件事，不同的工具协同工作。</p><h3 id="信息的半衰期"><a href="#信息的半衰期" class="headerlink" title="信息的半衰期"></a>信息的半衰期</h3><p>指的是，一半的信息量变得无关紧要或者彻底过时所需的时间。</p><h3 id="零工经济"><a href="#零工经济" class="headerlink" title="零工经济"></a>零工经济</h3><p>指的是越来越多的就业，属于”打零工”性质。稳定的长期工作越来越难找，只找得短期的临时雇佣，许多人就靠长期打零工养活自己。</p><h3 id="斜杠青年"><a href="#斜杠青年" class="headerlink" title="斜杠青年"></a>斜杠青年</h3><p>指的是从事过多种职业的年轻人。因为他简历的”职业”一栏，会填写很多不同的工作，需要用斜杠分隔。</p><h3 id="U-盘化生存"><a href="#U-盘化生存" class="headerlink" title="U 盘化生存"></a>U 盘化生存</h3><p>这是罗振宇老师提出的概念，他提倡年轻人”自带信息，不装系统，随时插拔，自由协作”，也就是像 U 盘那样，把你插在哪里，你就在哪里工作，时刻准备着被切换到另一个位置。</p><h3 id="Uber-job"><a href="#Uber-job" class="headerlink" title="Uber-job"></a>Uber-job</h3><p>指的是 Uber 那一类在网上接单的工作，一单一单计算报酬，属于临时承包商的性质，比如开网约车和外卖送餐。</p><h3 id="游戏即教育"><a href="#游戏即教育" class="headerlink" title="游戏即教育"></a>游戏即教育</h3><h3 id="哲学剃刀"><a href="#哲学剃刀" class="headerlink" title="哲学剃刀"></a>哲学剃刀</h3><p>“剃刀”（razor）这个词，在哲学里面有特殊含义，指的是一种经验法则，可以对某种现象做出简洁的解释，消除了其他的解释。常常被引用的”剃刀”（经验法则）有下面这些。</p><ul><li><p>奥卡姆剃刀：更简单的解释更可能是正确的。引申为某个命题成立，所需要的假设越少越好。</p></li><li><p>汉隆剃刀：可以归咎于愚蠢的事情，不要归咎于恶意。</p></li><li><p>希钦斯剃刀：凡是无证据的断言，也可以无证据地驳回。</p></li><li><p>休谟剃刀：从一样东西是什么，无法推导出它应该是什么，即无法从事实推导出价值判断。</p></li><li><p>牛顿剃刀：无法通过实验或观察解决的问题，不值得争论。</p></li><li><p>萨根标准：非同寻常的主张，需要非同寻常的证据。</p></li><li><p>波普原则：一个理论被认为是正确的，前提必须是有可能证明它是错误的，即必须是可证伪的。</p></li></ul><h3 id="信息成瘾"><a href="#信息成瘾" class="headerlink" title="信息成瘾"></a>信息成瘾</h3><p>指的是强迫性信息消费，明明已经看完所有内容，你仍在继续滚动浏览 Facebook；你刚刚关闭 Instagram，立即再次打开它；你每五分钟拿起手机，检查有没有新的通知。</p><h3 id="锚定偏差"><a href="#锚定偏差" class="headerlink" title="锚定偏差"></a>锚定偏差</h3><p>（anchoring bias）指的是决策时严重依赖第一个可用的信息。比如，你走进一家体育用品商店，发现的第一件商品，是一条价值500美元的运动裤。接着，你看到另一条价格为300美元的运动裤时，就会觉得它很便宜，实际上如果首先看到这条300美元的裤子，你会觉得它根本不便宜。</p><h3 id="内卷化"><a href="#内卷化" class="headerlink" title="内卷化"></a>内卷化</h3><p>内卷化，指一种社会或文化模式在某一发展阶段达到一种确定的形式后，便停滞不前或无法转化为另一种高级模式的现象。当一个组织不能或不愿向外发展时，成员的精力就只好用到组织内部，这时就会出现”内卷化”，也就是内部的过度发展</p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美句摘抄</title>
      <link href="/2020/08/13/%E5%8F%A5%E5%AD%90%E6%91%98%E6%8A%84/"/>
      <url>/2020/08/13/%E5%8F%A5%E5%AD%90%E6%91%98%E6%8A%84/</url>
      
        <content type="html"><![CDATA[<h3 id="新海诚电影的诗意"><a href="#新海诚电影的诗意" class="headerlink" title="新海诚电影的诗意"></a>新海诚电影的诗意</h3><ul><li><p>樱花落下的速度是每秒五厘米， 我该用怎么样的速度，才能与你相遇。——秒速五厘米</p></li><li><p>雨滴降落的速度是每秒十米，我该用怎么样的速度，才能将你挽留。——言叶之庭</p></li><li><p>陨石坠落的速度是每秒十千米，我该用怎么样的速度，才能将你拯救。——你的名字</p></li><li><p>烟花消散的速度是每秒三亿米，我该用什么样的速度，才能将你追回————烟花</p></li></ul><h3 id="萤火虫之森"><a href="#萤火虫之森" class="headerlink" title="萤火虫之森"></a>萤火虫之森</h3><ul><li><p>天文学里有个定义，叫洛希极限。行星和卫星会因为万有引力不断靠近，但他们之间有个保持安全的最短距离，一旦超过洛希极限，潮汐力会把那颗卫星撕碎。然后那颗已经粉碎崩塌的星球会化作星尘，渐渐地聚拢在那颗行星身旁，演变成一个环，将那颗行星环抱。“用一次粉身碎骨，换一个永恒的拥抱，也挺好</p></li><li><p>无法触碰的爱恋，融化在一生一世的拥抱中。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字精确到小数点两位</title>
      <link href="/2020/08/12/%E6%95%B0%E5%AD%97%E7%B2%BE%E7%A1%AE%E5%88%B0%E5%B0%8F%E6%95%B0%E7%82%B9%E4%B8%A4%E4%BD%8D/"/>
      <url>/2020/08/12/%E6%95%B0%E5%AD%97%E7%B2%BE%E7%A1%AE%E5%88%B0%E5%B0%8F%E6%95%B0%E7%82%B9%E4%B8%A4%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>对 js 有一定了解的人都知道，js 的数字精确度比较低，这就有必要自己去实现一套精确度高的算法了，精确到小数点后几位，是我们经常会用到的，比如价格的计算等，下面来讲讲这个算法的步骤</p><p>1、 要进行精度计算，首先要明确输入的是否为数字</p><p>2、 需要明确，精确到小数点后几位</p><p>3、 明确该数字是否为小数，不是的话，需要根据精度去做补 0 操作</p><p>4、 确定该数字后的小数位数是否够精确的小数长度，不够的话，也要做补 0 操作</p><p>5、 若该数字既是小数，小数长度又比精度位长，判断截取精度后的小数后一位是否大于五，是的画进一位</p><p>6、 满足精度位，小数精度位后一位进位操作确定之后，还需要确定小数部位是否需要进位，是的话，整数部位加 1，小数部位开头替换为 0，不是的话就直接返回</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 精确到小数点两位</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">twoDEcimal</span>(<span class="params">number, precision = <span class="number">2</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> temp = number;</span><br><span class="line">  number = <span class="built_in">Number</span>(number);</span><br><span class="line">  <span class="comment">// 判断是否为数字，不是数字抛出异常</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Number</span>.isNaN(number)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;无效的数字&quot;</span>, temp);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;无效的数字&quot;</span>, temp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  number = <span class="built_in">String</span>(number);</span><br><span class="line">  <span class="keyword">let</span> numbers = number.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  <span class="comment">// 如果不是小数，补充对应的 0</span></span><br><span class="line">  <span class="keyword">if</span> (numbers.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> number + <span class="string">&quot;.&quot;</span> + <span class="string">&quot;0&quot;</span>.repeat(precision);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果是小数，但位数比要保留的位数少，也要补 0</span></span><br><span class="line">    <span class="keyword">if</span> (numbers[<span class="number">1</span>].length &lt; precision) &#123;</span><br><span class="line">      <span class="keyword">return</span> number + <span class="string">&quot;.&quot;</span> + <span class="string">&quot;0&quot;</span>.repeat(precision - numbers[<span class="number">1</span>].length);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 取整数部分</span></span><br><span class="line">      <span class="keyword">let</span> intNumber = <span class="built_in">parseInt</span>(number.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">      <span class="comment">// 取小数部分</span></span><br><span class="line">      <span class="keyword">let</span> decimal = number.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">      <span class="comment">// 取出要保留的小数</span></span><br><span class="line">      <span class="keyword">let</span> frontDecimal = <span class="built_in">parseInt</span>(decimal.substr(<span class="number">0</span>, precision));</span><br><span class="line">      <span class="comment">// 去除要保留小数的后一位</span></span><br><span class="line">      <span class="keyword">let</span> lastDecimal = <span class="built_in">parseInt</span>(decimal.substr(precision, <span class="number">1</span>));</span><br><span class="line">      <span class="comment">// 如果最后一位大于5，就进位</span></span><br><span class="line">      <span class="keyword">if</span> (lastDecimal &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">        frontDecimal += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 判断小数部位是否需要进位</span></span><br><span class="line">      <span class="keyword">if</span> (frontDecimal === <span class="built_in">Math</span>.pow(<span class="number">10</span>, precision)) &#123;</span><br><span class="line">        frontDecimal = <span class="string">&quot;0&quot;</span>.repeat(precision);</span><br><span class="line">        intNumber += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 处理保留的小数中有 0 出现的情况</span></span><br><span class="line">      frontDecimal =</span><br><span class="line">        <span class="string">&quot;0&quot;</span>.repeat(precision - <span class="built_in">String</span>(frontDecimal).length) + frontDecimal;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;intNumber&#125;</span>.<span class="subst">$&#123;frontDecimal&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = twoDEcimal(<span class="number">1.255</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">a = twoDEcimal(<span class="number">0.005</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算电饭煲的预约时间</title>
      <link href="/2020/08/12/%E8%AE%A1%E7%AE%97%E7%94%B5%E9%A5%AD%E7%85%B2%E7%9A%84%E9%A2%84%E7%BA%A6%E6%97%B6%E9%97%B4/"/>
      <url>/2020/08/12/%E8%AE%A1%E7%AE%97%E7%94%B5%E9%A5%AD%E7%85%B2%E7%9A%84%E9%A2%84%E7%BA%A6%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>首先要确定预约的时间是指什么，是开始的时间，还是煮好之后的时间，如果是煮好之后的时间，就要在时间差的基础上减去煮好所需的时间，否则就是当前时间和期望时间的差。</p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatTime</span>(<span class="params">timeStamp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timeStamp);</span><br><span class="line">  <span class="keyword">const</span> day = [</span><br><span class="line">    date.getFullYear(),</span><br><span class="line">    date.getMonth() + <span class="number">1</span>,</span><br><span class="line">    date.getDate(),</span><br><span class="line">    date.getHours(),</span><br><span class="line">    date.getMinutes(),</span><br><span class="line">    date.getSeconds()</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">return</span> day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @param reservationTime:预约时间</span></span><br><span class="line"><span class="comment">// @param startTime：开始预约时间</span></span><br><span class="line"><span class="comment">// @param cookTime：需要煮的时长</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reservation</span>(<span class="params">&#123; reservationTime, startTime, cookTime &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">const</span> tomrrow = formatTime(date.getTime() + <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">const</span> tomrrowTime = <span class="string">`<span class="subst">$&#123;tomrrow[<span class="number">0</span>]&#125;</span>/<span class="subst">$&#123;tomrrow[<span class="number">1</span>]&#125;</span>/ <span class="subst">$&#123;tomrrow[<span class="number">2</span>]&#125;</span>  <span class="subst">$&#123;reservationTime&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> now = formatTime(date.getTime());</span><br><span class="line">  <span class="keyword">const</span> setTime = startTime</span><br><span class="line">    ? <span class="string">`<span class="subst">$&#123;now[<span class="number">0</span>]&#125;</span>/<span class="subst">$&#123;now[<span class="number">1</span>]&#125;</span>/ <span class="subst">$&#123;now[<span class="number">2</span>]&#125;</span>  <span class="subst">$&#123;startTime&#125;</span>`</span></span><br><span class="line">    : date.getTime();</span><br><span class="line">  <span class="keyword">const</span> distance = <span class="keyword">new</span> <span class="built_in">Date</span>(tomrrowTime) - <span class="keyword">new</span> <span class="built_in">Date</span>(setTime) || date;</span><br><span class="line">  <span class="keyword">const</span> cook = cookTime.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    distance / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> + +cook[<span class="number">0</span>],</span><br><span class="line">    ((distance / <span class="number">1000</span> / <span class="number">60</span>) % <span class="number">60</span>) + +cook[<span class="number">1</span>],</span><br><span class="line">    ((distance / <span class="number">1000</span>) % <span class="number">60</span>) + +cook[<span class="number">2</span>]</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> time = reservation(&#123;</span><br><span class="line">  reservationTime: <span class="string">&quot;6:30:00&quot;</span>,</span><br><span class="line">  <span class="comment">// startTime: &quot;23:30:00&quot;,</span></span><br><span class="line">  cookTime: <span class="string">&quot;01:10:00&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> res = <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.floor(time[<span class="number">0</span>])&#125;</span>:<span class="subst">$&#123;time[<span class="number">1</span>].toFixed()&#125;</span>:<span class="subst">$&#123;time[<span class="number">2</span>].toFixed()&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成指定范围的随机数组</title>
      <link href="/2020/08/12/%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84-1/"/>
      <url>/2020/08/12/%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84-1/</url>
      
        <content type="html"><![CDATA[<p>输入范围，输出随机组成的数组，比如输入 minNum、maxNum、option，返回 minNum 与 maxNum 间的随机数组构成的 option 长度的数组。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>1、 求出随机数的范围 maxNum - minNum + 1</p><p>2、指定范围的随机数算法 Math.random() * len</p><p>3、 遍历 option,若生成的随机数不在 minNum 与 maxNum 范围内，则重新计算，否则，添加随机数到数组</p><p>4、 返回随机数组成的数组</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MakeRandomList</span>(<span class="params">minNum, maxNum, option</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> len = maxNum - minNum + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; option; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> random = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * len);</span><br><span class="line">    <span class="keyword">if</span> (random &lt; minNum || random &gt; maxNum) &#123;</span><br><span class="line">      i--;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.push(random);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = MakeRandomList(<span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见 Git 工作流程</title>
      <link href="/2020/08/10/%E5%B8%B8%E8%A7%81git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2020/08/10/%E5%B8%B8%E8%A7%81git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="一、简单的-Git-工作流程"><a href="#一、简单的-Git-工作流程" class="headerlink" title="一、简单的 Git 工作流程"></a>一、简单的 Git 工作流程</h3><p><img src="/images/Basic-git-workflow.png" alt="简单的 Git 工作流程图"></p><p>最简单的 Git 工作流程是只有一个 master 分支。开发者直接把代码 commit 到 master 分支并且用该分支进行发版等操作，即不分测试版和正式版，由始至终使用一份代码，因此，这份代码的记录都是在同一分支的。</p><p>这种工作流程一般不被推荐使用，除非是开发者单独负责项目并且希望快速创建项目</p><p>因为只有一个分支，分支管理就无从谈起了，这让开发者可以轻松上手 Git，但是，使用这种工作流程，我们需要注意一些问题：</p><p>(1) 在进行代码协作的时候可能会产生一些复杂的冲突</p><p>(2) 软件 hotfix 交付到正式版的时候风险可能会更高</p><p>(3) 代码的可维护性很差</p><h3 id="二、Git-功能分支工作流程"><a href="#二、Git-功能分支工作流程" class="headerlink" title="二、Git 功能分支工作流程"></a>二、Git 功能分支工作流程</h3><p>在需要进行多人项目协作的时候，Git 功能分支工作流程就很有必要登场了。</p><p>设想一个开发者在开发一个新功能的同时，另一个开发者在开发另一个功能，此时，若两个开发者用同一个分支进行协作，这会产生大量的冲突。</p><p>为了解决上述问题，这两个开发者可以各自从 master 分支切出一个独立分支，当其中一个人手头的功能写完之后，可以自行合并到 master 分支进行发布，而无需等待另一个功能完成再一起发布。</p><p><img src="/images/Feature-Branch-git-workflow.png" alt="Git 功能分支工作流程图"></p><p>这种工作流程的优点是可以愉快的进行代码写作而无需担心会产生一堆的代码冲突</p><h3 id="三、带有开发者分支的功能分支工作流程"><a href="#三、带有开发者分支的功能分支工作流程" class="headerlink" title="三、带有开发者分支的功能分支工作流程"></a>三、带有开发者分支的功能分支工作流程</h3><p>这种工作流程是主流的工作流程之一，它有点像是在功能分支外，多增加了一个与 master 分支平级的开发者分支。</p><p>在这种工作流程下，master 分支总是代表着正式版的预发布状态，开发团队如果想发布版本，就会从该分支进行发布。</p><p>develop 分支往往表示下一版产品最新一次交付变更的状态，开发者从 develop 分支切出相应的功能分支，若该功能完成，则合并到 develop 分支进行测试，若无冲突，合并到 master 分支。</p><p><img src="/images/feature-branch-with-develop-git-workflow.png" alt="有开发者分支的功能分支工作流程图"></p><p>这种工作流程的有点是，允许团队可以持续交付新的功能到 develop 分支进行测试，合并到 master 分支进行发版。此外，这也会为我们的团队降低烦人的代码维护成本。</p><h3 id="四、Gitflow-工作流程"><a href="#四、Gitflow-工作流程" class="headerlink" title="四、Gitflow 工作流程"></a>四、Gitflow 工作流程</h3><p>gitflow 工作流程与前一个工作流程非常相似，不同的是多了两个分支：release 分支和 hot-fix 分支</p><p><strong>hot-fix 分支</strong></p><p>hot-fix 分支是唯一一个从 master 分支切出并且合并回 master 的分支，该分支用于修复线上版本的一些 bug。使用这个分支的好处是，可以快速的处理线上的一些问题并发布出去，而无需经过其他流程或者是等到下次迭代再发布。</p><p>一旦 hot-fix 合并到了 master 分支并且更新出去了，应该合并到 develop 分支和当前 release 分支。这么做是为了确保从 develop 分支切出新功能分支，能拿到最新的代码。</p><p><strong>release 分支</strong></p><p>当所有功能都完成开发，并且合并到 develop 分支没有产生冲突时，从 develop 分支 fork release 分支。</p><p>该分支仅包含与发布相关的代码，比如与该版本相关的文档，bug 修复代码以及其他的一些跟此次发布相关的内容。</p><p>一旦该分支合并到 master 并且发布出去了，应该合并回 develop 分支，以确保从 develop 分支切出的新功能分支拿到的是最新代码。</p><p><img src="/images/GitFlow-git-workflow.png" alt="Gitflow 工作流程图"></p><p>该工作流程由 Vincent Driessen 首次发布并广受欢迎，目前，已被广泛适用于具有预定发布周期的组织。</p><p><strong>git-flow</strong></p><p>我们可以在项目中安装 git-flow，git-flow 会为我们创建好相应分支，因为 git-flow 只是 Git 的一个外壳，所以并不会对我们的代码产生任何影响。</p><p>git-flow 安装方法</p><p>mac: <code>brew install git-flow</code></p><p>windows: <a href="https://git-scm.com/download/win">下载</a> 并安装 git-flow 客户端 =&gt; 执行 <code>git flow init</code> 在项目中使用 git -flow</p><h3 id="五、Git-Fork-工作流程"><a href="#五、Git-Fork-工作流程" class="headerlink" title="五、Git Fork 工作流程"></a>五、Git Fork 工作流程</h3><p>Fork 工作流程在开源软件团队中很流行。</p><p>该模式下工作流程通常是这样的：</p><p>1、开发者从开源项目的官方仓库 forks 一份代码的副本到自己的仓库</p><p>2、开发者从自己的仓库 clone 代码到本地</p><p>3、在本地项目中，把开原仓库的地址附加到远程路径上</p><p>4、开发者在本地仓库中切出一个新的功能分支，修改代码，提交变更到自己的仓库</p><p>5、从自己的仓库创建一个 pull  request，请求开源项目的官方仓库合并代码</p><p>6、开源项目的官方仓库确认变更并且接受该变更，合并代码</p><p>翻译自：</p><p><a href="https://zepel.io/blog/5-git-workflows-to-improve-development/">5 Git workflows you can use to deliver better code and improve your development process</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说说 Vuex</title>
      <link href="/2020/08/10/%E8%AF%B4%E8%AF%B4vuex/"/>
      <url>/2020/08/10/%E8%AF%B4%E8%AF%B4vuex/</url>
      
        <content type="html"><![CDATA[<h3 id="一、为什么要说-Vuex"><a href="#一、为什么要说-Vuex" class="headerlink" title="一、为什么要说 Vuex"></a>一、为什么要说 Vuex</h3><p>上周在做项目的时候，有一个模块用到了一个章节组件，一个 content 组件，其中章节组件调用了一个 tree 组价用来递归章节列表。选中章节组件中的项，需要更新到 content 的已选章节部分，取消章节选项，已选章节也需要删除对应的项，此外，删除已选章节中的某一项，也需要更新左侧章节列表，比如这样：</p><p><img src="/images/vuex-ex.gif" alt="示例"></p><p>我一开始的做法是使用组件间传数据，但是实践之后会发现一些问题，比如选中框是 checkbox 双向数据绑定，这里有三个组件，传来传去的容易绕，状态更新稍有一些逻辑问题可能会找半天。想了一会，去问了前端大佬，感觉豁然开朗，写久了小程序，我竟然把 vuex 给忘了，这种场景不就很适合用 vuex 嘛。 不过归根究底，还是我对 vuex 的使用场景没有研究过，导致用的时候想不起他来，下面就是我研究之后的一些结论啦。</p><h3 id="二、Vuex-应用场景"><a href="#二、Vuex-应用场景" class="headerlink" title="二、Vuex 应用场景"></a>二、Vuex 应用场景</h3><p>中大型单页应用，需要多个组件共享状态的时候，用 Vuex 可以达到事半功倍的效果。这里多个组件需要共享状态，可以有以下两种情况：</p><p>(1) 多个视图依赖于同一状态</p><p>(2) 来自不同视图的行为需要变更同一状态</p><p>比如上面我说的那个例子，章节选中状态和已选章节都是依赖于同一份数据的，并且章节变更需要修改的状态和删除已选章节需要修改的状态也是同一个，这个时候使用 vuex 就再合适不过了。</p><p>中大型应用用 vuex，那么小型应用也有类似的需求要用什么呢？ Vue 教程中状态管理模块给出了一个简单状态管理的 demo，也就是 Vuex 文档中提到的 store 模式，该模式参照 Flux 实现了 action 触发 state 变更，state 触发视图更新的逻辑，以达到多个组件共同维护一份数据的目的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// store 模式</span></span><br><span class="line"><span class="keyword">var</span> store = &#123;</span><br><span class="line">  debug: <span class="literal">true</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    message: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  setMessageAction (newValue) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.debug) <span class="built_in">console</span>.log(<span class="string">&#x27;setMessageAction triggered with&#x27;</span>, newValue)</span><br><span class="line">    <span class="built_in">this</span>.state.message = newValue</span><br><span class="line">  &#125;,</span><br><span class="line">  clearMessageAction () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.debug) <span class="built_in">console</span>.log(<span class="string">&#x27;clearMessageAction triggered&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.state.message = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个组件共享一份数据，通过 action 更新 state 中的数据状态</span></span><br><span class="line"><span class="keyword">var</span> vmA = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    privateState: &#123;&#125;,</span><br><span class="line">    sharedState: store.state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vmB = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    privateState: &#123;&#125;,</span><br><span class="line">    sharedState: store.state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="三、Flux"><a href="#三、Flux" class="headerlink" title="三、Flux"></a>三、Flux</h3><p>上面提到了 Flux，那么 Flux 是什么呢？Flux 是一种软件架构思想，facebook 在该思想的基础上实现了 Flux 框架，但是我们这里要讲的是 Vuex 所借鉴的 Flux 思想。Flux 把数据的流动分为四个阶段，View(视图层)、Action(视图层发出的消息)、Dispatcher(用来接收Actions、执行回调函数) 以及 Store(用来存放应用的状态，一旦发生变动，就提醒Views要更新页面)，他们之间的流动方式是这样的：</p><p><img src="/images/flux.png" alt="Flux 数据流"></p><p>从上图可以看出，Flux 思想下的数据流动是单向的</p><p>参考文献：</p><p><a href="https://vuex.vuejs.org/zh/">Vuex 是什么？</a></p><p><a href="https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8">类 Flux 状态管理的官方实现</a></p><p><a href="http://www.ruanyifeng.com/blog/2016/01/flux.html">Flux 架构入门教程</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原地删除数组中的指定元素</title>
      <link href="/2020/08/04/removeElement/"/>
      <url>/2020/08/04/removeElement/</url>
      
        <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Given an array nums and a value val, remove all instances of that value in-place</span><br><span class="line"> and return the new length.</span><br><span class="line"></span><br><span class="line">Do not allocate extra space for another array, you must do this by modifying the</span><br><span class="line"> input array in-place with O(1) extra memory.</span><br><span class="line"></span><br><span class="line">The order of elements can be changed. It doesn&#x27;t matter what you leave beyond the</span><br><span class="line"> new length.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line">Given nums = [3,2,2,3], val = 3,</span><br><span class="line">Your function should return length = 2, with the first two elements of nums being</span><br><span class="line"> 2.</span><br><span class="line"></span><br><span class="line">It doesn&#x27;t matter what you leave beyond the returned length.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Given nums = [0,1,2,2,3,0,4,2], val = 2,</span><br><span class="line">Your function should return length = 5, with the first five elements of nums</span><br><span class="line"> containing 0, 1, 3, 0, and 4.</span><br><span class="line">Note that the order of those five elements can be arbitrary.</span><br><span class="line"></span><br><span class="line">It doesn&#x27;t matter what values are set beyond the returned length.</span><br><span class="line">Clarification:</span><br><span class="line"></span><br><span class="line">Confused why the returned value is an integer but your answer is an array?</span><br><span class="line"></span><br><span class="line">Note that the input array is passed in by reference, which means modification</span><br><span class="line"> to the input array will be known to the caller as well.</span><br><span class="line"></span><br><span class="line">Internally you can think of this:</span><br><span class="line"></span><br><span class="line">// nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// any modification to nums in your function would be known by the caller.</span><br><span class="line">// using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i = 0; i <span class="xml"><span class="tag">&lt; <span class="attr">len</span>; <span class="attr">i</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">    print(nums[i]);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>1、设置双指针 i, j, 其中指针 j 每次向前移动一步</p><p>2、 遍历 nums，当 nums[j] !== val 时，说明不是指定的元素, 指针 i 向前挪动一步， 同时把 nums[j] 赋值给 nums[i]</p><p>3、结果返回 i </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="function"><span class="keyword">function</span> (<span class="params">nums, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!nums.length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> len = nums.length;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[j] !== val) &#123;</span><br><span class="line">      nums[i] = nums[j];</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = [[[<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">3</span>], [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>], <span class="number">2</span>]];</span><br><span class="line"></span><br><span class="line">test.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = removeElement(ele[<span class="number">0</span>], ele[<span class="number">1</span>]);</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;result:&#x27;</span>, res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原地删除数组中的重复值</title>
      <link href="/2020/08/04/removeDuplicates/"/>
      <url>/2020/08/04/removeDuplicates/</url>
      
        <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Given a sorted array nums, remove the duplicates in-place such that each element</span><br><span class="line"> appear only once and return the new length.</span><br><span class="line"></span><br><span class="line">Do not allocate extra space for another array, you must do this by modifying the</span><br><span class="line"> input array in-place with O(1) extra memory.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line">Given nums = [1,1,2],</span><br><span class="line">Your function should return length = 2, with the first two elements of nums being</span><br><span class="line"> 1 and 2 respectively.</span><br><span class="line">It doesn&#x27;t matter what you leave beyond the returned length.</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Given nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line">Your function should return length = 5, with the first five elements of nums being</span><br><span class="line"> modified to 0, 1, 2, 3, and 4 respectively.</span><br><span class="line">It doesn&#x27;t matter what values are set beyond the returned length.</span><br><span class="line">Clarification:</span><br><span class="line"></span><br><span class="line">Confused why the returned value is an integer but your answer is an array?</span><br><span class="line"></span><br><span class="line">Note that the input array is passed in by reference, which means modification to </span><br><span class="line">the input array will be known to the caller as well.</span><br><span class="line"></span><br><span class="line">Internally you can think of this:</span><br><span class="line"></span><br><span class="line">// nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// any modification to nums in your function would be known by the caller.</span><br><span class="line">// using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i = 0; i <span class="xml"><span class="tag">&lt; <span class="attr">len</span>; <span class="attr">i</span>++) &#123;</span></span></span><br><span class="line"><span class="xml">    print(nums[i]);</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>1、设置双指针 i, j, 其中指针 j 每次向前移动一步</p><p>2、 遍历 nums，当 nums[i] !== nums[j] 时，说明不是重复元素, 指针 i 向前挪动一步， 同时把 nums[j] 赋值给 nums[i]</p><p>3、结果返回 i + 1</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeDuplicates = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = nums.length;</span><br><span class="line">  <span class="keyword">if</span> (!len) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; len; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[j] !== nums[i]) &#123;</span><br><span class="line">      i++;</span><br><span class="line">      nums[i] = nums[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">test.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = removeDuplicates(ele);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;result:&#x27;</span>, result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>题目的要求是拿到不重复元素的长度，其实上述方法以及把不重复元素都放在了 (0, n) 位，要取不重复元素集合只需要切割 (0, res) 就可以了。通过不断的用不重复的下一个元素替换掉当前的重复元素，达到去重的目的，细细品味，还是很有意思的。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>找出两个有序数组的中值</title>
      <link href="/2020/08/03/findMedianSortedArrays/"/>
      <url>/2020/08/03/findMedianSortedArrays/</url>
      
        <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">There are two sorted arrays nums1 and nums2 of size m and n respectively.</span><br><span class="line"></span><br><span class="line">Find the median of the two sorted arrays. The overall run time complexity </span><br><span class="line">should be O(log (m+n)).</span><br><span class="line"></span><br><span class="line">You may assume nums1 and nums2 cannot be both empty.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br><span class="line">The median is 2.0</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br><span class="line"></span><br><span class="line">The median is (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>暴力破解法，使用归并排序，把两个数组按照从小到大的排序方式合并到一个数组里，在新的数组里找中值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMedianSortedArrays = <span class="function"><span class="keyword">function</span> (<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// brute force</span></span><br><span class="line">  <span class="comment">// 归并排序</span></span><br><span class="line">  <span class="keyword">const</span> merged = [];</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> [lenA, lenB] = [nums1.length, nums2.length];</span><br><span class="line">  <span class="keyword">while</span> (i &lt; lenA &amp;&amp; j &lt; lenB) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">      merged.push(nums1[i]);</span><br><span class="line">      i++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      merged.push(nums2[j]);</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; lenA) &#123;</span><br><span class="line">    merged.push(nums1[i]);</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (j &lt; lenB) &#123;</span><br><span class="line">    merged.push(nums2[j]);</span><br><span class="line">    j++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = merged;</span><br><span class="line">  <span class="keyword">return</span> length % <span class="number">2</span> === <span class="number">1</span></span><br><span class="line">    ? merged[<span class="built_in">Math</span>.floor(length / <span class="number">2</span>)]</span><br><span class="line">    : (merged[length / <span class="number">2</span>] + merged[length / <span class="number">2</span> - <span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = [[[<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>]],[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]]</span><br><span class="line"></span><br><span class="line">test.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = findMedianSortedArrays(ele[<span class="number">0</span>], ele[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 服务器</title>
      <link href="/2020/08/02/http%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/08/02/http%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、HTTP-服务是什么"><a href="#一、HTTP-服务是什么" class="headerlink" title="一、HTTP 服务是什么"></a>一、HTTP 服务是什么</h3><h4 id="1、一个网页请求包含两次-HTTP-包交换"><a href="#1、一个网页请求包含两次-HTTP-包交换" class="headerlink" title="1、一个网页请求包含两次 HTTP 包交换"></a>1、一个网页请求包含两次 HTTP 包交换</h4><p>(1) 浏览器向 HTTP 服务器发送请求 HTTP 包</p><p>(2) HTTP 服务器向浏览器返回 HTTP 响应包</p><h4 id="2、HTTP-服务要做的事情"><a href="#2、HTTP-服务要做的事情" class="headerlink" title="2、HTTP 服务要做的事情"></a>2、HTTP 服务要做的事情</h4><p>(1) 解析 HTTP 请求报文</p><p>(2) 返回 HTTP 响应报文</p><h3 id="二、手写-HTTP-服务"><a href="#二、手写-HTTP-服务" class="headerlink" title="二、手写 HTTP 服务"></a>二、手写 HTTP 服务</h3><h4 id="1、-最简单的服务"><a href="#1、-最简单的服务" class="headerlink" title="1、 最简单的服务"></a>1、 最简单的服务</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 浏览器会默认请求的同时请求网站图标</span></span><br><span class="line">    <span class="keyword">if</span> (req.url === <span class="string">&#x27;/favicon.ico&#x27;</span>) &#123;</span><br><span class="line">      req.writeHead(<span class="number">200</span>)</span><br><span class="line">      req.end()</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    res.writeHead(<span class="string">&#x27;200&#x27;</span>)</span><br><span class="line">    <span class="comment">// 返回字符串</span></span><br><span class="line">    <span class="comment">// res.end(&#x27;hello&#x27;)</span></span><br><span class="line">    <span class="comment">// 返回网页</span></span><br><span class="line">    fs</span><br><span class="line">      .createReadStream(__dirname + <span class="string">&#x27;/index.html&#x27;</span>)</span><br><span class="line">      .pipe(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h4 id="2、-稍微复杂一点的-HTTP-服务"><a href="#2、-稍微复杂一点的-HTTP-服务" class="headerlink" title="2、 稍微复杂一点的 HTTP 服务"></a>2、 稍微复杂一点的 HTTP 服务</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 解析 url，把 url 分成几部分</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="comment">// 解析 url 的 query</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> game = <span class="built_in">require</span>(<span class="string">&#x27;./game&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> payloadWon = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> parseUrl = url.parse(req.url);</span><br><span class="line">    <span class="comment">// 浏览器会默认请求的同时请求网站图标</span></span><br><span class="line">    <span class="keyword">if</span> (parseUrl.pathname === <span class="string">&#x27;/favicon.ico&#x27;</span>) &#123;</span><br><span class="line">      req.writeHead(<span class="number">200</span>);</span><br><span class="line">      req.end();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parseUrl.pathname === <span class="string">&#x27;/game&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> query = querystring.parse(parseUrl.query);</span><br><span class="line">      <span class="keyword">const</span> playAction = query.action;</span><br><span class="line">      <span class="keyword">const</span> result = game(playAction);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (payloadWon &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        res.writeHead(<span class="number">500</span>);</span><br><span class="line">        res.end(<span class="string">&#x27;我再也不和你玩了&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      res.writeHead(<span class="number">200</span>);</span><br><span class="line">      <span class="keyword">if</span> (result === <span class="number">0</span>) &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;平局！&#x27;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result === <span class="number">1</span>) &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;你赢了！&#x27;</span>);</span><br><span class="line">        payloadWon += <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;你输了！&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parseUrl.pathname === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">      fs.createReadStream(__dirname + <span class="string">&#x27;/index.html&#x27;</span>).pipe(res);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="三、使用-express-写-HTTP-服务"><a href="#三、使用-express-写-HTTP-服务" class="headerlink" title="三、使用 express 写 HTTP 服务"></a>三、使用 express 写 HTTP 服务</h3><h4 id="1、-express-的核心功能"><a href="#1、-express-的核心功能" class="headerlink" title="1、 express 的核心功能"></a>1、 express 的核心功能</h4><ul><li><p>路由</p></li><li><p>request/response 简化</p></li></ul><h4 id="2、-简单使用"><a href="#2、-简单使用" class="headerlink" title="2、 简单使用"></a>2、 简单使用</h4><p>(1) 安装：<code>npm i express</code></p><p>(2) 简单 demo</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> game = <span class="built_in">require</span>(<span class="string">&#x27;./game&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> payloadWon = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/favicon.ico&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  req.status(<span class="number">200</span>);</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(</span><br><span class="line">  <span class="string">&#x27;/game&#x27;</span>,</span><br><span class="line">  <span class="comment">// 中间件</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (payloadWon &gt; <span class="number">3</span>) &#123;</span><br><span class="line">      res.status(<span class="number">500</span>);</span><br><span class="line">      res.send(<span class="string">&#x27;我再也不和你玩了&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过next执行后续中间件</span></span><br><span class="line">    next();</span><br><span class="line">    <span class="keyword">if</span> (res.playWon) &#123;</span><br><span class="line">      payloadWon += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> query = req.query;</span><br><span class="line">    <span class="keyword">const</span> playAction = query.action;</span><br><span class="line">    <span class="keyword">const</span> result = game(playAction);</span><br><span class="line"></span><br><span class="line">    res.status(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">if</span> (result === <span class="number">0</span>) &#123;</span><br><span class="line">      res.send(<span class="string">&#x27;平局！&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result === <span class="number">1</span>) &#123;</span><br><span class="line">      res.send(<span class="string">&#x27;你赢了！&#x27;</span>);</span><br><span class="line">      res.playWon = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(<span class="string">&#x27;你输了！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(fs.readFileSync(__dirname + <span class="string">&#x27;/index.html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>(3) 缺点: 对异步的处理不完善,中间件是同步的，不能异步</p><h3 id="四、使用-koa-写-HTTP-服务"><a href="#四、使用-koa-写-HTTP-服务" class="headerlink" title="四、使用 koa 写 HTTP 服务"></a>四、使用 koa 写 HTTP 服务</h3><h4 id="1、功能点"><a href="#1、功能点" class="headerlink" title="1、功能点"></a>1、功能点</h4><p>(1) 中间件可以异步</p><p>(2) 比 express 更极致的 resquest/response 简化，Contex 合并了 request 和 response</p><p>(3) 请求和返回的处理采用赋值的形式</p><p>(4) 精简内核，所有额外功能都移到中间件实现，相比于 express 砍掉了路由模块</p><h4 id="2、简单使用"><a href="#2、简单使用" class="headerlink" title="2、简单使用"></a>2、简单使用</h4><p>(1) 安装 koa: <code>npm install koa</code></p><p>(2) 安装路由中间件: <code>npm i koa-mount</code></p><p>(3) 一个🌰</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> game = <span class="built_in">require</span>(<span class="string">&#x27;../game&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mount = <span class="built_in">require</span>(<span class="string">&#x27;koa-mount&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> payloadWon = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line">app.use(</span><br><span class="line">  mount(<span class="string">&#x27;/favicon.ico&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    ctx.status = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gameKoa = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line">app.use(mount(<span class="string">&#x27;/game&#x27;</span>, gameKoa));</span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line">gameKoa.use(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (payloadWon &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    ctx.status = <span class="number">500</span>;</span><br><span class="line">    ctx.body = <span class="string">&#x27;我再也不和你玩了&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通过next执行后续中间件</span></span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  <span class="keyword">if</span> (ctx.playWon) &#123;</span><br><span class="line">    payloadWon += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">gameKoa.use(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> query = ctx.query;</span><br><span class="line">  <span class="keyword">const</span> playAction = query.action;</span><br><span class="line">  <span class="keyword">const</span> result = game(playAction);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ctx.status = <span class="number">200</span>;</span><br><span class="line">      <span class="keyword">if</span> (result === <span class="number">0</span>) &#123;</span><br><span class="line">        ctx.body = <span class="string">&#x27;平局！&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result === <span class="number">1</span>) &#123;</span><br><span class="line">        ctx.body = <span class="string">&#x27;你赢了！&#x27;</span>;</span><br><span class="line">        ctx.playWon = <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.body = <span class="string">&#x27;你输了！&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;,<span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(</span><br><span class="line">  mount(<span class="string">&#x27;/&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    ctx.body = fs.readFileSync(__dirname + <span class="string">&#x27;/index.html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>ps: 按模块划分逻辑，可以提升程序容错率</p><h3 id="五、Express-VS-Koa"><a href="#五、Express-VS-Koa" class="headerlink" title="五、Express VS Koa"></a>五、Express VS Koa</h3><p>1、express 门槛低，koa 更强大优雅</p><p>2、express 封装更多东西， 开发更快速，koa 可定制性更高</p><p>3、express 适合小型应用，koa 适合大型，需要可维护性的程序</p>]]></content>
      
      
      <categories>
          
          <category> 服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Two Sum</title>
      <link href="/2020/07/29/%E4%B8%A4%E6%95%B0%E6%B1%82%E5%92%8C%E9%97%AE%E9%A2%98/"/>
      <url>/2020/07/29/%E4%B8%A4%E6%95%B0%E6%B1%82%E5%92%8C%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">Given an array of integers, return indices of the </span><br><span class="line">two numbers such that they add up to a specific </span><br><span class="line">target.</span><br><span class="line"></span><br><span class="line">You may assume that each input would have exactly </span><br><span class="line">one solution, and you may not use the same element </span><br><span class="line">twice.</span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line"></span><br><span class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class="line"></span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="1、Brute-Force"><a href="#1、Brute-Force" class="headerlink" title="1、Brute Force"></a>1、Brute Force</h4><p>暴力破解，遍历每个元素 x，查找符合 n = target−x 的值，返回 n, x 的下标</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// brute force Runtime: 112 ms 37MB</span></span><br><span class="line"><span class="keyword">const</span> len = nums.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j =  i+<span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[j] === target - nums[i]) &#123;</span><br><span class="line">      <span class="keyword">return</span> [i, j]</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><h4 id="2、two-pass-hash-table"><a href="#2、two-pass-hash-table" class="headerlink" title="2、two-pass hash table"></a>2、two-pass hash table</h4><p>(1) 遍历两次数组，第一次遍历，以元素为 key，索引为 value，生成一份 map</p><p>(2) 第二遍遍历, 确定每个元素被目标元素相减所得的值 <code>(target - nums[i])</code> 是否存在 map 中，这里需要注意 <code>(target - nums[i]) != nums[i]</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// two-pass hash table Runtime: 72 ms 37.9MB</span></span><br><span class="line"><span class="keyword">const</span> len = nums.length;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  map.set(nums[i], i) </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> complement = target - nums[i]</span><br><span class="line">  <span class="keyword">if</span> (map.has(complement) &amp;&amp; map.get(complement) !== i) &#123;</span><br><span class="line">    <span class="keyword">return</span> [i, map.get(complement)]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><h4 id="3、-One-pass-hash-table"><a href="#3、-One-pass-hash-table" class="headerlink" title="3、 One-pass hash table"></a>3、 One-pass hash table</h4><p>遍历一遍列表，目标值与当前元素相减得到符合条件的元素，查找字典，如果存在符合条件的键，返回值，否则把该元素作为键，索引作为值存到字典里，重复以上步骤，直到找到对应的两个元素，返回索引列表,若未找到，返回空数组。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, val <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            complement = target - val</span><br><span class="line">            <span class="keyword">if</span> complement <span class="keyword">in</span> hashmap:</span><br><span class="line">                <span class="keyword">return</span> [hashmap[complement], i]</span><br><span class="line">            hashmap[val] = i</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, nums, target</span>):</span></span><br><span class="line">        print(self.twoSum(nums, target))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> len = nums.length;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> complement = target - nums[i];</span><br><span class="line">  <span class="keyword">if</span> (map.has(complement) &amp;&amp; map.get(complement) !== i) &#123;</span><br><span class="line">    <span class="keyword">return</span> [map.get(complement),i];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    map.set(nums[i], i); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序 Tabs-Sticky</title>
      <link href="/2020/07/20/%E5%B0%8F%E7%A8%8B%E5%BA%8Ftabs-sticky/"/>
      <url>/2020/07/20/%E5%B0%8F%E7%A8%8B%E5%BA%8Ftabs-sticky/</url>
      
        <content type="html"><![CDATA[<h3 id="一、小程序要实现-sticky-真的无解吗？"><a href="#一、小程序要实现-sticky-真的无解吗？" class="headerlink" title="一、小程序要实现 sticky 真的无解吗？"></a>一、小程序要实现 sticky 真的无解吗？</h3><p>要实现中间的导航吸顶，在网页端很简单的使用 sticky 属性就搞定了，在小程序一设置，发现没有效果，就跟同事说小程序不支持这个属性，再看看官网，有相关的扩展组件，说明是真的不支持，才有给扩展组件吧。开始结合 scroll-view 手撸，发现手撸的有点卡，这样下去不行。尝试用了下官方的扩展组件，吸顶之后就一直在顶部了 emm，而且好像不支持 flex，不符合需求，一定是我的姿势不对，那就再手撸一下吧。</p><h3 id="二、实现吸顶的-tabs-组件"><a href="#二、实现吸顶的-tabs-组件" class="headerlink" title="二、实现吸顶的 tabs 组件"></a>二、实现吸顶的 tabs 组件</h3><p>1、tab-item 设置 position 为 sticky</p><p>要实现这个功能，首先需要把要吸顶的元素设置 sticky，像这样</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">sticky</span>;</span><br><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">-webkit-sticky</span>;</span><br><span class="line"><span class="selector-tag">top</span>: 0;</span><br><span class="line"><span class="selector-tag">z-index</span>: 666;</span><br></pre></td></tr></table></figure><p>记得设置层级高一点，不然滚动之后可能会看不到了</p><p>2、设置滚动高度</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">attached() &#123;</span><br><span class="line">  <span class="built_in">this</span>.getNodeInfo(<span class="string">&#x27;sticky&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">getNodeInfo(nodeName) &#123;</span><br><span class="line">  <span class="keyword">const</span> query = <span class="built_in">this</span>.$wx.createSelectorQuery()</span><br><span class="line"></span><br><span class="line">  query.select(<span class="string">`#<span class="subst">$&#123;nodeName&#125;</span>`</span>).boundingClientRect()</span><br><span class="line">  query.selectViewport().scrollOffset()</span><br><span class="line">  query.exec(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    res = res.filter(<span class="function"><span class="params">ele</span> =&gt;</span> ele)</span><br><span class="line">    <span class="built_in">this</span>.scrollTop = res[<span class="number">0</span>].height</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此基本实现了 sticky 效果，要说有什么瑕疵吧，也还是有点的，不过能接受吧</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义 Github 动态</title>
      <link href="/2020/07/20/%E8%87%AA%E5%AE%9A%E4%B9%89github%E5%8A%A8%E6%80%81/"/>
      <url>/2020/07/20/%E8%87%AA%E5%AE%9A%E4%B9%89github%E5%8A%A8%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h3 id="一、创建-github-同名项目"><a href="#一、创建-github-同名项目" class="headerlink" title="一、创建 github 同名项目"></a>一、创建 github 同名项目</h3><p><img src="/images/info.png" alt="info"></p><p>创建项目成功之后，打开主页，指定信息就是刚刚项目里的 readme 啦</p><p><img src="/images/info-top.png" alt="info-top"></p><h3 id="二、同步博客最近文章"><a href="#二、同步博客最近文章" class="headerlink" title="二、同步博客最近文章"></a>二、同步博客最近文章</h3><p>未完待续……</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6 个常见的网站可用性问题及其修正方法</title>
      <link href="/2020/07/20/6%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%AB%99%E5%8F%AF%E7%94%A8%E6%80%A7%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E4%BF%AE%E6%AD%A3%E6%96%B9%E6%B3%95/"/>
      <url>/2020/07/20/6%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%AB%99%E5%8F%AF%E7%94%A8%E6%80%A7%E9%97%AE%E9%A2%98%E5%8F%8A%E5%85%B6%E4%BF%AE%E6%AD%A3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、文字对比度低"><a href="#一、文字对比度低" class="headerlink" title="一、文字对比度低"></a>一、文字对比度低</h3><h4 id="1、-影响"><a href="#1、-影响" class="headerlink" title="1、 影响"></a>1、 影响</h4><p>文字对比度过低，对弱视群体、手机用户以及老年人不友好</p><h4 id="2、修正方法"><a href="#2、修正方法" class="headerlink" title="2、修正方法"></a>2、修正方法</h4><p>(1) 使用 lighthouse 评估文字对比度</p><p>(2) 使用相关<a href="https://dequeuniversity.com/rules/axe/3.5/color-contrast 调整文字对比度">工具</a>，根据 WCAG 规定，比较适合的文字对比度是 4.5:1</p><h3 id="二、图片没有替代文字"><a href="#二、图片没有替代文字" class="headerlink" title="二、图片没有替代文字"></a>二、图片没有替代文字</h3><h4 id="1、影响"><a href="#1、影响" class="headerlink" title="1、影响"></a>1、影响</h4><p>对于一些弱视或者盲人群体，阅读网站可能需要播放文字信息，屏幕阅读器是无法识别图片信息的</p><h4 id="2、修正方法-1"><a href="#2、修正方法-1" class="headerlink" title="2、修正方法"></a>2、修正方法</h4><p>(1) 使用 img 元素，直接在 alt 属性里添加图片描述信息</p><p>(2) 如果图片在 background 属性里，可以在 aria-label 属性里添加相应的描述信息</p><p>(3) 如果图片描述的是其他元素的信息，可以在 aria-labelledby 属性里添加对应的描述</p><p>(4) 若图片本身没有意义，可以加一个空的 alt 属性，屏幕阅读器会略过，继续往下阅读</p><h3 id="三、空链接和空按钮"><a href="#三、空链接和空按钮" class="headerlink" title="三、空链接和空按钮"></a>三、空链接和空按钮</h3><h4 id="1、影响-1"><a href="#1、影响-1" class="headerlink" title="1、影响"></a>1、影响</h4><p>链接个按钮的文字应该能被屏幕阅读器识别，这也包括作为按钮或链接的图片替换文字。在网页中我们经常会使用一些图标作为按钮或者链接，比如下面这样：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;twitter.svg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上 demo 中的按钮和链接确实描述信息，屏幕阅读器会理解为”加按钮”, 链接可能会被阅读为图片的文件名或者链接名，这会让不懂该网站的人感到很迷惑</p><h4 id="2、修正方法-2"><a href="#2、修正方法-2" class="headerlink" title="2、修正方法"></a>2、修正方法</h4><p>在按钮或链接元素的 aria-label 属性中加上描述信息，比如这样</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">aria-label</span>=<span class="string">&quot;Add a playlist&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;View our Twitter page&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;twitter.svg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、缺少表单输入标签"><a href="#四、缺少表单输入标签" class="headerlink" title="四、缺少表单输入标签"></a>四、缺少表单输入标签</h3><h4 id="1、影响-2"><a href="#1、影响-2" class="headerlink" title="1、影响"></a>1、影响</h4><p>一个缺少表单输入标签的栗子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>(1) 提升屏幕阅读体验</p><p>(2) 扩大小屏幕可点击范围</p><h4 id="2、修正方法-3"><a href="#2、修正方法-3" class="headerlink" title="2、修正方法"></a>2、修正方法</h4><p>(1) 把 input 元素放到 label 元素里</p><p>(2) 给 label 元素一个 for 属性，指向 input 元素的 id</p><p>(3) 给 input 元素添加 aria-labelledby 属性，写入描述信息元素的 id</p><p>这是栗子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Name: <span class="tag">&lt;<span class="name">input</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="五、缺少文档语言描述"><a href="#五、缺少文档语言描述" class="headerlink" title="五、缺少文档语言描述"></a>五、缺少文档语言描述</h3><h4 id="1、影响-3"><a href="#1、影响-3" class="headerlink" title="1、影响"></a>1、影响</h4><p>如果一个网页没有在文档元素中加 lang 属性，屏幕阅读器会把网页的语言默认为阅读器的默认配置语言。若用户是多语言者，可能并不会用屏幕阅读器的默认语言去阅读网页，若使用了错误的语言库阅读发音可能会很奇怪，可能会造成网页不可用</p><h4 id="2、修正方法-4"><a href="#2、修正方法-4" class="headerlink" title="2、修正方法"></a>2、修正方法</h4><p>给 html 元素添加 lang 属性,可以在<a href="http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry">这里</a> 或<a href="https://r12a.github.io/app-subtags/">这里</a> 查找所有的语言描述</p><!-- 简要翻译自: https://blog.scottlogic.com/2020/07/02/6-most-common-accessibility-problems.html#empty-links-and-empty-buttons -->]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好玩的 Console</title>
      <link href="/2020/07/18/%E5%A5%BD%E7%8E%A9%E7%9A%84console/"/>
      <url>/2020/07/18/%E5%A5%BD%E7%8E%A9%E7%9A%84console/</url>
      
        <content type="html"><![CDATA[<p>一切要从昨天打开知乎控制台说起，昨天打开知乎控制台看到了 acii 图形的打印，比较好奇怎么画出来的，首先想肯定要用 console 吧，那么到底使用什么姿势 console 出来的呢？emmm，然后就有了这个。</p><p>日常开发中用的比较多的 console 方法就是 log，看了看，知乎的应该就是在线生成了对应的字符串，打印出来的吧，好像也没什么难度，类似这个<a href="http://patorjk.com/software/taag/#p=display&amp;f=Graffiti&amp;t=Type%20Something%20">网站</a>，就可以生成一毛一样的字符样式。那么 console 到底有没有好玩的地方呢？看看下面几个例子，感觉好像还蛮好玩。</p><h3 id="一、给打印的字符加上样式"><a href="#一、给打印的字符加上样式" class="headerlink" title="一、给打印的字符加上样式"></a>一、给打印的字符加上样式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> style = <span class="string">&#x27;color: green; font-size: 24px;&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">&#x27;%c我变绿了!q^q&#x27;</span>,</span><br><span class="line">  style</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="/images/console-color.png" alt="console-color"></p><h3 id="二、复杂数据结构打印成表格"><a href="#二、复杂数据结构打印成表格" class="headerlink" title="二、复杂数据结构打印成表格"></a>二、复杂数据结构打印成表格</h3><p>1、 数组对象，数组索引为行名称，数组对象的 key 为列名</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">var</span> price = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;小埋抱枕&#x27;</span>, <span class="attr">val</span>: <span class="string">&#x27;50&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;娘口老师抱枕&#x27;</span>, <span class="attr">val</span>: <span class="string">&#x27;150&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;夏目马克杯&#x27;</span>, <span class="attr">val</span>: <span class="string">&#x27;20&#x27;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.table(price);</span><br></pre></td></tr></table></figure><p><img src="/images/console-table.png" alt="console-table"></p><p>2、 对象，一维对象的 key 为行的名称，二维对象的 key 为列的名称</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">  <span class="string">&#x27;Amy&#x27;</span>: &#123; <span class="attr">age</span>: <span class="number">14</span>, <span class="attr">hobby</span>: <span class="string">&#x27;pin-pong&#x27;</span> &#125;,</span><br><span class="line">  <span class="string">&#x27;Mike&#x27;</span>: &#123; <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">hobby</span>: <span class="string">&#x27;walking&#x27;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(info);</span><br></pre></td></tr></table></figure><p><img src="/images/console-table-obj.png" alt="console-table-obj"></p><h3 id="四、查看代码执行时间"><a href="#四、查看代码执行时间" class="headerlink" title="四、查看代码执行时间"></a>四、查看代码执行时间</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">&#x27;Array initialize&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = array.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  array[i] = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&#x27;Array initialize&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="五、分组显示数据"><a href="#五、分组显示数据" class="headerlink" title="五、分组显示数据"></a>五、分组显示数据</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">&#x27;一级分组&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;一级分组的内容&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.group(<span class="string">&#x27;二级分组&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;二级分组的内容&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.groupEnd(); <span class="comment">// 一级分组结束</span></span><br><span class="line"><span class="built_in">console</span>.groupEnd(); <span class="comment">// 二级分组结束</span></span><br></pre></td></tr></table></figure><h3 id="六、清空控制台"><a href="#六、清空控制台" class="headerlink" title="六、清空控制台"></a>六、清空控制台</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.clear();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用图片格式比较</title>
      <link href="/2020/07/14/%E5%B8%B8%E7%94%A8%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E6%AF%94%E8%BE%83/"/>
      <url>/2020/07/14/%E5%B8%B8%E7%94%A8%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h3 id="一、BMP"><a href="#一、BMP" class="headerlink" title="一、BMP"></a>一、BMP</h3><h4 id="1、是什么"><a href="#1、是什么" class="headerlink" title="1、是什么"></a>1、是什么</h4><p>无损的(没有对数据进行压缩)、既支持索引色也支持直接色的点阵图</p><h4 id="2、缺点"><a href="#2、缺点" class="headerlink" title="2、缺点"></a>2、缺点</h4><p>由于是无损图片，所以图片文件一般比较大</p><h4 id="3、适用场景"><a href="#3、适用场景" class="headerlink" title="3、适用场景"></a>3、适用场景</h4><p>除了在 Windows 操作系统中还比较常见之外，我们几乎看不到它</p><h3 id="二、GIF-Graphics-Interchange-Format"><a href="#二、GIF-Graphics-Interchange-Format" class="headerlink" title="二、GIF(Graphics Interchange Format)"></a>二、GIF(Graphics Interchange Format)</h3><h4 id="1、是什么-1"><a href="#1、是什么-1" class="headerlink" title="1、是什么"></a>1、是什么</h4><p>无损的、采用索引色的点阵图</p><h4 id="2、优点"><a href="#2、优点" class="headerlink" title="2、优点"></a>2、优点</h4><p>(1) 采用LZW压缩算法进行编码，文件小</p><p>(2) 支持动画以及透明</p><h4 id="3、缺点"><a href="#3、缺点" class="headerlink" title="3、缺点"></a>3、缺点</h4><p>仅支持 8bit 的索引色，图片中，只能存在256种不同的颜色。</p><h4 id="4、适用场景"><a href="#4、适用场景" class="headerlink" title="4、适用场景"></a>4、适用场景</h4><p>适用于对色彩要求不高同时需要文件体积较小的场景</p><h3 id="三、JPEG"><a href="#三、JPEG" class="headerlink" title="三、JPEG"></a>三、JPEG</h3><h4 id="1、是什么-2"><a href="#1、是什么-2" class="headerlink" title="1、是什么"></a>1、是什么</h4><p>有损的、采用直接色的点阵图</p><h4 id="2、优点-1"><a href="#2、优点-1" class="headerlink" title="2、优点"></a>2、优点</h4><p>采用直接色，颜色丰富</p><h4 id="3、缺点-1"><a href="#3、缺点-1" class="headerlink" title="3、缺点"></a>3、缺点</h4><p>有损压缩，图片的部分原始信息被去除，降低了图片的质量</p><h4 id="4、适用场景-1"><a href="#4、适用场景-1" class="headerlink" title="4、适用场景"></a>4、适用场景</h4><p>存储照片</p><h3 id="四、PNG-8-PNG-Portable-Network-Graphics"><a href="#四、PNG-8-PNG-Portable-Network-Graphics" class="headerlink" title="四、PNG-8(PNG,Portable Network Graphics)"></a>四、PNG-8(PNG,Portable Network Graphics)</h3><h4 id="1、是什么-3"><a href="#1、是什么-3" class="headerlink" title="1、是什么"></a>1、是什么</h4><p>无损的、使用索引色的点阵图</p><h4 id="2、优点-2"><a href="#2、优点-2" class="headerlink" title="2、优点"></a>2、优点</h4><p>(1) 文件体积小</p><p>(2) 支持透明度调节</p><h4 id="3、适用场景-1"><a href="#3、适用场景-1" class="headerlink" title="3、适用场景"></a>3、适用场景</h4><p>适用于需要文件体积较小的场景</p><h3 id="五、PNG-24"><a href="#五、PNG-24" class="headerlink" title="五、PNG-24"></a>五、PNG-24</h3><h4 id="1、是什么-4"><a href="#1、是什么-4" class="headerlink" title="1、是什么"></a>1、是什么</h4><p>无损的、使用直接色的点阵图</p><h4 id="2、优点-3"><a href="#2、优点-3" class="headerlink" title="2、优点"></a>2、优点</h4><p>(1) 图片显示效果好</p><p>(2) 支持透明度调节</p><h4 id="3、缺点-2"><a href="#3、缺点-2" class="headerlink" title="3、缺点"></a>3、缺点</h4><p>文件体积大</p><h4 id="4、适用场景-2"><a href="#4、适用场景-2" class="headerlink" title="4、适用场景"></a>4、适用场景</h4><p>希望达到更好的图片显示效果，不在乎图片体积</p><h3 id="六、SVG-Scalable-Vector-Graphics"><a href="#六、SVG-Scalable-Vector-Graphics" class="headerlink" title="六、SVG(Scalable Vector Graphics)"></a>六、SVG(Scalable Vector Graphics)</h3><h4 id="1、是什么-5"><a href="#1、是什么-5" class="headerlink" title="1、是什么"></a>1、是什么</h4><p>无损的矢量图</p><h4 id="2、优点-4"><a href="#2、优点-4" class="headerlink" title="2、优点"></a>2、优点</h4><p>(1) 由于是矢量图，所以图片放大时不会失真</p><p>(2) 使用 XML 描述图片，可以方便的修改</p><h4 id="3、适用场景-2"><a href="#3、适用场景-2" class="headerlink" title="3、适用场景"></a>3、适用场景</h4><p>企业 Logo、Icon</p><h3 id="七、webP"><a href="#七、webP" class="headerlink" title="七、webP"></a>七、webP</h3><h4 id="1、是什么-6"><a href="#1、是什么-6" class="headerlink" title="1、是什么"></a>1、是什么</h4><p>支持有损和无损压缩的、使用直接色的点阵图</p><h4 id="2、优点-5"><a href="#2、优点-5" class="headerlink" title="2、优点"></a>2、优点</h4><p>(1) 文件体积更小</p><p>(2) 支持透明度</p><h4 id="3、缺点-3"><a href="#3、缺点-3" class="headerlink" title="3、缺点"></a>3、缺点</h4><p>(1) 支持的厂商少，目前只有 Chrome 浏览器和 Opera 浏览器支持 WebP 格式</p><h3 id="其他相关概念"><a href="#其他相关概念" class="headerlink" title="其他相关概念"></a>其他相关概念</h3><h4 id="1、有损压缩-vs-无损压缩"><a href="#1、有损压缩-vs-无损压缩" class="headerlink" title="1、有损压缩 vs 无损压缩"></a>1、有损压缩 vs 无损压缩</h4><p>(1) 有损压缩</p><p>指在压缩文件大小的过程中，损失了一部分图片的信息，降低了图片的质量，并且这种损失是不可逆的</p><p>(2) 无损压缩</p><p>图片质量无损耗，可以从无损压缩过的图片中恢复出原来的信息</p><h4 id="2、索引色-vs-直接色"><a href="#2、索引色-vs-直接色" class="headerlink" title="2、索引色 vs 直接色"></a>2、索引色 vs 直接色</h4><p>(1) 索引色</p><p>存储数字到图片颜色的映射，只能存有限种颜色，通常是 256 种</p><p>(2) 直接色</p><p>使用三原色和透明度存储图片，支持的色彩更丰富</p><h4 id="3、点阵图-vs-矢量图"><a href="#3、点阵图-vs-矢量图" class="headerlink" title="3、点阵图 vs 矢量图"></a>3、点阵图 vs 矢量图</h4><p>(1) 点阵图(位图、像素图)</p><p>最小单位是像素，缩放会失真</p><p>(2) 矢量图(向量图)</p><p>存储元素形状和颜色的算法，缩放不失真</p><!-- 原文章：https://www.zhihu.com/question/20028452/answer/142593276 -->]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科普 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>幽灵空白节点</title>
      <link href="/2020/07/13/%E5%B9%BD%E7%81%B5%E7%A9%BA%E7%99%BD%E8%8A%82%E7%82%B9/"/>
      <url>/2020/07/13/%E5%B9%BD%E7%81%B5%E7%A9%BA%E7%99%BD%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是幽灵空白节点"><a href="#一、什么是幽灵空白节点" class="headerlink" title="一、什么是幽灵空白节点"></a>一、什么是幽灵空白节点</h3><p>1、在HTML5文档声明下，块状元素内部的内联元素的行为表现为多了一块空白节点（无宽度，只有高度），例如下面这样：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./beach.jpeg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: paleturquoise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/ghost.png" alt="幽灵空白节点示例"></p><h3 id="二、为什么会有幽灵空白节点"><a href="#二、为什么会有幽灵空白节点" class="headerlink" title="二、为什么会有幽灵空白节点"></a>二、为什么会有幽灵空白节点</h3><p>(1) 外层的块级元素默认的 line-height 在桌面端表现为 1.2，取决于元素的 font-family</p><p>(2) 内联元素 vertical-align 默认基线对齐</p><p>(3) 综上，此时的基线是行高的顶部，图片下面多出一段空白，即是 line-height 的高度</p><h3 id="三、如何处理幽灵节点"><a href="#三、如何处理幽灵节点" class="headerlink" title="三、如何处理幽灵节点"></a>三、如何处理幽灵节点</h3><p>1、外层的 line-height 设置为 0</p><p>2、 内联元素的 vertical-align 设置为其他元素</p><p>3、内联元素设置 display:block，使 vertical-align 失效</p><p>4、默认情况下 line-height 为数字，此时，该属性的应用值是这个无单位数字&lt;数字&gt;乘以该元素的字体大小，所以可以外层块级元素 font-size 设置为 0</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>级联</title>
      <link href="/2020/07/12/%E7%BA%A7%E8%81%94/"/>
      <url>/2020/07/12/%E7%BA%A7%E8%81%94/</url>
      
        <content type="html"><![CDATA[<h3 id="一、级联的定义"><a href="#一、级联的定义" class="headerlink" title="一、级联的定义"></a>一、级联的定义</h3><p>浏览器决定为元素应用何样式的一种方法</p><h3 id="二、特指度"><a href="#二、特指度" class="headerlink" title="二、特指度"></a>二、特指度</h3><h4 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h4><p>度量 CSS 选择器识别元素精确性的指标</p><h4 id="2、计算"><a href="#2、计算" class="headerlink" title="2、计算"></a>2、计算</h4><p>(1) 为 a、b、c、d 中的各个变量赋予相应的数值，其中，</p><ul><li><p>a 表示 style 属性样式 (0 || 1)</p></li><li><p>b 表示 ID 选择器的数量</p></li><li><p>c 表示类选择器、属性选择器和伪类的数量</p></li><li><p>d 表示类型选择器和伪元素的数量</p></li></ul><p>(2) 比较选择器的特指度时，最左侧的选择器特指度最高</p><h3 id="三、规则集顺序"><a href="#三、规则集顺序" class="headerlink" title="三、规则集顺序"></a>三、规则集顺序</h3><h4 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h4><p>描述 CSS 规则集在样式表中的位置</p><h4 id="2、优先级"><a href="#2、优先级" class="headerlink" title="2、优先级"></a>2、优先级</h4><p>(1) 如果两个声明块中的选择器特指度相同，且他们为同一元素的某个属性应用样式，则在样式表中处于相对靠后位置的声明块中的属性优先级较高</p><p>(2) 除非用 style 属性添加行内样式，否则特指度和规则集顺序决定为元素应用何种样式</p><p>(3) <code>&lt;style&gt;</code> 块或外部样式表中的样式如要比其他样式（包括用 style 属性添加的行内样式）更精确，唯一的方法是在声明块中添加 <code>!important</code> , 若选择相同元素的多个声明块均使用 <code>!important</code>，则位置最靠后的声明块起作用</p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重构 vs 架构</title>
      <link href="/2020/07/12/%E9%87%8D%E6%9E%84vs%E6%9E%B6%E6%9E%84/"/>
      <url>/2020/07/12/%E9%87%8D%E6%9E%84vs%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="一、重构的定义"><a href="#一、重构的定义" class="headerlink" title="一、重构的定义"></a>一、重构的定义</h3><p>指在不改变代码行为的前提下，重写代码，使其更加简洁，易于复用</p><h3 id="二、软件架构的定义"><a href="#二、软件架构的定义" class="headerlink" title="二、软件架构的定义"></a>二、软件架构的定义</h3><p>描述软件项目的各个不同部位之间的组合方式</p><h3 id="三、优秀架构的特点"><a href="#三、优秀架构的特点" class="headerlink" title="三、优秀架构的特点"></a>三、优秀架构的特点</h3><p>1、可预测：对软件的工作方式和结构做出准确的假设，使别人很容易明白和理解</p><p>2、可复用：可以在多处使用同一代码，而无需重写</p><p>3、可扩展：增量开发的过程中，无需做大的结构性变化</p><p>4、可维护：需求变更时，修改一处代码，无需大规模改动其他代码</p><h3 id="四、重构的原因"><a href="#四、重构的原因" class="headerlink" title="四、重构的原因"></a>四、重构的原因</h3><p>1、 需求变更</p><p>2、 架构设计不合理</p><p>3、 低估困难，预估开发时间短，赶进度的开发模式</p><p>4、 忽视最佳实践</p><h3 id="五、什么情况下应该重构代码"><a href="#五、什么情况下应该重构代码" class="headerlink" title="五、什么情况下应该重构代码"></a>五、什么情况下应该重构代码</h3><p>1、修复的 bug 或开发的新功能用到了已有代码（需要复用现有代码）</p><p>2、 处理小任务时顺便重构</p><p>3、当重构能够改善架构或使代码符合编码规范时</p><h3 id="六、重构总结"><a href="#六、重构总结" class="headerlink" title="六、重构总结"></a>六、重构总结</h3><p>1、抽取行内 CSS 可提升复用性</p><p>2、分离代码功能（样式和结构）可增强代码可读性</p><p>3、回归测试可手动用 web 浏览器完成，或通过比较重构后的界面与重构前的界面截图完成</p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Css Background-Image 的应用</title>
      <link href="/2020/07/08/css-background-image%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2020/07/08/css-background-image%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、多背景叠加"><a href="#一、多背景叠加" class="headerlink" title="一、多背景叠加"></a>一、多背景叠加</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 多背景图 */</span></span><br><span class="line"><span class="selector-class">.more-img</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(https://image.flaticon.com/icons/svg/<span class="number">748</span>/<span class="number">748122</span>.svg),<span class="built_in">url</span>(./snow.jpg);</span><br><span class="line">  <span class="attribute">background-position</span>: center, top;</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat, no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">16px</span> <span class="number">16px</span>, cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/snow-other.png" alt="背景叠加"></p><h3 id="二、三角形背景"><a href="#二、三角形背景" class="headerlink" title="二、三角形背景"></a>二、三角形背景</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 三角形背景 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;day bg-image&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;night bg-image&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bg-image</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(./snow.jpg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.day</span> &#123;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.night</span> &#123;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">100vw</span> <span class="number">0</span>, <span class="number">0%</span> <span class="number">0vh</span>, <span class="number">100vw</span> <span class="number">100vh</span>);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">brightness</span>(<span class="number">0.6</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/triggle-bg.png" alt="三角形背景"></p><h3 id="三、背景图叠加渐变"><a href="#三、背景图叠加渐变" class="headerlink" title="三、背景图叠加渐变"></a>三、背景图叠加渐变</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gradient</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">      <span class="number">4deg</span>,</span><br><span class="line">      rgba(<span class="number">38</span>, <span class="number">8</span>, <span class="number">31</span>, <span class="number">0.75</span>) <span class="number">30%</span>,</span><br><span class="line">      <span class="built_in">rgba</span>(<span class="number">213</span>, <span class="number">49</span>, <span class="number">127</span>, <span class="number">0.3</span>) <span class="number">45%</span>,</span><br><span class="line">      <span class="built_in">rgba</span>(<span class="number">232</span>, <span class="number">120</span>, <span class="number">12</span>, <span class="number">0.3</span>) <span class="number">100%</span></span><br><span class="line">    ), <span class="built_in">url</span>(<span class="string">&#x27;./snow.jpg&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/gradient-bg.png" alt="背景图叠加渐变"></p><h3 id="四、背景颜色切换动画"><a href="#四、背景颜色切换动画" class="headerlink" title="四、背景颜色切换动画"></a>四、背景颜色切换动画</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* clolor animate */</span></span><br><span class="line"><span class="selector-class">.color-animateion</span> &#123;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">animation</span>: background-overlay-animation <span class="number">1s</span> ease-in-out infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> background-overlay-animation &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">        <span class="number">4deg</span>,</span><br><span class="line">        rgba(<span class="number">255</span>, <span class="number">78</span>, <span class="number">36</span>, <span class="number">0.3</span>) <span class="number">50%</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">78</span>, <span class="number">36</span>, <span class="number">0.3</span>) <span class="number">100%</span></span><br><span class="line">      ), <span class="built_in">url</span>(<span class="string">&#x27;./snow.jpg&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  25% &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">        <span class="number">4deg</span>,</span><br><span class="line">        rgba(<span class="number">213</span>, <span class="number">49</span>, <span class="number">127</span>, <span class="number">0.3</span>) <span class="number">50%</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">213</span>, <span class="number">49</span>, <span class="number">127</span>, <span class="number">0.3</span>) <span class="number">100%</span></span><br><span class="line">      ), <span class="built_in">url</span>(<span class="string">&#x27;./snow.jpg&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">        <span class="number">4deg</span>,</span><br><span class="line">        rgba(<span class="number">36</span>, <span class="number">182</span>, <span class="number">255</span>, <span class="number">0.3</span>) <span class="number">50%</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">36</span>, <span class="number">182</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">100%</span></span><br><span class="line">      ), <span class="built_in">url</span>(<span class="string">&#x27;./snow.jpg&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">        <span class="number">4deg</span>,</span><br><span class="line">        rgba(<span class="number">0</span>, <span class="number">255</span>, <span class="number">254</span>, <span class="number">0.3</span>) <span class="number">50%</span>,</span><br><span class="line">        <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">254</span>, <span class="number">0.3</span>) <span class="number">100%</span></span><br><span class="line">      ), <span class="built_in">url</span>(<span class="string">&#x27;./snow.jpg&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg-animation.gif" alt="背景颜色切换动画"></p><h3 id="五、网格背景"><a href="#五、网格背景" class="headerlink" title="五、网格背景"></a>五、网格背景</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item_img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item_img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item_img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item_img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item_img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item_img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item_img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 网格背景图 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">235</span>, <span class="number">192</span>);</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">25</span>fr <span class="number">30</span>fr <span class="number">25</span>fr <span class="number">20</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">20</span>fr <span class="number">45</span>fr <span class="number">5</span>fr <span class="number">30</span>fr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item_img</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;./24.jpeg&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/grid-bg.png" alt="网格背景"></p><h3 id="六、图像设置为文本颜色"><a href="#六、图像设置为文本颜色" class="headerlink" title="六、图像设置为文本颜色"></a>六、图像设置为文本颜色</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;center&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">  &lt;h1 class=&quot;</span><span class="attr">img-color</span>&quot;&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 把图像设置为文本颜色 */</span></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial, Helvetica, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-color</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;./24.jpeg&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="attribute">-webkit-background-clip</span>: text;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg-text.png" alt="图片底色文字"></p><h3 id="七、背景图半透明叠加"><a href="#七、背景图半透明叠加" class="headerlink" title="七、背景图半透明叠加"></a>七、背景图半透明叠加</h3><p>使用 cross-fade 函数通过背景融合的方式实现背景图的效果，目前只支持 (url1, url2, percent) 的方式，(url percent, url percent) 这种方式试了下，没效果。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.cross-fade-image</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: no-repeat center / contain;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">-webkit-cross-fade</span>(url(beach.jpeg), <span class="built_in">url</span>(pet.png), <span class="number">65%</span>);</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">cross-fade</span>(url(beach.jpeg), <span class="built_in">url</span>(pet.png),<span class="number">65%</span>);   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/bg-semi-transparent.png" alt="背景图半透明叠加示例"></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Vscode 搞事情</title>
      <link href="/2020/07/01/%E7%94%A8vscode%E6%90%9E%E4%BA%8B%E6%83%85/"/>
      <url>/2020/07/01/%E7%94%A8vscode%E6%90%9E%E4%BA%8B%E6%83%85/</url>
      
        <content type="html"><![CDATA[<h3 id="一、有极客范的写代码-————-Power-Mode"><a href="#一、有极客范的写代码-————-Power-Mode" class="headerlink" title="一、有极客范的写代码 ———— Power Mode"></a>一、有极客范的写代码 ———— Power Mode</h3><p>Power Mode 会在每次键盘按下字母时，在编辑界面对应的字符后面有一段动效，动效有几种模式，可以自己设置，用起来手感还是不错的，写起代码来会觉得更加的生动有趣。</p><p><img src="/images/power-mode.gif" alt="power mode 使用示例"></p><h3 id="二、不需要额外的工具，画流程图就是这么简单-————-vscode-drawio"><a href="#二、不需要额外的工具，画流程图就是这么简单-————-vscode-drawio" class="headerlink" title="二、不需要额外的工具，画流程图就是这么简单 ———— vscode-drawio"></a>二、不需要额外的工具，画流程图就是这么简单 ———— vscode-drawio</h3><p><img src="/images/draw-io.gif" alt="vscode-drawio 使用示例"></p><p>之前画流程图工具要么用在线的draw.io，要么用思维导图，还是比较麻烦的，有了这个插件，只需要创建 .drawio 文件，就可以方便快捷的创建流程图</p><h3 id="三、配置模板，减少重复输入代码的次数"><a href="#三、配置模板，减少重复输入代码的次数" class="headerlink" title="三、配置模板，减少重复输入代码的次数"></a>三、配置模板，减少重复输入代码的次数</h3><p>每次用新的框架或者语言，一些常用的代码块总是要去反复输入，很麻烦，就在想有没有一种类似文件模板的东东，可以一键生成这些通用的代码块，看了看 vscode 的配置项，果然有，看一下效果：</p><p><img src="/images/template.gif" alt="vscode 模板使用示例"></p><p>以上示例，有我自己定义的模板，也有插件模板，自己定义模板的方法如下：</p><p><img src="/images/template-config.gif" alt="vscode 模板配置示例"></p><p>模板创建可以从设置的 user snippets 下创建，根据示例改一下提示语和内容就好，body 部分为模板内容，每一行作为数组的一个元素，该数组为字符串数组。</p><h3 id="四、md-写-ppt-就是这么简单-————-Marp"><a href="#四、md-写-ppt-就是这么简单-————-Marp" class="headerlink" title="四、md 写 ppt 就是这么简单 ———— Marp"></a>四、md 写 ppt 就是这么简单 ———— Marp</h3><p>marp，全称 Markdown Presentation Ecosystem，可以方便快捷的利用 md 预览 ppt，导出 pdf，使用方法也很简单，<code>---</code> 分割页，每一页的样式可以根据自己的兴趣去定义</p><p><img src="/images/marp.png" alt="marp 使用示例"></p><p>先写这些吧，之后想起什么再补上</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 安装配置及分支管理</title>
      <link href="/2020/06/22/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2020/06/22/git%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装配置-Git"><a href="#一、安装配置-Git" class="headerlink" title="一、安装配置 Git"></a>一、安装配置 Git</h3><p>1、从官网下载安装包，手动完成安装。</p><p>2、打开 Git Bash 命令行工具，执行命令 ssh-keygen -t rsa -C Email-Addresss 生成一个密钥对。</p><p>3、 登录到 GitLab，点击右上角你的用户头像，点击 Edit Profile settings，点击 SSH Keys，点击 Add SSH Key，填写 Title 栏，复制用户目录下.ssh/id_rsa.pub 文件的内容到 Key，点击 Add Key。</p><p>4、 点击右上角的 New project，填写完成后点击 Create project 新建一个仓库，点击 Activity，点击 SSH 后复制 SSH 边上栏里的地址。</p><p>5、打开 Git Bash 命令行工具，切换到一个合适的目录，使用命令 git clone 刚才复制的 URL 克隆创建的仓库。</p><p>6、进入目录 cd 仓库名，执行命令 <code>git config user.email your-email</code> =&gt; <code>git config user.name your-name</code>，设置你的个人信息。</p><p>7、执行命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#Description&quot;</span> &gt; README.md <span class="comment">#添加一个文件</span></span><br><span class="line"></span><br><span class="line">git status <span class="comment">#查看当前状态，发现有未跟踪文件</span></span><br><span class="line"></span><br><span class="line">git add . <span class="comment">#当前目录所有文件添加到暂存区</span></span><br><span class="line"></span><br><span class="line">git diff <span class="comment"># 比较当前工作区和暂存区有何不同</span></span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&quot;注释&quot;</span> <span class="comment">#把暂存区内容提交到本地仓库</span></span><br><span class="line"></span><br><span class="line">git push -u origin develop <span class="comment">#把本地仓库的提交推送到远程仓库</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">#查看提交日志</span></span><br></pre></td></tr></table></figure><h3 id="二、Git-本地分支管理"><a href="#二、Git-本地分支管理" class="headerlink" title="二、Git 本地分支管理"></a>二、Git 本地分支管理</h3><p>1、分支的创建、合并、删除</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch <span class="comment"># 显示所有分支</span></span><br><span class="line"></span><br><span class="line">git branch b1 <span class="comment"># 从当前分支创建一个叫 b1 的分支</span></span><br><span class="line"></span><br><span class="line">git checkout b1 <span class="comment"># 切换到 b1 分支</span></span><br><span class="line"></span><br><span class="line">git checkout -b b1 <span class="comment"># 相当于以上两条命令的组合</span></span><br><span class="line"></span><br><span class="line">git checkout master <span class="comment"># 切换到 master 主分支</span></span><br><span class="line"></span><br><span class="line">git merge b1 <span class="comment"># 把 b1 分支的代码合并到 master 上</span></span><br><span class="line"></span><br><span class="line">git branch -d b1 <span class="comment"># 删除 b1 分支，不能在被删除分支上执行</span></span><br></pre></td></tr></table></figure><h3 id="三、Git-Tag-标签管理"><a href="#三、Git-Tag-标签管理" class="headerlink" title="三、Git Tag 标签管理"></a>三、Git Tag 标签管理</h3><p>标签的创建、删除</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag t1 <span class="comment"># 从当前分支创建一个名为 t1 的标签</span></span><br><span class="line"></span><br><span class="line">git tag -d t1 <span class="comment">#删除名为 t1 的标签</span></span><br></pre></td></tr></table></figure><h3 id="三、GitLib-权限管理"><a href="#三、GitLib-权限管理" class="headerlink" title="三、GitLib 权限管理"></a>三、GitLib 权限管理</h3><ul><li><p>Owner 项目所有者，拥有所有的操作权限</p></li><li><p>Master 项目的管理者，除更改、删除项目元信息外其它操作均可</p></li><li><p>Developer 项目的开发人员，做一些开发工作，对受保护内容无权限</p></li><li><p>Reporter 项目的报告者，只有项目的读权限，可以创建代码片断</p></li><li><p>Guest 项目的游客，只能提交问题和评论内容</p></li></ul><p>具体参见 GitLab 权限，为项目添加成员时可指定成员的身份权限。</p><h3 id="四、为什么要有分支"><a href="#四、为什么要有分支" class="headerlink" title="四、为什么要有分支"></a>四、为什么要有分支</h3><p>建立分支的原因是 git 因为是分布式的，所以其核心就是分支，分支的意义在于，可以将项目代码按照功能、模块拆分成不同的分支。比如这个产品要加一个支付功能和一个登陆功能，可以创建两个分支，交给不同的开发人员并行开发。登陆功能先开发完，测试无误后合并该分支到 master 分支，master 分支部署上线。支付功能虽然没有开发完成，但是在另一条分支上，所以产品上线和功能开发完全不受影响。这才是分布式开发的高效模式。还有这样，以自己名字建立一个分支比如 xiancai，这个分支是已经做好的功能，随时可以合并到 master 上线，开发的时候，建立一个带功能前缀的分支，比如 xiancai-ninghao 、xiancai-ninghao 等等，开发完之后在合并到 xiancai，每次上线，把 xiancai 合并到 master 。总之分支的做重要的意义就是提高效率！！！ 这样方便团队开发，并且不会导致混乱。</p><h3 id="五、常见分支有如下几条："><a href="#五、常见分支有如下几条：" class="headerlink" title="五、常见分支有如下几条："></a>五、常见分支有如下几条：</h3><p>1、Master 主分支</p><p>2、Develop 分支</p><p>3、Feature 功能分支</p><p>4、Release 预发布分支</p><p>5、Hotfix（或者 Fixbug） 分支</p><p>其中对于 Feature 功能分支有:</p><ul><li><p>从哪个分支分离开来：develop</p></li><li><p>必须要合并到哪个分支上：develop</p></li><li><p>分支的命名规范：除了 master，develop，release-，或者 hotfix- 以外的名字都可以比如可以用 feature-*的方式命名。</p></li></ul><p>其中对于 Release 预发布分支有：</p><ul><li><p>从哪个分支分离开来： develop</p></li><li><p>必须要合并到哪个分支上：develop 与 master</p></li><li><p>分支的命名规范： release-*</p></li></ul><p>其中对于 Hotfix（或者 Fixbug） 分支有；</p><ul><li><p>从哪个分支分离开来：master</p></li><li><p>必须要合并到哪个分支上：develop 与 master</p></li><li><p>分支的命名规范：hotfix-<em> 或者 fixbug-</em></p></li></ul><h3 id="六、分支说明"><a href="#六、分支说明" class="headerlink" title="六、分支说明"></a>六、分支说明</h3><h4 id="1、Master-主分支"><a href="#1、Master-主分支" class="headerlink" title="1、Master 主分支"></a>1、Master 主分支</h4><p>首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。Git 主分支的名字，默认叫做 Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。</p><h4 id="2、Develop-分支"><a href="#2、Develop-分支" class="headerlink" title="2、Develop 分支"></a>2、Develop 分支</h4><p>主分支只用来发布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做 Develop。</p><p>(1) 创建分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch develop    <span class="comment">#只创建分支</span></span><br><span class="line">git checkout develop  <span class="comment">#创建并切换到 develop 分支</span></span><br></pre></td></tr></table></figure><p>(2) 合并分支</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master         <span class="comment">#切换到主分支</span></span><br><span class="line">git merge --no-ff develop   <span class="comment">#把 develop 合并到 master 分支，no-ff 选项的作用是保留原分支记录</span></span><br><span class="line">git branch -d develop       <span class="comment">#删除 develop 分支</span></span><br></pre></td></tr></table></figure><p>这里稍微解释一下，上一条命令的 —no-ff 参数是什么意思。默认情况下，Git执行”快进式合并”（fast-farward merge），会直接将 Master 分支指向 Develop 分支。</p><h4 id="3、次分支"><a href="#3、次分支" class="headerlink" title="3、次分支"></a>3、次分支</h4><p>除了 master 与 develop 这两个主分支，在开发时还可以创建一些次分支，目的是让团队不同的成员之间可以平行开发，更容易跟踪功能，准备为生产的发行版，快速修复生产上的问题等等。这些分支生命周期有限，可以在用完以后删掉他们。</p><h4 id="4、Feature-功能分支"><a href="#4、Feature-功能分支" class="headerlink" title="4、Feature 功能分支"></a>4、Feature 功能分支</h4><p>Feature（功能） 分支，有时候也叫 Topic 分支。在这种分支上去开发新的功能。当开发功能的时候，这个功能属于哪个目标发行还不知道。功能如果一直在开发，对应的这个功能分支就可以一直存在，不过到最后还是要合并到 develop 分支上，或者如果不想要开发的这个功能了，可以直接扔掉它。</p><p>功能名字的命名已经在上文中有提到。</p><p>创建一个功能分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b feature-x develop</span><br></pre></td></tr></table></figure><p>开发完成后，将功能分支合并到develop分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff feature-x</span><br></pre></td></tr></table></figure><p>删除feature分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d feature-x <span class="comment"># Release 预发布分支</span></span><br></pre></td></tr></table></figure><h4 id="5、Release-功能分支"><a href="#5、Release-功能分支" class="headerlink" title="5、Release 功能分支"></a>5、Release 功能分支</h4><p>它是指发布正式版本之前（即合并到Master分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面分出来的，预发布结束以后，必须合并进 Develop 和 Master 分支。它的命名，可以采用release-*的形式。</p><p>创建一个预发布分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b release-1.2 develop</span><br></pre></td></tr></table></figure><p>确认没有问题后，合并到master分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --no-ff release-1.2</span><br></pre></td></tr></table></figure><p>对合并生成的新节点，做一个标签</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag -a 1.2</span><br></pre></td></tr></table></figure><p>再合并到develop分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff release-1.2</span><br></pre></td></tr></table></figure><p>最后，删除预发布分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d release-1.2</span><br></pre></td></tr></table></figure><h4 id="6、Fixbug-修补bug分支"><a href="#6、Fixbug-修补bug分支" class="headerlink" title="6、Fixbug 修补bug分支"></a>6、Fixbug 修补bug分支</h4><p>最后一种是修补bug分支。软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行 bug 修补。 修补 bug 分支是从 Master 分支上面分出来的。修补结束以后，再合并进 Master 和 Develop 分支。它的命名，可以采用 fixbug-* 的形式。</p><p>创建一个修补bug分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b fixbug-0.1 master</span><br></pre></td></tr></table></figure><p>修补结束后，合并到master分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --no-ff fixbug-0.1</span><br><span class="line">git tag -a 0.1.1</span><br></pre></td></tr></table></figure><p>再合并到develop分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff fixbug-0.1</span><br></pre></td></tr></table></figure><p>最后，删除”修补bug分支”：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d fixbug-0.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出Node笔记</title>
      <link href="/2020/06/21/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANode%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/06/21/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANode%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、Node-特点"><a href="#一、Node-特点" class="headerlink" title="一、Node 特点"></a>一、Node 特点</h3><p>1、异步 I/O（非阻塞 I/O)，任务耗时取决于最慢的事件耗时</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;/path1&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, file</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;读取文件 1 完成&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">fs.readFile(<span class="string">&#x27;/path2&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, file</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;读取文件 2 完成&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2、大量使用事件和回调函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侦听服务器的 request 事件</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  req.setEncoding(<span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  <span class="comment">// 侦听请求的 data 事件</span></span><br><span class="line">  req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    postData += chunk;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 侦听请求的 end 事件</span></span><br><span class="line">  req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    res.end(postData);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;服务器启动完成！&#x27;</span>);</span><br></pre></td></tr></table></figure><p>ps:<a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/">事件循环</a></p><p>3、单线程</p><p>(1) 单线程带来的问题</p><ul><li>无法利用多核 CPU</li><li>错误会引起整个应用退出，应用的健壮性值得考验</li><li>大量计算占用 CPU 导致无法继续调用异步 I/O</li></ul><p>(2) 解决大计算量问题的方法：child_process(子进程) 分解大量的计算，Master-Worker 管理子进程</p><p>4、跨平台，可以在 win、linux 等环境中部署 Node</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommonJS、AMD、RequireJS、CMD 以及 ES6 规范比较</title>
      <link href="/2020/06/18/%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83/"/>
      <url>/2020/06/18/%E6%A8%A1%E5%9D%97%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h3 id="一、CommonJS"><a href="#一、CommonJS" class="headerlink" title="一、CommonJS"></a>一、CommonJS</h3><h4 id="1、导出方式-exports"><a href="#1、导出方式-exports" class="headerlink" title="1、导出方式(exports)"></a>1、导出方式(exports)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a:&#x27;</span>,a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.a = a</span><br><span class="line"><span class="built_in">exports</span>.b = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;hi, girls^^&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;exports:&#x27;</span>, <span class="built_in">exports</span>);</span><br></pre></td></tr></table></figure><h4 id="2、导入方式-require"><a href="#2、导入方式-require" class="headerlink" title="2、导入方式 require"></a>2、导入方式 require</h4><p>require 命令第一次加载该脚本时就会执行整个脚本，然后在内存中生成一个对象。需要用到这个模块时，就会到 exports 属性上取值。即使再次执行require命令，也不会再次执行该模块，而是到缓存中取值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>).a</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;b:&#x27;</span>,b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>).b();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;c:&#x27;</span>, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>).a;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;d:&#x27;</span>, d);</span><br></pre></td></tr></table></figure><h4 id="3、加载方式"><a href="#3、加载方式" class="headerlink" title="3、加载方式"></a>3、加载方式</h4><p>同步</p><h4 id="4、谁在用这个规范"><a href="#4、谁在用这个规范" class="headerlink" title="4、谁在用这个规范"></a>4、谁在用这个规范</h4><p>nodeJS</p><h3 id="二、AMD、RequireJS"><a href="#二、AMD、RequireJS" class="headerlink" title="二、AMD、RequireJS"></a>二、AMD、RequireJS</h3><h4 id="1、导出方式：define-id-dependencies-factory"><a href="#1、导出方式：define-id-dependencies-factory" class="headerlink" title="1、导出方式：define(id?, dependencies?, factory)"></a>1、导出方式：define(id?, dependencies?, factory)</h4>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    add: add,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>id：模块的名字，如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字；</p></li><li><p>dependencies：模块的依赖，已被模块定义的模块标识的数组字面量。依赖参数是可选的，如果忽略此参数，它应该默认为 [“require”, “exports”, “module”]。然而，如果工厂方法的长度属性小于3，加载器会选择以函数的长度属性指定的参数个数调用工厂方法。</p></li><li><p>factory：模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值。</p></li><li><p>依赖前置，所有依赖写到模块前面的数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  a.doSomething();</span><br><span class="line">  b.doSomething();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、导入方式：require-module-callback"><a href="#2、导入方式：require-module-callback" class="headerlink" title="2、导入方式：require([module], callback)"></a>2、导入方式：require([module], callback)</h4><p>第一个参数[module]，是一个数组，里面的成员是要加载的模块，callback是加载完成后的回调函数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;a&#x27;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a.doSomething());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="3、加载方式-1"><a href="#3、加载方式-1" class="headerlink" title="3、加载方式"></a>3、加载方式</h4><p>异步</p><h4 id="4、谁在用这个规范-1"><a href="#4、谁在用这个规范-1" class="headerlink" title="4、谁在用这个规范"></a>4、谁在用这个规范</h4><p>RequireJs</p><h3 id="三、CMD"><a href="#三、CMD" class="headerlink" title="三、CMD"></a>三、CMD</h3><h4 id="1、导出方式：define-factory"><a href="#1、导出方式：define-factory" class="headerlink" title="1、导出方式：define(factory)"></a>1、导出方式：define(factory)</h4><p>依赖就近，延迟执行，依赖的模块可以在任意一个地方写，</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>);</span><br><span class="line">  a.doSomething();</span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>);</span><br><span class="line">  b.doSomething();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2、导入方式：use"><a href="#2、导入方式：use" class="headerlink" title="2、导入方式：use"></a>2、导入方式：use</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">seajs.use(id, callback?)</span><br></pre></td></tr></table></figure><h4 id="3、谁在用该规范"><a href="#3、谁在用该规范" class="headerlink" title="3、谁在用该规范"></a>3、谁在用该规范</h4><p>sea.js</p><h3 id="四、ES6"><a href="#四、ES6" class="headerlink" title="四、ES6"></a>四、ES6</h3><h4 id="1、导出方式：export"><a href="#1、导出方式：export" class="headerlink" title="1、导出方式：export"></a>1、导出方式：export</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Amy&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123;name&#125;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">19</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> age</span><br></pre></td></tr></table></figure><h4 id="2、导入方式-import"><a href="#2、导入方式-import" class="headerlink" title="2、导入方式: import"></a>2、导入方式: import</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> age, &#123;test,name&#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="3、谁在用该规范：nodeJS、JavaScript"><a href="#3、谁在用该规范：nodeJS、JavaScript" class="headerlink" title="3、谁在用该规范：nodeJS、JavaScript"></a>3、谁在用该规范：nodeJS、JavaScript</h4><h4 id="4、与-commonJS-的区别："><a href="#4、与-commonJS-的区别：" class="headerlink" title="4、与 commonJS 的区别："></a>4、与 commonJS 的区别：</h4><ul><li><p>模块加载方式：commonJS，运行时加载模块，ES6，编译时加载模块</p></li><li><p>导出方式：commonJS 导出的是一个新的对象，输出的是值的拷贝，ES6 输出的是值的引用</p></li><li><p>ES6 模块导入写在脚本中的任意位置都会被提升到头部，优先执行</p></li></ul><p>由于 ES6 是静态编译的，为了使 ES6 可以动态引入可以，可以基于 promise 引入模块</p><p>参考资料:</p><ul><li><a href="https://es6.ruanyifeng.com/#docs/module">阮一峰 es6</a></li><li><a href="https://zhuanlan.zhihu.com/p/41231046">JS模块化加载之CommonJS、AMD、CMD、ES6</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Proxy 实现观察者模式</title>
      <link href="/2020/05/28/proxy%E5%AE%9E%E7%8E%B0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/05/28/proxy%E5%AE%9E%E7%8E%B0%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>在实际项目中，经常会有数据间的通信操作，有的时候，多个模块之间，数据具有依赖关系，比如 A 模块与 B 模块有一条数据链，两边的修改都会影响到彼此，在没有双向通信的前端框架中，这种就比较麻烦。这里，观察者模式可以发挥一些作用，让 A、B 模块都监听一个数据，可以做到一方的数据改变，通知到另一方，简化版的实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">this</span>.callbacks = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  observe(fn) &#123;</span><br><span class="line">    <span class="built_in">this</span>.callbacks.add(fn);</span><br><span class="line">  &#125;</span><br><span class="line">  sub(obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;</span><br><span class="line">      set: <span class="function">(<span class="params">target, key, value, receiver</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target, key, value, receiver);</span><br><span class="line">        <span class="built_in">this</span>.callbacks.forEach(<span class="function">(<span class="params">observe</span>) =&gt;</span> observe());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> Observer();</span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> Observer();</span><br><span class="line"><span class="keyword">const</span> fruit = observer.sub(data);</span><br><span class="line"><span class="keyword">const</span> fruit1 = observer.sub(data);</span><br><span class="line"><span class="keyword">const</span> change = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`this is <span class="subst">$&#123;fruit.color&#125;</span> <span class="subst">$&#123;fruit.shape&#125;</span> watermelon`</span>);</span><br><span class="line">&#125;;</span><br><span class="line">observer.observe(change);</span><br><span class="line"></span><br><span class="line">fruit.color = <span class="string">&#x27;yellow&#x27;</span>; <span class="comment">// this is yellow circle watermelon</span></span><br><span class="line">fruit1.color = <span class="string">&#x27;red&#x27;</span>; <span class="comment">// this is red circle watermelon</span></span><br></pre></td></tr></table></figure><p>上例中可以看到，数据改变，就会触发 change 时间，在这个事件里面，我们可以触发视图的改变，实现响应式数据，也可以做其他的事情。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter学习笔记————Dart基础</title>
      <link href="/2020/05/25/Flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E2%80%94%E2%80%94Dart%E5%9F%BA%E7%A1%80/"/>
      <url>/2020/05/25/Flutter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E2%80%94%E2%80%94Dart%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="一、基本数据类型"><a href="#一、基本数据类型" class="headerlink" title="一、基本数据类型"></a>一、基本数据类型</h3><h4 id="1、数字类型"><a href="#1、数字类型" class="headerlink" title="1、数字类型"></a>1、数字类型</h4><p>Dart 数字类型包括：num、double（双精度） 和 int（整型），其中 num 类型是 double 和 int 类型的父类，既可以赋值 int 也可以赋值 double。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">num</span> num1 = <span class="number">-1.0</span>; <span class="comment">//数字类型的父类</span></span><br><span class="line"><span class="built_in">num</span> num2 = <span class="number">2</span>; <span class="comment">//数字类型的父类</span></span><br><span class="line"><span class="built_in">int</span> int1 = <span class="number">3</span>; <span class="comment">//整型</span></span><br><span class="line"><span class="built_in">double</span> d1 = <span class="number">1.68</span>; <span class="comment">//双精度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num: <span class="subst">$num1</span> num: <span class="subst">$num2</span> int: <span class="subst">$int1</span> double: <span class="subst">$d1</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>从上面示例可以看出 dart 打印使用的是 print 方法，字符串中使用变量，直接：$+变量即可</p><p>数字类型常用的方法示例：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(num1.abs()); <span class="comment">//求绝对值</span></span><br><span class="line"><span class="built_in">print</span>(num1.toInt()); <span class="comment">// 转换成 int 类型</span></span><br><span class="line"><span class="built_in">print</span>(num1.toDouble()); <span class="comment">// 转换成 double 类型</span></span><br></pre></td></tr></table></figure><h4 id="2、字符串类型"><a href="#2、字符串类型" class="headerlink" title="2、字符串类型"></a>2、字符串类型</h4><p>字符串类型用 String 声明，字符串拼接可以双引号也可以用 +，多个字符串变量声明，可以使用逗号分隔</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> str = <span class="string">&#x27;字符串&#x27;</span>, str1 = <span class="string">&quot;字符串双引号&quot;</span>; <span class="comment">// 字符串的定义</span></span><br><span class="line"><span class="built_in">String</span> str2 = <span class="string">&quot;str: <span class="subst">$str</span> str: <span class="subst">$str1</span>&quot;</span>; <span class="comment">// 字符串拼接可以双引号也可以用 +</span></span><br><span class="line"><span class="built_in">String</span> str3 = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(str2);</span><br></pre></td></tr></table></figure><p>字符串常用方法：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(str3.substring(<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">// 字符串截取</span></span><br><span class="line"><span class="built_in">print</span>(str3.indexOf(<span class="string">&quot;el&quot;</span>)); <span class="comment">// 获取指定字符串的索引</span></span><br><span class="line"><span class="built_in">print</span>(str3.startsWith(<span class="string">&quot;h&quot;</span>)); <span class="comment">// 正则匹配开头字符串</span></span><br><span class="line"><span class="built_in">print</span>(str3.replaceAll(<span class="string">&quot;el&quot;</span>, <span class="string">&quot;ol&quot;</span>)); <span class="comment">// 替换正则字符串，返回修改后的字符串</span></span><br><span class="line"><span class="built_in">print</span>(str3.contains(<span class="string">&quot;h&quot;</span>, <span class="number">5</span>)); <span class="comment">// 从指定位置开始匹配字符串</span></span><br><span class="line"><span class="built_in">print</span>(str3.split(<span class="string">&#x27; &#x27;</span>)); <span class="comment">// 根据指定规则，分割字符串成数组</span></span><br></pre></td></tr></table></figure><h4 id="3、布尔类型"><a href="#3、布尔类型" class="headerlink" title="3、布尔类型"></a>3、布尔类型</h4><p>Dart 是强 bool 类型检查，只有 bool 类型的值是 true，才被认为是 true，使用 bool 声明变量</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span> success = <span class="keyword">true</span>, fail = <span class="keyword">false</span>;</span><br><span class="line"><span class="built_in">print</span>(success);</span><br><span class="line"><span class="built_in">print</span>(fail);</span><br><span class="line"><span class="built_in">print</span>(success || fail); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(success &amp;&amp; fail); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="4、list-集合"><a href="#4、list-集合" class="headerlink" title="4、list 集合"></a>4、list 集合</h4><p>使用 List 声明变量, list 初始化的几种方式如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;hi&#x27;</span>]; <span class="comment">//初始化时添加元素</span></span><br><span class="line"><span class="built_in">print</span>(list);</span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list2 = [];</span><br><span class="line"><span class="comment">// list2 = list; 错误做法，类型转换出错</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span> list3 = [];</span><br><span class="line">list3.add(<span class="string">&#x27;apple&#x27;</span>);</span><br><span class="line">list3.addAll(list);</span><br><span class="line"><span class="built_in">print</span>(list3); <span class="comment">//通过 add 方法添加元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span> list4 = <span class="built_in">List</span>.generate(<span class="number">3</span>, (index) =&gt; index * <span class="number">2</span>); <span class="comment">//生成函数</span></span><br><span class="line"><span class="built_in">print</span>(list4);</span><br></pre></td></tr></table></figure><p>list 可以使用 for、for……in 和 forEach 进行遍历：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;for 遍历: <span class="subst">$&#123;list[i]&#125;</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> o <span class="keyword">in</span> list) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;for in 遍历: <span class="subst">$o</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">list.forEach((val) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;forEach 遍历: <span class="subst">$val</span>&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>list 常用方法:</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(list.indexOf(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">//查找元素在 list 中的索引, indexOf(element,start)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; parts = [<span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;shoulders&#x27;</span>, <span class="string">&#x27;knees&#x27;</span>, <span class="string">&#x27;toes&#x27;</span>];</span><br><span class="line">parts.remove(<span class="string">&#x27;head&#x27;</span>); <span class="comment">// true, 移除 list 首个元素</span></span><br><span class="line"><span class="built_in">print</span>(parts.join(<span class="string">&#x27;, &#x27;</span>));</span><br></pre></td></tr></table></figure><h4 id="5、map"><a href="#5、map" class="headerlink" title="5、map"></a>5、map</h4><p>map 是将 key 和 value 相关联的对象，key 和 value 都可以是任何类型的对象，并且 key 是唯一的，若 key 重复，后面的 key 会替换前面的，map 的初始化方式如下：</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Map</span> names = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Canace&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">12</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(names);</span><br><span class="line"><span class="built_in">Map</span> canace = &#123;&#125;;</span><br><span class="line">canace[<span class="string">&#x27;sex&#x27;</span>] = <span class="string">&#x27;female&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>(canace);</span><br></pre></td></tr></table></figure><p>map 的迭代可以使用 for……in、forEach 和 map 方法进行迭代</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">names.forEach((k, v) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$k</span>: <span class="subst">$v</span>&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Map</span> names2 = names.map((k, v) &#123;</span><br><span class="line">  <span class="comment">// 迭代生成一个新的 map</span></span><br><span class="line">  <span class="keyword">return</span> MapEntry(v, k);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">print</span>(names2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> names.keys) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$key</span>: <span class="subst">$&#123;names[key]&#125;</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用方法：keys，values，remove, containsKey</p><h3 id="二、dynamic-var-object-三者的区别"><a href="#二、dynamic-var-object-三者的区别" class="headerlink" title="二、dynamic, var, object 三者的区别"></a>二、dynamic, var, object 三者的区别</h3><p>dynamic 是所有 Dart 对象的基础类型，在大多数情况下不直接使用。dynamic 只在编译的时候进行类型推断，编译之前不进行数据类型检测，因此，调用不存在的方法不报错。此外，使用该字面量声明的变量，可以动态改变数据类型。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dynamic</span> x = <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>(x.runtimeType);</span><br><span class="line"><span class="built_in">print</span>(x);</span><br><span class="line">x = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">print</span>(x.runtimeType);</span><br><span class="line"><span class="built_in">print</span>(x);</span><br></pre></td></tr></table></figure><p>使用 var 初始化的数据被定义后修改数据，数据类型不再改变</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;variable&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>(a.runtimeType);</span><br><span class="line"><span class="built_in">print</span>(a);</span><br><span class="line"><span class="comment">// a = 23214; 报错</span></span><br><span class="line"><span class="built_in">print</span>(a.runtimeType);</span><br><span class="line"><span class="built_in">print</span>(a);</span><br></pre></td></tr></table></figure><p>Object 是 Dart 对象的基类,继承基本方法，会在编译前进行静态类型检测，因此，编译之前调用不存在的方法会报错，此外，用该字面量声明的变量可以动态改变数据类型</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span> ol = <span class="string">&#x27;object&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>(ol.runtimeType);</span><br><span class="line"><span class="built_in">print</span>(ol);</span><br><span class="line">ol = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">print</span>(ol.runtimeType);</span><br><span class="line"><span class="built_in">print</span>(ol);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 学习笔记（一）—— 快速上手</title>
      <link href="/2020/05/23/Flutter%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
      <url>/2020/05/23/Flutter%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="一、-Flutter-不同版本的特点"><a href="#一、-Flutter-不同版本的特点" class="headerlink" title="一、 Flutter 不同版本的特点"></a>一、 Flutter 不同版本的特点</h3><p>1、stable：稳定版（推荐生产环境使用）</p><p>2、beta： 定期选取相对稳定的 dev 作为 beta（推荐开发环境使用）</p><p>3、dev：经过 Google 初步测试通过的代码</p><h3 id="二、Flutter-doctor-命令的作用"><a href="#二、Flutter-doctor-命令的作用" class="headerlink" title="二、Flutter doctor 命令的作用"></a>二、Flutter doctor 命令的作用</h3><p>检查是否安装好了相关依赖，即检查开发环境的完备性并输出报告，可以查看有哪些依赖或配置没有装好</p><h3 id="三、环境搭建"><a href="#三、环境搭建" class="headerlink" title="三、环境搭建"></a>三、环境搭建</h3><p>1、下载 <a href="https://flutter.dev/docs/get-started/install/macos">sdk</a>，并安装</p><p>2、环境变量设置</p><p>mac， 在 home 目录下把变量添加到 .bash_profile，把临时变量变为全局变量</p><p>windows 直接全局变量 path 追加 flutter 相关变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>:[<span class="variable">$home</span>]/flutter/bin&quot;</span></span><br><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><p>3、开发工具配置</p><p>(1) Android Studio </p><ul><li><p>下载 <a href="https://developer.android.com/studio">Android Studio</a>,</p></li><li><p>安装 flutter 和 docter 插件，这里应用市场没有插件，是因为没有科学上网，需要配置对应的代理</p></li><li><p>下载模拟器需要的 sdk，打开模拟器，就可以愉快的运行 Flutter 项目了</p></li></ul><p>(2)  习惯了用 VSCode，可以下载 flutter 插件，可以一键生成项目和运行</p><p>(3) 要调试 ios 版，需要下载 xcode，并进行<a href="https://flutterchina.club/setup-macos/">对应配置</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 常用代码片段</title>
      <link href="/2020/05/21/JavaScript%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
      <url>/2020/05/21/JavaScript%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="一、数组操作"><a href="#一、数组操作" class="headerlink" title="一、数组操作"></a>一、数组操作</h3><h4 id="1、去重"><a href="#1、去重" class="headerlink" title="1、去重"></a>1、去重</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;strawberry&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;banana&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;pear&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;apple&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;orange&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;strawberry&#x27;</span>,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> res;</span><br><span class="line"><span class="comment">// 使用 filter</span></span><br><span class="line">res = arr.filter(<span class="function">(<span class="params">element, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> self.indexOf(element) === index;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Set</span></span><br><span class="line">res = [...new <span class="built_in">Set</span>(arr)];</span><br></pre></td></tr></table></figure><h4 id="2、过滤偶元素"><a href="#2、过滤偶元素" class="headerlink" title="2、过滤偶元素"></a>2、过滤偶元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> res = arr.filter(<span class="function">(<span class="params">x</span>) =&gt;</span> x % <span class="number">2</span> !== <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="3、过滤空字符串"><a href="#3、过滤空字符串" class="headerlink" title="3、过滤空字符串"></a>3、过滤空字符串</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> res = arr.filter(<span class="function">(<span class="params">s</span>) =&gt;</span> s &amp;&amp; s.trim());</span><br></pre></td></tr></table></figure><h4 id="4、降序"><a href="#4、降序" class="headerlink" title="4、降序"></a>4、降序</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">nums.sort(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br></pre></td></tr></table></figure><h4 id="5、计算元素在数组中的出现次数"><a href="#5、计算元素在数组中的出现次数" class="headerlink" title="5、计算元素在数组中的出现次数"></a>5、计算元素在数组中的出现次数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 计算单个元素在数组中的出现次数</span></span><br><span class="line"><span class="keyword">const</span> target = <span class="number">2</span>;</span><br><span class="line">res = arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> (v === target ? a + <span class="number">1</span> : a), <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 计算数组 a 中的所有元素在数组 b 中的出现次数，返回新的数组</span></span><br><span class="line"><span class="keyword">const</span> arrA = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arrB = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line">res = arrA.map(<span class="function">(<span class="params">num</span>) =&gt;</span> arrB.filter(<span class="function">(<span class="params">n</span>) =&gt;</span> n === num).length);</span><br><span class="line"><span class="comment">// 计算数组中每个元素出现的次数</span></span><br><span class="line">res = arr.reduce(<span class="function">(<span class="params">tally, amt</span>) =&gt;</span> &#123;</span><br><span class="line">  tally[amt] ? tally[amt]++ : (tally[amt] = <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> tally;</span><br><span class="line">&#125;, &#123;&#125;);</span><br></pre></td></tr></table></figure><h4 id="6、初始化可伸缩数组"><a href="#6、初始化可伸缩数组" class="headerlink" title="6、初始化可伸缩数组"></a>6、初始化可伸缩数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> len = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// method1</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>(len)</span><br><span class="line">  .fill(<span class="literal">null</span>)</span><br><span class="line">  .map(<span class="function">(<span class="params">v, i</span>) =&gt;</span> <span class="built_in">String</span>.fromCharCode(<span class="number">65</span> + i));</span><br><span class="line"><span class="comment">// method2</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123; <span class="attr">length</span>: len &#125;).map(<span class="function">(<span class="params">v, i</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">String</span>.fromCharCode(<span class="number">65</span> + i)</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[ &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27; ]</span></span><br></pre></td></tr></table></figure><h4 id="7、求和"><a href="#7、求和" class="headerlink" title="7、求和"></a>7、求和</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> books = [</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">&#x27;Showings&#x27;</span>,</span><br><span class="line">    author: <span class="string">&#x27;Julian of Norwich&#x27;</span>,</span><br><span class="line">    checkouts: <span class="number">45</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">&#x27;The Triads&#x27;</span>,</span><br><span class="line">    author: <span class="string">&#x27;Gregory Palamas&#x27;</span>,</span><br><span class="line">    checkouts: <span class="number">32</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">&#x27;The Praktikos&#x27;</span>,</span><br><span class="line">    author: <span class="string">&#x27;Evagrius Ponticus&#x27;</span>,</span><br><span class="line">    checkouts: <span class="number">29</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> total = books</span><br><span class="line">  .map(<span class="function">(<span class="params">b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> b.checkouts;</span><br><span class="line">  &#125;)</span><br><span class="line">  .reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p + c;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(total); <span class="comment">//106</span></span><br></pre></td></tr></table></figure><h4 id="8、求最值"><a href="#8、求最值" class="headerlink" title="8、求最值"></a>8、求最值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> min = <span class="built_in">Math</span>.min(...arr);</span><br><span class="line"><span class="keyword">const</span> max = <span class="built_in">Math</span>.max(...arr);</span><br></pre></td></tr></table></figure><h4 id="9、求交集"><a href="#9、求交集" class="headerlink" title="9、求交集"></a>9、求交集</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrA = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arrB = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> res = arrA.filter(<span class="function">(<span class="params">v</span>) =&gt;</span> arrB.includes(v));</span><br></pre></td></tr></table></figure><h4 id="10、求不相交部分"><a href="#10、求不相交部分" class="headerlink" title="10、求不相交部分"></a>10、求不相交部分</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrA = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arrB = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>];</span><br><span class="line">arrA</span><br><span class="line">  .filter(<span class="function">(<span class="params">v</span>) =&gt;</span> !arrB.includes(v))</span><br><span class="line">  .concat(arrB.filter(<span class="function">(<span class="params">v</span>) =&gt;</span> !arrA.includes(v)));</span><br></pre></td></tr></table></figure><h4 id="11、多维数组扁平化"><a href="#11、多维数组扁平化" class="headerlink" title="11、多维数组扁平化"></a>11、多维数组扁平化</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrFlatten</span>(<span class="params">arr, depth = <span class="number">-1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (depth === <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [].concat(...arr.map(<span class="function">(<span class="params">v</span>) =&gt;</span> (<span class="built_in">Array</span>.isArray(v) ? arrFlatten(v) : v)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (depth === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> a.concat(v), []);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(</span><br><span class="line">    (a, v) =&gt; a.concat(<span class="built_in">Array</span>.isArray(v) ? arrFlatten(v, depth - <span class="number">1</span>) : v),</span><br><span class="line">    []</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> test7 = arrFlatten([</span><br><span class="line">  [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">6</span>],</span><br><span class="line">  ],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">4</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arrFlatten:&#x27;</span>, test7); <span class="comment">// [1, 5, 2, 6, 1, 4, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="12、乱序"><a href="#12、乱序" class="headerlink" title="12、乱序"></a>12、乱序</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrShuffle</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> array = arr;</span><br><span class="line">  <span class="keyword">let</span> index = array.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (index) &#123;</span><br><span class="line">    index -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> randomInedx = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * index);</span><br><span class="line">    <span class="keyword">let</span> middleware = array[index];</span><br><span class="line">    array[index] = array[randomInedx];</span><br><span class="line">    array[randomInedx] = middleware;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> test9 = arrShuffle([<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;arr shuffle:&#x27;</span>, test9);</span><br></pre></td></tr></table></figure><h3 id="二、事件对象操作"><a href="#二、事件对象操作" class="headerlink" title="二、事件对象操作"></a>二、事件对象操作</h3><h4 id="1、时间戳转日期"><a href="#1、时间戳转日期" class="headerlink" title="1、时间戳转日期"></a>1、时间戳转日期</h4><p>因为 js 的时间是按毫秒算的，这里要转成秒，所以要乘以一个 1000，之后就可以调用 js 内置对象中的 Date 获取对应的日期了，年份及其他，类似。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeStampFormat</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(+x * <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">const</span> [m, d] = [date.getMonth() + <span class="number">1</span>, date.getDate()];</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> day = timeStampFormat(<span class="number">1560751917</span>);</span><br><span class="line"><span class="built_in">console</span>.log(day); <span class="comment">// 6-17</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归树</title>
      <link href="/2020/05/18/%E9%80%92%E5%BD%92%E6%A0%91/"/>
      <url>/2020/05/18/%E9%80%92%E5%BD%92%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h3><p>有这样的一个数据结构：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">  <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;content2&quot;</span>: [],</span><br><span class="line">          <span class="string">&quot;id&quot;</span>: <span class="number">305540</span>,</span><br><span class="line">          <span class="string">&quot;level&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;知识演练场&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="number">201</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">&quot;content2&quot;</span>: [],</span><br><span class="line">          <span class="string">&quot;id&quot;</span>: <span class="number">305541</span>,</span><br><span class="line">          <span class="string">&quot;level&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="string">&quot;module&quot;</span>: <span class="number">13</span>,</span><br><span class="line">          <span class="string">&quot;name&quot;</span>: <span class="string">&quot;智慧加油站&quot;</span>,</span><br><span class="line">          <span class="string">&quot;type&quot;</span>: <span class="number">201</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">305539</span>,</span><br><span class="line">      <span class="string">&quot;level&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;天天练&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;content2&quot;</span>: [],</span><br><span class="line">      <span class="string">&quot;id&quot;</span>: <span class="number">305542</span>,</span><br><span class="line">      <span class="string">&quot;level&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;随堂测&quot;</span>,</span><br><span class="line">      <span class="string">&quot;type&quot;</span>: <span class="number">201</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="number">305538</span>,</span><br><span class="line">  <span class="string">&quot;level&quot;</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;第1课时　认识秒&quot;</span>,</span><br><span class="line">  <span class="string">&quot;type&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>由以上数据可知，该数据是一种树形结构，要拼接每个叶子节点的数据，放到一个数组里</p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">1、 传入的数据为空数组时，返回</span><br><span class="line"></span><br><span class="line">2、声明空数组 topics</span><br><span class="line"></span><br><span class="line">2、遍历当前节点的所有子节点</span><br><span class="line"></span><br><span class="line">(1) 若当前节点是末端节点，说明这棵树递归完了，创建一个新对象，设置 name 为：父节点 name + 子节点 name， 设置习题为该节点下的习题字段内容， 把新对象放进 topics 里</span><br><span class="line"></span><br><span class="line">(2) 若该节点位于第一层，说明是单元名，name 设置为空</span><br><span class="line"></span><br><span class="line">(3) 若当前节点不是末端节点，递归该节点，传入当前节点和拼接的新 name 给子节点</span><br><span class="line"></span><br><span class="line">(4) 遍历完毕，返回 topics</span><br></pre></td></tr></table></figure><h3 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildTopicWithSection</span> (<span class="params">courseware, name = []</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// @param </span></span><br><span class="line">  <span class="comment">// courseware: []</span></span><br><span class="line">  <span class="comment">// name: []</span></span><br><span class="line">  <span class="comment">// return: []</span></span><br><span class="line">  <span class="keyword">let</span> topics = [];</span><br><span class="line">  <span class="keyword">if</span> (!courseware) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; courseware.length; k++) &#123;</span><br><span class="line">    <span class="keyword">let</span> ele = courseware[k];</span><br><span class="line">    <span class="keyword">if</span> (ele.content2) &#123;</span><br><span class="line">      ele.name = name.concat([ele.name]).join(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">      ele.topics = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ele.content2.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; ele.content2[i].exercise.length; j++) &#123;</span><br><span class="line">          ele.topics.push(ele.content2[i].exercise[j]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">delete</span> ele.content2;</span><br><span class="line">      topics.push(ele);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newName = ele.level === <span class="number">0</span> ? [] : name.concat([ele.name]);</span><br><span class="line">    topics = topics.concat(buildTopicWithSection(ele.children, newName));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> topics;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = buildTopicWithSection(data);</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br></pre></td></tr></table></figure><h3 id="四、输出"><a href="#四、输出" class="headerlink" title="四、输出"></a>四、输出</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">305540</span>,</span><br><span class="line">    level: <span class="number">2</span>,</span><br><span class="line">    name: <span class="string">&#x27;天天练 知识演练场&#x27;</span>,</span><br><span class="line">    type: <span class="number">201</span>,</span><br><span class="line">    topics: [ [<span class="built_in">Object</span>], [<span class="built_in">Object</span>], [<span class="built_in">Object</span>], [<span class="built_in">Object</span>] ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">305541</span>,</span><br><span class="line">    level: <span class="number">2</span>,</span><br><span class="line">    <span class="built_in">module</span>: <span class="number">13</span>,</span><br><span class="line">    name: <span class="string">&#x27;天天练 智慧加油站&#x27;</span>,</span><br><span class="line">    type: <span class="number">201</span>,</span><br><span class="line">    topics: [ [<span class="built_in">Object</span>] ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">305542</span>,</span><br><span class="line">    level: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">&#x27;随堂测&#x27;</span>,</span><br><span class="line">    type: <span class="number">201</span>,</span><br><span class="line">    topics: [ [<span class="built_in">Object</span>], [<span class="built_in">Object</span>], [<span class="built_in">Object</span>], [<span class="built_in">Object</span>] ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitbook 生成电子书</title>
      <link href="/2020/05/17/gitbook%E7%94%9F%E6%88%90%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
      <url>/2020/05/17/gitbook%E7%94%9F%E6%88%90%E7%94%B5%E5%AD%90%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<p>1、全局安装 gitbook-cli: <code>npm i gitbook-cli -g</code></p><p>2、创建 gitbook 项目并运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitbook init softwareengineering</span><br><span class="line"><span class="built_in">cd</span> softwareengineering</span><br><span class="line">gitbook serve</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="/images/gitbook-website.png" alt="git book init"></p><p>3、 生成 ssh 秘钥: </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;$(git config user.email)&quot; -f gh-pages -N &quot;&quot;</span><br></pre></td></tr></table></figure><p>4、打开 github 项目 setting，把公钥添加到项目的 deploy keys 中，把私钥添加到项目的 secrets 中</p><p>5、添加 ci 文件，”./github/workflows/deploy.yml”，内容如下：</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&#x27;deploy website and ebooks&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">job_deploy_website:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&#x27;deploy website&#x27;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;10.x&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Installing gitbook cli&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">gitbook-cli</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Generating distributable files&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">gitbook</span> <span class="string">install</span></span><br><span class="line">          <span class="string">gitbook</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v2.5.0</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTIONS_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">PUBLISH_BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="attr">PUBLISH_DIR:</span> <span class="string">./_book</span></span><br></pre></td></tr></table></figure><p>6、把本地项目 push 到 github，点击 ACTION 会发现 github 在自动编译部署我们的项目了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd softwareengineering</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ignore certain directory</span></span><br><span class="line">touch .gitignore</span><br><span class="line">echo &#x27;_book&#x27; &gt;&gt; .gitignore</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> init git repo</span></span><br><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;init&quot;</span><br><span class="line">git remote add origin git@github.com:novalagung/softwareengineering.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> push</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>7、生成电子书，在 ci 中添加一个阶段，最终 ci 如下</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&#x27;deploy website and ebooks&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">job_deploy_website:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&#x27;deploy website&#x27;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;10.x&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Installing gitbook cli&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">gitbook-cli</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Generating distributable files&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">gitbook</span> <span class="string">install</span></span><br><span class="line">          <span class="string">gitbook</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v2.5.0</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTIONS_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTION_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">PUBLISH_BRANCH:</span> <span class="string">gh-pages</span></span><br><span class="line">          <span class="attr">PUBLISH_DIR:</span> <span class="string">./_book</span></span><br><span class="line">  <span class="attr">job_deploy_ebooks:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">&#x27;deploy ebooks&#x27;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&#x27;10.x&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Installing gitbook cli&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">gitbook-cli</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Installing calibre&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">-v</span></span><br><span class="line">          <span class="string">wget</span> <span class="string">-nv</span> <span class="string">-O-</span> <span class="string">https://download.calibre-ebook.com/linux-installer.sh</span> <span class="string">|</span> <span class="string">sudo</span> <span class="string">sh</span> <span class="string">/dev/stdin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Preparing for ebooks generations&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">gitbook</span> <span class="string">install</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">_book</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Generating ebook in pdf&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">gitbook</span> <span class="string">pdf</span> <span class="string">./</span> <span class="string">./_book/$&#123;&#123;</span> <span class="string">env.ebook_name</span> <span class="string">&#125;&#125;.pdf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Generating ebook in epub&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">gitbook</span> <span class="string">epub</span> <span class="string">./</span> <span class="string">./_book/$&#123;&#123;</span> <span class="string">env.ebook_name</span> <span class="string">&#125;&#125;.epub</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Generating ebook in mobi&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">gitbook</span> <span class="string">mobi</span> <span class="string">./</span> <span class="string">./_book/$&#123;&#123;</span> <span class="string">env.ebook_name</span> <span class="string">&#125;&#125;.mobi</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v2.5.0</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTIONS_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTION_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">PUBLISH_BRANCH:</span> <span class="string">ebooks</span></span><br><span class="line">          <span class="attr">PUBLISH_DIR:</span> <span class="string">./_book</span></span><br></pre></td></tr></table></figure><p>8、再次上传文件，编译之后发现多了一个 ebooks 分支，生成了 mobi、pdf以及 epub 三种格式的电子书，点击就可以下载了。</p>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack+gulp 打包 Vue 组件库</title>
      <link href="/2020/05/15/webpack-gulp%E6%89%93%E5%8C%85vue%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
      <url>/2020/05/15/webpack-gulp%E6%89%93%E5%8C%85vue%E7%BB%84%E4%BB%B6%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h3 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h3><p>公司的项目中有很多个的首页用了同一个主题的 UI，每次一调整，多个项目都要去改，很麻烦。页面要适配桌面版，1280-1920 分辨率以及 100% - 150% 的放缩，每个项目都去适配会浪费很多人力在上面，效率很低。之前用 vue-cli3 自带的打包方式 封装了一版组件库，但是发现并不是很灵活，每次改起来还是有点麻烦，加上不能按需引入，每次打包 app.js 都比较大，这就需要升级了。就在想能不能写成 element-ui 这种模式，按需引入，组件的维护成本也比较低，说干就干，阅读了一下 element-ui 源码，研究了一下它的构建方式，感觉很符合我的需求，于是有了 exp-ui 库的进阶版，当然该 ui 库尚未开源，只上传到了公司私有 npm。</p><h3 id="二、项目架构设计"><a href="#二、项目架构设计" class="headerlink" title="二、项目架构设计"></a>二、项目架构设计</h3><p>项目目录如下：</p><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── build</span><br><span class="line">├── components.json</span><br><span class="line">├── config.sh</span><br><span class="line">├── ex.png</span><br><span class="line">├── example</span><br><span class="line">├── lib</span><br><span class="line">├── node<span class="emphasis">_modules</span></span><br><span class="line"><span class="emphasis">├── package.json</span></span><br><span class="line"><span class="emphasis">├── packages</span></span><br><span class="line"><span class="emphasis">├── postcss.config.js</span></span><br><span class="line"><span class="emphasis">├── src</span></span><br><span class="line"><span class="emphasis">├── static</span></span><br><span class="line"><span class="emphasis">└── yarn.lock</span></span><br></pre></td></tr></table></figure><p>vue 组件以组件名称命名目录，存放于 packages 目录下，每个组件都有自己独立的环境，不会对其他组件进行干扰。组件以插件的形式导出，导出模式如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> EXCard <span class="keyword">from</span> <span class="string">&#x27;./src/main.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* istanbul ignore next */</span></span><br><span class="line">EXCard.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.component(EXCard.name, EXCard);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> EXCard;</span><br></pre></td></tr></table></figure><p>components.json 是所有组件的配置文件，每添加或删除一个组件，只需要对 components.json 列表进行增删即可，无需做另外的工作。</p><p>src/index.js 是全部组件的编译文件入口，由 components.json 文件构建而成。</p><p>综上可以整理出如下组件构建图：</p><p><img src="/images/webpack-component.png" alt="组件构件图"></p><p>组件构建出来其实是有问题的，按需引入的时候找不到样式，所以这里样式需要单独构建，构建方式如下：</p><p><img src="/images/css-gulp.png" alt="css 构件图"></p><p>以上就是该项目的架构设计思路，接下来要解决的是一些构建的问题。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github 实用小技巧</title>
      <link href="/2020/04/24/github%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/04/24/github%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="一、文件模糊搜索"><a href="#一、文件模糊搜索" class="headerlink" title="一、文件模糊搜索"></a>一、文件模糊搜索</h3><p>按下 t 键，会触发文件的模糊搜索功能，在输入框输入对应的字段，即可搜到文件,试了一下，gitlab 也同样适用。</p><p><img src="/images/github-t.gif" alt="github 模糊搜索"></p><p><img src="/images/gitlab-t.gif" alt="gitlab 模糊搜索"></p><h3 id="二、目录相关扩展"><a href="#二、目录相关扩展" class="headerlink" title="二、目录相关扩展"></a>二、目录相关扩展</h3><p>安装 Octotree 扩展，可以像在开发工具中浏览文件一样浏览 github 上的项目，他跟 Sourcegraph 的不同在于更加快，而且不用打开新的页面，更加轻巧。</p><p><img src="/images/octotree.png" alt="Octotree"></p><h3 id="三、复制代码"><a href="#三、复制代码" class="headerlink" title="三、复制代码"></a>三、复制代码</h3><p><img src="/images/github-copy.gif" alt="复制代码"></p><h3 id="四、markdown-小技巧"><a href="#四、markdown-小技巧" class="headerlink" title="四、markdown 小技巧"></a>四、markdown 小技巧</h3><p><img src="/images/github-md-kb.gif" alt="按钮模式"></p>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 画两色饼状图</title>
      <link href="/2020/04/23/css%E7%94%BB%E4%B8%A4%E8%89%B2%E9%A5%BC%E7%8A%B6%E5%9B%BE/"/>
      <url>/2020/04/23/css%E7%94%BB%E4%B8%A4%E8%89%B2%E9%A5%BC%E7%8A%B6%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>一、CSS 画圆</p><p>CSS 画圆我们应该都知道，给定宽高，border-radius 值设置为 50%，比如这样：</p><p><img src="/images/circle.png" alt="圆"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.pie</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">51</span>, <span class="number">168</span>, <span class="number">204</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二、CSS 画三角形</p><p>扇形跟三角形很像，只是有一条边为弧，那么可以效仿画三角形去画扇形。想一下我们一般画三角形会怎么画呢？先看看画四个 1/4 正方形的等边三角形，可以这么画：</p><p><img src="/images/triggle.png" alt="四个1/4正三角形"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triggle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triggle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(<span class="number">199</span>, <span class="number">110</span>, <span class="number">110</span>) <span class="built_in">rgb</span>(<span class="number">97</span>, <span class="number">97</span>, <span class="number">212</span>) <span class="built_in">rgb</span>(<span class="number">179</span>, <span class="number">153</span>, <span class="number">106</span>) <span class="built_in">rgb</span>(</span><br><span class="line">      <span class="number">118</span>,</span><br><span class="line">      <span class="number">158</span>,</span><br><span class="line">      <span class="number">118</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么画一个 1/4 三角形呢？可以在纯色正方形的上面盖一层正方形，比如这样：</p><p><img src="/images/triggle-one.png" alt="一个 1/4 三角形"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triggle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triggle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(<span class="number">199</span>, <span class="number">110</span>, <span class="number">110</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triggle</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三、画扇形</p><p>从上面的例子可以知道画一个三角形的例子，仿照上面的例子，我们画出一个 1/4 圆：</p><p><img src="/images/1-4circle.png" alt="1/4 圆"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rad&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rad</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(<span class="number">199</span>, <span class="number">110</span>, <span class="number">110</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rad</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调整一下，画 1/2 圆：</p><p><img src="/images/1-2circle.png" alt="1/2 圆"></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rad</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>) <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>) <span class="built_in">rgb</span>(<span class="number">199</span>, <span class="number">110</span>, <span class="number">110</span>) <span class="built_in">rgb</span>(</span><br><span class="line">      <span class="number">199</span>,</span><br><span class="line">      <span class="number">110</span>,</span><br><span class="line">      <span class="number">110</span></span><br><span class="line">    );</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rad</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>) <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给上述伪元素加一个旋转值，即可画任意弧度的扇形：</p><p><img src="/images/percent-circle.png" alt="各种弧度圆"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rad&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rad one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rad two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rad three&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rad</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>) <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>) <span class="built_in">rgb</span>(<span class="number">199</span>, <span class="number">110</span>, <span class="number">110</span>) <span class="built_in">rgb</span>(</span><br><span class="line">      <span class="number">199</span>,</span><br><span class="line">      <span class="number">110</span>,</span><br><span class="line">      <span class="number">110</span></span><br><span class="line">    );</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rad</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>) <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0.1turn</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0.25turn</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.two</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0.5turn</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.three</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0.8turn</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述例子中会发现 0.8 弧度的扇形是不对的，这里因为我们设置的是右半边透明所以这里调整一下</p><p><img src="/images/percent-circle-per.png" alt="各种弧度圆修正版"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rad&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rad one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rad two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rad-contex three&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.rad</span>,</span><br><span class="line"><span class="selector-class">.rad-contex</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>) <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>) <span class="built_in">rgb</span>(<span class="number">199</span>, <span class="number">110</span>, <span class="number">110</span>) <span class="built_in">rgb</span>(</span><br><span class="line">      <span class="number">199</span>,</span><br><span class="line">      <span class="number">110</span>,</span><br><span class="line">      <span class="number">110</span></span><br><span class="line">    );</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.rad</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: transparent transparent <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>) <span class="built_in">rgb</span>(<span class="number">118</span>, <span class="number">158</span>, <span class="number">118</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0.1turn</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rad-contex</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(<span class="number">199</span>, <span class="number">110</span>, <span class="number">110</span>) <span class="built_in">rgb</span>(<span class="number">199</span>, <span class="number">110</span>, <span class="number">110</span>) transparent transparent;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0.1turn</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0.25turn</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.two</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0.5turn</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.three</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>) <span class="built_in">rotate</span>(<span class="number">0.8turn</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们平常用的饼状图是动态的，百分比可能更加灵活，这里就需要进一步优化了，综合来讲，画动态的图可能还是 canvas 比较合适，静态的话，用 css 足矣。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计优美子数组</title>
      <link href="/2020/04/21/%E7%BB%9F%E8%AE%A1%E4%BC%98%E7%BE%8E%E5%AD%90%E6%95%B0%E7%BB%84/"/>
      <url>/2020/04/21/%E7%BB%9F%E8%AE%A1%E4%BC%98%E7%BE%8E%E5%AD%90%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">给你一个整数数组  nums 和一个整数 k。</span><br><span class="line"></span><br><span class="line">如果某个连续子数组中恰好有 k 个奇数数字，我们就认为这个子数组是「优美子数组」。</span><br><span class="line"></span><br><span class="line">请返回这个数组中「优美子数组」的数目。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：nums = [1,1,2,1,1], k = 3</span><br><span class="line">输出：2</span><br><span class="line">解释：包含 3 个奇数的子数组是 [1,1,2,1] 和 [1,2,1,1] 。</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = [2,4,6], k = 1</span><br><span class="line">输出：0</span><br><span class="line">解释：数列中不包含任何奇数，所以不存在优美子数组。</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：nums = [2,2,2,1,2,2,1,2,2,2], k = 2</span><br><span class="line">输出：16</span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line">1 <span class="xml"><span class="tag">&lt;<span class="name">=</span> <span class="attr">nums.length</span> &lt;= <span class="string">50000</span></span></span></span><br><span class="line"><span class="xml">1 <span class="tag">&lt;<span class="name">=</span> <span class="attr">nums</span>[<span class="attr">i</span>] &lt;= <span class="string">10^5</span></span></span></span><br><span class="line"><span class="xml">1 <span class="tag">&lt;<span class="name">=</span> <span class="attr">k</span> &lt;= <span class="string">nums.length</span></span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">来源：力扣（LeetCode）</span></span><br><span class="line"><span class="xml">链接：https://leetcode-cn.com/problems/count-number-of-nice-subarrays</span></span><br><span class="line"><span class="xml">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span></span><br></pre></td></tr></table></figure><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><ol><li><p>建立单独的数组 odd 用于记录第 i 个奇数的坐标， [odd[i],odd[i+k−1]] 这个子数组就恰好包含 k 个奇数</p></li><li><p>子数组 [l,r] 满足 [l,r] 包含 [odd[i],odd[i+k−1] 且 [l,r] 里的奇数个数为 k 个</p></li><li><p>对于第 i 个奇数满足条件的子数组 [l,r] 的个数为：</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(odd[i]−odd[i−<span class="number">1</span>])∗(odd[i+k]−odd[i+k−<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">k</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numberOfSubarrays = <span class="function"><span class="keyword">function</span> (<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">  nums.push(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> len = nums.length;</span><br><span class="line">  <span class="keyword">let</span> odd = [<span class="number">-1</span>];</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="keyword">const</span> num = nums[i];</span><br><span class="line">    <span class="keyword">if</span> (num % <span class="number">2</span>) &#123;</span><br><span class="line">      odd.push(i);</span><br><span class="line">      <span class="keyword">if</span> (odd[k + <span class="number">1</span>]) &#123;</span><br><span class="line">        ans += (odd[j] - odd[j - <span class="number">1</span>]) * (odd[k + <span class="number">1</span>] - odd[k]);</span><br><span class="line">        ++k;</span><br><span class="line">        ++j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test1 = numberOfSubarrays([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>], <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test2 = numberOfSubarrays([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>], <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test3 = numberOfSubarrays([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;test1:&#x27;</span>, test1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;test2:&#x27;</span>, test2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;test3:&#x27;</span>, test3);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算岛屿的数量</title>
      <link href="/2020/04/20/%E8%AE%A1%E7%AE%97%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%95%B0%E9%87%8F/"/>
      <url>/2020/04/20/%E8%AE%A1%E7%AE%97%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%95%B0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">给你一个由  &#x27;1&#x27;（陆地）和 &#x27;0&#x27;（水）组成的的二维网格，请你计算网格中岛屿的数量。</span><br><span class="line"></span><br><span class="line">岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</span><br><span class="line"></span><br><span class="line">此外，你可以假设该网格的四条边均被水包围。</span><br><span class="line"></span><br><span class="line">示例 1:</span><br><span class="line">输入:</span><br><span class="line">11110</span><br><span class="line">11010</span><br><span class="line">11000</span><br><span class="line">00000</span><br><span class="line">输出: 1</span><br><span class="line"></span><br><span class="line">示例  2:</span><br><span class="line">输入:</span><br><span class="line">11000</span><br><span class="line">11000</span><br><span class="line">00100</span><br><span class="line">00011</span><br><span class="line">输出: 3</span><br><span class="line">解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/number-of-islands</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><p>连城一片岛屿的情况如下图所示：</p><p><img src="/images/daoyu.JPG" alt="形成岛屿情况分析"></p><p>由上图可知，岛屿形成的条件是上下左右都是 1</p><p>如果出现了一个为 0，则不算</p><p>因此可以选择用深度优先搜索，查找树中节点为 1 的情况，若当前节点为 1，则向下继续查找，直到末端，算为一个岛屿</p><p>否则，继续遍历树的节点，重复以上操作，返回岛屿数量。</p><h3 id="三、题解"><a href="#三、题解" class="headerlink" title="三、题解"></a>三、题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;character[][]&#125;</span> <span class="variable">grid</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 深度优先搜索 DFS</span></span><br><span class="line"><span class="keyword">var</span> dfs = <span class="function"><span class="keyword">function</span> (<span class="params">grid, r, c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [nr, nc] = [grid.length, grid[<span class="number">0</span>].length];</span><br><span class="line">  grid[r][c] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (r - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[r - <span class="number">1</span>][c] === <span class="string">&#x27;1&#x27;</span>) dfs(grid, r - <span class="number">1</span>, c);</span><br><span class="line">  <span class="keyword">if</span> (r + <span class="number">1</span> &lt; nr &amp;&amp; grid[r + <span class="number">1</span>][c] === <span class="string">&#x27;1&#x27;</span>) dfs(grid, r + <span class="number">1</span>, c);</span><br><span class="line">  <span class="keyword">if</span> (c - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[r][c - <span class="number">1</span>] === <span class="string">&#x27;1&#x27;</span>) dfs(grid, r, c - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (c + <span class="number">1</span> &lt; nc &amp;&amp; grid[r][c + <span class="number">1</span>] === <span class="string">&#x27;1&#x27;</span>) dfs(grid, r, c + <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numIslands = <span class="function"><span class="keyword">function</span> (<span class="params">grid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> nr = grid.length;</span><br><span class="line">  <span class="keyword">if</span> (!nr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> nc = grid[<span class="number">0</span>].length;</span><br><span class="line">  <span class="keyword">let</span> num_isLands = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> r = <span class="number">0</span>; r &lt; nr; ++r) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> c = <span class="number">0</span>; c &lt; nc; ++c) &#123;</span><br><span class="line">      <span class="keyword">if</span> (grid[r][c] === <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">        num_isLands += <span class="number">1</span>;</span><br><span class="line">        dfs(grid, r, c);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num_isLands;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test1 = [</span><br><span class="line">  [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> test2 = [</span><br><span class="line">  [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test4 = [</span><br><span class="line">  [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res1 = numIslands(test1);</span><br><span class="line"><span class="keyword">const</span> res2 = numIslands(test2);</span><br><span class="line"><span class="keyword">const</span> res3 = numIslands([]);</span><br><span class="line"><span class="keyword">const</span> res4 = numIslands(test4);</span><br><span class="line"><span class="built_in">console</span>.log(res1);</span><br><span class="line"><span class="built_in">console</span>.log(res2);</span><br><span class="line"><span class="built_in">console</span>.log(res3);</span><br><span class="line"><span class="built_in">console</span>.log(res4);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Call、apply 和 Bind</title>
      <link href="/2020/04/14/JavaScript-call-apply-bind/"/>
      <url>/2020/04/14/JavaScript-call-apply-bind/</url>
      
        <content type="html"><![CDATA[<h3 id="一、使用环境"><a href="#一、使用环境" class="headerlink" title="一、使用环境"></a>一、使用环境</h3><p>在 es6 之前，JavaScript 经常会处理 this 的指向问题，call、apply 和 bind 方法就是为解决这个问题而生的，先来看一个简单的 demo：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">People.prototype = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Mike&#x27;</span>,</span><br><span class="line">  sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hi, my name is &#x27;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Mike = <span class="keyword">new</span> People();</span><br><span class="line">Mike.sayHi(); <span class="comment">// Hi, my name is Mike</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Amy = &#123; <span class="attr">name</span>: <span class="string">&#x27;Amy&#x27;</span> &#125;;</span><br><span class="line">Mike.sayHi.call(Amy); <span class="comment">// Hi, my name is Amy</span></span><br></pre></td></tr></table></figure><p>从上面的 demo 可以看出使用 call 把函数的 this 指向从 Mike 变为了 Amy，所以后面打印出来的名字是 Amy 而不是 Mike，这里使用 call 和 apply 的效果是一样的。</p><h3 id="二、apply-和-call-的区别"><a href="#二、apply-和-call-的区别" class="headerlink" title="二、apply 和 call 的区别"></a>二、apply 和 call 的区别</h3><p>apply 和 call 的方法不同之处在于参数的传递类型不一样，call 是一个个参数传进去，apply 是以数组的形式传参。可以根据需求使用这两个方法，比如参数比较多或者参数不确定时，用 apply 可能会好点。例子：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Number 类型使用数组方法</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">5</span>, <span class="number">458</span>, <span class="number">120</span>, <span class="number">-215</span>];</span><br><span class="line"><span class="keyword">var</span> maxInNumbers = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, numbers), <span class="comment">//458</span></span><br><span class="line">  maxInNumbers = <span class="built_in">Math</span>.max.call(<span class="built_in">Math</span>, <span class="number">5</span>, <span class="number">458</span>, <span class="number">120</span>, <span class="number">-215</span>); <span class="comment">//458</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪数组使用数组方法</span></span><br><span class="line"><span class="keyword">var</span> domNodes = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;div&#x27;</span>));</span><br><span class="line"><span class="keyword">var</span> res = domNodes.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="三、bind"><a href="#三、bind" class="headerlink" title="三、bind"></a>三、bind</h3><p>MDN 说明：bind() 方法创建一个新的函数，在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。在对象方法操作中经常会用到，比如我们 new 了一个对象，这个对象有一些事件，在事件里面，我们需要 this 指向该对象，而不是事件本身的执行上下文，这个时候，bind 就很有用了，来看一个 PixiJs 的 demo：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sprite</span><br><span class="line">  .on(<span class="string">&#x27;pointerdown&#x27;</span>, <span class="built_in">this</span>.onDragStart.bind(<span class="built_in">this</span>))</span><br><span class="line">  .on(<span class="string">&#x27;pointerup&#x27;</span>, <span class="built_in">this</span>.onDragEnd.bind(<span class="built_in">this</span>))</span><br><span class="line">  .on(<span class="string">&#x27;pointerupoutside&#x27;</span>, <span class="built_in">this</span>.onDragEnd.bind(<span class="built_in">this</span>))</span><br><span class="line">  .on(<span class="string">&#x27;pointermove&#x27;</span>, <span class="built_in">this</span>.onDragMove.bind(<span class="built_in">this</span>));</span><br></pre></td></tr></table></figure><p>从上面的 demo 可以看到，我把精灵的 onDragStart 等事件的 this 指向修改为了我自己定义的对象。</p><h3 id="四、bind-与-call、apply-的不同"><a href="#四、bind-与-call、apply-的不同" class="headerlink" title="四、bind 与 call、apply 的不同"></a>四、bind 与 call、apply 的不同</h3><p>call 和 apply 方法是立即执行的，而 bind 方法只是一个普通的方法，需要调用才会执行。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pixijs Graphics vertexData 采坑</title>
      <link href="/2020/04/13/pixijs-vertexData-null/"/>
      <url>/2020/04/13/pixijs-vertexData-null/</url>
      
        <content type="html"><![CDATA[<p>版本：PixiJs v5.2.0</p><p>最近项目中遇到了一个 Graphics 对象，打印出来 vertexData 有数据，但是单独打印却没有，因为是引用类型，我猜应该是数据后面加进去才会出现这个结果，然而，调试了半天也没找到问题，逻辑从头开始梳理，紧紧有条，没什么问题，看了他的 issue，试过里面的方法都不行。</p><p>既然是引用类型，就去看看这个属性值是怎么加进去的吧，看了作者的一些回答，发现在加 vertexData 之前会有一个 point update 和 vertexData 计算的过程，那就在打印和赋值之前先调用这两个方法吧，demo 如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!graphics.vertexData) &#123;</span><br><span class="line">  <span class="keyword">if</span> (g.geometry) &#123;</span><br><span class="line">    graphics.geometry.updateBatches();</span><br><span class="line">  &#125;</span><br><span class="line">  graphics.calculateVertices();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> vtexs = graphics.vertexData;</span><br></pre></td></tr></table></figure><p>这样写看起来没什么问题，点集和顶点都更新了，但是打印 vertexData 依然为 null，这次多出了一个 typeError 错误，可以看到 vertexData 默认值是 null，但是 calculateVertices 却在给该属性赋值时用了 vertexData[count++] 这样的操作，不知道作者怎么想的，可能是熬夜开发的结果吧。</p><p>通过 debug 出以上结论，我们知道这是 PixiJs 本身不完善的问题，所以解决 Graphics.vertexData 没有及时更新的问题了，改写一下 demo：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!graphics.vertexData) &#123;</span><br><span class="line">  graphics.vertexData = [];</span><br><span class="line">  <span class="keyword">if</span> (graphics.geometry) &#123;</span><br><span class="line">    graphics.geometry.updateBatches();</span><br><span class="line">  &#125;</span><br><span class="line">  graphics.calculateVertices();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> vtexs = g.vertexData;</span><br></pre></td></tr></table></figure><p>网上关于 PixiJs 的文献太少了，大多是一些基础教程，而且很多是比较老旧的版本，还是自己整理资料靠谱些。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pixi.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻转字符串里的单词</title>
      <link href="/2020/04/10/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
      <url>/2020/04/10/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">给定一个字符串，逐个翻转字符串中的每个单词。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入: &quot;the sky is blue&quot;</span><br><span class="line">输出: &quot;blue is sky the&quot;</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入: &quot;  hello world!  &quot;</span><br><span class="line">输出: &quot;world! hello&quot;</span><br><span class="line">解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入: &quot;a good   example&quot;</span><br><span class="line">输出: &quot;example good a&quot;</span><br><span class="line">解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">无空格字符构成一个单词。</span><br><span class="line">输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。</span><br><span class="line">如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/reverse-words-in-a-string</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><p>首先明确输入的参数是一个字符串，要反转字符串里的单词</p></li><li><p>去除首尾空格</p></li><li><p>每个单词之间是用空格隔开的，可以利用这一点，分隔单词，存到数组里</p></li><li><p>数组反转有两种思路</p></li></ol><ul><li><p>直接用内置方法 reverse</p></li><li><p>倒序遍历数组，依次加进新的数组</p></li></ul><ol><li>数组转字符串，可以用 join 方法</li></ol><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arr = s.trim().split(<span class="regexp">/\s+/</span>);</span><br><span class="line">  <span class="keyword">const</span> len = arr.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = len; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = arr[i];</span><br><span class="line">    res.push(item);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res.join(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成指定范围的随机数组</title>
      <link href="/2020/04/08/%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84/"/>
      <url>/2020/04/08/%E7%94%9F%E6%88%90%E6%8C%87%E5%AE%9A%E8%8C%83%E5%9B%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">输入范围，输出随机组成的数组</span><br><span class="line"></span><br><span class="line">比如输入 minNum、maxNum、option，返回 minNum 与 maxNum 间的随机数组构成的 option 长度的数组</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><p>求出随机数的范围 maxNum - minNum + 1</p></li><li><p>指定范围的随机数算法 Math.random() * len</p></li><li><p>遍历 option,若生成的随机数不在 minNum 与 maxNum 范围内，则重新计算，否则，添加随机数到数组</p></li><li><p>返回随机数组成的数组</p></li></ol><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MakeRandomList</span>(<span class="params">minNum, maxNum, option</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> len = maxNum - minNum + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; option; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> random = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * len);</span><br><span class="line">    <span class="keyword">if</span> (random &lt; minNum || random &gt; maxNum) &#123;</span><br><span class="line">      i--;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.push(random);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = MakeRandomList(<span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(test);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PixiJs ———— 精灵加载去缓存</title>
      <link href="/2020/04/06/pixi-js%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E7%B2%BE%E7%81%B5%E5%8A%A0%E8%BD%BD%E5%8E%BB%E7%BC%93%E5%AD%98/"/>
      <url>/2020/04/06/pixi-js%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E7%B2%BE%E7%81%B5%E5%8A%A0%E8%BD%BD%E5%8E%BB%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>PixiJs v5.2.0 加载精灵的时候会有缓存相关的 warning，每次都两百多条 warning，这谁受得了，花了点时间，各种调试，终于把他们给去掉了，舒服。可能有人会问，直接 google cv 一条龙不就解决了，但是网上关于 PixiJs 的文档是很少的，官方文档看了看，开发论坛看了看，都说用 clearTextureCache 方法，，通过打印发现是在 load 阶段给出的 warning，所以这里没用。先看看比如我一开始的代码，长这样</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadBaseImgs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> loader = <span class="keyword">new</span> PIXI.Loader();</span><br><span class="line">  <span class="keyword">const</span> textures = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  loader.add(baseImgArr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    loader.load(<span class="function">(<span class="params">loaders, resources</span>) =&gt;</span> &#123;</span><br><span class="line">      PIXI.utils.clearTextureCache();</span><br><span class="line">      <span class="keyword">const</span> lazer = resources.lazer.textures;</span><br><span class="line">      <span class="keyword">const</span> lazerGreen = lazer[<span class="string">&#x27;greenPen&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> lazerRed = lazer[<span class="string">&#x27;redPen&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> lazerYellow = lazer[<span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> lazerZise = lazer[<span class="string">&#x27;zise&#x27;</span>];</span><br><span class="line">      textures.lazerGreen = lazerGreen;</span><br><span class="line">      textures.lazerRed = lazerRed;</span><br><span class="line">      textures.lazerYellow = lazerYellow;</span><br><span class="line">      textures.lazerZise = lazerZise;</span><br><span class="line">      resolve(textures);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>看起来没毛病，跟 PixiJs 开发者说的解决方案一样，但是在第一次的时候还是打印了很多,warning 内容都是 <code>Texture added to the cache with an id [...] that already had an entry</code>, 这句话告诉我们 map 中已经有了该 id 的键值对，看 PixiJs 的 issue 发现开发者说这个不影响，只是提示而已。感受一下两百多条提示，你就会发现很有必要去掉它，谁知道因为这个会发生什么呢。</p><p><img src="/images/warning.png" alt="warning"></p><p>很吓人吧，然后跳到给出 warning 的地方</p><p><img src="/images/wraning-code.png" alt="warning-code"></p><p>可以看到这段代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Texture.addToCache = <span class="function"><span class="keyword">function</span> <span class="title">addToCache</span>(<span class="params">texture, id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (id) &#123;</span><br><span class="line">    <span class="keyword">if</span> (texture.textureCacheIds.indexOf(id) === <span class="number">-1</span>) &#123;</span><br><span class="line">      texture.textureCacheIds.push(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_pixi_utils__WEBPACK_IMPORTED_MODULE_1__[<span class="string">&#x27;TextureCache&#x27;</span>][id]) &#123;</span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-console</span></span><br><span class="line">      <span class="built_in">console</span>.warn(</span><br><span class="line">        <span class="string">&#x27;Texture added to the cache with an id [&#x27;</span> +</span><br><span class="line">          id +</span><br><span class="line">          <span class="string">&#x27;] that already had an entry&#x27;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _pixi_utils__WEBPACK_IMPORTED_MODULE_1__[<span class="string">&#x27;TextureCache&#x27;</span>][id] = texture;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从以上代码可以发现，这个 warning 是在 addToCache 的时候触发的，那么再去看看文档关于 PIXI.Loader 的描述吧，可以看到 PIXI 加载精灵集的方式有两种</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> loader = PIXI.Loader.shared; <span class="comment">// PixiJS exposes a premade instance for you to use.</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">const</span> loader = <span class="keyword">new</span> PIXI.Loader(); <span class="comment">// you can also create your own if you want</span></span><br></pre></td></tr></table></figure><p>以上第一种是 PixiJS 暴露的一个默认实例，第二种是我们自己 new 的实例，这里我用的是第二种会打印 warning，那么试试第一种方式吧，修改代码为：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadBaseImgs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> loader = PIXI.Loader.shared;</span><br><span class="line">  <span class="keyword">const</span> textures = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  loader.add(baseImgArr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    loader.load(<span class="function">(<span class="params">loaders, resources</span>) =&gt;</span> &#123;</span><br><span class="line">      PIXI.utils.clearTextureCache();</span><br><span class="line">      <span class="keyword">const</span> lazer = resources.lazer.textures;</span><br><span class="line">      <span class="keyword">const</span> lazerGreen = lazer[<span class="string">&#x27;greenPen&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> lazerRed = lazer[<span class="string">&#x27;redPen&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> lazerYellow = lazer[<span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> lazerZise = lazer[<span class="string">&#x27;zise&#x27;</span>];</span><br><span class="line">      textures.lazerGreen = lazerGreen;</span><br><span class="line">      textures.lazerRed = lazerRed;</span><br><span class="line">      textures.lazerYellow = lazerYellow;</span><br><span class="line">      textures.lazerZise = lazerZise;</span><br><span class="line">      resolve(textures);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这下 error 来了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Uncaught (<span class="keyword">in</span> promise) <span class="built_in">Error</span>: Cannot add resources <span class="keyword">while</span> the loader is running.</span><br></pre></td></tr></table></figure><p>只能用一个 loader 实例？那么就在添加新的 resource 之前，重置一下 loader 吧</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadBaseImgs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> loader = PIXI.Loader.shared;</span><br><span class="line">  <span class="keyword">const</span> textures = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  loader.reset();</span><br><span class="line">  loader.add(baseImgArr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    loader.load(<span class="function">(<span class="params">loaders, resources</span>) =&gt;</span> &#123;</span><br><span class="line">      PIXI.utils.clearTextureCache();</span><br><span class="line">      <span class="keyword">const</span> lazer = resources.lazer.textures;</span><br><span class="line">      <span class="keyword">const</span> lazerGreen = lazer[<span class="string">&#x27;greenPen&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> lazerRed = lazer[<span class="string">&#x27;redPen&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> lazerYellow = lazer[<span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> lazerZise = lazer[<span class="string">&#x27;zise&#x27;</span>];</span><br><span class="line">      textures.lazerGreen = lazerGreen;</span><br><span class="line">      textures.lazerRed = lazerRed;</span><br><span class="line">      textures.lazerYellow = lazerYellow;</span><br><span class="line">      textures.lazerZise = lazerZise;</span><br><span class="line">      resolve(textures);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>emmm, 搞定，warning 再见。</p><p>等等，这样写虽然解决了问题，但是每次 loader 都会重新加载，每次执行函数也会重新的的去异步加载 resources，这明显不科学，不如把资源添加的环节放到函数外面去，这样就不用每次进来都 add 一下了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> loader = PIXI.Loader.shared;</span><br><span class="line"><span class="keyword">const</span> textures = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">loader.add(baseImgArr);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadBaseImgs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    loader.load(<span class="function">(<span class="params">loaders, resources</span>) =&gt;</span> &#123;</span><br><span class="line">      PIXI.utils.clearTextureCache();</span><br><span class="line">      <span class="keyword">const</span> lazer = resources.lazer.textures;</span><br><span class="line">      <span class="keyword">const</span> lazerGreen = lazer[<span class="string">&#x27;greenPen&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> lazerRed = lazer[<span class="string">&#x27;redPen&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> lazerYellow = lazer[<span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line">      <span class="keyword">const</span> lazerZise = lazer[<span class="string">&#x27;zise&#x27;</span>];</span><br><span class="line">      textures.lazerGreen = lazerGreen;</span><br><span class="line">      textures.lazerRed = lazerRed;</span><br><span class="line">      textures.lazerYellow = lazerYellow;</span><br><span class="line">      textures.lazerZise = lazerZise;</span><br><span class="line">      resolve(textures);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这样写，每次调用函数减少了 add 环节，但是还是会重复的 load，再改进一些，load 只用于拿数据，处理数据的部分分割出来，由于第一次 load 完毕，已经可以拿到所有的 texture 了，所以可以在这个阶段去把 resources 存起来，以后通过判断有没有这个 resources，决定是否要 load，改进代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> loader = PIXI.Loader.shared;</span><br><span class="line"><span class="keyword">const</span> textures = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> resInstance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">loader.add(baseImgArr);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loaded</span>(<span class="params">resources, resolve</span>) </span>&#123;</span><br><span class="line">  PIXI.utils.clearTextureCache();</span><br><span class="line">  <span class="keyword">const</span> lazer = resources.lazer.textures;</span><br><span class="line">  <span class="keyword">const</span> lazerGreen = lazer[<span class="string">&#x27;greenPen&#x27;</span>];</span><br><span class="line">  <span class="keyword">const</span> lazerRed = lazer[<span class="string">&#x27;redPen&#x27;</span>];</span><br><span class="line">  <span class="keyword">const</span> lazerYellow = lazer[<span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line">  <span class="keyword">const</span> lazerZise = lazer[<span class="string">&#x27;zise&#x27;</span>];</span><br><span class="line">  textures.lazerGreen = lazerGreen;</span><br><span class="line">  textures.lazerRed = lazerRed;</span><br><span class="line">  textures.lazerYellow = lazerYellow;</span><br><span class="line">  textures.lazerZise = lazerZise;</span><br><span class="line">  resolve(textures);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadBaseImgs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(resInstance) &#123;</span><br><span class="line">      loaded(resInstance, resolve);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    loader.load(<span class="function">(<span class="params">loaders, resources</span>) =&gt;</span> &#123;</span><br><span class="line">      resInstance = resources;</span><br><span class="line">      loaded(resInstance, resolve);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pixi.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack5 新特性 - 模块联邦笔记</title>
      <link href="/2020/04/03/Webpack5%E6%96%B0%E7%89%B9%E6%80%A7-%E6%A8%A1%E5%9D%97%E8%81%94%E9%82%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/03/Webpack5%E6%96%B0%E7%89%B9%E6%80%A7-%E6%A8%A1%E5%9D%97%E8%81%94%E9%82%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<!-- ![NPM 方式共享模块图解](/images/npm.jpeg) --><h3 id="一、NPM-方式共享模块"><a href="#一、NPM-方式共享模块" class="headerlink" title="一、NPM 方式共享模块"></a>一、NPM 方式共享模块</h3><h4 id="1、模块共享方式"><a href="#1、模块共享方式" class="headerlink" title="1、模块共享方式"></a>1、模块共享方式</h4><p>将需要共享的模块抽成通用依赖，进行 Webpack 打包构建上线，再分别安装到对应的项目中。</p><h4 id="2、存在的问题"><a href="#2、存在的问题" class="headerlink" title="2、存在的问题"></a>2、存在的问题</h4><p>需要走本地编译</p><p><img src="/images/npm.jpeg" alt="NPM 方式共享模块图解"></p><h3 id="二、UMD-方式共享模块"><a href="#二、UMD-方式共享模块" class="headerlink" title="二、UMD 方式共享模块"></a>二、UMD 方式共享模块</h3><p><img src="/images/umd.jpeg" alt="UMD 方式共享模块图解"></p><h4 id="1、模块共享方式-1"><a href="#1、模块共享方式-1" class="headerlink" title="1、模块共享方式"></a>1、模块共享方式</h4><p>模块用 Webpack UMD 模式打包，并输出到其他项目中.</p><h4 id="2、存在的问题-1"><a href="#2、存在的问题-1" class="headerlink" title="2、存在的问题"></a>2、存在的问题</h4><p>包体积无法达到本地编译时的优化效果，且库之间容易冲突。</p><h3 id="三、微前端方式共享模块（MFE）"><a href="#三、微前端方式共享模块（MFE）" class="headerlink" title="三、微前端方式共享模块（MFE）"></a>三、微前端方式共享模块（MFE）</h3><p><img src="/images/mfe.jpeg" alt="微前端方式共享模块图解"></p><h4 id="1、模块共享方式-2"><a href="#1、模块共享方式-2" class="headerlink" title="1、模块共享方式"></a>1、模块共享方式</h4><ul><li><p>子应用独立打包</p></li><li><p>整体应用一起打包</p></li></ul><h4 id="2、存在的问题-2"><a href="#2、存在的问题-2" class="headerlink" title="2、存在的问题"></a>2、存在的问题</h4><ul><li><p>子应用独立打包，无法抽取公共依赖</p></li><li><p>整体应用一起打包，速度慢，不具备扩展水平</p></li></ul><h3 id="四、模块联邦方式共享模块-Federated-Module"><a href="#四、模块联邦方式共享模块-Federated-Module" class="headerlink" title="四、模块联邦方式共享模块( Federated Module)"></a>四、模块联邦方式共享模块( Federated Module)</h3><p><img src="/images/fm.jpeg" alt="微前端方式共享模块图解"></p><h4 id="1、模块共享方式-3"><a href="#1、模块共享方式-3" class="headerlink" title="1、模块共享方式"></a>1、模块共享方式</h4><p>在线动态分发 Runtime 子模块，子应用利用 Runtime 方式复用主应用的 Npm 包和模块，应用之间包直接共享。</p><h4 id="2、使用方式"><a href="#2、使用方式" class="headerlink" title="2、使用方式"></a>2、使用方式</h4><p>核心是 ModuleFederationPlugin 插件</p><p>(1) 模块导出</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ModuleFederationPlugin = <span class="built_in">require</span>(<span class="string">&quot;webpack/lib/container/ModuleFederationPlugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// other webpack configs...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ModuleFederationPlugin(&#123;</span><br><span class="line">      name: <span class="string">&quot;app_one_remote&quot;</span>, <span class="comment">// 当前应用名称，需要全局唯一</span></span><br><span class="line">      remotes: &#123;  <span class="comment">//  将其他项目的 name 映射到当前项目中</span></span><br><span class="line">        app_two: <span class="string">&quot;app_two_remote&quot;</span>,</span><br><span class="line">        app_three: <span class="string">&quot;app_three_remote&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      exposes: &#123;  <span class="comment">//  表示导出的模块，只有在此申明的模块才可以作为远程依赖被使用</span></span><br><span class="line">        AppContainer: <span class="string">&quot;./src/App&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      shared: [<span class="string">&quot;react&quot;</span>, <span class="string">&quot;react-dom&quot;</span>, <span class="string">&quot;react-router-dom&quot;</span>]  <span class="comment">//  让远程加载的模块对应依赖改为使用本地项目的 React 或 ReactDOM</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">      chunks: [<span class="string">&quot;main&quot;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>(2) 模块使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Search &#125; <span class="keyword">from</span> <span class="string">&quot;app_two/Search&quot;</span>;</span><br></pre></td></tr></table></figure><p>(3) 模块配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app_two 的 webpack 配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ModuleFederationPlugin(&#123;</span><br><span class="line">      name: <span class="string">&quot;app_two&quot;</span>,</span><br><span class="line">      library: &#123; <span class="attr">type</span>: <span class="string">&quot;var&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;app_two&quot;</span> &#125;,</span><br><span class="line">      filename: <span class="string">&quot;remoteEntry.js&quot;</span>,</span><br><span class="line">      exposes: &#123;</span><br><span class="line">        Search: <span class="string">&quot;./src/Search&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      shared: [<span class="string">&quot;react&quot;</span>, <span class="string">&quot;react-dom&quot;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://mp.weixin.qq.com/s/b5Gl_1yX1enktU9oulO9zg">原文</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 定位</title>
      <link href="/2020/04/02/css%E5%AE%9A%E4%BD%8D/"/>
      <url>/2020/04/02/css%E5%AE%9A%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<p>CSS position 总共分为以下几种类型：static、relative、absolute、fixed、sticky。</p><h3 id="一、static"><a href="#一、static" class="headerlink" title="一、static"></a>一、static</h3><p>static 是 position 的默认值，元素处于正常文档流，在该值下，元素设置 top、left 等位置信息和 z-index 无效。</p><p><img src="/images/static.png" alt="static"></p><p><strong>demo</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- static 定位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static-item&quot;</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static-item&quot;</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static-item&quot;</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.static-item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: static;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、relative"><a href="#二、relative" class="headerlink" title="二、relative"></a>二、relative</h3><p>relative 定位，元素处于正常文档流，父元素会对该元素留有一定的空间，left、top 等位置设置，相对于当前元素偏移。该设置对 table 类的属性不支持。</p><p><img src="/images/relative.png" alt="relative"></p><p><strong>demo</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- relative 定位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static-item&quot;</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;relative-item static-item&quot;</span>&gt;</span>relative<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static-item&quot;</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.relative-item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、absolute"><a href="#三、absolute" class="headerlink" title="三、absolute"></a>三、absolute</h3><p>absolute 定位，元素被移除正常文档流，父元素不会对该元素留空间。left、top 等位置设置，相对于非 static 定位的祖先元素偏移。</p><p><img src="/images/absolute.png" alt="absolute"></p><p><strong>demo</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- absolute 定位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static-item&quot;</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;absolute-item static-item&quot;</span>&gt;</span>absolute<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static-item&quot;</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.absolute-item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、fixed"><a href="#四、fixed" class="headerlink" title="四、fixed"></a>四、fixed</h3><p>fixed 定位，元素脱离正常文档流，父元素不会对该元素留空间。left、top 等位置设置，相对于视口偏移。</p><p><img src="/images/fixed.png" alt="fixed"></p><p><strong>demo</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- fixed 定位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static-item&quot;</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fixed-item static-item&quot;</span>&gt;</span>fixed<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static-item&quot;</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fixed-item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、sticky"><a href="#五、sticky" class="headerlink" title="五、sticky"></a>五、sticky</h3><p>sticky 定位，元素处于正常文档流，left、top 等位置设置，相对于最近滚动祖先偏移。</p><p><img src="/images/sticky.png" alt="sticky"></p><p><strong>demo</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sticky-wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float: left; margin-top: 10px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;static-item&quot;</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float: left; margin-top: 10px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sticky-item static-item&quot;</span>&gt;</span>sticky<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;float: left; margin-top: 10px;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;static-item&quot;</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear: left;&quot;</span>&gt;</span>To see the effect of sticky positioning, select the position: sticky option and scroll this container.</span><br><span class="line"></span><br><span class="line">  The element will scroll along with its container, until it is at the top of the container (or reaches the offset specified in top), and will then stop scrolling, so it stays visible.</span><br><span class="line"></span><br><span class="line">  The rest of this text is only supplied to make sure the container overflows, so as to enable you to scroll it and see the effect.</span><br><span class="line"></span><br><span class="line">  Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun. Orbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital watches are a pretty neat idea.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sticky-item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>首屏时间(FCP) vs 白屏时间(FP)</title>
      <link href="/2020/04/01/%E9%A6%96%E5%B1%8F%E6%97%B6%E9%97%B4vs%E7%99%BD%E5%B1%8F%E6%97%B6%E9%97%B4/"/>
      <url>/2020/04/01/%E9%A6%96%E5%B1%8F%E6%97%B6%E9%97%B4vs%E7%99%BD%E5%B1%8F%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="一、摘要"><a href="#一、摘要" class="headerlink" title="一、摘要"></a>一、摘要</h3><p>最近发现做了这么多的首屏优化，一直都是把白屏时间和首屏时间算在一起，也就是页面打开之前 dom 没渲染出来，我就把他归为首屏时间。时间上这里专业点可以分为首屏和白屏两个阶段，这篇文章就讲讲二者的区别，以及计算方法。</p><h3 id="二、-为什么需要计算首屏时间和白屏时间"><a href="#二、-为什么需要计算首屏时间和白屏时间" class="headerlink" title="二、 为什么需要计算首屏时间和白屏时间"></a>二、 为什么需要计算首屏时间和白屏时间</h3><p>首先先讲讲按照我以前理解的首屏时间慢会带来什么问题，在页面一开始总有一段 dom 没被渲染出来的时间，这里慢的话，可以看到一段页面空白的时间，快的话，空白会一闪而过，造成闪屏，页面体验很差。因此，才有必要对其进行优化。</p><h3 id="三、首屏和白屏是什么"><a href="#三、首屏和白屏是什么" class="headerlink" title="三、首屏和白屏是什么"></a>三、首屏和白屏是什么</h3><p>再来讲讲白屏和首屏。</p><h4 id="1、白屏（First-Paint）"><a href="#1、白屏（First-Paint）" class="headerlink" title="1、白屏（First Paint）"></a>1、白屏（First Paint）</h4><p>当浏览器开始渲染页面，白屏触发，这时候你如果设置了背景颜色的话，就可以看到页面出现了背景色。</p><p><img src="/images/first-paint-example.png" alt="白屏示例图"></p><p>白屏会在页面加载之前触发，在这段时间里，不会呈现任何内容和信息给用户。虽然背景色会很快完成绘制，但是实际的内容和交互可能要花很长的时间去加载，因此，白屏时间过长，会让用户认为我们的页面不能用或可用性差。可以通过适当调整页面结构，来优化网页。</p><h4 id="2、首屏-First-Contentful-Paint"><a href="#2、首屏-First-Contentful-Paint" class="headerlink" title="2、首屏 (First Contentful Paint)"></a>2、首屏 (First Contentful Paint)</h4><p>当页面绘制完第一个 DOM 内容，会触发首屏，这里的内容可以是文字、图片或者是 canvas。</p><p><img src="/images/first-contentful-paint-example.png" alt="首屏示例图"></p><p>首屏决定了网页的用户体验，因为它会标记实际内容何时加载到页面中，而不仅仅是标记页面的变化状态。因为关注的是内容，所以该指标可以了解用户何时收到消耗性信息，比如文本，视觉效果等，这比通过背景改变或样式改变对用户体验进行评估更有用。</p><h3 id="四、首屏时间和白屏时间计算"><a href="#四、首屏时间和白屏时间计算" class="headerlink" title="四、首屏时间和白屏时间计算"></a>四、首屏时间和白屏时间计算</h3><h4 id="1、-白屏时间计算"><a href="#1、-白屏时间计算" class="headerlink" title="1、 白屏时间计算"></a>1、 白屏时间计算</h4><p>在 head 标签开始加一段脚本，用于记录白屏开始时间，在 head 标签结束之前，加一段脚本，用于计算白屏时间，有些浏览器可以调用 Performance API 得出白屏结束时间，有些不支持，因此，计算方式分两种：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 支持 Performance API</span></span><br><span class="line">firstPaint =  firstPaintEnd - performance.timing.navigationStart;</span><br><span class="line"><span class="comment">// 不支持 Performance API，在 page onload 中计算结束时间 pageStartTime</span></span><br><span class="line">firstPaint =  firstPaintEnd - pageStartTime;</span><br></pre></td></tr></table></figure><h4 id="2、首屏时间计算"><a href="#2、首屏时间计算" class="headerlink" title="2、首屏时间计算"></a>2、首屏时间计算</h4><p>首屏时间的计算需要用到两个变量，一个是首屏开始，一个是首屏结束，首屏开始也是白屏结束的时间，因此可以用以上方法计算出来，首屏结束时间应该是页面的第一屏绘制完，但是这个我们不好定义，我们知道在一个页面中，图片资源往往是比较后加载完的，因此可以统计首屏加载最慢的图片是否加载完成，加载完了，记录结束时间.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算首屏加载最慢的图片是否加载完成</span></span><br><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = src;</span><br><span class="line">img.onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  firstPaintContentEnd = <span class="built_in">Date</span>.now();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> onload = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  firstPaintContentStart = <span class="built_in">Date</span>.now();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">firstPaintContent = firstPaintContentEnd - firstPaintContentStart;</span><br></pre></td></tr></table></figure><h3 id="五、我该计算首屏时间还是白屏时间？"><a href="#五、我该计算首屏时间还是白屏时间？" class="headerlink" title="五、我该计算首屏时间还是白屏时间？"></a>五、我该计算首屏时间还是白屏时间？</h3><p>在评估页面是否开始渲染方面，首屏时间会比白屏时间更精确，但是二者的结束时间往往很接近。所以要根据自己的业务场景去决定到底该用哪种计算方式。</p><ul><li><p>对于交互性比较少的简单网页，由于加载比较快，所以二者区别不大，因此，可以根据喜好任选一种计算方式。</p></li><li><p>对于大型的复杂页面，你会发现由于需要处理更多复杂的元素，白屏时间和首屏时间相隔比较远，这时候，计算首屏时间会更有用。</p></li></ul><h3 id="六、基于以上理论，写的一个替换白屏的小-demo"><a href="#六、基于以上理论，写的一个替换白屏的小-demo" class="headerlink" title="六、基于以上理论，写的一个替换白屏的小 demo"></a>六、基于以上理论，写的一个替换白屏的小 demo</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.static</span> &#123;</span></span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        background: url(./img/skeleton.png) no-repeat;</span><br><span class="line">        background-size: 100% 100%;</span><br><span class="line">        animation: bg-animation 3s infinite;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="keyword">@keyframes</span> bg-animation &#123;</span></span><br><span class="line">        from &#123;</span><br><span class="line"><span class="css">          <span class="selector-tag">opacity</span>: <span class="selector-class">.075</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        40% &#123;</span><br><span class="line"><span class="css">          <span class="selector-tag">opacity</span>: <span class="selector-class">.82</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        60% &#123;</span><br><span class="line"><span class="css">          <span class="selector-tag">opacity</span>: <span class="selector-class">.165</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        100% &#123;</span><br><span class="line">          opacity: 1;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      startTime = <span class="built_in">Date</span>.now();</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span></span></span><br><span class="line"><span class="tag">        &gt;</span>We&#x27;re sorry but flash-experiment doesn&#x27;t work properly without</span><br><span class="line">        JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static&quot;</span> <span class="attr">id</span>=<span class="string">&quot;static&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.onload = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        startEnd = <span class="built_in">Date</span>.now();</span></span><br><span class="line">        firstPaint = startEnd - startTime;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(firstPaint);</span></span><br><span class="line">        removeDom();</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">removeDom</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#static&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelector(<span class="string">&#x27;body&#x27;</span>).removeChild(div);</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防不胜防的 Bug —————— Chrom 翻译惹的祸</title>
      <link href="/2020/03/31/%E9%98%B2%E4%B8%8D%E8%83%9C%E9%98%B2%E7%9A%84bug-chrom%E7%BF%BB%E8%AF%91%E6%83%B9%E7%9A%84%E7%A5%B8/"/>
      <url>/2020/03/31/%E9%98%B2%E4%B8%8D%E8%83%9C%E9%98%B2%E7%9A%84bug-chrom%E7%BF%BB%E8%AF%91%E6%83%B9%E7%9A%84%E7%A5%B8/</url>
      
        <content type="html"><![CDATA[<p>今天下午被叫去产品那里，给我看了之前写的界面里面出现奇怪的中文字符，明明网页都是拼音，怎么会出现汉字，我一脸懵逼。</p><p>于是我远程看了销售的电脑网页，还真是，神奇的出现乱码一样的页面。我熟练的 f12 打开控制台看看元素有没有被加上奇怪的东西，有没有打印出 error，没有令我失望，html 这个 dom 被加上了一个本该没有的 class，language 被改写成了 zh-CN。多打开几次，发现右上角总有翻译提示框，还自动翻译了。问题应该就出在页面被自动翻译上了，点开显示原网页，果然正常。那么问题该怎么解决呢？首先想到的当然是 chrom 设置，禁止自动弹出翻译查询框了，但是这个自动翻译，应该是被误触了，点击了一律翻译英文页面，这里也得给他改回来。但是，作为一个程序员，当然要从程序层面去解决这个问题，因为谁也不知道哪个用户会遇到这个问题，我也不可能一个个的去帮他们修改设置项。</p><p>要解决这个问题，首先得知道什么情况下，chrom 会弹出翻译询问框。</p><p>设置那里说了非本语言，一律翻译为中文。</p><p>那么什么叫做非本语言呢？我们中国人，一般喜欢设置默认语言为中文，即非中文的时候，一律会被翻译为英文。这里的中文指的是汉字，不包括阿拉伯数字和英文字母。所以当页面的 language 不是 zh-CN 并且页面中含有非汉字时，就会弹出翻译询问框，这里很容易被误点击一律翻译为中文，然后打开的所有符合以上条件的页面都会被自动翻译，然后就可以看到你的页面出现奇奇怪怪的字符了。</p><p>综上解决这个问题的方法就是，在 html 标签中，设置 language 为 zh-CN，这样，在该页面就不会弹出翻译询问框了，被误点击的机会也没有了，问题基本解决。这里说基本解决，是考虑到还有些已经设置了自动翻译成中文的，这里可以加上 no-translate，Stack Overflow 上的人说能解决。可以一试。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios网络请求封装</title>
      <link href="/2020/03/31/axios%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85/"/>
      <url>/2020/03/31/axios%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>axios 是网页请求库中的新星，经常会看到他与 vue 携手，该库对 http 请求已经封装得很好了，但是，由于我需要一些更加定制化的操作，比如加密请求参数等，所以这里进行了二次封装。</p><h3 id="一、方案一，根据方法封装，不预处理状态"><a href="#一、方案一，根据方法封装，不预处理状态" class="headerlink" title="一、方案一，根据方法封装，不预处理状态"></a>一、方案一，根据方法封装，不预处理状态</h3><h4 id="1、-代码："><a href="#1、-代码：" class="headerlink" title="1、 代码："></a>1、 代码：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&quot;qs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Http</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">this</span>.ins = axios.create(&#123;</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get(url, param = &#123;&#125;, config = &#123;&#125;) &#123;</span><br><span class="line">    config.params = param;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.ins.get(url, config);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  post(url, data = &#123;&#125;, config = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.ins.post(url, qs.stringify(data), config);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>(url, param = &#123;&#125;, config = &#123;&#125;) &#123;</span><br><span class="line">    config.params = param;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.ins.delete(url, config);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  put(url, body = &#123;&#125;, config = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.ins.put(url, body, config);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> http = <span class="keyword">new</span> Http();</span><br><span class="line"><span class="keyword">export</span> &#123; http &#125;;</span><br></pre></td></tr></table></figure><h4 id="2、-使用方法："><a href="#2、-使用方法：" class="headerlink" title="2、 使用方法："></a>2、 使用方法：</h4><ul><li><p>安装 <a href="https://github.com/axios/axios">axios</a></p></li><li><p>安装 <a href="https://www.npmjs.com/package/qs">qs</a></p></li><li><p>使用示例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; http &#125; <span class="keyword">from</span> <span class="string">&#x27;@/service.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// http get example</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> params = &#123;&#125;</span><br><span class="line">http.get(url, &#123;</span><br><span class="line">  params</span><br><span class="line">&#125;, &#123;&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// http post example</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> params = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">http.post(url, params, config)</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、方案二，根据请求方式分，在数据拦截阶段处理好各种状态，再返回数据"><a href="#二、方案二，根据请求方式分，在数据拦截阶段处理好各种状态，再返回数据" class="headerlink" title="二、方案二，根据请求方式分，在数据拦截阶段处理好各种状态，再返回数据"></a>二、方案二，根据请求方式分，在数据拦截阶段处理好各种状态，再返回数据</h3><h4 id="1、代码"><a href="#1、代码" class="headerlink" title="1、代码"></a>1、代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  timeout: <span class="number">5000</span>,</span><br><span class="line">  responseType: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (config.method === <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">      config.data = qs.stringify(config.data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    Vue.prototype.$message.fail(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> status = response.data.F_responseNo;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10000</span>:</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;response&#x27;</span>, response.data);</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(response.data);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10001</span>:</span><br><span class="line">          Vue.prototype.$messagebox.show_message(</span><br><span class="line">            <span class="string">&#x27;操作失败，未知错误：&#x27;</span>,</span><br><span class="line">            status</span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response.data);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10002</span>:</span><br><span class="line">          Vue.prototype.$messagebox.show_message(<span class="string">&#x27;请求参数错误：&#x27;</span>, status);</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response.data);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12100</span>:</span><br><span class="line">          Vue.prototype.$messagebox.show_message(<span class="string">&#x27;账号错误：&#x27;</span>, status);</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response.data);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12105</span>:</span><br><span class="line">          Vue.prototype.$messagebox.show_message(<span class="string">&#x27;账号在别处登录：&#x27;</span>, status);</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response.data);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.response.status) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">          Vue.prototype.$messagebox.show_message(<span class="string">&#x27;参数错误：&#x27;</span>, <span class="number">400</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">          Vue.prototype.$messagebox.show_message(<span class="string">&#x27;认证错误：&#x27;</span>, <span class="number">401</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">          Vue.prototype.$messagebox.show_message(</span><br><span class="line">            <span class="string">&#x27;拒绝执行 (access_token or refresh_access_token 错误)：&#x27;</span>,</span><br><span class="line">            <span class="number">403</span></span><br><span class="line">          );</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">          Vue.prototype.$messagebox.show_message(<span class="string">&#x27;请求页面不存在：&#x27;</span>, <span class="number">404</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          Vue.prototype.$messagebox.show_message(error.response.data.message);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><h4 id="2、-使用方法：-1"><a href="#2、-使用方法：-1" class="headerlink" title="2、 使用方法："></a>2、 使用方法：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">service(&#123;</span><br><span class="line">  url,</span><br><span class="line">  method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  params</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode代码格式化总结</title>
      <link href="/2020/03/30/vscode%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%80%BB%E7%BB%93/"/>
      <url>/2020/03/30/vscode%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>工欲善其事必先利其器，有一个完美的代码编辑工具，可以大幅提高编码效率，从团队的角度讲，也有利于促进团队的写作。我个人是个强迫症，看不得一点的不干净，于代码如是。在多人合作的项目中也会发现，每个人的编码风格和格式化工具不一样，拉下代码来还要重新格式化，看看哪里不对不说，还会弄出一些奇怪的问题。鉴于此，我研究了一段时间怎么统一代码风格，怎么做才能让代码自动格式化符合标准，怎么自动修复一些代码错误。答案是，eslint + prettier 可以完美做到，关于这个，网上有很多教程，我的配置如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;files.autoSave&quot;</span>: <span class="string">&quot;afterDelay&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;files.autoSaveDelay&quot;</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;editor.wordWrap&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.wordWrapColumn&quot;</span>: <span class="number">120</span>,</span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;prettier.semi&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;prettier.singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;prettier.disableLanguages&quot;</span>: [<span class="string">&quot;vue&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;editor.formatOnPaste&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;editor.autoIndent&quot;</span>: <span class="string">&quot;keep&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;search.followSymlinks&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;vetur.format.defaultFormatter.html&quot;</span>: <span class="string">&quot;prettyhtml&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vetur.format.defaultFormatter.js&quot;</span>: <span class="string">&quot;prettier&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">      <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">      <span class="string">&quot;html&quot;</span>,</span><br><span class="line">      <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;eslint.format.enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动格式化工具设置为 prettier, 配合 eslint 自动格式化，基本可以满足一般的代码风格配置。但是 vue 的格式化我们一般会用到 vetur, 因为某些原因，这会导致格式化时，单引号变为双引号， 这就很不舒服了，为了解决这个问题，需要添加以下配置：</p><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;prettier.disableLanguages&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;vue&quot;</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>eslint 设置</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;rules&quot;: &#123;</span><br><span class="line">  &quot;semi&quot;: [</span><br><span class="line">    &quot;error&quot;,</span><br><span class="line">    <span class="string">&quot;always&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  &quot;no-tabs&quot;: &quot;off&quot;,</span><br><span class="line">  &quot;no-console&quot;: &quot;off&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>此外，vetur 最新版因为增加了对 ts 的支持，模板中的属性变量会标红，这里需要设置 “vetur.experimental.templateInterpolationService” 为 false，方能解决</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于以往经验的基础知识整理</title>
      <link href="/2020/03/29/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
      <url>/2020/03/29/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一、首屏优化"><a href="#一、首屏优化" class="headerlink" title="一、首屏优化"></a>一、首屏优化</h3><ol><li><p>按需引入第三方包</p></li><li><p>个别地方用的包，不要在入口文件引入，换成在对应的组件引入，减小 app.js 文件大小</p></li><li><p>异步组件</p></li><li><p>精简代码</p></li><li><p>缓存首屏数据</p></li><li><p>加骨架屏</p></li></ol><h3 id="二、Vue-跟-Angular-的区别"><a href="#二、Vue-跟-Angular-的区别" class="headerlink" title="二、Vue 跟 Angular 的区别"></a>二、Vue 跟 Angular 的区别</h3><ol><li><p>Angular 比 Vue 复杂</p></li><li><p>Angular 双向绑定数据，Vue 组件间采用单向数据流</p></li></ol><h3 id="三、MVC、MVP、MVVM-是什么"><a href="#三、MVC、MVP、MVVM-是什么" class="headerlink" title="三、MVC、MVP、MVVM 是什么"></a>三、MVC、MVP、MVVM 是什么</h3><p>MVC、MVP、MVVM 是基本的软件架构</p><h4 id="1、MVC（Model-View-Controller）"><a href="#1、MVC（Model-View-Controller）" class="headerlink" title="1、MVC（Model-View-Controller）"></a>1、MVC（Model-View-Controller）</h4><h5 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h5><p>View（视图）：用户界面</p><p>Controller（控制器）：业务逻辑</p><p>Model（模型）：数据存储</p><h5 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h5><p>所有通信皆为单向通信，View 传送指令到 Controller，Controller 完成业务逻辑后，要求 Model 改变状态，Model 将新的数据发送到 View，用户得到反馈，一次通信完成。</p><h4 id="2、MVP（Model-View-Presender）"><a href="#2、MVP（Model-View-Presender）" class="headerlink" title="2、MVP（Model-View-Presender）"></a>2、MVP（Model-View-Presender）</h4><h4 id="解释-1"><a href="#解释-1" class="headerlink" title="解释"></a>解释</h4><p>View（视图）：用户界面</p><p>Presender（控制器）：业务逻辑</p><p>Model（模型）：数据存储</p><h5 id="通信方式-1"><a href="#通信方式-1" class="headerlink" title="通信方式"></a>通信方式</h5><p>View 和 Presender，Presender 和 Model 之间皆为双向通信，View 为被动视图。</p><h4 id="3、MVVM（Model-View-ViewModel）"><a href="#3、MVVM（Model-View-ViewModel）" class="headerlink" title="3、MVVM（Model-View-ViewModel）"></a>3、MVVM（Model-View-ViewModel）</h4><h5 id="解释-2"><a href="#解释-2" class="headerlink" title="解释"></a>解释</h5><p>View（视图）：用户界面</p><p>ViewModel（视图控制器）：业务逻辑</p><p>Model（模型）：数据存储</p><h5 id="通信方式-2"><a href="#通信方式-2" class="headerlink" title="通信方式"></a>通信方式</h5><p>View 和 ViewModel 之间为双向绑定， View 的变化可以直接反应给 ViewModel，反之亦然。ViewModel 和 Model 之间为双向通信。</p><h3 id="四、页面自适应方案"><a href="#四、页面自适应方案" class="headerlink" title="四、页面自适应方案"></a>四、页面自适应方案</h3><ol><li><p>viewport: content=”width=device-width,initial-scale=1”</p></li><li><p>使用相对宽度（vw）或百分比宽度</p></li><li><p>适当使用相对字体</p></li><li><p>float 布局</p></li><li><p>媒体查询</p></li><li><p>图片自适应</p></li></ol><h4 id="五、路由设计"><a href="#五、路由设计" class="headerlink" title="五、路由设计"></a>五、路由设计</h4><p>CRUD：param 方式</p><p>DDD：query 方式</p><h4 id="六、Canvas-动画基础步骤"><a href="#六、Canvas-动画基础步骤" class="headerlink" title="六、Canvas 动画基础步骤"></a>六、Canvas 动画基础步骤</h4><ol><li><p>清空 Canvas</p></li><li><p>保存 Canvas 状态</p></li><li><p>绘制图形</p></li><li><p>恢复状态</p></li></ol><h4 id="七、缓存"><a href="#七、缓存" class="headerlink" title="七、缓存"></a>七、缓存</h4><h5 id="1、Cookie"><a href="#1、Cookie" class="headerlink" title="1、Cookie"></a>1、Cookie</h5><p>体积小，4kb 左右，用于缓存身份信息等，关闭浏览器失效</p><h5 id="2、Loacalstorage"><a href="#2、Loacalstorage" class="headerlink" title="2、Loacalstorage"></a>2、Loacalstorage</h5><p>客户端缓存，除非被清除，否则永远保存，大小 5MB 左右</p><h5 id="3、SessionStorage"><a href="#3、SessionStorage" class="headerlink" title="3、SessionStorage"></a>3、SessionStorage</h5><p>关闭页面或浏览器清除，大小 5MB 左右</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步数据引出的Console问题</title>
      <link href="/2020/03/28/%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%BC%95%E5%87%BA%E7%9A%84console%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/28/%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%BC%95%E5%87%BA%E7%9A%84console%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近发现在写的实验系统有个 bug,首屏打开的实验，总是会丢失一些物件，一开始还以为是打开太快，没画完，调试了一会发现丢失的物件都是图形精灵，再摸索一会发现 texture 的 load 方法是异步的，每次打印都在调用他的函数之后执行。 但是问题来了打印出来明明是有数据的，它长这样：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br><span class="line">key1: value</span><br><span class="line">key2: value</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>可见对象显示是空的，但是下拉会发现就是有数据，按理说若是异步的，一开始应该打印的是空对象，有了数据之后才会显示数据的，这种不伦不类的是什么鬼，用又用不到，又显示出来有。这里可能就得讲讲数据类型了，对象是引用类型，对象的每次复制都只是创建一个指针，指向原来的内存而已，所以我在异步里面赋值给了 textures,在异步函数外面返回，实际上是先返回了空，函数执行完，再执行异步函数时，又给原来的内存了这些对象，所以就会出现上面的打印结果。</p><p>知道了为什么会打印这种东东，我就确定就是异步的问题了，那么解决方法就简单了，处理异步无非就几种：callback、Promise、async/await，我选择了原始的 callback，因为这比较符合我的需求。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于跨域那些事</title>
      <link href="/2020/03/27/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/"/>
      <url>/2020/03/27/%E8%B7%A8%E5%9F%9F%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="一、同域"><a href="#一、同域" class="headerlink" title="一、同域"></a>一、同域</h3><p>1995 年由 Netscape 提出同源策略，浏览器在发送 Ajax 请求时，只接收同域服务器响应的数据资源。满足同域的条件包括三个：</p><ul><li><p>协议相同</p></li><li><p>域名相同</p></li><li><p>端口相同</p></li></ul><p>若不满足以上三个条件，则算作跨域。</p><h3 id="二、解决跨域的方法"><a href="#二、解决跨域的方法" class="headerlink" title="二、解决跨域的方法"></a>二、解决跨域的方法</h3><h4 id="1、-同域代理"><a href="#1、-同域代理" class="headerlink" title="1、 同域代理"></a>1、 同域代理</h4><p>同域代理就是使用 Ajax 向同域下的后台发送请求，同时携带真实请求的地址及参数，后台接受请求后直接根据地址及参数转发请求，因为后台是可以直接模拟 HTTP 客户端发送请求的，所以没有跨域问题，而后台接受到响应数据后再原样返回给前端浏览器，从而实现跨域数据交互。这种方法，在处理图片资源的时候，经常会用到，当图片跨域时，我的处理手法一般是用 ajax 请求相关资源，再存储相关资源，才拿去用。</p><h4 id="2、-jsonp"><a href="#2、-jsonp" class="headerlink" title="2、 jsonp"></a>2、 jsonp</h4><p>JSONP 是利用了 script 标签的 src 属性来实现跨域数据交互的，因为浏览器解析 HTML 代码时，原生具有 src 属性的标签，浏览器都赋予其 HTTP 请求的能力，而且不受跨域限制，使用 src 发送 HTTP 请求，服务器返回一段 JS 代码的函数调用，将服务器数据放在函数实参中，前端提前写好响应的函数准备回调，接收数据，实现跨域数据交互。</p><h4 id="3、-跨域资源共享-CORS"><a href="#3、-跨域资源共享-CORS" class="headerlink" title="3、 跨域资源共享 CORS"></a>3、 跨域资源共享 CORS</h4><p>CORS 是一个 W3C 标准，全称是”跨域资源共享”（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制。CORS 的关键在服务器，只要服务器实现了 CORS 接口，就可以跨源通信。在客户端，请求头部我通常会加上 <code>Access-Control-Allow-Origin: *</code>，这样就不会提示跨域了。需要注意的是，如果要发送 Cookie，Access-Control-Allow-Origin 就不能设为星号，必须指定明确的、与请求网页一致的域名。</p><p><em>参考文章：</em></p><p><em><a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">跨域资源共享 CORS 详解</a></em></p><p><em><a href="https://zhuanlan.zhihu.com/p/53996160">所有人都应该知道的跨域及 CORS</a></em></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES2020 新特性</title>
      <link href="/2020/03/16/ES2020%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2020/03/16/ES2020%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="一、使用-号快速创建类的私有变量"><a href="#一、使用-号快速创建类的私有变量" class="headerlink" title="一、使用 # 号快速创建类的私有变量"></a>一、使用 # 号快速创建类的私有变量</h3><p>类的主要目的之一是把我们的代码复用到更多模块中去，但是我们又不希望把所有的属性和方法都暴露出来，现在，有了这个新特性，我们就可以很轻易的实现这个想法了，只需要在我们的私有属性或者方法前面加一个 # 号即可：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">  #message = &quot;Howdy&quot;</span><br><span class="line"></span><br><span class="line">  greet() &#123; console.log(this.#message) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greeting = <span class="keyword">new</span> Message()</span><br><span class="line"></span><br><span class="line">greeting.greet() <span class="comment">// Howdy</span></span><br><span class="line">console.log(greeting.#message) // Private name #message is not defined</span><br></pre></td></tr></table></figure><h3 id="二、Promise-allSelected"><a href="#二、Promise-allSelected" class="headerlink" title="二、Promise.allSelected"></a>二、Promise.allSelected</h3><p>当我们在使用多个 promise，尤其是这些 promise 有依赖关系时，打印每个 promise 的日志显得尤为重要，这可以帮助我们调试错误。有了 Promise.allSelected，我们可以创建一个新的 promise，这个 promise 会在包含的所有 promise 都执行完之后才返回，这将使我们能够访问一个数组，其中包含每个 promise 的返回值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> <span class="built_in">setTimeout</span>(res, <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> <span class="built_in">setTimeout</span>(rej, <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.allSettled([p1, p2]).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   Object &#123; status: &quot;fulfilled&quot;, value: undefined&#125;,</span></span><br><span class="line"><span class="comment">//   Object &#123; status: &quot;rejected&quot;, reason: undefined&#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h3 id="三、空值合并运算符"><a href="#三、空值合并运算符" class="headerlink" title="三、空值合并运算符 ??"></a>三、空值合并运算符 ??</h3><p>由于 JavaScript 的类型时动态的，在分配变量时，我们不得不去记住哪些值会被判断为真，哪些会被判断为假。当我们在创建一个对象时，通常会初始化属性为假的值，比如一个空字符串 或者是 0。设置默认值就会变得很烦人，因为它会覆盖有效值，看下如下 demo，你就会发现这么处理真的很烦人：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  profile: &#123;</span><br><span class="line">    name: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    age: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.profile.name || <span class="string">&quot;Anonymous&quot;</span>); <span class="comment">// Anonymous</span></span><br><span class="line"><span class="built_in">console</span>.log(person.profile.age || <span class="number">18</span>); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p>上述例子中，可能结果并不是我们想要的，我们想名字为空或者 0 岁也是合理的，应该不被代替，我们可以用 ?? 运算符替换掉 || 运算符，因为 ?? 运算符的类型检测会更严格一点，它只会把 null 和 undefined 判断为 false。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person.profile.name ?? <span class="string">&quot;Anonymous&quot;</span>); <span class="comment">// &quot;&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(person.profile.age ?? <span class="number">18</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="四、可选链运算符"><a href="#四、可选链运算符" class="headerlink" title="四、可选链运算符"></a>四、可选链运算符</h3><p>与空值合并运算符类似，JavaScript 在处理虚假值时，可能无法按照我们的意愿进行操作。当属性值未定义时，我们可以返回一个默认值，但是如果属性的路径未被定义呢？</p><p>答案是，可以通过在点符号前添加问号，我们可以将属性路径的任何部分设置为可选，以便操作。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.profile.name ?? <span class="string">&quot;Anonymous&quot;</span>); <span class="comment">// person.profile is undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(person?.profile?.name ?? <span class="string">&quot;Anonymous&quot;</span>);  <span class="comment">// Anonymous</span></span><br><span class="line"><span class="built_in">console</span>.log(person?.profile?.age ?? <span class="number">18</span>);  <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h3 id="五、BigInt"><a href="#五、BigInt" class="headerlink" title="五、BigInt"></a>五、BigInt</h3><p>通常，我们不会深入技术细节，但是由于 JavaScript 处理数字的方式，当你把研究的更加深入时，事情就会变得有点不靠谱。 Javascript 可以处理的最大数字是2 ^ 53，我们可以用 MAX safe integer 看到。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> max = <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(max); <span class="comment">// 9007199254740991</span></span><br></pre></td></tr></table></figure><p>如果超过这个数字，就会变得有点奇怪</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(max + <span class="number">1</span>); <span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="built_in">console</span>.log(max + <span class="number">2</span>); <span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="built_in">console</span>.log(max + <span class="number">3</span>); <span class="comment">// 9007199254740994</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) == <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) + <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>我们可以使用新的数据类型 BigInt 来处理上述问题。只需在数字后面加个符号 n，我们就可以疯狂的使用大的数值了。我们不能用 BigInt 数字混淆标准数字，所以一般在数学计算时使用 BigInt 类型。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bigNum = <span class="number">100000000000000000000000000000n</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bigNum * <span class="number">2n</span>); <span class="comment">// 200000000000000000000000000000n</span></span><br></pre></td></tr></table></figure><h3 id="六、使用-async-await-动态导入模块"><a href="#六、使用-async-await-动态导入模块" class="headerlink" title="六、使用 async/await 动态导入模块"></a>六、使用 async/await 动态导入模块</h3><p>如果我们有很多的功能函数，有些是很少用的，那么一起导入会使资源浪费，现在我们可以使用 async/await 来动态导入这些依赖了，但是这个方法仅适用于 node.js 环境。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> doMath = <span class="keyword">async</span> (num1, num2) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (num1 &amp;&amp; num2) &#123;</span><br><span class="line">    <span class="keyword">const</span> math = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&#x27;./math.js&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(math.add(<span class="number">5</span>, <span class="number">10</span>));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">doMath(<span class="number">4</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>翻译自：<a href="https://alligator.io/js/es2020/">https://alligator.io/js/es2020/</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 源码笔记</title>
      <link href="/2020/03/03/vue%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/03/vue%E6%BA%90%E7%A0%81%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、数据变化侦测的实现"><a href="#一、数据变化侦测的实现" class="headerlink" title="一、数据变化侦测的实现"></a>一、数据变化侦测的实现</h3><p>在 Object 对象中有个 defineProperty 方法可以直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象，该方法接收三个参数，分别是：需要修改属性值的 obj，要定义或修改的属性名称 prop，将被定义或修改的属性描述符 descriptor。其中描述符中有 get 和 set 两个方法，当对应的属性被读取时，会触发对象的 get 方法，当对应属性的值被重置时，会触发对象的 set 方法。Vue 就是利用这一特性实现数据的变化侦测的，下面看一下一个简单的模拟 Vue<br>数据侦测的 Demo：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  title: <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">definePropertyData</span>(<span class="params">obj, prop, value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">definePropertyData(data, <span class="string">&#x27;title&#x27;</span>, data.title);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.title); <span class="comment">// 111 hello world!</span></span><br><span class="line">data.title = <span class="number">38</span>;</span><br><span class="line"><span class="built_in">console</span>.log(data.title); <span class="comment">// 111 38</span></span><br></pre></td></tr></table></figure><p>在上面的 Demo 中，data 对象模拟 Vue 中的 data 数据集，definePropertyData 函数模拟 Vue 中的数据侦测函数，当读取 data.title 时，会进入 get 函数，打印 111，当设置 data.title 为新的值 38 时，会触发 set 函数。</p><p>当然 Vue 的实现会更复杂,通过递归，深层遍历对象，使所有对象的属性都成为可观测对象，defineReactive 函数就是以上 demo 的深入封装，用于使对象属性变得可观测。除了对象，还有数组的观测，采用的是扩展原型链，通过以上方法观测原型对象的方式实现：</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Observer &#123;</span><br><span class="line">  value: <span class="built_in">any</span>;</span><br><span class="line">  dep: Dep;</span><br><span class="line">  vmCount: <span class="built_in">number</span>; <span class="comment">// number of vms that have this object as root $data</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">value: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">    <span class="built_in">this</span>.dep = <span class="keyword">new</span> Dep();</span><br><span class="line">    <span class="built_in">this</span>.vmCount = <span class="number">0</span>;</span><br><span class="line">    def(value, <span class="string">&#x27;__ob__&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (hasProto) &#123;</span><br><span class="line">        protoAugment(value, arrayMethods);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        copyAugment(value, arrayMethods, arrayKeys);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.observeArray(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.walk(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Walk through all properties and convert them into</span></span><br><span class="line"><span class="comment">   * getter/setters. This method should only be called when</span></span><br><span class="line"><span class="comment">   * value type is Object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  walk(obj: <span class="built_in">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      defineReactive(obj, keys[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Observe a list of Array items.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  observeArray(items: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = items.length; i &lt; l; i++) &#123;</span><br><span class="line">      observe(items[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、数据驱动视图的实现"><a href="#二、数据驱动视图的实现" class="headerlink" title="二、数据驱动视图的实现"></a>二、数据驱动视图的实现</h3><p>数据驱动视图，怎么去更新对应的视图，这里引入了依赖管理器 Dep，用于操作视图数组，在 getter 中收集依赖，把对应的依赖存入数组中，在 setter 中通知依赖更新，当依赖数组更新时，会触发 Watcher 类，对视图进行更新。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Define a reactive property on an Object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  obj: <span class="built_in">Object</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  key: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  val: <span class="built_in">any</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  customSetter?: ?<span class="built_in">Function</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  shallow?: <span class="built_in">boolean</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key)</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.configurable === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cater for pre-defined getter/setters</span></span><br><span class="line">  <span class="keyword">const</span> getter = property &amp;&amp; property.get</span><br><span class="line">  <span class="keyword">const</span> setter = property &amp;&amp; property.set</span><br><span class="line">  <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</span><br><span class="line">    val = obj[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> childOb = !shallow &amp;&amp; observe(val)</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">      <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">        dep.depend()</span><br><span class="line">        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">          childOb.dep.depend()</span><br><span class="line">          <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">            dependArray(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">      <span class="comment">/* eslint-disable no-self-compare */</span></span><br><span class="line">      <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* eslint-enable no-self-compare */</span></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class="line">        customSetter()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// #7981: for accessor properties without setter</span></span><br><span class="line">      <span class="keyword">if</span> (getter &amp;&amp; !setter) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">        setter.call(obj, newVal)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line">      childOb = !shallow &amp;&amp; observe(newVal)</span><br><span class="line">      dep.notify()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、数据侦测的-bug"><a href="#三、数据侦测的-bug" class="headerlink" title="三、数据侦测的 bug"></a>三、数据侦测的 bug</h3><p>当我们向 object 数据里添加一对新的 key/value 或删除一对已有的 key/value 时，它是无法观测到的，导致当我们对 object 数据添加或删除值时，无法通知依赖，无法驱动视图进行响应式更新，这里的解决方法是手动 set 新的 key/value 或者 delete。对于数组元素的增删，可使用 push、unshift、splice，触发数据变化，修改数组元素同样可使用 set 和 delete 方法。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取最长公共前缀</title>
      <link href="/2020/02/28/%E8%8E%B7%E5%8F%96%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
      <url>/2020/02/28/%E8%8E%B7%E5%8F%96%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">编写一个函数来查找字符串数组中的最长公共前缀。</span><br><span class="line"></span><br><span class="line">如果不存在公共前缀，返回空字符串 <span class="string">&quot;&quot;</span>。</span><br><span class="line"></span><br><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line">输出: <span class="string">&quot;fl&quot;</span></span><br><span class="line"></span><br><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: [<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;racecar&quot;</span>,<span class="string">&quot;car&quot;</span>]</span><br><span class="line">输出: <span class="string">&quot;&quot;</span></span><br><span class="line">解释: 输入不存在公共前缀。</span><br><span class="line">说明:</span><br><span class="line"></span><br><span class="line">所有输入只包含小写字母 a-z 。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:<span class="regexp">//</span>leetcode-cn.com<span class="regexp">/problems/</span>longest-common-prefix</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>0、初始化最长公共前缀为数组第一个字符串</p><p>1、求出数组长度 len</p><p>2、如果 len 等于零，说明为空数组，不可能有最长公共前缀，返回空</p><p>3、 遍历数组</p><p>(1) 对比当前最长公共前缀与每一个字符串是否有交集，没有的话，最长公共前缀截取该字符前面的字符串，继续下一个</p><p>(2) 若遍历完了，公共前缀为空，说明没有公共前缀，返回空，否则，返回当前最长公共前缀</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>js 题解</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> len = strs.length;</span><br><span class="line"><span class="keyword">let</span> lcp = strs[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> prefixLen = strs[i].length;</span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; j &lt; lcp.length &amp;&amp; j &lt; prefixLen; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lcp[j] != strs[i][j]) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  lcp = lcp.substr(<span class="number">0</span>, j);</span><br><span class="line">  <span class="keyword">if</span> (lcp === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> lcp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lcp;</span><br></pre></td></tr></table></figure><p>python 题解：</p><p>这个解法用到了 python 的一个独有的数据处理能力，把数组转置为矩阵，通过判断矩阵每行的重复数为 1，判别数组中的每个元素的公共前缀。有点曲径通幽处的感觉，很妙。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span>(<span class="params">self, strs</span>) -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        r = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> zip(*strs):</span><br><span class="line">            r.append(len(set(item)) == <span class="number">1</span>)</span><br><span class="line">        r += [<span class="number">0</span>]</span><br><span class="line">        res = strs[<span class="number">0</span>][:r.index(<span class="number">0</span>)]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, arr</span>):</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> ex:</span><br><span class="line">            print(self.longestCommonPrefix(item))</span><br><span class="line"></span><br><span class="line">ex = [[<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;racecar&quot;</span>, <span class="string">&quot;car&quot;</span>], [<span class="string">&quot;flower&quot;</span>, <span class="string">&quot;flow&quot;</span>, <span class="string">&quot;flight&quot;</span>], []]</span><br><span class="line">Solution(ex)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文数判断</title>
      <link href="/2020/02/27/%E5%9B%9E%E6%96%87%E6%95%B0%E5%88%A4%E6%96%AD/"/>
      <url>/2020/02/27/%E5%9B%9E%E6%96%87%E6%95%B0%E5%88%A4%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</span></span><br><span class="line"></span><br><span class="line"><span class="string">示例</span> <span class="attr">1:</span></span><br><span class="line"><span class="string">输入:</span> <span class="number">121</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="string">示例</span> <span class="attr">2:</span></span><br><span class="line"><span class="string">输入:</span> <span class="number">-121</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">解释:</span> <span class="string">从左向右读,</span> <span class="string">为</span> <span class="bullet">-</span> <span class="number">121</span> <span class="string">。</span> <span class="string">从右向左读,</span> <span class="string">为</span> <span class="number">121</span> <span class="bullet">-</span> <span class="string">。因此它不是一个回文数。</span></span><br><span class="line"></span><br><span class="line"><span class="string">示例</span> <span class="attr">3:</span></span><br><span class="line"><span class="string">输入:</span> <span class="number">10</span></span><br><span class="line"><span class="string">输出:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">解释:</span> <span class="string">从右向左读,</span> <span class="string">为</span> <span class="number">01</span> <span class="string">。因此它不是一个回文数。</span></span><br><span class="line"></span><br><span class="line"><span class="string">来源：力扣（LeetCode）</span></span><br><span class="line"><span class="string">链接：https://leetcode-cn.com/problems/palindrome-number</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>1、排除明显不符合条件的数字，当 x 为 负数时不满足回文条件， 当 x 的最后一位为 0 时，要满足回文条件，必须最前面一位也是 0，第一位为 0 的数字只有 0 本身，所以，也不满足条件，返回 false</p><p>2、初始化反转数字为 0</p><p>3、 x 的 前半部分大于后半部分反转值，推出 x 的最后一位，并推入 rev</p><p>4、当 x 为偶数位时，满足回文的条件是前半部分等于后半部分反转数，返回 true</p><p>5、当 x 为奇数时，x 的前半部分数字等于中值后面数字的反转值，返回 true</p><p>6、否则，不满足回文条件</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>js 题解</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;boolean&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当 x 为 负数或者 x 的最后一位为 0 时，不满足条件，返回 false</span></span><br><span class="line">  <span class="keyword">if</span> (~~x &lt; <span class="number">0</span> || (~~x % <span class="number">10</span> === <span class="number">0</span> &amp;&amp; x !== <span class="number">0</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> rev = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// x 的 前半部分大于后半部分反转值，继续推出 x 后一位，推入 rev</span></span><br><span class="line">  <span class="keyword">while</span> (~~x &gt; rev) &#123;</span><br><span class="line">    rev = rev * <span class="number">10</span> + (~~x % <span class="number">10</span>);</span><br><span class="line">    x /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  当 x 为 偶数位时，满足回文的条件是前半部分等于后半部分反转数，当 x 为奇数时，x 的前半部分数字等于中值后面数字的反转值</span></span><br><span class="line">  <span class="keyword">return</span> ~~x === rev || ~~x === ~~(rev / <span class="number">10</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="number">121</span>));</span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="number">-121</span>));</span><br><span class="line"><span class="built_in">console</span>.log(isPalindrome(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>python 题解</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span>(<span class="params">self, x: int</span>) -&gt; bool:</span></span><br><span class="line">        <span class="comment"># x 若是 0 或者负数，返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> <span class="keyword">or</span> (int(x % <span class="number">10</span> == <span class="number">0</span>) <span class="keyword">and</span> x != <span class="number">0</span>)):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 初始化翻转数字</span></span><br><span class="line">        reverse = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 若原始数字 x 大于从后面开始翻转的数字，说明已经翻转了后半部分，翻转阶段完成</span></span><br><span class="line">        <span class="keyword">while</span> (x &gt; reverse):</span><br><span class="line">            reverse = int(reverse * <span class="number">10</span>) + int(x % <span class="number">10</span>)</span><br><span class="line">            x = int(x / <span class="number">10</span>)</span><br><span class="line">            print(<span class="string">&#x27;x:&#x27;</span>, x)</span><br><span class="line">            print(<span class="string">&#x27;reverse&#x27;</span>, reverse)</span><br><span class="line">        <span class="comment"># 若翻转的后半部分数字 reverse 等于前半部分数字，返回 true，否则返回 false，利用 int 向上取整的特性，当 x 为奇数时，去掉最后一位</span></span><br><span class="line">        <span class="keyword">return</span> x == reverse <span class="keyword">or</span> x == int(reverse/<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">x = Solution()</span><br><span class="line">arr = [<span class="number">121</span>, <span class="number">-121</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> arr:</span><br><span class="line">    print(x.isPalindrome(item))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>罗马数字转整数</title>
      <link href="/2020/02/20/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
      <url>/2020/02/20/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符          数值</span></span><br><span class="line"><span class="comment">// I             1</span></span><br><span class="line"><span class="comment">// V             5</span></span><br><span class="line"><span class="comment">// X             10</span></span><br><span class="line"><span class="comment">// L             50</span></span><br><span class="line"><span class="comment">// C             100</span></span><br><span class="line"><span class="comment">// D             500</span></span><br><span class="line"><span class="comment">// M             1000</span></span><br><span class="line"><span class="comment">// 例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</span></span><br><span class="line"><span class="comment">// X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</span></span><br><span class="line"><span class="comment">// C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</span></span><br><span class="line"><span class="comment">// 给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">// 链接：https://leetcode-cn.com/problems/roman-to-integer</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><p>把罗马数字对应整数的规则存到哈希表里进行映射</p></li><li><p>罗马数字分两种情况，一种是正常的一个一个相加的，一种是小的数字在前面，需要用后一个数字减去前面一个数字，这种情况</p></li><li><p>遍历罗马数字</p><ul><li>如果跟后一个数字组合，不在哈希表里，则直接跟上一次的结果相加，跳到下一个数字</li><li>如果跟后一个数字组合，结果在哈希表里，则跟该组合的值跟上一次的结果相加，跳到下下个数字</li></ul></li></ol><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = &#123;</span><br><span class="line">    I: <span class="number">1</span>,</span><br><span class="line">    V: <span class="number">5</span>,</span><br><span class="line">    X: <span class="number">10</span>,</span><br><span class="line">    L: <span class="number">50</span>,</span><br><span class="line">    C: <span class="number">100</span>,</span><br><span class="line">    D: <span class="number">500</span>,</span><br><span class="line">    M: <span class="number">1000</span>,</span><br><span class="line">    IV: <span class="number">4</span>,</span><br><span class="line">    IX: <span class="number">9</span>,</span><br><span class="line">    XL: <span class="number">40</span>,</span><br><span class="line">    XC: <span class="number">90</span>,</span><br><span class="line">    CD: <span class="number">400</span>,</span><br><span class="line">    CM: <span class="number">900</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> &#123; length &#125; = s;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (map[s[i] + s[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">      res += map[s[i] + s[i + <span class="number">1</span>]];</span><br><span class="line">      i += <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res += map[s[i]];</span><br><span class="line">      i += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// romanToInt(&#x27;III&#x27;);</span></span><br><span class="line"><span class="comment">// romanToInt(&#x27;IV&#x27;);</span></span><br><span class="line"><span class="comment">// romanToInt(&#x27;MCMXCIV&#x27;);</span></span><br><span class="line"><span class="comment">// romanToInt(&#x27;MCDLXXVI&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;III&#x27;</span>, romanToInt(<span class="string">&#x27;III&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;IV&#x27;</span>, romanToInt(<span class="string">&#x27;IV&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;IX&#x27;</span>, romanToInt(<span class="string">&#x27;IX&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;LVIII&#x27;</span>, romanToInt(<span class="string">&#x27;LVIII&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;MCMXCIV&#x27;</span>, romanToInt(<span class="string">&#x27;MCMXCIV&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;MCDLXXVI&#x27;</span>, romanToInt(<span class="string">&#x27;MCDLXXVI&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;MMCDXXV&#x27;</span>, romanToInt(<span class="string">&#x27;MMCDXXV&#x27;</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;CMLII&#x27;</span>, romanToInt(<span class="string">&#x27;CMLII&#x27;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数反转</title>
      <link href="/2020/02/19/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
      <url>/2020/02/19/%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 示例 1:</span></span><br><span class="line"><span class="meta"># 输入: 123</span></span><br><span class="line"><span class="meta"># 输出: 321</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#  示例 2:</span></span><br><span class="line"><span class="meta"># 输入: -123</span></span><br><span class="line"><span class="meta"># 输出: -321</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 示例 3:</span></span><br><span class="line"><span class="meta"># 输入: 120</span></span><br><span class="line"><span class="meta"># 输出: 21</span></span><br><span class="line"><span class="meta"># 注意:</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231, 231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="meta"># 链接：https: // leetcode-cn.com/problems/reverse-integer</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>1、 确定最大边界值和最小边界值</p><p>2、 当数字不等于 0 时，执行以下操作：</p><p>(1) 获取当前位数字（整数）</p><p>(2) 获取去掉当前位数字后，余下的数字（整数）</p><p>(3) 按位与边界值比较，若当前位数字大于最大边界值去掉最高位或者当前位数字等于最大边界值去掉最高位而且接下来要添加的数字大于 7，则溢出，返回 0，这里 7 作为下一位的判断值，是因为最大边界值的最后一位是 7</p><p>(4) 按位与边界值比较，若当前位数字小于于最小边界值去掉最高位或者当前位数字等于最小边界值去掉最高位而且接下来要添加的数字小于 -8，则溢出，返回 0，这里 -8 作为下一位的判断值，是因为最小边界值的最后一位是 8</p><p>(5) 否则，数字反转</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>js 题解</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverse = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> edge = <span class="number">2</span> ** <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">const</span> INT_MAX = edge - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> INT_MIN = -edge;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rev = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (x !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> pop = ~~(x % <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    x = ~~(x / <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">if</span> (rev &gt; INT_MAX / <span class="number">10</span> || (rev === INT_MAX / <span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (rev &lt; INT_MIN / <span class="number">10</span> || (rev === INT_MIN / <span class="number">10</span> &amp;&amp; pop &lt; <span class="number">-8</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    rev = rev * <span class="number">10</span> + pop;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rev;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;123:&#x27;</span>, reverse(<span class="number">123</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;-123:&#x27;</span>, reverse(<span class="number">-123</span>));</span><br></pre></td></tr></table></figure><p>python 题解</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        INT_MAX = <span class="number">2</span>**<span class="number">31</span></span><br><span class="line">        INT_MIN = <span class="number">-2</span>**<span class="number">31</span></span><br><span class="line">        cur = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span>):</span><br><span class="line">                pop = int(x % <span class="number">-10</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pop = int(x % <span class="number">10</span>)</span><br><span class="line">            <span class="keyword">if</span> cur &gt; INT_MAX / <span class="number">10</span> <span class="keyword">or</span> (cur == INT_MAX / <span class="number">10</span> <span class="keyword">and</span> pop &gt; <span class="number">7</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> cur &lt; INT_MIN / <span class="number">10</span> <span class="keyword">or</span> (cur == INT_MIN / <span class="number">10</span> <span class="keyword">and</span> pop &lt; <span class="number">-8</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            cur = cur * <span class="number">10</span> + pop</span><br><span class="line">            x = int(x/<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> cur</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(res.reverse(<span class="number">-123</span>))</span><br><span class="line">        <span class="keyword">return</span> self.reverse(<span class="number">-123</span>)</span><br><span class="line"></span><br><span class="line">res = Solution()</span><br><span class="line">res._init_()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Github在mac上图片有问题的bug</title>
      <link href="/2020/02/17/%E8%A7%A3%E5%86%B3github%E5%9C%A8mac%E4%B8%8A%E5%9B%BE%E7%89%87%E6%9C%89%E9%97%AE%E9%A2%98%E7%9A%84bug/"/>
      <url>/2020/02/17/%E8%A7%A3%E5%86%B3github%E5%9C%A8mac%E4%B8%8A%E5%9B%BE%E7%89%87%E6%9C%89%E9%97%AE%E9%A2%98%E7%9A%84bug/</url>
      
        <content type="html"><![CDATA[<p><code>sudo vi /etc/hosts</code></p><p><code>i</code> insert</p><figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"># GitHub Start</span><br><span class="line"><span class="number">192.30.253.112</span>    github.com</span><br><span class="line"><span class="number">192.30.253.119</span>    gist.github.com</span><br><span class="line"><span class="number">199.232.28.133</span>    assets-cdn.github.com</span><br><span class="line"><span class="number">199.232.28.133</span>    raw.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>    gist.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>    cloud.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>    camo.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>    avatars0.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>    avatars1.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>    avatars2.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>    avatars3.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>    avatars4.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>    avatars5.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>    avatars6.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>    avatars7.githubusercontent.com</span><br><span class="line"><span class="number">199.232.28.133</span>    avatars8.githubusercontent.com</span><br><span class="line"> # GitHub End</span><br></pre></td></tr></table></figure><p><code>esc =&gt; :wq</code></p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬楼梯</title>
      <link href="/2020/02/14/%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
      <url>/2020/02/14/%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">假设你正在爬楼梯。需要 n  阶你才能到达楼顶。</span><br><span class="line"></span><br><span class="line">每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</span><br><span class="line"></span><br><span class="line">注意：给定 n 是一个正整数。</span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入： 2</span><br><span class="line">输出： 2</span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span>  1 阶 + 1 阶</span><br><span class="line"><span class="bullet">2.</span>  2 阶</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入： 3</span><br><span class="line">输出： 3</span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span>  1 阶 + 1 阶 + 1 阶</span><br><span class="line"><span class="bullet">2.</span>  1 阶 + 2 阶</span><br><span class="line"><span class="bullet">3.</span>  2 阶 + 1 阶</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https://leetcode-cn.com/problems/climbing-stairs</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>(1) 暴力破解法，动态规划，把问题缩小为 1 阶和 2 阶问题，这种写法的问题是效率太低，提交之后没通过，因为超时了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> climb_stairs(<span class="number">0</span>, n);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> climb_stairs = <span class="function"><span class="keyword">function</span> (<span class="params">i, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i &gt; n) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i === n) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> climb_stairs(i + <span class="number">1</span>, n) + climb_stairs(i + <span class="number">2</span>, n);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>(2) 记忆化递归，优化了上述算法，每次递归之后吧值存起来，减少冗余</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> memo = [];</span><br><span class="line">  <span class="keyword">return</span> climb_stairs(<span class="number">0</span>, n, memo);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> climb_stairs = <span class="function"><span class="keyword">function</span> (<span class="params">i, n, memo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (i &gt; n) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i === n) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (memo[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> memo[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  memo[i] = climb_stairs(i + <span class="number">1</span>, n, memo) + climb_stairs(i + <span class="number">2</span>, n, memo);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> memo[i];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NP/P/NPC 都是何方神圣</title>
      <link href="/2020/01/16/NP-P-NPC/"/>
      <url>/2020/01/16/NP-P-NPC/</url>
      
        <content type="html"><![CDATA[<h3 id="一、P（Polynomial）"><a href="#一、P（Polynomial）" class="headerlink" title="一、P（Polynomial）"></a>一、P（Polynomial）</h3><p>如果一个问题可以找到一个能在多项式的时间里解决它的算法，那么这个问题就属于 P 问题。</p><h3 id="二、NP"><a href="#二、NP" class="headerlink" title="二、NP"></a>二、NP</h3><p>NP 问题是指可以在多项式的时间里验证一个解的问题，所有的 P 类问题都是 NP 问题。</p><h3 id="三、NPC"><a href="#三、NPC" class="headerlink" title="三、NPC"></a>三、NPC</h3><p>同时满足下面两个条件的问题就是 NPC 问题。首先，它得是一个 NP 问题；然后，所有的 NP 问题都可以约化到它。证明一个问题是 NPC 问题也很简单。先证明它至少是一个 NP 问题，再证明其中一个已知的 NPC 问题能约化到它，这样就可以说它是 NPC 问题了。</p><h3 id="四、已知-NPC-问题"><a href="#四、已知-NPC-问题" class="headerlink" title="四、已知 NPC 问题"></a>四、已知 NPC 问题</h3><p>逻辑电路问题、Hamilton 回路、TSP（旅行商问题）等</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科普 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件版本号定义</title>
      <link href="/2020/01/14/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E5%8F%B7%E5%AE%9A%E4%B9%89/"/>
      <url>/2020/01/14/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E5%8F%B7%E5%AE%9A%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<p>一般来讲大部分的软件版本号分 3 段，比如 A.B.C,</p><p>A 表示大版本号，一般当软件整体重写，或出现不向后兼容的改变时，增加 A，A 为零时表示软件还在开发阶段。</p><p>B 表示功能更新，出现新功能时增加 B</p><p>C 表示小修改，如修复 bug，只要有修改就增加 C</p><p>除了版本号之外还会有一些修饰的词，比如：</p><p>alpha: 内部版本</p><p>beta: 测试版</p><p>rc: 即将作为正式版发布</p><p>lts: 长期维护</p><p>来源：<a href="https://www.zhihu.com/question/20289602/answer/20068112">知乎</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科普 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间零点</title>
      <link href="/2020/01/08/%E6%97%B6%E9%97%B4%E9%9B%B6%E7%82%B9/"/>
      <url>/2020/01/08/%E6%97%B6%E9%97%B4%E9%9B%B6%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>在 1971 年，《Unix Programmer’s Manua》出版，将格林威治时间（GMT）1971 年 1 月 1 日 0 时 0 分 0 秒作为系统的起始时间。后来为方便记忆和计算，起始时间修改成 1970 年。现今的计算机系统，或多或少受 Unix 的影响，延续 Unix 的计时方式。从此之后 （GMT）1970 年 1 月 1 日 0 时 0 分 0 秒 就成为 Unix 世界的起始时间，甚至超越 Unix 而成为整个计算机世界的起始时间。</p><p>Unix 中常常使用一个数字记录时间，表示距离起始时间相差的秒数（根据系统的精度，时间单位有时毫秒，有时是纳秒）。大于 0 表示在起始时间之后，小于 0 就表示在起始时间之前。这个数字有时是浮点类型、有时是整数类型，但都称这个数字为 Unix 时间戳（Timestamp）。</p><p>当计算机存储或者传输 Timestamp 出错，这个 Timestamp 就会取默认值。而在计算机中，默认值通常是 0。</p><p>当 Timestamp 为 0，就表示时间（GMT）1970 年 1 月 1 日 0 时 0 分 0 秒。中国使用北京时间，处于东 8 区，相应就是早上 8 点。因此在中国这边，时间出错了，就经常会显示成 1970 年 1 月 1 日 08:00。</p><p>摘自 <a href="https://zhuanlan.zhihu.com/p/23752093">知乎</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科普 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bash 数据处理</title>
      <link href="/2020/01/04/bash%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
      <url>/2020/01/04/bash%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一、用-grep-进行数据筛选"><a href="#一、用-grep-进行数据筛选" class="headerlink" title="一、用 grep 进行数据筛选"></a>一、用 grep 进行数据筛选</h3><p>1、数据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">item, modelnumber, price, tax</span><br><span class="line">Sneakers, MN009, 49.99, 1.11</span><br><span class="line">Sneakers, MTG09, 139.99, 4.11</span><br><span class="line">Shirt, MN089, 8.99, 1.44</span><br><span class="line">Pants, N09, 39.99, 1.11</span><br><span class="line">Sneakers, KN09, 49.99, 1.11</span><br><span class="line">Shoes, BN009, 449.22, 4.31</span><br><span class="line">Sneakers, dN099, 9.99, 1.22</span><br><span class="line">Bananas, GG009, 4.99, 1.11</span><br></pre></td></tr></table></figure><p>2、操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关键字</span></span><br><span class="line">grep Sneakers sales.csv</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">Sneakers, MN009, 49.99, 1.11</span><br><span class="line">Sneakers, MTG09, 139.99, 4.11</span><br><span class="line">Sneakers, KN09, 49.99, 1.11</span><br><span class="line">Sneakers, dN099, 9.99, 1.22</span><br><span class="line"><span class="comment"># 正则匹配</span></span><br><span class="line">grep -o <span class="string">&quot;\(BN\|MN\)\([0-9]\)\&#123;3\&#125;&quot;</span> sales.csv</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">age,value</span><br><span class="line">33,5943</span><br><span class="line">32,543</span><br><span class="line">34,93</span><br><span class="line">39,5943</span><br><span class="line">36,9943</span><br><span class="line">38,8943</span><br></pre></td></tr></table></figure><h3 id="二、数据替换"><a href="#二、数据替换" class="headerlink" title="二、数据替换"></a>二、数据替换</h3><p>1、数据</p><p>(1) data.csv</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">age,value</span><br><span class="line">&quot;33&quot;,&quot;5943&quot;</span><br><span class="line">&quot;32&quot;,&quot;543&quot;</span><br><span class="line">&quot;34&quot;,&quot;93&quot;</span><br><span class="line">&quot;39&quot;,&quot;5943&quot;</span><br><span class="line">&quot;36&quot;,&quot;9943&quot;</span><br><span class="line">&quot;38&quot;,&quot;8943&quot;</span><br></pre></td></tr></table></figure><p>(2) temps.txt</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">temp,unit</span><br><span class="line">26.1,C</span><br><span class="line">78.1,F</span><br><span class="line">23.1,C</span><br><span class="line">25.7,C</span><br><span class="line">76.3,F</span><br><span class="line">77.3,F</span><br><span class="line">24.2,C</span><br><span class="line">79.3,F</span><br><span class="line">27.9,C</span><br><span class="line">75.1,F</span><br><span class="line">25.9,C</span><br><span class="line">79.0,F</span><br></pre></td></tr></table></figure><p>2、操作</p><p>(1) 用 sed 替换文件的双引号</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat data.csv | sed <span class="string">&#x27;s/&quot;//g&#x27;</span></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">age,value</span><br><span class="line">33,5943</span><br><span class="line">32,543</span><br><span class="line">34,93</span><br><span class="line">39,5943</span><br><span class="line">36,9943</span><br><span class="line">38,8943</span><br></pre></td></tr></table></figure><p>(2) 用 awk 有条件的替换数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat temps.txt | awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;if($2==&quot;F&quot;)print (($1-32)*5/9)&quot;,C&quot;;else print $1&quot;,&quot;$2&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">26.1,C</span><br><span class="line">25.6111,C</span><br><span class="line">23.1,C</span><br><span class="line">25.7,C</span><br><span class="line">24.6111,C</span><br><span class="line">25.1667,C</span><br><span class="line">24.2,C</span><br><span class="line">26.2778,C</span><br><span class="line">27.9,C</span><br><span class="line">23.9444,C</span><br><span class="line">25.9,C</span><br><span class="line">26.1111,C</span><br></pre></td></tr></table></figure><h3 id="三、数据排序"><a href="#三、数据排序" class="headerlink" title="三、数据排序"></a>三、数据排序</h3><p>1、 数据</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">1234</span><br><span class="line">11</span><br><span class="line">ZZZZ</span><br><span class="line">1010</span><br><span class="line">0123</span><br><span class="line">hello world</span><br><span class="line">abc123</span><br><span class="line">Hello World</span><br><span class="line">9</span><br><span class="line">zzzz</span><br></pre></td></tr></table></figure><p>2、操作</p><p>(1) 首字符 Unicode 大小排序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat foo.txt | sort</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">0</span><br><span class="line">0123</span><br><span class="line">1</span><br><span class="line">1010</span><br><span class="line">11</span><br><span class="line">1234</span><br><span class="line">9</span><br><span class="line">Hello World</span><br><span class="line">ZZZZ</span><br><span class="line">abc123</span><br><span class="line">hello world</span><br><span class="line">zzzz</span><br></pre></td></tr></table></figure><p>(2) 数字排序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat foo.txt | sort -n</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">0</span><br><span class="line">Hello World</span><br><span class="line">ZZZZ</span><br><span class="line">abc123</span><br><span class="line">hello world</span><br><span class="line">zzzz</span><br><span class="line">1</span><br><span class="line">9</span><br><span class="line">11</span><br><span class="line">0123</span><br><span class="line">1010</span><br><span class="line">1234</span><br></pre></td></tr></table></figure><p>(3) 倒序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat foo.txt | sort -r</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">zzzz</span><br><span class="line">hello world</span><br><span class="line">abc123</span><br><span class="line">ZZZZ</span><br><span class="line">Hello World</span><br><span class="line">9</span><br><span class="line">1234</span><br><span class="line">11</span><br><span class="line">1010</span><br><span class="line">1</span><br><span class="line">0123</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>(4) 组合使用——数字倒序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat foo.txt | sort -n -r</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">1234</span><br><span class="line">1010</span><br><span class="line">0123</span><br><span class="line">11</span><br><span class="line">9</span><br><span class="line">1</span><br><span class="line">zzzz</span><br><span class="line">hello world</span><br><span class="line">abc123</span><br><span class="line">ZZZZ</span><br><span class="line">Hello World</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="四、两份文件交并集运算"><a href="#四、两份文件交并集运算" class="headerlink" title="四、两份文件交并集运算"></a>四、两份文件交并集运算</h3><p>1、数据</p><p>(1) signups.txt</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">68_so_late@hotmail.com</span><br><span class="line">fred@example.com</span><br><span class="line">info@info.info</span><br><span class="line">something@somewhere.com</span><br><span class="line">ted@example.net</span><br></pre></td></tr></table></figure><p>(2) purchases.txt</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">example@gmail.com</span><br><span class="line">fred@example.com</span><br><span class="line">mark@facebook.com</span><br><span class="line">something@somewhere.com</span><br></pre></td></tr></table></figure><p>2、操作（需要先排序，不然运算结果可能不对）</p><p>(1) 找出登录账户并且购买了商品的用户（求交集)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">comm -12 &lt;(sort signups.txt) &lt;(sort purchases.txt)</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">fred@example.com</span><br><span class="line">something@somewhere.com</span><br></pre></td></tr></table></figure><p>(2) 找出登录了，但未购买的用户（非）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">comm -23 &lt;(sort signups.txt) &lt;(sort purchases.txt)</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">68_so_late@hotmail.com</span><br><span class="line">info@info.info</span><br><span class="line">ted@example.net</span><br></pre></td></tr></table></figure><p>(3) 找出购买了，但未登录的用户（非）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">comm -13 &lt;(sort signups.txt) &lt;(sort purchases.txt)</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">example@gmail.com</span><br><span class="line">mark@facebook.com</span><br></pre></td></tr></table></figure><h3 id="五、检测数据唯一性，统计重复数"><a href="#五、检测数据唯一性，统计重复数" class="headerlink" title="五、检测数据唯一性，统计重复数"></a>五、检测数据唯一性，统计重复数</h3><p>1、数据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Shoes,19.00</span><br><span class="line">Shoes,28.00</span><br><span class="line">Pants,77.00</span><br><span class="line">Socks,12.00</span><br><span class="line">Shirt,22.00</span><br><span class="line">Socks,12.00</span><br><span class="line">Socks,12.00</span><br><span class="line">Boots,82.00</span><br></pre></td></tr></table></figure><p>2、操作</p><p>(1) 获取所有键值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat sales1.csv | awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | sort | uniq</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">Boots</span><br><span class="line">Pants</span><br><span class="line">Shirt</span><br><span class="line">Shoes</span><br><span class="line">Socks</span><br></pre></td></tr></table></figure><p>(2) 统计重复键值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat sales1.csv | awk -F<span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | sort | uniq -c</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">1 Boots</span><br><span class="line">1 Pants</span><br><span class="line">1 Shirt</span><br><span class="line">2 Shoes</span><br><span class="line">3 Socks</span><br></pre></td></tr></table></figure><h3 id="六、查看文件的一部分"><a href="#六、查看文件的一部分" class="headerlink" title="六、查看文件的一部分"></a>六、查看文件的一部分</h3><p>(1) 查看文件前面一小部分</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat sales.csv | head -n 3</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">item, modelnumber, price, tax</span><br><span class="line">Sneakers, MN009, 49.99, 1.11</span><br><span class="line">Sneakers, MTG09, 139.99, 4.11</span><br></pre></td></tr></table></figure><p>(2) 查看文件后面一小部分</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat sales.csv | tail -n 3</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">Shoes, BN009, 449.22, 4.31</span><br><span class="line">Sneakers, dN099, 9.99, 1.22</span><br><span class="line">Bananas, GG009, 4.99, 1.11</span><br></pre></td></tr></table></figure><h3 id="七、文件行数、字数统计"><a href="#七、文件行数、字数统计" class="headerlink" title="七、文件行数、字数统计"></a>七、文件行数、字数统计</h3><p>(1) 文件行数统计</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wc -l temps.txt</span><br></pre></td></tr></table></figure><p>(2) 字数统计</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Here is some text that you&#x27;ll get a character count for&quot;</span> | wc -c</span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">55</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew 常用命令</title>
      <link href="/2020/01/02/home-brew%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/01/02/home-brew%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="一、是什么"><a href="#一、是什么" class="headerlink" title="一、是什么"></a>一、是什么</h3><p>Homebrew 是一个包管理器，用于安装 Apple 没有预装但我们需要的 UNIX 工具。</p><p>Homebrew 会将软件包安装到独立目录(/usr/local/Cellar)，并将其文件软链接至/usr/local。</p><p>Homebrew 不会将文件安装到它本身目录之外，所以可将 Homebrew 安装到任意位置。</p><h3 id="二、常用命令"><a href="#二、常用命令" class="headerlink" title="二、常用命令"></a>二、常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 搜索包</span><br><span class="line">brew search mysql</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装包</span><br><span class="line">brew install mysql</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 查看包信息，比如目前的版本，依赖，安装后注意事项等</span><br><span class="line">brew info mysql</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 卸载包</span><br><span class="line">brew uninstall wget</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 显示已安装的包</span><br><span class="line">brew list</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 查看brew的帮助</span><br><span class="line">brew –help</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 更新， 这会更新 Homebrew 自己</span><br><span class="line">brew update</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 检查是否有新版本，这会列出所有安装的包里，可以升级的项目</span><br><span class="line">brew outdated</span><br><span class="line">brew outdated mysql</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 升级所有可以升级的软件</span><br><span class="line">brew upgrade</span><br><span class="line">brew upgrade mysql</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 清理不需要的版本极其安装包缓存</span><br><span class="line">brew cleanup</span><br><span class="line">brew cleanup mysql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodeJS基础</title>
      <link href="/2019/11/30/nodeJS%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/11/30/nodeJS%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><p>1、环境变量：<code>__filename</code>、<code>__dirname</code>；</p><p>2、进程对象：process</p><p>3、日期对象：Date</p><p>4、数学对象：Math</p><p>5、时间函数：setTimeout、setInterval、setImmediate（相当于 requestAnimation)</p><h3 id="模块规范：commonJS"><a href="#模块规范：commonJS" class="headerlink" title="模块规范：commonJS"></a>模块规范：commonJS</h3><p>1、exports:{} ———————— require</p><p>2、module.exports —————————— require（会覆盖掉上面的 exports）</p><p>PS: 客户端以前经常用的是 AMD 规范，现在更多的是用 es6 规范</p><h3 id="非阻塞-I-O"><a href="#非阻塞-I-O" class="headerlink" title="非阻塞 I/O"></a>非阻塞 I/O</h3><p>1、I/O(Input/Output)，即系统的输入输出；</p><p>2、阻塞 I/O 和非阻塞 I/O 的区别在于系统接收输入再到输出期间，能不能接收其他输入。</p><h3 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h3><p>1、callback，比较原始的处理回调的方式，用法如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    callback(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种处理异步的方法有个问题，当有多个回调依次执行的时候，就会产生回调地狱，比如这样：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  callback(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  test(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;next&quot;</span>);</span><br><span class="line">    test(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;next&quot;</span>);</span><br><span class="line">      ……</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2、Promise, 原本是 commonJS 的一个规范，被扶正了，这种处理异步的方法很好的解决了上面的回调地狱问题，比如这么写：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pro = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> resolve(<span class="string">&quot;hi&quot;</span>));</span><br><span class="line">  <span class="keyword">return</span> pro;</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  ……</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>从例子中可以看出，代码就像串行一样，非常清晰明了，promise 会默认先调用第一个 then 或者第一个 catch，然后依次往下调用。</p><p>3、async/await</p><p>(1) async function 返回 promise</p><p>(2) 当使用了 await 时，只有当 await 拿到了结果才会继续往下执行</p><p>(3) await 可以用同步的写法写 Promise，因此，try catch 可以捕捉到 await 错误</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js链表实现</title>
      <link href="/2019/11/29/js%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/11/29/js%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、节点的实现"><a href="#一、节点的实现" class="headerlink" title="一、节点的实现"></a>一、节点的实现</h3><p>我都知道链表就是用有向线段把多个节点按顺序串起来，要实现链表首先要实现节点，而每一个节点，有一个自己的 value 值，还有一个 next 值用于指向下一个节点。比如可以这么实现一个节点：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.value = value; <span class="comment">//当前节点的值</span></span><br><span class="line">  <span class="built_in">this</span>.next = <span class="literal">null</span>; <span class="comment">//下一个节点链接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码用构造函数的方式声明一个 Node 类，Node 类有两个属性 value 和 next，value 指向自身的值，next 声明为 null。</p><h3 id="二、链表操作"><a href="#二、链表操作" class="headerlink" title="二、链表操作"></a>二、链表操作</h3><p>链表的基本操作包括：增、删、改、查，因此一个列表对象应该具备这些基本功能.</p><h4 id="1、元素查找"><a href="#1、元素查找" class="headerlink" title="1、元素查找"></a>1、元素查找</h4><p>需要插入一个新值到链表之前，我们需要找到这个值的位置，所以先来看看链表查找的 demo：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">this</span>.head = <span class="keyword">new</span> Node(<span class="string">&quot;head&quot;</span>); <span class="comment">//头节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//查找给定节点</span></span><br><span class="line">  find(item) &#123;</span><br><span class="line">    <span class="keyword">let</span> currNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">while</span> (currNode.value != item) &#123;</span><br><span class="line">      currNode = currNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currNode;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该链表类有一个 head 属性，即，链表的头部，指向 node 对象，也就是 <code>this.head = &#123;value: &#39;head&#39;, next: null&#125;</code> ，在 find 函数中，声明 currNode 变量，指向头部，遍历链表，对比每个节点的值跟需要查找值，若相等，则找到了，返回当前节点。</p><h4 id="2、插入、替换元素"><a href="#2、插入、替换元素" class="headerlink" title="2、插入、替换元素"></a>2、插入、替换元素</h4><p>以上讲了插入元素之前，我们需要先查找元素，找到之后，把新的节点插入到找到的元素后面，也就是找到元素的 next 指向新的元素，再把新元素的 next 指向当前节点的 next</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">this</span>.head = <span class="keyword">new</span> Node(<span class="string">&quot;head&quot;</span>); <span class="comment">//头节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//查找给定节点</span></span><br><span class="line">  find(item) &#123;</span><br><span class="line">    <span class="keyword">let</span> currNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">while</span> (currNode.element != item) &#123;</span><br><span class="line">      currNode = currNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//插入节点</span></span><br><span class="line">  insert(newElement, item) &#123;</span><br><span class="line">    <span class="keyword">let</span> newNode = <span class="keyword">new</span> Node(newElement);</span><br><span class="line">    <span class="keyword">let</span> currNode = <span class="built_in">this</span>.find(item);</span><br><span class="line">    newNode.next = currNode.next;</span><br><span class="line">    currNode.next = newNode;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>替换元素值，比以上简单点，找到对应的元节点，把该节点的 value 赋予新值，就到达到了修改的目的。</p><h4 id="3、删除元素"><a href="#3、删除元素" class="headerlink" title="3、删除元素"></a>3、删除元素</h4><p>要删除一个元素，需要查找被删除元素的前一个节点，然后把前一个元素的 next 指向被删除元素的下一个节点，实现如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">this</span>.head = <span class="keyword">new</span> Node(<span class="string">&quot;head&quot;</span>); <span class="comment">//头节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//查找带删除节点的前一个节点</span></span><br><span class="line">  findPrev(item) &#123;</span><br><span class="line">    <span class="keyword">let</span> currNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">while</span> (!(currNode.next == <span class="literal">null</span>) &amp;&amp; currNode.next.element != item) &#123;</span><br><span class="line">      currNode = currNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除节点</span></span><br><span class="line">  remove(item) &#123;</span><br><span class="line">    <span class="keyword">let</span> prevNode = <span class="built_in">this</span>.findPrev(item);</span><br><span class="line">    <span class="keyword">if</span> (!(prevNode.next == <span class="literal">null</span>)) &#123;</span><br><span class="line">      prevNode.next = prevNode.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、显示元素"><a href="#4、显示元素" class="headerlink" title="4、显示元素"></a>4、显示元素</h3><p>操作完元素，我们想看看效果，这个时候需要显示链表，通过打印每一个元素我们可以看到链表的完整结构</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">this</span>.head = <span class="keyword">new</span> Node(<span class="string">&quot;head&quot;</span>); <span class="comment">//头节点</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//显示链表元素</span></span><br><span class="line">  display() &#123;</span><br><span class="line">    <span class="keyword">let</span> currNode = <span class="built_in">this</span>.head;</span><br><span class="line">    <span class="keyword">while</span> (!(currNode.next == <span class="literal">null</span>)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(currNode.next);</span><br><span class="line">      currNode = currNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是我对 js 链表的完整实现，写这篇文章是因为今天跟同事聊天意识到自己对链表不是很熟，查阅资料，自己实现了一下，加深理解，再写篇文章以备以后忘了可以查阅。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 定位详解</title>
      <link href="/2019/11/28/css%E5%AE%9A%E4%BD%8D%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/11/28/css%E5%AE%9A%E4%BD%8D%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>css 定位主要用 position 属性，position 的默认值是 static，此时文档是按照正常的文档流去放置的，不会产生重叠等问题，同时该属性值也不具备方向偏移值。</p><p>而我们常用的：relative、absolute、fixed 等属性的不同之处在于基准点的不同。</p><p>relative 属性的基准点是自身位置，所产生的偏移值也是相对于自身的。</p><p>absolute 属性的基准点是父元素，即，是相对于父元素进行偏移的，但是前提是父元素是 relative 是定位的，如果父元素不是 relative 定位，就会向上搜，直到找到第一个 relative 定位的元素，并相对于该元素进行偏移。</p><p>fixed 属性的基准点是视口，即，相对于视口偏移。</p><p>还有一个新的属性值 sticky，可以说是 fixed 属性和 relative 属性的结合体，当页面没有滚动时，元素是按照 relative 进行位置确定的，当页面向下滚动时，元素则是按照 sticky 进行偏移的，这个元素一般用于需要固定导航栏或者是表头等场景。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue动态引入组件,注意不是异步!</title>
      <link href="/2019/11/22/vue%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E7%BB%84%E4%BB%B6-%E6%B3%A8%E6%84%8F%E4%B8%8D%E6%98%AF%E5%BC%82%E6%AD%A5/"/>
      <url>/2019/11/22/vue%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E7%BB%84%E4%BB%B6-%E6%B3%A8%E6%84%8F%E4%B8%8D%E6%98%AF%E5%BC%82%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>对于页面组件我们一般并不想去异步加载，但是如果一个 vue 项目用到了多个页面，我们需要在 app.vue 进行组件切换的时候一下全部引入也不好。所以就有了一个问题如何可以同步引入组件，又可以按需的加载呢？</p><p>我们知道 vue 的局部组件最终会被合并到 option 上，所以，利用这个关系可以按不同的条件去 require 不同的页面，把加进 vue 的 option 中就达到了我的目的了，这里需要一点底层操作，因为按照平常的话，我们把需要用到的组件写进 components 就好了，合并到 option 是 vue 解析的事情。讲了这么多，看看以下 demo 吧。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> comp = <span class="built_in">require</span>(<span class="string">`pages/<span class="subst">$&#123;<span class="built_in">this</span>.currentPage&#125;</span>`</span>);</span><br><span class="line"><span class="built_in">this</span>.$options.components[<span class="built_in">this</span>.currentPage] = comp.default;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SS 安装</title>
      <link href="/2019/11/21/ss%E5%AE%89%E8%A3%85/"/>
      <url>/2019/11/21/ss%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>1、登录<a href="https://bwh88.net/">搬瓦工</a></p><p>2、打开我的服务器，打开 root shell interactive</p><p>3、 <code>wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</code></p><p>4、 <code>chmod +x shadowsocks-all.sh</code></p><p>5、<code>./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</code></p><p>6、一路 next</p>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH 端口号修改</title>
      <link href="/2019/11/21/%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%BF%AE%E6%94%B9/"/>
      <url>/2019/11/21/%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>1、登录<a href="https://bwh88.net/">搬瓦工</a></p><p>2、打开我的服务器，打开 root shell interactive</p><p>3、输入 <code>vim /etc/ssh/sshd_config</code></p><p>4、点击 i 键，i 修改 Port 值</p><p>5、esc =&gt; :wq 保存</p><p>6、 reboot 重启服务器</p><p>至此，ssh 端口恢复</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何创建一个健壮的系统</title>
      <link href="/2019/11/19/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%81%A5%E5%A3%AE%E7%9A%84%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/11/19/%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%81%A5%E5%A3%AE%E7%9A%84%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p>要创建一个健壮的系统，可以从以下几个方面考虑：容错、高可用、灾备</p><p>容错是指当系发生故障时，还可以继续的运行，比如我们网页在断网的时候，还可以正常显示静态页面，而不是给到白屏。</p><p>高可用，是指当系统发生故障时，有一个 planB 可以尽快恢复系统，让故障的中断只是短暂的中断。</p><p>灾备，指的是当系统遇到毁灭性问题时，有一个备用方案可以挽救数据。</p><p>通过以上概念的解析，总结出，要创建一个健壮的系统，需要做到以下三点：</p><p>容错：发生故障时，可以让系统继续运行。</p><p>高可用：系统中断时，尽快恢复。</p><p>灾备：系统毁灭时，能够抢救数据。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 安装 Mysql</title>
      <link href="/2019/11/13/mac%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2019/11/13/mac%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<p>mac mysql 安装和使用的基本步骤</p><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1、<a href="https://dev.mysql.com/downloads/mysql/">下载</a></p><p>2、一路 next 之后，安装完成，会看到系统偏好栏多了一个 mysql 图标，点击可以进行一些基本的设置，也可以控制数据库的开关</p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>1、执行命令：<code>PATH=&quot;$PATH&quot;:/usr/local/mysql/bin</code>，配置环境变量</p><p>2、登录 mysql：<code>mysql -u root -p</code></p><p>3、查看数据库：<code>show databases;</code></p><h3 id="安装数据库图形化工具-Navicat"><a href="#安装数据库图形化工具-Navicat" class="headerlink" title="安装数据库图形化工具 Navicat"></a>安装数据库图形化工具 Navicat</h3><p>这里有可能会连接失败，使用 mysql 支持的加密方式改一下密码就好，比如：<code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;&lt;psd&gt;&#39;;</code></p>]]></content>
      
      
      <categories>
          
          <category> 服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PixiJs 极简教程</title>
      <link href="/2019/11/12/pixi%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/11/12/pixi%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>PixiJs 是比较常用的 canvas 库，用来展示 2d 的平面图，相比 canvas，封装了更多的功能，也更简单容易上手，但是其官网的文档写得极其的简陋，可阅读性很差，综合了一些其他的文档，写出了这份极简教程，让小白也可以拿来即用。</p><h3 id="一、创建画布"><a href="#一、创建画布" class="headerlink" title="一、创建画布"></a>一、创建画布</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建别名</span></span><br><span class="line"><span class="keyword">let</span> Application = PIXI.Application,</span><br><span class="line">  loader = PIXI.Loader.shared,</span><br><span class="line">  resources = PIXI.Loader.shared.resources,</span><br><span class="line">  Texture = PIXI.Texture,</span><br><span class="line">  TextureCache = PIXI.utils.TextureCache,</span><br><span class="line">  Rectangle = PIXI.Rectangle,</span><br><span class="line">  Sprite = PIXI.Sprite;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一张 canvas 画布</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Application(&#123;</span><br><span class="line">  width: <span class="number">256</span>,</span><br><span class="line">  height: <span class="number">256</span>,</span><br><span class="line">  antialiasing: <span class="literal">true</span>,</span><br><span class="line">  transparent: <span class="literal">false</span>,</span><br><span class="line">  resolution: <span class="number">1</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 把新创建的 canvas 画布挂载到对应的节点上</span></span><br><span class="line"><span class="built_in">this</span>.$refs.container.appendChild(app.view);</span><br></pre></td></tr></table></figure><h3 id="二、画布设置"><a href="#二、画布设置" class="headerlink" title="二、画布设置"></a>二、画布设置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//canvas 全屏样式</span></span><br><span class="line">app.renderer.view.style.position = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">app.renderer.view.style.width = <span class="built_in">window</span>.innerWidth + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">app.renderer.view.style.height = <span class="built_in">window</span>.innerHeight + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">app.renderer.view.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//`renderer.view` 代表原始的 `&lt;canvas&gt;`标签.</span></span><br><span class="line"><span class="comment">//给 canvas 加条虚线，就像平常操作 canvas 一样</span></span><br><span class="line">app.renderer.view.style.border = <span class="string">&#x27;1px dashed black&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置画布大小</span></span><br><span class="line">app.renderer.resize(<span class="number">512</span>, <span class="number">512</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变画布背颜色，颜色使用的是十六进制色</span></span><br><span class="line">app.renderer.backgroundColor = <span class="number">0x000000</span>;</span><br></pre></td></tr></table></figure><h3 id="三、显示图片"><a href="#三、显示图片" class="headerlink" title="三、显示图片"></a>三、显示图片</h3><p>1、texture 方法创建精灵</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 cat 精灵</span></span><br><span class="line"><span class="keyword">const</span> texture = Texture.from(<span class="string">&#x27;./img/pixi/cat.png&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Sprite(texture);</span><br><span class="line"><span class="comment">// 把新创建的精灵加到舞台上</span></span><br><span class="line">app.stage.addChild(cat);</span><br></pre></td></tr></table></figure><p>2、loder 方法创建精灵</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">loader</span><br><span class="line">  .add([<span class="string">&#x27;./img/pixi/cat.png&#x27;</span>, <span class="string">&#x27;./img/pixi/blob.png&#x27;</span>, <span class="string">&#x27;./img/pixi/explorer.png&#x27;</span>])</span><br><span class="line">  .load(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//创建精灵</span></span><br><span class="line">    <span class="keyword">let</span> cat = <span class="keyword">new</span> Sprite(resources[<span class="string">&#x27;./img/pixi/cat.png&#x27;</span>].texture),</span><br><span class="line">      blob = <span class="keyword">new</span> Sprite(resources[<span class="string">&#x27;./img/pixi/blob.png&#x27;</span>].texture),</span><br><span class="line">      explorer = <span class="keyword">new</span> Sprite(resources[<span class="string">&#x27;./img/pixi/explorer.png&#x27;</span>].texture);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把新创建的精灵加到舞台上</span></span><br><span class="line">    app.stage.addChild(cat);</span><br><span class="line">    app.stage.addChild(blob);</span><br><span class="line">    app.stage.addChild(explorer);</span><br><span class="line">    loader.reset();</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>3、改变精灵的属性</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改变精灵位置</span></span><br><span class="line">blob.position.set(<span class="number">82</span>, <span class="number">82</span>);</span><br><span class="line">explorer.position.set(<span class="number">128</span>, <span class="number">128</span>);</span><br><span class="line"><span class="comment">// 改变精灵大小</span></span><br><span class="line">cat.scale.set(<span class="number">1.2</span>, <span class="number">1.2</span>);</span><br><span class="line"><span class="comment">//旋转精灵</span></span><br><span class="line">cat.rotation = <span class="number">0.5</span>;</span><br><span class="line"><span class="comment">// 设置旋转的中心点</span></span><br><span class="line">cat.anchor.set(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 精灵显示情况控制</span></span><br><span class="line">cat.visible = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>4、加载雪碧图</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">loader.add(<span class="string">&#x27;./img/pixi/tileset.png&#x27;</span>).load(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> texture = TextureCache[<span class="string">&#x27;./img/pixi/tileset.png&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 图片在雪碧图上的位置截取 new Rectangle(x, y, w, h)</span></span><br><span class="line">  <span class="keyword">let</span> rectangle = <span class="keyword">new</span> Rectangle(<span class="number">192</span>, <span class="number">128</span>, <span class="number">64</span>, <span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 告诉 texture 使用截取的区域</span></span><br><span class="line">  texture.frame = rectangle;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> rocket = <span class="keyword">new</span> Sprite(texture);</span><br><span class="line"></span><br><span class="line">  rocket.position.set(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line">  app.stage.addChild(rocket);</span><br><span class="line">  loader.reset();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>5、加载 json 贴图数据集</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Loader.add(&#123;</span><br><span class="line">  name: <span class="string">&#x27;treasure&#x27;</span>,</span><br><span class="line">  url: <span class="string">&#x27;./img/pixi/treasureHunter.json&#x27;</span>,</span><br><span class="line">&#125;).load(<span class="function">(<span class="params">loader, resources</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> dungeon, explorer, treasure, door;</span><br><span class="line">  <span class="keyword">const</span> things = resources[<span class="string">&#x27;treasure&#x27;</span>].textures;</span><br><span class="line"></span><br><span class="line">  dungeon = <span class="keyword">new</span> Sprite(things[<span class="string">&#x27;dungeon.png&#x27;</span>]);</span><br><span class="line">  app.stage.addChild(dungeon);</span><br><span class="line"></span><br><span class="line">  explorer = <span class="keyword">new</span> Sprite(things[<span class="string">&#x27;explorer.png&#x27;</span>]);</span><br><span class="line">  app.stage.addChild(explorer);</span><br><span class="line"></span><br><span class="line">  treasure = <span class="keyword">new</span> Sprite(things[<span class="string">&#x27;treasure.png&#x27;</span>]);</span><br><span class="line">  app.stage.addChild(treasure);</span><br><span class="line"></span><br><span class="line">  loader.reset();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>json 数据长这样：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;frames&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;blob.png&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;frame&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">55</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;w&quot;</span>: <span class="number">32</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">24</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;rotated&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;trimmed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;spriteSourceSize&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;w&quot;</span>: <span class="number">32</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">24</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;sourceSize&quot;</span>: &#123; <span class="attr">&quot;w&quot;</span>: <span class="number">32</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">24</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;pivot&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">0.5</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">0.5</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;door.png&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;frame&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">89</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;w&quot;</span>: <span class="number">32</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">32</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;rotated&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;trimmed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;spriteSourceSize&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;w&quot;</span>: <span class="number">32</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">32</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;sourceSize&quot;</span>: &#123; <span class="attr">&quot;w&quot;</span>: <span class="number">32</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">32</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;pivot&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">0.5</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">0.5</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;dungeon.png&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;frame&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">36</span>, <span class="attr">&quot;w&quot;</span>: <span class="number">512</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">512</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;rotated&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;trimmed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;spriteSourceSize&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;w&quot;</span>: <span class="number">512</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">512</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;sourceSize&quot;</span>: &#123; <span class="attr">&quot;w&quot;</span>: <span class="number">512</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">512</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;pivot&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">0.5</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">0.5</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;explorer.png&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;frame&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;w&quot;</span>: <span class="number">21</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">32</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;rotated&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;trimmed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;spriteSourceSize&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;w&quot;</span>: <span class="number">21</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">32</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;sourceSize&quot;</span>: &#123; <span class="attr">&quot;w&quot;</span>: <span class="number">21</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">32</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;pivot&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">0.5</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">0.5</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;treasure.png&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;frame&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">25</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;w&quot;</span>: <span class="number">28</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">24</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;rotated&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;trimmed&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">&quot;spriteSourceSize&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;w&quot;</span>: <span class="number">28</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">24</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;sourceSize&quot;</span>: &#123; <span class="attr">&quot;w&quot;</span>: <span class="number">28</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">24</span> &#125;,</span><br><span class="line">      <span class="attr">&quot;pivot&quot;</span>: &#123; <span class="attr">&quot;x&quot;</span>: <span class="number">0.5</span>, <span class="attr">&quot;y&quot;</span>: <span class="number">0.5</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;meta&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;app&quot;</span>: <span class="string">&quot;http://www.codeandweb.com/texturepacker&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;treasureHunter.png&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;format&quot;</span>: <span class="string">&quot;RGBA8888&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;size&quot;</span>: &#123; <span class="attr">&quot;w&quot;</span>: <span class="number">516</span>, <span class="attr">&quot;h&quot;</span>: <span class="number">550</span> &#125;,</span><br><span class="line">    <span class="attr">&quot;scale&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;smartupdate&quot;</span>: <span class="string">&quot;$TexturePacker:SmartUpdate:51ede84c7a85e4d6aeb31a6020a20858:3923663e59fb40b578d66a492a2cda2d:9995f8b4db1ac3cb75651b1542df8ee2$&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看着很复杂，不像人写的是吧？确实，可以自动生成的，你需要 TexturePacker 这个神奇，生成雪碧图的同时，可以到处 json 数据集，有专门针对 pixi 的拿来即用的版本。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pixi.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机图形学 —————— 空间中的物体（2）</title>
      <link href="/2019/11/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-2/"/>
      <url>/2019/11/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-2/</url>
      
        <content type="html"><![CDATA[<p>在计算机图形学 —————— 空间中的物体（1）中，我讲到了网页中颜色的填充方法，这一篇，我来讲讲网页中的视点。有空间观念的话，应该知道我们的眼睛看物体总是越近的物体看得越清楚，越大，越远的物体显得越渺小，也就是近大远小的规律。</p><p>空间中的物体，从不同角度看，给我们的视觉效也是不一样的，而视点又有上下左右之分，每个方向的视点位置也同样会影响到物体的视觉效果。</p><p>综上，要展示一个空间中的物体，我们还需要三个值，即：视点，视角以及物体的远近值，可以这么表示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerspectiveCamera</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(eye, front, up, fov) &#123;</span><br><span class="line">    <span class="comment">// @eye：视点, @front：视野前方坐标点, @up：视野后方坐标点, @fov：视野远近，近大远小;</span></span><br><span class="line">    <span class="built_in">this</span>.eye = eye;</span><br><span class="line">    <span class="built_in">this</span>.front = front;</span><br><span class="line">    <span class="built_in">this</span>.refUp = up;</span><br><span class="line">    <span class="built_in">this</span>.fov = fov;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  initialize() &#123;</span><br><span class="line">    <span class="built_in">this</span>.right = <span class="built_in">this</span>.front.cross(<span class="built_in">this</span>.refUp);</span><br><span class="line">    <span class="built_in">this</span>.up = <span class="built_in">this</span>.right.cross(<span class="built_in">this</span>.front);</span><br><span class="line">    <span class="built_in">this</span>.fovScale = <span class="built_in">Math</span>.tan((<span class="built_in">this</span>.fov * <span class="number">0.5</span> * <span class="built_in">Math</span>.PI) / <span class="number">180</span>) * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机图形学 ———— 空间中的物体（1）</title>
      <link href="/2019/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-1/"/>
      <url>/2019/11/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6-1/</url>
      
        <content type="html"><![CDATA[<p>学过素描的应该都知道，物体的空间感/立体感是通过阴影渲染出来的，要画出一个具有立体感的物体，要清楚的区分出黑白灰三面，还有五调子，其中的黑灰是根据光线的强弱来判别的，比如光线的聚点，可能就是高光的位置，比较亮，而背面则是阴影，是比较暗的，但是这并不是最暗的位置，最暗的的位置应该是明暗交界线。</p><p>想要在网页上展现一个有立体感的物体，也可以用类似的原理。等等，计算机怎么去渲染这么有层次的颜色呢？画素描的时候都是一条线一条线的去画，才能勉强画出这种层次感，计算机去画就更难了。别担心，计算机显示画面不是一个像素一个像素的显示嘛，那么我们就一个像素一个像素的填充颜色，只要算法写的好，还怕填充不出来吗？</p><p>说到网页画图，我们首先想到的应是 canvas 吧，所以我们可以先给出一张画布：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> w = canvas.attributes.width.value;</span><br><span class="line"><span class="keyword">const</span> h = canvas.attributes.height.value;</span><br><span class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br></pre></td></tr></table></figure><p>有了画布之后，我们可以获取他里面所有的像素点集合 pixels：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> imgdata = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line"><span class="keyword">const</span> pixels = imgdata.data;</span><br></pre></td></tr></table></figure><p>有了像素点集合之后，我们可以往里面填充颜色</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; h; y++)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; w; x++) &#123;</span><br><span class="line">    pixels[i++] = <span class="number">0</span>;</span><br><span class="line">    pixels[i++] = <span class="number">255</span>;</span><br><span class="line">  &#125;</span><br><span class="line">ctx.putImageData(imgdata, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>因为像素点集合是二维的，所以，y 表示从上到下的像素点， x 表示从左往右的像素点，这样我们就格子里填充颜色了。做到了这一步，相当于你已经会画线条了，接下来应该要熟悉一下构图了。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3D </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目模块化原则</title>
      <link href="/2019/11/08/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8E%9F%E5%88%99/"/>
      <url>/2019/11/08/%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>1、组件划分为业务组件和 UI 组件</p><p>2、按照先业务后功能的方式去颗粒化组件</p><p>3、数据驱动，业务操作在业务组件里完成</p><p>4、ＵＩ组件不参与业务，不处理业务逻辑，只做展示之用</p><p>5、公共的组件、接口、css，抽离出来，不掺杂在业务逻辑里</p><p>6、组件的封装要做到高内聚，低耦合</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件命名为什么提倡用英文小写字母而不用大写字母</title>
      <link href="/2019/11/08/%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/11/08/%E6%96%87%E4%BB%B6%E5%91%BD%E5%90%8D%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>开发遇到了个问题，项目在本地编译得好好的，在 ci 上编译一直报错，说是找不到路径，本地看了好多遍路径都是对的，感觉是玄学。</p><p>想了想没做什么操作，就是看不习惯之前的命名方式，好几个单词写在一起，想统一成驼峰命名法，于是把两个文件夹的两 a 个单词开头写成了大写字母~</p><p>后来发现就是这个在 win 系统下手动改文件名由大写改为小写的锅，因为在 win 系统中是大小写不区分的，导致在 git push 的时候，push 上去的文件还是那个全是小写字母的，所以会一直报找不到路径的错误。但是如果文件一开始就是驼峰命名法，就不存在这个问题了，因为提交上去的就是新的文件。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说说网页自适应和响应式布局</title>
      <link href="/2019/11/05/%E8%AF%B4%E8%AF%B4%E7%BD%91%E9%A1%B5%E8%87%AA%E9%80%82%E5%BA%94%E5%92%8C%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/"/>
      <url>/2019/11/05/%E8%AF%B4%E8%AF%B4%E7%BD%91%E9%A1%B5%E8%87%AA%E9%80%82%E5%BA%94%E5%92%8C%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>忙完一段时间，发布了一版之后，习惯性的放下手头一些需求，去整理之前的项目，看看存在什么问题，是否有可优化的空间。发现我写的页面存在一个很大的问题，那就是多分辨率适配的问题。之前一直用着响应式的理念，根据页面调整布局，但是发现与产品的需求相悖，他们希望看到的是所有分辨率的显示屏显示的效果一致。</p><p>要做到我们产品的这种需求，那就只能用 web 2.0 时期的百分比 + float 布局了，也就是我们常说的网页自适应，这种页面布局方式在老版本的网页体现的比较明显，其应用场景一般比较局限于 pc 浏览区。</p><p>而响应式布局是互联网新时代的产物，是随着移动端的兴起而发展起来的，这种布局方式，根据屏幕的分辨率不同，给用户呈现不同的视觉效果，更进一步发展为现在常说的 pwa ，渐进式网页布局，多用于屏幕分辨率比较广泛的环境。</p><p>说说现在的自适应怎么做，我总结出以下原则：</p><p>1、 viewport: content=”width=device-width, initial-scale=1”</p><p>2、使相对宽度(vw)或者百分比宽度</p><p>3、适当使用相对大小的字体（rem)</p><p>4、使用 float 布局</p><p>5、使用媒体查询，有选择的加载 CSS</p><p>6、图片自适应</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Hooks 创建电影 App</title>
      <link href="/2019/11/01/react-hooks%E5%88%9B%E5%BB%BA%E7%94%B5%E5%BD%B1app/"/>
      <url>/2019/11/01/react-hooks%E5%88%9B%E5%BB%BA%E7%94%B5%E5%BD%B1app/</url>
      
        <content type="html"><![CDATA[<p>使用 react hooks 搭建一个电影 App，该 demo 属于一个极简版，参考自一个外国哥们写的 《How to build a movie search app using React Hooks》，文章的核心围绕用 react hook 搭建一个电影 App 的关键步骤展开，没有多余的描述，代码可以开箱即用，欢迎食用。</p><a id="more"></a><h3 id="1、-项目创建"><a href="#1、-项目创建" class="headerlink" title="1、 项目创建"></a>1、 项目创建</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g create-react-app</span><br><span class="line"></span><br><span class="line">create-react-app &lt;item-name&gt;</span><br><span class="line"></span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure><h3 id="2、创建-components-目录"><a href="#2、创建-components-目录" class="headerlink" title="2、创建 components 目录"></a>2、创建 components 目录</h3><p>(1) 把 App.js 拉到该目录下，同时更新 index.js 下 App.js 的路径</p><p>(2) 创建 Header.js，header 组件，接收父组件传过来的标题，App-header 是 App.css 中的一个 class</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Header = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;header className=<span class="string">&quot;App-header&quot;</span>&gt;</span><br><span class="line">      &lt;h2&gt;&#123;props.text&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Header;</span><br></pre></td></tr></table></figure><p>(3) 创建 Movie.js，该组件用于展示父组件传过来的电影相关数据</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DEFAULT_PLACEHOLDER_IMAGE =</span><br><span class="line">  <span class="string">&quot;https://m.media-amazon.com/images/M/MV5BMTczNTI2ODUwOF5BMl5BanBnXkFtZTcwMTU0NTIzMw@@._V1_SX300.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Movie = <span class="function">(<span class="params">&#123; movie &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> poster =</span><br><span class="line">    movie.Poster === <span class="string">&quot;N/A&quot;</span> ? DEFAULT_PLACEHOLDER_IMAGE : movie.Poster;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;movie&quot;</span>&gt;</span><br><span class="line">      &lt;h2&gt;&#123;movie.Title&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;img</span><br><span class="line">          width=<span class="string">&quot;200&quot;</span></span><br><span class="line">          alt=&#123;<span class="string">`The movie titled: <span class="subst">$&#123;movie.Title&#125;</span>`</span>&#125;</span><br><span class="line">          src=&#123;poster&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;p&gt;(&#123;movie.Year&#125;)&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Movie;</span><br></pre></td></tr></table></figure><p>(4) 创建 Search.js，该组件实现搜索功能，其中用到了 react 的 useState 钩子</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Search = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [searchValue, setSearchValue] = useState(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleSearchInputChanges = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    setSearchValue(e.target.value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resetInputField = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setSearchValue(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> callSearchFunction = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    props.search(searchValue);</span><br><span class="line">    resetInputField();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;form className=<span class="string">&quot;search&quot;</span>&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        value=&#123;searchValue&#125;</span><br><span class="line">        onChange=&#123;handleSearchInputChanges&#125;</span><br><span class="line">        type=<span class="string">&quot;text&quot;</span></span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;input onClick=&#123;callSearchFunction&#125; type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;SEARCH&quot;</span> /&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Search;</span><br></pre></td></tr></table></figure><h3 id="3、更新-App-js-文件，引用上述新组件"><a href="#3、更新-App-js-文件，引用上述新组件" class="headerlink" title="3、更新 App.js 文件，引用上述新组件"></a>3、更新 App.js 文件，引用上述新组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../App.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./Header&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Movie <span class="keyword">from</span> <span class="string">&quot;./Movie&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">&quot;./Search&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MOVIE_API_URL = <span class="string">&quot;https://www.omdbapi.com/?s=man&amp;apikey=4a3b711b&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  loading: <span class="literal">true</span>,</span><br><span class="line">  movies: [],</span><br><span class="line">  errorMessage: <span class="literal">null</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_REQUEST&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">true</span>,</span><br><span class="line">        errorMessage: <span class="literal">null</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        movies: action.payload</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SEARCH_MOVIES_FAILURE&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        loading: <span class="literal">false</span>,</span><br><span class="line">        errorMessage: action.error</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fetch(MOVIE_API_URL)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">      .then(<span class="function"><span class="params">jsonResponse</span> =&gt;</span> &#123;</span><br><span class="line">        dispatch(&#123;</span><br><span class="line">          type: <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>,</span><br><span class="line">          payload: jsonResponse.Search</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> search = <span class="function"><span class="params">searchValue</span> =&gt;</span> &#123;</span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      type: <span class="string">&quot;SEARCH_MOVIES_REQUEST&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    fetch(<span class="string">`https://www.omdbapi.com/?s=<span class="subst">$&#123;searchValue&#125;</span>&amp;apikey=4a3b711b`</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">      .then(<span class="function"><span class="params">jsonResponse</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (jsonResponse.Response === <span class="string">&quot;True&quot;</span>) &#123;</span><br><span class="line">          dispatch(&#123;</span><br><span class="line">            type: <span class="string">&quot;SEARCH_MOVIES_SUCCESS&quot;</span>,</span><br><span class="line">            payload: jsonResponse.Search</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          dispatch(&#123;</span><br><span class="line">            type: <span class="string">&quot;SEARCH_MOVIES_FAILURE&quot;</span>,</span><br><span class="line">            error: jsonResponse.Error</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; movies, errorMessage, loading &#125; = state;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">      &lt;Header text=<span class="string">&quot;REACT MOVIE APP&quot;</span> /&gt;</span><br><span class="line">      &lt;Search search=&#123;search&#125; /&gt;</span><br><span class="line">      &lt;p className=<span class="string">&quot;App-intro&quot;</span>&gt;Sharing a few <span class="keyword">of</span> our favourite movies&lt;/p&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;movies&quot;</span>&gt;</span><br><span class="line">        &#123;loading &amp;&amp; !errorMessage ? (</span><br><span class="line">          &lt;span&gt;loading... &lt;/span&gt;</span><br><span class="line">        ) : errorMessage ? (</span><br><span class="line">          &lt;div className=<span class="string">&quot;errorMessage&quot;</span>&gt;&#123;errorMessage&#125;&lt;/div&gt;</span><br><span class="line">        ) : (</span><br><span class="line">          movies.map(<span class="function">(<span class="params">movie, index</span>) =&gt;</span> (</span><br><span class="line">            &lt;Movie key=&#123;<span class="string">`<span class="subst">$&#123;index&#125;</span>-<span class="subst">$&#123;movie.Title&#125;</span>`</span>&#125; movie=&#123;movie&#125; /&gt;</span><br><span class="line">          ))</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h3 id="4、完结撒花"><a href="#4、完结撒花" class="headerlink" title="4、完结撒花"></a>4、完结撒花</h3>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas绘制雪碧图导出</title>
      <link href="/2019/10/26/canvas%E7%BB%98%E5%88%B6%E9%9B%AA%E7%A2%A7%E5%9B%BE%E5%AF%BC%E5%87%BA/"/>
      <url>/2019/10/26/canvas%E7%BB%98%E5%88%B6%E9%9B%AA%E7%A2%A7%E5%9B%BE%E5%AF%BC%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p>在开发中，我们经常会用到雪碧图，有时候 UI 可能给了很多小图，没有给到雪碧图，为了减少请求，我们会选择自己去在线生成或 ps，但是这样太繁琐了，能不能我们用一个函数实现呢？网上很多方案是借助 webpack 实现这个功能的，但是我想能不能简单点，于是就有了这个 demo，目前该 demo 可以合成雪碧图导出，但是没有导出对应的坐标 json 文件，后期再完善，先这样。</p><p>一、主要思路</p><p>1、要合成雪碧图的前提是拿到对应图片的路径，网页要拿图片的路径无非就是通过 input file 上传的时候拿本地路径或者更加简单粗暴地自己写；</p><p>2、要合成雪碧图，需要有个工具去把他们拼凑在一起，网页怎么把图片拼在一起呢？当然是用 canvas 画啦；</p><p>3、已经可以组合图片了，怎么导出呢？客户端的 js 没有操作文件系统的高端属性啊，我选择的是用一个保存文件的第三方库 file-saver，这是一个客户端 js 保存文件的神器。</p><p>二、实现</p><p>demo:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">&quot;file-saver&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newSprite</span>(<span class="params">&#123; canvasId, images, width, height &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(canvasId);</span><br><span class="line">  canvas.setAttribute(<span class="string">&quot;width&quot;</span>, width);</span><br><span class="line">  canvas.setAttribute(<span class="string">&quot;height&quot;</span>, height);</span><br><span class="line">  <span class="keyword">const</span> initX = <span class="number">0</span>;</span><br><span class="line">  images.forEach(<span class="function">(<span class="params">ele, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    ctx.drawImage(ele, initX + <span class="number">50</span> * index, <span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  canvas.toBlob(<span class="function"><span class="params">blob</span> =&gt;</span> &#123;</span><br><span class="line">    saveAs(blob, <span class="string">&quot;sprite.png&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>预览：</p><p><a href="https://canace22.github.io/Demos/#/">Demos</a> =&gt; canvas 绘图 =&gt; 合成雪碧图</p><p>三、扩展</p><p>如果觉得这样还不够好用的话，可以学习 smithSprite，把对应图片的 css 坐标样式也导出来</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web 优化 ——— 添加骨架屏</title>
      <link href="/2019/09/26/%E6%B7%BB%E5%8A%A0%E9%AA%A8%E6%9E%B6%E5%B1%8F/"/>
      <url>/2019/09/26/%E6%B7%BB%E5%8A%A0%E9%AA%A8%E6%9E%B6%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>最近做网页优化，发现页面会有一段白屏时间，给人的体验就是网页会有一闪而出的感觉，也就是我们常说的闪屏，查了一些资料，发现实现思路都是异曲同工的，就是在页面节点还没加载之前，先插一段静态网页，节点加载了再去掉这段静态代码，显示数据渲染出来界面。一般需要加骨架屏的界面，是一些动态加载数据的界面，因为数据没出来，会有一段比较长的白屏时间会给用户网加载慢的感觉。加了骨架屏，用会觉得网页加载比较快，属于一种视觉欺骗的手段吧。</p><p>下面来讲讲 vue-cli3 添骨架屏方法。</p><p>为节省时间成本，我没有自己去造轮子，而是选择了一个现成的轮子 vue-skeleton-webpack-plugin，骨架屏的实现步骤如下：</p><p>1、安装轮子的包：<code>yarn add vue-skeleton-webpack-plugin</code></p><p>2、webpack 中引入该插件(vue.config.js)，具体的配置项可以去看看该插件的<a href="https://github.com/lavas-project/vue-skeleton-webpack-plugin">说明</a>：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SkeletonWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-skeleton-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">configureWebpack: &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> SkeletonWebpackPlugin(&#123;</span><br><span class="line">      webpackConfig: &#123;</span><br><span class="line">        entry: &#123;</span><br><span class="line">          app: path.join(__dirname, <span class="string">&#x27;./src/common/skeleton.js&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      minimize: <span class="literal">true</span>,</span><br><span class="line">      quiet: <span class="literal">true</span>,</span><br><span class="line">      router: &#123;</span><br><span class="line">        mode: <span class="string">&#x27;hash&#x27;</span>,</span><br><span class="line">        routes: [</span><br><span class="line">          &#123;</span><br><span class="line">            path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            skeletonId: <span class="string">&#x27;skeleton-home&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            skeletonId: <span class="string">&#x27;skeleton-home&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>3、添加一个骨架组件，skeleton.js 中引入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Skeleton <span class="keyword">from</span> <span class="string">&quot;../components/skeletonPage.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Skeleton</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(Skeleton)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>4、因为在 vue-cli 里默认样式是不分离的，打包出来的骨架屏会没有样式，所以需要设置一下样式分离：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">css: &#123;</span><br><span class="line">  extract: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>5、因为 vue-cli 脚手架打包出来的样式是带 tag 的，骨架的样式依然不可用，这里我是先启用样式分离，编译出 css ，然后手动去掉 tag，放到 public/index 里，再关闭样式分离，这样骨架屏就正常了。</p><p>6、按照文档做了上面这些，会发现骨架屏还是无效的，还需要修改一下 main.js 的组件挂载方式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  components: &#123;</span><br><span class="line">    App</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.mountApp = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  app.$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.mountApp();</span><br></pre></td></tr></table></figure><p>7、此外需要注意：</p><ul><li><p>App.vue 文件引用组件的方式不要用 router-view，改用直接引入组件</p></li><li><p>首屏的组件不要懒加载，不然会有闪屏的问题</p></li><li><p>目前只测试了单页应用，多页面的应用还未尝试，有待探索</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单向列表拼接</title>
      <link href="/2019/09/15/%E5%8D%95%E5%90%91%E5%88%97%E8%A1%A8%E6%8B%BC%E6%8E%A5/"/>
      <url>/2019/09/15/%E5%8D%95%E5%90%91%E5%88%97%E8%A1%A8%E6%8B%BC%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="comment"># Input: 1 -&gt; 2 -&gt; 4, 1 -&gt; 3 -&gt; 4</span></span><br><span class="line"><span class="comment"># Output: 1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"># 链接：https: // leetcode-cn.com/problems/merge-two-sorted-lists</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span>(<span class="params">self, l1, l2</span>):</span></span><br><span class="line">        prehead = ListNode(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        prev = prehead</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt;= l2.val:</span><br><span class="line">                prev.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                prev.next = l2</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            prev = prev.next</span><br><span class="line">        prev.next = l1 <span class="keyword">if</span> l1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> l2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> prehead.next</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, arr1, arr2</span>):</span></span><br><span class="line">        n1 = ListNode(arr1[<span class="number">0</span>])</span><br><span class="line">        x1 = ListNode(arr2[<span class="number">0</span>])</span><br><span class="line">        self.mergeTwoLists(n1, x1)</span><br><span class="line">        print(self.mergeTwoLists(n1, x1).val)</span><br><span class="line"></span><br><span class="line">Solution([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><p>通过比较两个列表节点的大小，替换节点的方式，拼接出一个由小到大排序的有序单向列表，这题对于我来说，难点在于列表的实现，由于之前没怎么接触过链表，还得慢慢去理解。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>括号匹配</title>
      <link href="/2019/09/08/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/"/>
      <url>/2019/09/08/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给定一个只包括 &#x27;(&#x27;，&#x27;)&#x27;，&#x27;&#123;&#x27;，&#x27;&#125;&#x27;，&#x27;[&#x27;，&#x27;]&#x27; 的字符串，判断字符串是否有效。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有效字符串需满足：</span></span><br><span class="line"><span class="comment"># 左括号必须用相同类型的右括号闭合。</span></span><br><span class="line"><span class="comment"># 左括号必须以正确的顺序闭合。</span></span><br><span class="line"><span class="comment"># 注意空字符串可被认为是有效字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 1:</span></span><br><span class="line"><span class="comment"># 输入: &quot;()&quot;</span></span><br><span class="line"><span class="comment"># 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 2:</span></span><br><span class="line"><span class="comment"># 输入: &quot;()[]&#123;&#125;&quot;</span></span><br><span class="line"><span class="comment"># 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 3:</span></span><br><span class="line"><span class="comment"># 输入: &quot;(]&quot;</span></span><br><span class="line"><span class="comment"># 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 4:</span></span><br><span class="line"><span class="comment"># 输入: &quot;([)]&quot;</span></span><br><span class="line"><span class="comment"># 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 5:</span></span><br><span class="line"><span class="comment"># 输入: &quot;&#123;[]&#125;&quot;</span></span><br><span class="line"><span class="comment"># 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"># 链接：https: // leetcode-cn.com/problems/valid-parentheses</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        <span class="comment"># 简洁但是效率低</span></span><br><span class="line">        <span class="comment"># while &#x27;&#123;&#125;&#x27; in s or &#x27;()&#x27; in s or &#x27;[]&#x27; in s:</span></span><br><span class="line">        <span class="comment">#     s = s.replace(&#x27;&#123;&#125;&#x27;, &#x27;&#x27;)</span></span><br><span class="line">        <span class="comment">#     s = s.replace(&#x27;[]&#x27;, &#x27;&#x27;)</span></span><br><span class="line">        <span class="comment">#     s = s.replace(&#x27;()&#x27;, &#x27;&#x27;)</span></span><br><span class="line">        <span class="comment"># return s == &#x27;&#x27;</span></span><br><span class="line">        stack = []  <span class="comment"># 初始化栈</span></span><br><span class="line">        mapping = &#123;<span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>&#125;  <span class="comment"># 字典存储所有的匹配类型</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:  <span class="comment"># 遍历字符串</span></span><br><span class="line">            <span class="keyword">if</span> (char <span class="keyword">in</span> mapping):  <span class="comment"># 当前字符为闭合符号时</span></span><br><span class="line">                top_element = stack.pop() <span class="keyword">if</span> stack <span class="keyword">else</span> <span class="string">&#x27;#&#x27;</span>  <span class="comment"># 栈顶元素出栈</span></span><br><span class="line">                <span class="keyword">if</span> mapping[char] != top_element:  <span class="comment"># 没有匹配的类型，返回 false</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(char)  <span class="comment"># 开括号存储到栈里</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_init_</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.isValid(<span class="string">&quot;([)]&quot;</span>)</span><br><span class="line"></span><br><span class="line">res = Solution()</span><br><span class="line">print(res._init_())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下拉列表的实现</title>
      <link href="/2019/09/01/%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/09/01/%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>用别人的组件总有各种不可控的问题，而且不好维护，还是造轮子比较舒畅。</p><p>下拉列表是工作中经常用到的一个功能，点击按钮，显示下拉列表，点击列表中的项目显示对应的值到按钮中，这是下拉列表的常用交互。这里的一个比较有意思的点就是如何在点击别的地方时关闭列表。我采用的方法是监听组件最外层的 blur 事件，当该组件失去焦点时，关闭列表。由于按钮用的是 div 实现，默认 div 是没有 blur 事件的，这里添加一个 tabindex 属性， blur 就有效了。</p><p>demo：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropDown-wrap&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;1&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;hidden&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropDown&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;isDropDown=!isDropDown&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;selected.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;arrow-right&quot;</span> <span class="attr">role</span>=<span class="string">&quot;presentation&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isIcon&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">polyline</span></span></span><br><span class="line"><span class="tag">        <span class="attr">points</span>=<span class="string">&quot;7,0 14,7 7,14&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">stroke-width</span>=<span class="string">&quot;2px&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">stroke</span>=<span class="string">&quot;#fff&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow-up&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;isDropDown:isDropDown&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropDown-list&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;isDropDown:isDropDown&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;dropDown-item&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">&quot;&#123;isSelected:selected.id===item.id&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;selectItem(item)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      &#123;&#123;item.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">selectItem (item) &#123;</span><br><span class="line">  <span class="built_in">this</span>.$emit(<span class="string">&#x27;changeItem&#x27;</span>, item)</span><br><span class="line">  <span class="built_in">this</span>.isDropDown = <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">hidden () &#123;</span><br><span class="line">  <span class="built_in">this</span>.isDropDown = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、Demo-地址"><a href="#三、Demo-地址" class="headerlink" title="三、Demo 地址"></a>三、Demo 地址</h4><p><a href="https://canace22.github.io/Demos/#/">Demo</a> =&gt; 媒体 =&gt; 列表控件</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas 画动态路径</title>
      <link href="/2019/08/25/Canvas%E7%94%BB%E5%8A%A8%E6%80%81%E8%B7%AF%E5%BE%84/"/>
      <url>/2019/08/25/Canvas%E7%94%BB%E5%8A%A8%E6%80%81%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<p>这个函数是一个用于画 canvas 路径的，也就是把 canvas 画线的过程演示出来的一个东东。采用的是纯 js 和 canvas 描绘方法。当然前提是得有路径的点集，不然画不了。</p><a id="more"></a><h4 id="一、参数列表"><a href="#一、参数列表" class="headerlink" title="一、参数列表"></a>一、参数列表</h4><div class="table-container"><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>config.color</td><td>String</td><td>路径颜色</td></tr><tr><td>config.path</td><td>Object</td><td>路径的点集</td></tr><tr><td>config.padding.left</td><td>Number</td><td>路径图的左偏移值</td></tr><tr><td>config.padding.top</td><td>Number</td><td>路径图的上偏移值</td></tr><tr><td>config.img</td><td>HTMLElement</td><td>描绘路径的图</td></tr><tr><td>config.sw</td><td>Number</td><td>描绘路径图的原始宽</td></tr><tr><td>config.sh</td><td>Number</td><td>描绘路径图的原始高</td></tr><tr><td>config.scale</td><td>Number</td><td>缩放尺度</td></tr></tbody></table></div><h4 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">drawPolygon</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> t = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> [scale, path, color, sw, sh, padding, handleEl] = [</span><br><span class="line">    config.scale,</span><br><span class="line">    config.path,</span><br><span class="line">    config.color,</span><br><span class="line">    config.sw,</span><br><span class="line">    config.sh,</span><br><span class="line">    config.padding,</span><br><span class="line">    config.handleEl</span><br><span class="line">  ];</span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> draw = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (t &gt;= config.path.length) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(clock);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">    t += <span class="number">2</span>;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(</span><br><span class="line">      path[<span class="number">0</span>].x * scale + padding.left,</span><br><span class="line">      path[<span class="number">0</span>].y * scale + padding.top</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (t &gt; path.length) &#123;</span><br><span class="line">      t = path.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (handleEl) &#123;</span><br><span class="line">      ctx.drawImage(</span><br><span class="line">        handleEl,</span><br><span class="line">        path[t - <span class="number">1</span>].x * scale + padding.left,</span><br><span class="line">        (path[t - <span class="number">1</span>].y - <span class="number">240</span>) * scale + padding.top,</span><br><span class="line">        sw * scale,</span><br><span class="line">        sh * scale</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (config.path[i]) &#123;</span><br><span class="line">        ctx.lineTo(</span><br><span class="line">          config.path[i].x * scale + config.padding.left,</span><br><span class="line">          config.path[i].y * scale + config.padding.top</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.strokeStyle = color || <span class="string">&quot;#07B1CA&quot;</span>;</span><br><span class="line">    ctx.lineWidth = <span class="number">3</span>;</span><br><span class="line">    ctx.stroke();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clock = <span class="built_in">setInterval</span>(draw, <span class="number">50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、Demo-地址"><a href="#三、Demo-地址" class="headerlink" title="三、Demo 地址"></a>三、Demo 地址</h4><p><a href="https://canace22.github.io/Demos/#/">Demo</a> =&gt; 绘图 =&gt; canvas 路径</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Npm 常用命令</title>
      <link href="/2019/08/17/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/08/17/npm%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>1、安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i &lt;package&gt;</span><br><span class="line"></span><br><span class="line">npm i &lt;package&gt; -g</span><br><span class="line"></span><br><span class="line">npm i &lt;package&gt; --save-dev</span><br><span class="line"></span><br><span class="line">npm install @myco&#x2F;my-package</span><br></pre></td></tr></table></figure><p>2、切换源</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 长久切换</span><br><span class="line">npm config set registry &lt;https:&#x2F;&#x2F;registry.npm.taobao.org&gt;</span><br><span class="line"></span><br><span class="line"># 临时切换</span><br><span class="line">npm --registry https:&#x2F;&#x2F;registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure><p>3、添加私有源</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 需要先登录</span><br><span class="line">npm config set &lt;@myco&gt;:registry &lt;http:&#x2F;&#x2F;reg.example.com&gt;</span><br><span class="line">.npmrc</span><br><span class="line">registry&#x3D;https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</span><br><span class="line">&#x2F;&#x2F;registry.npm.dreamdev.cn&#x2F;:_password&#x3D;&lt;password&gt;</span><br><span class="line">&#x2F;&#x2F;registry.npm.dreamdev.cn&#x2F;:username&#x3D;&lt;user&gt;</span><br><span class="line">&#x2F;&#x2F;registry.npm.dreamdev.cn&#x2F;:email&#x3D;&lt;email&gt;</span><br><span class="line">&#x2F;&#x2F;registry.npm.dreamdev.cn&#x2F;:always-auth&#x3D;false</span><br><span class="line">@myco:registry&#x3D; &lt;http:&#x2F;&#x2F;reg.example.com&gt;</span><br><span class="line">https:&#x2F;&#x2F;registry.npm.dreamdev.cn&#x2F;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 布局篇</title>
      <link href="/2019/08/11/css%E5%B8%83%E5%B1%80%E7%AF%87/"/>
      <url>/2019/08/11/css%E5%B8%83%E5%B1%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>css 基本布局介绍，包括元素的水平、垂直居中，单列布局、三列布局等，文章分析了多种情况下的布局方案，参考自知乎《css 十八般武艺全在这里了》。</p><a id="more"></a><p>一、布局</p><p>1、居中</p><p>(1) 水平居中</p><p>A、子元素行内元素</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>子元素为行内元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B、子元素为定宽块状元素</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>定宽子元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C、子元素为不定宽块状元素</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>子元素为不定宽块状元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D、flex 布局</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>flex 布局<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 垂直居中</p><p>A、父元素一定，子元素为单行内联文本</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>父元素一定，子元素为单行内联文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">260px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B、父元素一定，子元素为多行内联文本</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">    父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本父元素一定，子元素为多行内联文本</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">260px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C、子元素为块级元素</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D、flex 布局</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-item</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid purple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、单列布局</p><p>(1) header、content、footer 宽度相同</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>尾部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.layout</span> &#123;</span><br><span class="line">  <span class="comment">/*   width: 960px; */</span></span><br><span class="line">  <span class="comment">/*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*/</span></span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">72px</span>;</span><br><span class="line">  <span class="attribute">background</span>: palegoldenrod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">144px</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">27</span>, <span class="number">27</span>, <span class="number">26</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">72px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">211</span>, <span class="number">211</span>, <span class="number">75</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) header、footer 宽度为浏览器宽度，content 宽度小于浏览器宽度居中</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span>尾部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.layout</span> &#123;</span><br><span class="line">  <span class="comment">/*   width: 960px; */</span></span><br><span class="line">  <span class="comment">/*设置width当浏览器窗口宽度小于960px时，单列布局不会自适应。*/</span></span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span>,</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">72px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">211</span>, <span class="number">211</span>, <span class="number">75</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">144px</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">27</span>, <span class="number">27</span>, <span class="number">26</span>);</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、三列布局</p><p>(1) float + margin，要点两边元素固定宽度，中间元素的 margin-left、margin-right 对应左右元素的宽，先写两侧栏，再写主面板</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>sub<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;extra&quot;</span>&gt;</span>extra<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">56</span>, <span class="number">165</span>, <span class="number">238</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.extra</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">56</span>, <span class="number">165</span>, <span class="number">238</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) position + margin，左右元素绝对定位，中间元素的 margin-left、margin-right 对应左右元素的宽度</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;extra&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.sub</span>,</span><br><span class="line"><span class="selector-class">.extra</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">56</span>, <span class="number">165</span>, <span class="number">238</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sub</span> &#123;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.extra</span> &#123;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) flex</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span>侧边栏宽度固定<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>主内容栏宽度自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>主内容栏宽度自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span>侧边栏宽度固定<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span>左侧边栏宽度固定<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>主内容栏宽度自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span>右侧边栏宽度固定<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span>第1个侧边栏宽度固定<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span>第2个侧边栏宽度固定<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>主内容栏宽度自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>主内容栏宽度自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span>第1个侧边栏宽度固定<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span>第2个侧边栏宽度固定<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.layout</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.aside</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodeJs 模块</title>
      <link href="/2019/08/11/nodeJs/"/>
      <url>/2019/08/11/nodeJs/</url>
      
        <content type="html"><![CDATA[<p>nodeJS 模块化编程指的是将一些通用的功能转移到不同的文件里，每个文件作为一个模块，暴露给其他文件使用。这样可以使代码更容易维护，更具通用性。</p><a id="more"></a><h2 id="一、模块化编程"><a href="#一、模块化编程" class="headerlink" title="一、模块化编程"></a>一、模块化编程</h2><p>nodeJS 模块化编程指的是将一些通用的功能转移到不同的文件里，每个文件作为一个模块，暴露给其他文件使用。这样可以使代码更容易维护，更具通用性。</p><p>nodeJS 模块导出的方式有两种：module.exports 和 exports，前者可以直接被赋值，后者不能。 通过模块导出的函数所声明的全局变量不会污染其他全局变量的原因是：module.exports 和 exports 实际上都是作为 load 函数的属性存在的，每次引入，源模块中的全局变量就是函数内的变量了，所以各模块全局变量间不会互相污染。</p><p>nodeJS 引入模块的方式是 require。</p><h2 id="二、nodeJS-内置模块"><a href="#二、nodeJS-内置模块" class="headerlink" title="二、nodeJS 内置模块"></a>二、nodeJS 内置模块</h2><p>1、fs 模块</p><p>(1) 文件读取</p><p>A、异步读取文件</p><ul><li><p>文本文件读取</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取普通文本文件</span></span><br><span class="line">fs.readFile(<span class="string">&quot;sample.txt&quot;</span>, <span class="string">&quot;utf-8&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>二进制文件读取</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 读取二进制文件</span></span><br><span class="line">fs.readFile(<span class="string">&quot;sample.png&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(data.length + <span class="string">&quot; bytes&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>B、同步读取文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 同步读取文件</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = fs.readFileSync(<span class="string">&quot;sample.txt&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="comment">// 出错了</span></span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 文件写入</p><p>A、异步写入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="string">&quot;Hello, Node.js&quot;</span>;</span><br><span class="line">fs.writeFile(<span class="string">&quot;output.txt&quot;</span>, data, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;ok.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>B、同步写入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="string">&quot;Hello, Node.js&quot;</span>;</span><br><span class="line">fs.writeFileSync(<span class="string">&quot;output.txt&quot;</span>, data);</span><br></pre></td></tr></table></figure><p>(3) 获取文件或目录的详细信息</p><p>A、同步获取</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 获取文件详情</span></span><br><span class="line">fs.stat(<span class="string">&quot;sample.txt&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, stat</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 是否是文件:</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;isFile: &quot;</span> + stat.isFile());</span><br><span class="line">    <span class="comment">// 是否是目录:</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;isDirectory: &quot;</span> + stat.isDirectory());</span><br><span class="line">    <span class="keyword">if</span> (stat.isFile()) &#123;</span><br><span class="line">      <span class="comment">// 文件大小:</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;size: &quot;</span> + stat.size);</span><br><span class="line">      <span class="comment">// 创建时间, Date对象:</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;birth time: &quot;</span> + stat.birthtime);</span><br><span class="line">      <span class="comment">// 修改时间, Date对象:</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;modified time: &quot;</span> + stat.mtime);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>B、异步获取</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.statSync(<span class="string">&quot;sample.txt&quot;</span>, stat);</span><br></pre></td></tr></table></figure><p>ps：在启动和结束时只执行一次的读写程序，可以用同步，其他情况用异步。</p><p>2、stream 模块</p><p>(1) 利用 stream 模块读取文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开一个流:</span></span><br><span class="line"><span class="keyword">const</span> rs = fs.createReadStream(<span class="string">&quot;sample.txt&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">&quot;data&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;DATA:&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(chunk);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">&quot;end&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;END&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;ERROR: &quot;</span> + err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>(2) 利用 stream 模块写入数据</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws1 = fs.createWriteStream(<span class="string">&quot;output1.txt&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">ws1.write(<span class="string">&quot;使用Stream写入文本数据...\n&quot;</span>);</span><br><span class="line">ws1.write(<span class="string">&quot;END.&quot;</span>);</span><br><span class="line">ws1.end();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws2 = fs.createWriteStream(<span class="string">&quot;output2.txt&quot;</span>);</span><br><span class="line">ws2.write(<span class="keyword">new</span> Buffer(<span class="string">&quot;使用Stream写入二进制数据...\n&quot;</span>, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">ws2.write(<span class="keyword">new</span> Buffer(<span class="string">&quot;END.&quot;</span>, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">ws2.end();</span><br></pre></td></tr></table></figure><p>(3) 利用 pipe 串接流</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rs = fs.createReadStream(<span class="string">&quot;sample.txt&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ws = fs.createWriteStream(<span class="string">&quot;copied.txt&quot;</span>, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">ws.write(<span class="string">&quot;写入新数据\n&quot;</span>);</span><br><span class="line">rs.pipe(ws);</span><br></pre></td></tr></table></figure><p>3、http 模块</p><p>(1) 第一个 HTTP 服务器程序</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入http模块:</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建http server，并传入回调函数:</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 回调函数接收request和response对象,</span></span><br><span class="line">  <span class="comment">// 获得HTTP请求的method和url:</span></span><br><span class="line">  <span class="built_in">console</span>.log(request.method + <span class="string">&quot;: &quot;</span> + request.url);</span><br><span class="line">  <span class="comment">// 将HTTP响应200写入response, 同时设置Content-Type: text/html:</span></span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 将HTTP响应的HTML内容写入response:</span></span><br><span class="line">  response.end(<span class="string">&quot;&lt;h1&gt;Hello world!&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让服务器监听8080端口:</span></span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Server is running at http://127.0.0.1:8080/&quot;</span>);</span><br></pre></td></tr></table></figure><p>(2) 文件服务器</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [fs, url, path, http] = [</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>),</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>),</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>),</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从命令行参数获取root目录，默认是当前目录:</span></span><br><span class="line"><span class="keyword">const</span> root = path.resolve(process.argv[<span class="number">2</span>] || <span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Static root dir: &quot;</span> + root);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建服务器:</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获得URL的path，类似 &#x27;/css/bootstrap.css&#x27;:</span></span><br><span class="line">  <span class="keyword">const</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">  <span class="comment">// 获得对应的本地文件路径，类似 &#x27;/srv/www/css/bootstrap.css&#x27;:</span></span><br><span class="line">  <span class="keyword">const</span> filepath = path.join(root, pathname);</span><br><span class="line">  <span class="comment">// 获取文件状态:</span></span><br><span class="line">  fs.stat(filepath, <span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err &amp;&amp; stats.isFile()) &#123;</span><br><span class="line">      <span class="comment">// 没有出错并且文件存在:</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;200 &quot;</span> + request.url);</span><br><span class="line">      <span class="comment">// 发送200响应:</span></span><br><span class="line">      response.writeHead(<span class="number">200</span>);</span><br><span class="line">      <span class="comment">// 将文件流导向response:</span></span><br><span class="line">      fs.createReadStream(filepath).pipe(response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 出错了或者文件不存在:</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;404 &quot;</span> + request.url);</span><br><span class="line">      <span class="comment">// 发送404响应:</span></span><br><span class="line">      response.writeHead(<span class="number">404</span>);</span><br><span class="line">      response.end(<span class="string">&quot;404 Not Found&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Server is running at http://172.16.1.83:8080/&quot;</span>);</span><br></pre></td></tr></table></figure><p>4、crypto 模块</p><p>(1) MD5 和 SHA1 ，每一次生成的都是一样的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hash = crypto.createHash(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可任意多次调用update():</span></span><br><span class="line">hash.update(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">hash.update(<span class="string">&quot;Hello, nodejs!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hash.digest(<span class="string">&quot;hex&quot;</span>));</span><br></pre></td></tr></table></figure><p>(2) Hmac ，根据秘钥改变</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hmac = crypto.createHmac(<span class="string">&quot;sha256&quot;</span>, <span class="string">&quot;secret-key&quot;</span>);</span><br><span class="line"></span><br><span class="line">hmac.update(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">hmac.update(<span class="string">&quot;Hello, nodejs!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hmac.digest(<span class="string">&quot;hex&quot;</span>));</span><br></pre></td></tr></table></figure><p>(3) AES，对称加密，含加解密过程</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aesEncrypt</span>(<span class="params">data, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cipher = crypto.createCipher(<span class="string">&quot;aes192&quot;</span>, key);</span><br><span class="line">  <span class="keyword">var</span> crypted = cipher.update(data, <span class="string">&quot;utf8&quot;</span>, <span class="string">&quot;hex&quot;</span>);</span><br><span class="line">  crypted += cipher.final(<span class="string">&quot;hex&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> crypted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aesDecrypt</span>(<span class="params">encrypted, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> decipher = crypto.createDecipher(<span class="string">&quot;aes192&quot;</span>, key);</span><br><span class="line">  <span class="keyword">var</span> decrypted = decipher.update(encrypted, <span class="string">&quot;hex&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  decrypted += decipher.final(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> decrypted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = <span class="string">&quot;Hello, this is a secret message!&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> key = <span class="string">&quot;Password!&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> encrypted = aesEncrypt(data, key);</span><br><span class="line"><span class="keyword">const</span> decrypted = aesDecrypt(encrypted, key);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Plain text: &quot;</span> + data);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Encrypted text: &quot;</span> + encrypted);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Decrypted text: &quot;</span> + decrypted);</span><br></pre></td></tr></table></figure><p>(3) RSA 非对称加密</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg</title>
      <link href="/2019/08/04/egg/"/>
      <url>/2019/08/04/egg/</url>
      
        <content type="html"><![CDATA[<p>egg 笔记</p><a id="more"></a><h2 id="一、入门"><a href="#一、入门" class="headerlink" title="一、入门"></a>一、入门</h2><h3 id="1、初始化项目"><a href="#1、初始化项目" class="headerlink" title="1、初始化项目"></a>1、初始化项目</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用脚手架初始化项目</span></span><br><span class="line">mkdir egg-example</span><br><span class="line">cd egg-example</span><br><span class="line">npm init egg --type=simple</span><br><span class="line">npm i</span><br><span class="line">yarn dev</span><br></pre></td></tr></table></figure><h3 id="2、-安装并配置模板引擎插件"><a href="#2、-安装并配置模板引擎插件" class="headerlink" title="2、 安装并配置模板引擎插件"></a>2、 安装并配置模板引擎插件</h3><p>(1)、安装：<code>npm i egg-view-nunjucks --save</code></p><p>(2)、开启插件：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/plugin.js</span></span><br><span class="line"><span class="built_in">exports</span>.nunjucks = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">&quot;egg-view-nunjucks&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/config.default.js</span></span><br><span class="line">config.view = &#123;</span><br><span class="line">  defaultViewEngine: <span class="string">&quot;nunjucks&quot;</span>,</span><br><span class="line">  mapping: &#123;</span><br><span class="line">    <span class="string">&quot;.tpl&quot;</span>: <span class="string">&quot;nunjucks&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3、创建模板文件"><a href="#3、创建模板文件" class="headerlink" title="3、创建模板文件"></a>3、创建模板文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app/view/news/list.tpl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hacker News<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/public/css/news.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;news-view view&quot;</span>&gt;</span></span><br><span class="line">      &#123;% for item in list %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; item.url &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4、创建静态资源文件-news-css-到-public-css"><a href="#4、创建静态资源文件-news-css-到-public-css" class="headerlink" title="4、创建静态资源文件 news.css 到 public/css"></a>4、创建静态资源文件 news.css 到 public/css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.link</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">10px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.link</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">136</span>, <span class="number">131</span>, <span class="number">131</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.time</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">136</span>, <span class="number">131</span>, <span class="number">131</span>);</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、添加-Controller-和-Router"><a href="#5、添加-Controller-和-Router" class="headerlink" title="5、添加 Controller 和 Router"></a>5、添加 Controller 和 Router</h3><p>(1)、新建 news.js 到 //app/controller</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/news.js</span></span><br><span class="line"><span class="keyword">const</span> Controller = <span class="built_in">require</span>(<span class="string">&quot;egg&quot;</span>).Controller;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> list() &#123;</span><br><span class="line">    <span class="keyword">const</span> dataList = &#123;</span><br><span class="line">      list: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="number">1</span>,</span><br><span class="line">          title: <span class="string">&quot;this is news 1&quot;</span>,</span><br><span class="line">          url: <span class="string">&quot;/news/1&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: <span class="number">2</span>,</span><br><span class="line">          title: <span class="string">&quot;this is news 2&quot;</span>,</span><br><span class="line">          url: <span class="string">&quot;/news/2&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.ctx.render(<span class="string">&quot;news/list.tpl&quot;</span>, dataList);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = NewsController;</span><br></pre></td></tr></table></figure><p>(2)、router.js 添加语句：<code>router.get(&#39;/news&#39;, controller.news.list);</code></p><p>(3)、查看效果：<code>yarn dev</code> =&gt; 打开 <a href="http://127.0.0.1:7002/news">http://127.0.0.1:7002/news</a></p><h3 id="6、编写业务逻辑-爬取-hacker-news-数据"><a href="#6、编写业务逻辑-爬取-hacker-news-数据" class="headerlink" title="6、编写业务逻辑,爬取 hacker-news 数据"></a>6、编写业务逻辑,爬取 hacker-news 数据</h3><p>(1) 新建目录：// app/service/news.js，这里请求时设置了 proxy，是因为 hacker-news 的 api 被墙了</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">&quot;egg&quot;</span>).Service;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> list(page = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// read config</span></span><br><span class="line">    <span class="keyword">const</span> &#123; serverUrl, pageSize &#125; = <span class="built_in">this</span>.config.news;</span><br><span class="line">    <span class="comment">// use build-in http client to GET hacker-news api</span></span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: idList &#125; = <span class="keyword">await</span> <span class="built_in">this</span>.ctx.curl(</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;serverUrl&#125;</span>/topstories.json`</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        enableProxy: <span class="literal">true</span>,</span><br><span class="line">        proxy: <span class="string">&quot;http://127.0.0.1:1080&quot;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">          orderBy: <span class="string">&#x27;&quot;$key&quot;&#x27;</span>,</span><br><span class="line">          startAt: <span class="string">`&quot;<span class="subst">$&#123;pageSize * (page - <span class="number">1</span>)&#125;</span>&quot;`</span>,</span><br><span class="line">          endAt: <span class="string">`&quot;<span class="subst">$&#123;pageSize * page - <span class="number">1</span>&#125;</span>&quot;`</span></span><br><span class="line">        &#125;,</span><br><span class="line">        dataType: <span class="string">&quot;json&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parallel GET detail</span></span><br><span class="line">    <span class="keyword">const</span> newsList = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">      <span class="built_in">Object</span>.keys(idList).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;serverUrl&#125;</span>/item/<span class="subst">$&#123;idList[key]&#125;</span>.json`</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.ctx.curl(url, &#123;</span><br><span class="line">          enableProxy: <span class="literal">true</span>,</span><br><span class="line">          proxy: <span class="string">&quot;http://127.0.0.1:1080&quot;</span>,</span><br><span class="line">          dataType: <span class="string">&quot;json&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> newsList.map(<span class="function"><span class="params">res</span> =&gt;</span> res.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = NewsService;</span><br></pre></td></tr></table></figure><p>(2) // app/controller/news.js 修改语句</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> list() &#123;</span><br><span class="line">  <span class="keyword">const</span> ctx = <span class="built_in">this</span>.ctx;</span><br><span class="line">  <span class="keyword">const</span> page = ctx.query.page || <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> newsList = <span class="keyword">await</span> ctx.service.news.list(page);</span><br><span class="line">  <span class="keyword">await</span> ctx.render(<span class="string">&#x27;news/list.tpl&#x27;</span>, &#123; <span class="attr">list</span>: newsList &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) // config/config.default.js 添加下面代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.news = &#123;</span><br><span class="line">  pageSize: <span class="number">5</span>,</span><br><span class="line">  serverUrl: <span class="string">&quot;https://hacker-news.firebaseio.com/v0&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="7、编写扩展插件-moment，美化时间"><a href="#7、编写扩展插件-moment，美化时间" class="headerlink" title="7、编写扩展插件 moment，美化时间"></a>7、编写扩展插件 moment，美化时间</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下载 moment 插件</span></span><br><span class="line">npm i moment --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/extend/helper.js</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&quot;moment&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.relativeTime = <span class="function"><span class="params">time</span> =&gt;</span> moment(<span class="keyword">new</span> <span class="built_in">Date</span>(time * <span class="number">1000</span>)).fromNow();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// views/news/list.tpl</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hacker News<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/public/css/news.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;news-view view&quot;</span>&gt;</span></span><br><span class="line">      &#123;% for item in list %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; item.url &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;time&quot;</span>&gt;</span>&#123;&#123; helper.relativeTime(item.time) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8、站点禁止百度爬虫访问"><a href="#8、站点禁止百度爬虫访问" class="headerlink" title="8、站点禁止百度爬虫访问"></a>8、站点禁止百度爬虫访问</h3><p>(1) app/middleware/robot.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="comment">// options === app.config.robot</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">options, app</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">robotMiddleware</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> source = ctx.get(<span class="string">&quot;user-agent&quot;</span>) || <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> match = options.ua.some(<span class="function"><span class="params">ua</span> =&gt;</span> ua.test(source));</span><br><span class="line">    <span class="keyword">if</span> (match) &#123;</span><br><span class="line">      ctx.status = <span class="number">403</span>;</span><br><span class="line">      ctx.message = <span class="string">&quot;Go away, robot.&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>(2) config/config.default.js 添加如下代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add middleware robot</span></span><br><span class="line">config.middleware = [<span class="string">&quot;robot&quot;</span>];</span><br><span class="line"><span class="comment">// robot&#x27;s configurations</span></span><br><span class="line">config.robot = &#123;</span><br><span class="line">  ua: [<span class="regexp">/Baiduspider/i</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="9、单元测试"><a href="#9、单元测试" class="headerlink" title="9、单元测试"></a>9、单元测试</h2><p>(1) // test/app/middleware/robot.test.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; app, mock, assert &#125; = <span class="built_in">require</span>(<span class="string">&quot;egg-mock/bootstrap&quot;</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&quot;test/app/middleware/robot.test.js&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&quot;should block robot&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line">      .httpRequest()</span><br><span class="line">      .get(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">      .set(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;Baiduspider&quot;</span>)</span><br><span class="line">      .expect(<span class="number">403</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>(2) 执行测试脚本 <code>yarn test-local</code></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则</title>
      <link href="/2019/08/04/%E6%AD%A3%E5%88%99/"/>
      <url>/2019/08/04/%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、正则表达式是什么"><a href="#一、正则表达式是什么" class="headerlink" title="一、正则表达式是什么"></a>一、正则表达式是什么</h2><p>正则表达式就是记录文本规则的代码。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配中国的电话号码</span></span><br><span class="line"><span class="number">0</span>\d\d-\d\d\d\d\d\d\d\d</span><br><span class="line"><span class="number">0</span>\d&#123;<span class="number">2</span>&#125;-\d&#123;<span class="number">8</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="二、安装正则测试软件"><a href="#二、安装正则测试软件" class="headerlink" title="二、安装正则测试软件"></a>二、安装正则测试软件</h2><p>地址： <a href="https://deerchao.net/tools/regester/index.htm">https://deerchao.net/tools/regester/index.htm</a></p><h2 id="三、常用元字符"><a href="#三、常用元字符" class="headerlink" title="三、常用元字符"></a>三、常用元字符</h2><div class="table-container"><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线或汉字</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\b</td><td>匹配单词的开始或结束</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配 qq 号，5——12位</span></span><br><span class="line">^\d&#123;<span class="number">5</span>,<span class="number">12</span>&#125;$</span><br></pre></td></tr></table></figure><h2 id="四、字符转义"><a href="#四、字符转义" class="headerlink" title="四、字符转义"></a>四、字符转义</h2><p>常用的需要转义的字符：(\), <em>(\</em>), .(.)</p><h2 id="五、重复"><a href="#五、重复" class="headerlink" title="五、重复"></a>五、重复</h2><p>常用限定符</p><div class="table-container"><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Windows\d+  <span class="comment">//匹配Windows后面的1个或更多数字</span></span><br><span class="line"></span><br><span class="line">^\w+  <span class="comment">//匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)</span></span><br></pre></td></tr></table></figure><h2 id="六、字符类，直接写到中括号-中即可"><a href="#六、字符类，直接写到中括号-中即可" class="headerlink" title="六、字符类，直接写到中括号 [] 中即可"></a>六、字符类，直接写到中括号 [] 中即可</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[aeiou] <span class="comment">//匹配任何一个英文元音字母</span></span><br><span class="line"></span><br><span class="line">[.?!] <span class="comment">//匹配标点符号</span></span><br></pre></td></tr></table></figure><h2 id="七、分枝条件"><a href="#七、分枝条件" class="headerlink" title="七、分枝条件 (|)"></a>七、分枝条件 (|)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>\d&#123;<span class="number">2</span>&#125;-\d&#123;<span class="number">8</span>&#125;|<span class="number">0</span>\d&#123;<span class="number">3</span>&#125;-\d&#123;<span class="number">7</span>&#125;   <span class="comment">//这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)</span></span><br><span class="line"></span><br><span class="line">\(<span class="number">0</span>\d&#123;<span class="number">2</span>&#125;\)[- ]?\d&#123;<span class="number">8</span>&#125;|<span class="number">0</span>\d&#123;<span class="number">2</span>&#125;[- ]?\d&#123;<span class="number">8</span>&#125;   <span class="comment">//匹配3位区号的电话号码</span></span><br><span class="line"></span><br><span class="line">\d&#123;<span class="number">5</span>&#125;-\d&#123;<span class="number">4</span>&#125;|\d&#123;<span class="number">5</span>&#125;   <span class="comment">//匹配美国的邮政编码</span></span><br></pre></td></tr></table></figure><h2 id="八、分组-小括号"><a href="#八、分组-小括号" class="headerlink" title="八、分组 (小括号)"></a>八、分组 (小括号)</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">((<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d|<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">01</span>]?\d\d?)\.)&#123;<span class="number">3</span>&#125;(<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]\d|<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">01</span>]?\d\d?)   <span class="comment">// 匹配一个ip地址</span></span><br></pre></td></tr></table></figure><h2 id="九、反义-（字符串前面加-，元字符变大写）"><a href="#九、反义-（字符串前面加-，元字符变大写）" class="headerlink" title="九、反义 （字符串前面加 ^，元字符变大写）"></a>九、反义 （字符串前面加 ^，元字符变大写）</h2><p>常用的反义代码</p><div class="table-container"><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>\W</td><td>匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\B</td><td>匹配不是单词开头或结束的位置</td></tr><tr><td><sup><a href="#fn_x" id="reffn_x">x</a></sup></td><td>匹配除了x以外的任意字符</td></tr><tr><td><sup><a href="#fn_aeiou" id="reffn_aeiou">aeiou</a></sup></td><td>匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">\S+   <span class="comment">//匹配不包含空白符的字符串</span></span><br><span class="line"></span><br><span class="line">&lt;a[^&gt;]+&gt;    <span class="comment">//匹配用尖括号括起来的以a开头的字符串</span></span><br></pre></td></tr></table></figure><h2 id="十、后向引用"><a href="#十、后向引用" class="headerlink" title="十、后向引用"></a>十、后向引用</h2><p>用于重复搜索前面某个分组匹配的文本</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack</title>
      <link href="/2019/08/04/webpack/"/>
      <url>/2019/08/04/webpack/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1-本地安装"><a href="#1-本地安装" class="headerlink" title="1. 本地安装"></a>1. 本地安装</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># webpack 4+ 版本</span></span><br><span class="line">npm <span class="keyword">install</span> <span class="comment">--save-dev webpack-cli</span></span><br><span class="line">npm <span class="keyword">install</span> <span class="comment">--save-dev webpack</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本</span></span><br><span class="line">npm <span class="keyword">install</span> <span class="comment">--save-dev webpack@&lt;version&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-全局安装（官方不推荐）"><a href="#2-全局安装（官方不推荐）" class="headerlink" title="2. 全局安装（官方不推荐）"></a>2. 全局安装（官方不推荐）</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install --<span class="built_in">global</span> webpack</span><br></pre></td></tr></table></figure><h3 id="3-最新体验版安装"><a href="#3-最新体验版安装" class="headerlink" title="3. 最新体验版安装"></a>3. 最新体验版安装</h3><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install webpack@beta</span><br><span class="line"><span class="built_in">npm</span> install webpack/webpack<span class="comment">#&lt;tagname/branchname&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">webpack</span></span><br></pre></td></tr></table></figure><h2 id="二、入门"><a href="#二、入门" class="headerlink" title="二、入门"></a>二、入门</h2><h3 id="1-项目初始化"><a href="#1-项目初始化" class="headerlink" title="1. 项目初始化"></a>1. 项目初始化</h3><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> webpack-<span class="built_in">demo</span> &amp;&amp; cd webpack-<span class="built_in">demo</span></span><br><span class="line"></span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line">npm install webpack webpack-cli --<span class="built_in">save</span>-dev</span><br></pre></td></tr></table></figure><h3 id="2-初始化源码目录"><a href="#2-初始化源码目录" class="headerlink" title="2. 初始化源码目录"></a>2. 初始化源码目录</h3><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">mkdir src</span><br><span class="line">cd src</span><br><span class="line">new-item index.js</span><br><span class="line">cd ..</span><br><span class="line">mkdir dist</span><br><span class="line">cd dist</span><br><span class="line">new-item index.html</span><br></pre></td></tr></table></figure><h3 id="3-创建配置文件-webpack-config-js"><a href="#3-创建配置文件-webpack-config-js" class="headerlink" title="3. 创建配置文件 webpack.config.js"></a>3. 创建配置文件 webpack.config.js</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = &#123;</span><br><span class="line">  entry: <span class="string">&#x27;./src/index.js&#x27;</span>, <span class="comment">// 入口文件地址</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span>, <span class="comment">// 出口文件名</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>) <span class="comment">// 告诉 webpack 在哪里生成文件</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4-添加npm脚本"><a href="#4-添加npm脚本" class="headerlink" title="4. 添加npm脚本"></a>4. 添加npm脚本</h3><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;webpack-demo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">+     <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">    <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^4.0.1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^2.0.9&quot;</span>,</span><br><span class="line">      <span class="string">&quot;lodash&quot;</span>: <span class="string">&quot;^4.17.5&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="5-开始使用-webpack-打包：npm-run-build"><a href="#5-开始使用-webpack-打包：npm-run-build" class="headerlink" title="5. 开始使用 webpack 打包：npm run build"></a>5. 开始使用 webpack 打包：<code>npm run build</code></h3><blockquote><p>具体事例请参考 example 目录下的 chapterOne</p></blockquote><h2 id="三、静态资源管理"><a href="#三、静态资源管理" class="headerlink" title="三、静态资源管理"></a>三、静态资源管理</h2><h3 id="0-创建静态资源目录-asset"><a href="#0-创建静态资源目录-asset" class="headerlink" title="0. 创建静态资源目录 asset"></a>0. 创建静态资源目录 asset</h3><h3 id="1-css"><a href="#1-css" class="headerlink" title="1. css"></a>1. css</h3><p>(1) 安装对应的 loader： <code>npm install --save-dev style-loader css-loader</code></p><p>(2) 配置 loader：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>(3) 静态资源目录添加 style.css 文件，在入口文件中引用，在打包时， webpack 会把对应的 css 代码插入到 index.html 的 head 中。</p><h3 id="2-图片"><a href="#2-图片" class="headerlink" title="2. 图片"></a>2. 图片</h3><p>(1) 安装对应的 loader： <code>npm install --save-dev file-loader</code></p><p>(2) 配置 loader：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="string">&#x27;file-loader&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) 静态资源目录添加一张图片，在入口文件中引用，打包时， webpack 会生成目标文件夹中的最终 url，并将入口文件中的路径替换为最终路径。</p><h3 id="3-字体"><a href="#3-字体" class="headerlink" title="3. 字体"></a>3. 字体</h3><p>(1) 配置 loader：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">test</span>: /\.(woff|woff2|eot|ttf|otf)$/,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="string">&#x27;file-loader&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 静态资源目录添加字体，在入口文件中引用，打包时， webpack 会生成目标文件夹中的最终 url，并将入口文件中的路径替换为最终路径。</p><h3 id="4-数据（json-lt-默认支持-gt-、xml、csv）"><a href="#4-数据（json-lt-默认支持-gt-、xml、csv）" class="headerlink" title="4. 数据（json&lt;默认支持&gt;、xml、csv）"></a>4. 数据（json&lt;默认支持&gt;、xml、csv）</h3><p>(1) 安装对应的 loader: <code>npm install --save-dev csv-loader xml-loader</code></p><p>(2) 配置 loader：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">test</span>: /\.(csv|tsv)$/,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="string">&#x27;csv-loader&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">test</span>: /\.xml$/,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="string">&#x27;xml-loader&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) 静态资源目录添加对应的数据文件，在入口文件中引用数据文件, 打包之后，对应的数据文件会被处理为 json 格式的数据</p><blockquote><p>具体事例请参考 example 目录下的 chapterTwo</p></blockquote><h2 id="四、输出管理"><a href="#四、输出管理" class="headerlink" title="四、输出管理"></a>四、输出管理</h2><h3 id="0-入口分离"><a href="#0-入口分离" class="headerlink" title="0. 入口分离"></a>0. 入口分离</h3><p>(1) 源码目录中新建 print.js 文件，并在 index.js 中引用对应模块，index.js 中引用对应的包</p><p>(2) webpack 配置修改：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    print: <span class="string">&#x27;./src/print.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1-解决引用重复的问题，每次打包生成新的-html-文件"><a href="#1-解决引用重复的问题，每次打包生成新的-html-文件" class="headerlink" title="1. 解决引用重复的问题，每次打包生成新的 html 文件"></a>1. 解决引用重复的问题，每次打包生成新的 html 文件</h3><p>(1) 设定 HtmlWebpackPlugin</p><p>安装 html-webpack-plugin: <code>npm install --save-dev html-webpack-plugin</code></p><p>(2) 配置 HtmlWebpackPlugin</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    title: <span class="string">&#x27;Output Management&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>(3) 在打包时， HtmlWebpackPlugin 会生成新的 index.html 文件，替换旧的 index.html 文件</p><h3 id="2-删除遗留的多余文件-在每次构建前清理-dist-文件夹"><a href="#2-删除遗留的多余文件-在每次构建前清理-dist-文件夹" class="headerlink" title="2. 删除遗留的多余文件,在每次构建前清理 /dist 文件夹"></a>2. 删除遗留的多余文件,在每次构建前清理 /dist 文件夹</h3><p>(1) 安装插件: <code>npm install clean-webpack-plugin --save-dev</code></p><p>(2) 配置插件:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  CleanWebpackPlugin</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> CleanWebpackPlugin(),</span><br></pre></td></tr></table></figure><blockquote><p>具体事例请参考 example 目录下的 chapterThree</p></blockquote><h2 id="五、开发环境配置"><a href="#五、开发环境配置" class="headerlink" title="五、开发环境配置"></a>五、开发环境配置</h2><h3 id="1-将编译后的代码映射回原始源代码"><a href="#1-将编译后的代码映射回原始源代码" class="headerlink" title="1. 将编译后的代码映射回原始源代码"></a>1. 将编译后的代码映射回原始源代码</h3><p>(1) 配置文件中添加 source map 配置： <code>devtool: &#39;inline-source-map&#39;</code></p><p>(2) 入口文件有错误，控制台返回的错误路径是对应的源路径</p><h3 id="2-自动编译代码"><a href="#2-自动编译代码" class="headerlink" title="2. 自动编译代码"></a>2. 自动编译代码</h3><p>(1) 观察模式：</p><ul><li><p>添加 script 脚本：<code>&quot;watch&quot;: &quot;webpack --watch&quot;</code> </p></li><li><p><code>npm run watch</code>，每次更新入口文件，代码将自动编译，但是每次编译后，需要手动刷新浏览器，页面才会更新</p></li></ul><p>(2) webpack-dev-server（一个简单的web服务器，可以实时重新加载页面）（官方推荐使用）</p><ul><li><p>安装： <code>npm install --save-dev webpack-dev-server</code></p></li><li><p>修改配置文件：告知 webpack-dev-server 在哪里查找文件</p></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">devServer</span>: &#123;</span><br><span class="line">  <span class="attribute">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加 script 脚本</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&quot;<span class="keyword">start</span><span class="string">&quot;: &quot;</span>webpack-dev-<span class="keyword">server</span> <span class="comment">--open&quot;,</span></span><br></pre></td></tr></table></figure><ul><li>修改源文件，web 服务器就会自动重新加载编译后的代码</li></ul><p>(3) webpack-dev-middleware（模块热替换），把 webpack 处理后的文件传递给一个服务器(server)</p><ul><li><p>安装 express 和 webpack-dev-middleware： <code>npm install --save-dev express webpack-dev-middleware</code></p></li><li><p>配置文件中 output 添加  publicPat 选项： <code>publicPath: &#39;/&#39;</code></p></li><li><p>自定义一个 express 服务，添加 server.js 文件，内容如下：</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">&#x27;webpack-dev-middleware&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell express to use the webpack-dev-middleware and use the webpack.config.js</span></span><br><span class="line"><span class="comment">// configuration file as a base.</span></span><br><span class="line">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class="line">  publicPath: config.output.publicPath</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Serve the files on port 3000.</span></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Example app listening on port 3000!\n&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>添加 npm script： <code>&quot;server&quot;: &quot;node server.js&quot;,</code></p></li><li><p>执行 <code>npm run server</code>， 打开 <a href="http://localhost:3000/">http://localhost:3000/</a> 即是项目地址</p></li></ul><blockquote><p>具体事例请参考 example 目录下的 chapterFour</p></blockquote><h2 id="六、模块热替换"><a href="#六、模块热替换" class="headerlink" title="六、模块热替换"></a>六、模块热替换</h2><h3 id="1-添加-webpack-自带的插件-NamedModulesPlugin-和-HotModuleReplacementPlugin"><a href="#1-添加-webpack-自带的插件-NamedModulesPlugin-和-HotModuleReplacementPlugin" class="headerlink" title="1. 添加 webpack 自带的插件 NamedModulesPlugin 和 HotModuleReplacementPlugin"></a>1. 添加 webpack 自带的插件 NamedModulesPlugin 和 HotModuleReplacementPlugin</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">const webpack = require(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="attr">devServer:</span> &#123;</span><br><span class="line">  <span class="symbol">contentBase:</span> <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">  <span class="symbol">hot:</span> <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">plugins:</span> [</span><br><span class="line">  <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">  <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="2-修改-index-js-文件，监听该文件所引用的外部文件的更新状况"><a href="#2-修改-index-js-文件，监听该文件所引用的外部文件的更新状况" class="headerlink" title="2. 修改 index.js 文件，监听该文件所引用的外部文件的更新状况"></a>2. 修改 index.js 文件，监听该文件所引用的外部文件的更新状况</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">&#x27;./print.js&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Accepting the updated printMe module!&#x27;</span>);</span><br><span class="line">    printMe();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-css-等静态资源加载了相应的-loader，会自动更新"><a href="#3-css-等静态资源加载了相应的-loader，会自动更新" class="headerlink" title="3. css 等静态资源加载了相应的 loader，会自动更新"></a>3. css 等静态资源加载了相应的 loader，会自动更新</h3><h3 id="4-其他热更新-loader-或插件"><a href="#4-其他热更新-loader-或插件" class="headerlink" title="4.其他热更新 loader 或插件"></a>4.其他热更新 loader 或插件</h3><ul><li><p>React Hot Loader：实时调整 react 组件。</p></li><li><p>Vue Loader：此 loader 支持用于 vue 组件的 HMR，提供开箱即用体验。</p></li><li><p>Elm Hot Loader：支持用于 Elm 程序语言的 HMR。</p></li><li><p>Redux HMR：无需 loader 或插件！只需对 main store 文件进行简单的修改。</p></li><li><p>Angular HMR：没有必要使用 loader！只需对主要的 NgModule 文件进行简单的修改，由 HMR API 完全控制。</p></li></ul><h2 id="七、输出优化"><a href="#七、输出优化" class="headerlink" title="七、输出优化"></a>七、输出优化</h2><h3 id="1-移除-JavaScript-上下文中的未引用代码-dead-code"><a href="#1-移除-JavaScript-上下文中的未引用代码-dead-code" class="headerlink" title="1. 移除 JavaScript 上下文中的未引用代码(dead-code)"></a>1. 移除 JavaScript 上下文中的未引用代码(dead-code)</h3><p>package.json 文件设置 sideEffects 属性 </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;sideEffects&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;./src/some-side-effectful-file.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;*.css&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-压缩输出，设置编译模式为-production"><a href="#2-压缩输出，设置编译模式为-production" class="headerlink" title="2.压缩输出，设置编译模式为 production"></a>2.压缩输出，设置编译模式为 production</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mode: <span class="string">&quot;production&quot;</span></span><br></pre></td></tr></table></figure><h2 id="八、生产环境构建"><a href="#八、生产环境构建" class="headerlink" title="八、生产环境构建"></a>八、生产环境构建</h2><h3 id="1-构建目标比较"><a href="#1-构建目标比较" class="headerlink" title="1.构建目标比较"></a>1.构建目标比较</h3><p><strong>生产环境构建目标：</strong> 更小的 bundle、更轻量的 source map、更优化的资源、更短的加载时间</p><p><strong>开发环境构建目标：</strong> 强大的 source map 和具有热模块替换能力的 localhost server</p><h3 id="2-针对不同环境配置-webpack"><a href="#2-针对不同环境配置-webpack" class="headerlink" title="2.针对不同环境配置 webpack"></a>2.针对不同环境配置 webpack</h3><p>(1) 安装 webpack-merge：<code>npm install --save-dev webpack-merge</code></p><p>(2) 针对不同的环境创建对应的配置文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.common.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  CleanWebpackPlugin</span><br><span class="line">&#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      title: <span class="string">&#x27;Production&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;file-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;file-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(csv|tsv)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;csv-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.xml$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;xml-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.dev.js</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  devtool: <span class="string">&#x27;inline-source-map&#x27;</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.prod.js</span></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> UglifyJSPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> UglifyJSPlugin(&#123;<span class="attr">sourceMap</span>: <span class="literal">true</span>&#125;) <span class="comment">// 不支持 es6 语法的压缩</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>(3) 修改 NPM Script</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;start&quot;</span>: <span class="string">&quot;webpack-dev-server --open --config webpack.dev.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack.prod.js&quot;</span></span><br></pre></td></tr></table></figure><h2 id="九、代码分离"><a href="#九、代码分离" class="headerlink" title="九、代码分离"></a>九、代码分离</h2><h3 id="1-针对多个文件指定对应的入口"><a href="#1-针对多个文件指定对应的入口" class="headerlink" title="1.针对多个文件指定对应的入口"></a>1.针对多个文件指定对应的入口</h3><h3 id="2-把多个地方引用的代码分离到一个文件中，防止重复引用"><a href="#2-把多个地方引用的代码分离到一个文件中，防止重复引用" class="headerlink" title="2.把多个地方引用的代码分离到一个文件中，防止重复引用"></a>2.把多个地方引用的代码分离到一个文件中，防止重复引用</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">  runtimeChunk: &#123;</span><br><span class="line">    name: <span class="string">&quot;manifest&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  splitChunks: &#123;</span><br><span class="line">    cacheGroups: &#123;</span><br><span class="line">      commons: &#123;</span><br><span class="line">        test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">        name: <span class="string">&quot;vendor&quot;</span>,</span><br><span class="line">        chunks: <span class="string">&quot;all&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-动态导入"><a href="#3-动态导入" class="headerlink" title="3.动态导入"></a>3.动态导入</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// output 添加 chunkFilename 字段</span></span><br><span class="line">chunkFilename: <span class="string">&#x27;[name].bundle.js&#x27;</span>,</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js 动态引入库，编译之后可以看到对应的 loadash-chunk</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  element.innerHTML = _.join([<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;webpack&#x27;</span>], <span class="string">&#x27; &#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line">getComponent().then(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(component);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+travis自动构建vue项目到gitpage</title>
      <link href="/2019/08/04/github-travis%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E5%88%B0gitpage/"/>
      <url>/2019/08/04/github-travis%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BAvue%E9%A1%B9%E7%9B%AE%E5%88%B0gitpage/</url>
      
        <content type="html"><![CDATA[<p>github + travis 自动构建 vue 项目到 gitpage</p><a id="more"></a><h3 id="一、设置-vue-config-js，my-project-对应的是-github-上的项目名称"><a href="#一、设置-vue-config-js，my-project-对应的是-github-上的项目名称" class="headerlink" title="一、设置 vue.config.js，my-project 对应的是 github 上的项目名称"></a>一、设置 vue.config.js，my-project 对应的是 github 上的项目名称</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: process.env.NODE_ENV === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;/my-project/&quot;</span> : <span class="string">&quot;/&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二、创建脚本文件-deploy-sh"><a href="#二、创建脚本文件-deploy-sh" class="headerlink" title="二、创建脚本文件 deploy.sh"></a>二、创建脚本文件 deploy.sh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># abort on errors</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># build</span></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># navigate into the build output directory</span></span><br><span class="line"><span class="built_in">cd</span> dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># if you are deploying to a custom domain</span></span><br><span class="line"><span class="comment"># echo &#x27;www.example.com&#x27; &gt; CNAME</span></span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&#x27;deploy&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if you are deploying to https://&lt;USERNAME&gt;.github.io</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if you are deploying to https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行： .\deploy.sh args</span></span><br></pre></td></tr></table></figure><h3 id="三、配置-travis，这方面的文章很多，自行搜索即可"><a href="#三、配置-travis，这方面的文章很多，自行搜索即可" class="headerlink" title="三、配置 travis，这方面的文章很多，自行搜索即可"></a>三、配置 travis，这方面的文章很多，自行搜索即可</h3><h3 id="四、创建-traivs-yml-文件"><a href="#四、创建-traivs-yml-文件" class="headerlink" title="四、创建 .traivs.yml 文件"></a>四、创建 .traivs.yml 文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;node&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span> <span class="string">npm</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"> <span class="attr">provider:</span> <span class="string">pages</span></span><br><span class="line"> <span class="attr">skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">github_token:</span> <span class="string">$GH_TOKEN</span></span><br><span class="line"> <span class="attr">local_dir:</span> <span class="string">dist</span></span><br><span class="line"> <span class="attr">on:</span></span><br><span class="line">   <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="五、上传项目代码到-GitHub"><a href="#五、上传项目代码到-GitHub" class="headerlink" title="五、上传项目代码到 GitHub"></a>五、上传项目代码到 GitHub</h3>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ci </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四个JS小技巧</title>
      <link href="/2019/07/16/%E5%9B%9B%E4%B8%AAJS%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/07/16/%E5%9B%9B%E4%B8%AAJS%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="一、尽早结束"><a href="#一、尽早结束" class="headerlink" title="一、尽早结束"></a>一、尽早结束</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformData</span>(<span class="params">rawData</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// check if no data</span></span><br><span class="line">  <span class="keyword">if</span> (!rawData) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// check for specific case</span></span><br><span class="line">  <span class="keyword">if</span> (rawData.length == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// actual function code goes here</span></span><br><span class="line">  <span class="keyword">return</span> rawData.map(<span class="function"><span class="params">item</span> =&gt;</span> item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法的好处：</p><ul><li>考虑到了无效值和边界的情况，并且很好的规避了它们</li><li>代码简洁</li><li>后期维护起来比较方便</li><li>一旦接受了这种代码风格，你会更加重视发挥函数的作用并且对代码至上而下的执行过程会更加明了</li></ul><h2 id="二、使用对象而不是-switch"><a href="#二、使用对象而不是-switch" class="headerlink" title="二、使用对象而不是 switch"></a>二、使用对象而不是 switch</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Switch</span></span><br><span class="line"><span class="keyword">let</span> createType = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">switch</span> (contentType) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;post&#x27;</span>:</span><br><span class="line">    createType = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;creating a post...&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;video&#x27;</span>:</span><br><span class="line">    createType = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;creating a video...&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    createType = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;unrecognized content type&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createType();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object literal</span></span><br><span class="line"><span class="keyword">const</span> contentTypes = &#123;</span><br><span class="line">  post: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;creating a post...&#x27;</span>),</span><br><span class="line">  video: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;creatinga  video...&#x27;</span>),</span><br><span class="line">  <span class="keyword">default</span>: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;unrecognized content type&#x27;</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createType = contentTypes[contentType] || contentTypes[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">createType();</span><br></pre></td></tr></table></figure><p>这种写法的好处：</p><ul><li>不必担心没写 case 或者 break</li><li>简洁易懂</li><li>对象比 switch 代码块容易写</li><li>代码量更少</li></ul><h2 id="三、语义化变量，而不是使用-x-y-z-这些变量"><a href="#三、语义化变量，而不是使用-x-y-z-这些变量" class="headerlink" title="三、语义化变量，而不是使用 x, y, z 这些变量"></a>三、语义化变量，而不是使用 x, y, z 这些变量</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = y &amp;&amp; z;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> isPostEnabled = isPost &amp;&amp; postDateValid;</span><br></pre></td></tr></table></figure><h2 id="四、-尽量使用三元表达式代替简单的-if········else······"><a href="#四、-尽量使用三元表达式代替简单的-if········else······" class="headerlink" title="四、 尽量使用三元表达式代替简单的 if········else······"></a>四、 尽量使用三元表达式代替简单的 if········else······</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (conditionA) &#123;</span><br><span class="line">  <span class="keyword">if</span> (conditionB) &#123;</span><br><span class="line">    result = <span class="string">&#x27;A &amp; B&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  result = <span class="string">&#x27;Not A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = !conditionA ? <span class="string">&#x27;Not A&#x27;</span> : conditionB ? <span class="string">&#x27;A &amp; B&#x27;</span> : <span class="string">&#x27;A&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组、对象的深拷贝</title>
      <link href="/2019/06/30/%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2019/06/30/%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="数组的深拷贝"><a href="#数组的深拷贝" class="headerlink" title="数组的深拷贝"></a>数组的深拷贝</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyObjectArray</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...JSON.parse(<span class="built_in">JSON</span>.stringify(x))];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// example 1</span></span><br><span class="line"><span class="keyword">const</span> test = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&#x27;Amy&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> test1 = copyObjectArray(test);</span><br><span class="line">test1[<span class="number">0</span>].name = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test, test1);</span><br><span class="line"><span class="comment">// test: [ &#123; name: &#x27;Amy&#x27;, age: 18 &#125; ] test1: [ &#123; name: &#x27;Jack&#x27;, age: 18 &#125; ]</span></span><br></pre></td></tr></table></figure><h2 id="对象的深拷贝"><a href="#对象的深拷贝" class="headerlink" title="对象的深拷贝"></a>对象的深拷贝</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyObject</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...JSON.parse(<span class="built_in">JSON</span>.stringify(x)),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// example 2</span></span><br><span class="line"><span class="keyword">const</span> test2 = &#123;</span><br><span class="line">  name: [<span class="string">&#x27;jack&#x27;</span>, <span class="string">&#x27;sarah&#x27;</span>, <span class="string">&#x27;ray&#x27;</span>],</span><br><span class="line">&#125;;</span><br><span class="line">test3 = copyObject(test2);</span><br><span class="line">test3.name[<span class="number">0</span>] = <span class="string">&#x27;小红&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(test2, test3);</span><br><span class="line"><span class="comment">// test2: &#123; name: [ &#x27;jack&#x27;, &#x27;sarah&#x27;, &#x27;ray&#x27; ] &#125; test3：&#123; name: [ &#x27;小红&#x27;, &#x27;sarah&#x27;, &#x27;ray&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象属性值监听</title>
      <link href="/2019/06/30/%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9B%91%E5%90%AC/"/>
      <url>/2019/06/30/%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9B%91%E5%90%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  title: <span class="string">&#x27;hello world!&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">definePropertyData</span>(<span class="params">obj, prop, value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, prop, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      value = newValue;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">definePropertyData(data, <span class="string">&#x27;title&#x27;</span>, data.title);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.title); <span class="comment">// 111 hello world!</span></span><br><span class="line">data.title = <span class="number">38</span>;</span><br><span class="line"><span class="built_in">console</span>.log(data.title); <span class="comment">// 111 38</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码优化</title>
      <link href="/2019/06/30/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
      <url>/2019/06/30/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="用-vue-进行前端开发，怎么做到函数式编程呢？"><a href="#用-vue-进行前端开发，怎么做到函数式编程呢？" class="headerlink" title="用 vue 进行前端开发，怎么做到函数式编程呢？"></a>用 vue 进行前端开发，怎么做到函数式编程呢？</h2><p>每次做完项目，都会发现自己在代码的解耦，接口的封装方面做的还不够，后期必定会多次进行优化，在优化的过程中，就想到，如何把零散的代码，编程整体性更强的代码，使人一看到就知道手脚在哪里。在这里我的总结是，按功能点进行函数的封装，一个大点是一个函数，这个大点里面又有很多小点，可以把函数赋值给变量，进行使用，这样就不用每次都跳来跳去了，维护起来也更方便快捷。</p><p>vue-cli3 中静态文件怎么处理？<br>用 vue-cli2 的人习惯把静态文件放 static 或者 asset 里，放 asset 里，会被打包，不推荐，但是 vue-cli3 没有 static 文件，怎么办呢？我的答案是，放在 public 目录下，因为这个文件是不会被打包压缩的，一定程度上可以提高编译效率</p><h2 id="代码抽离"><a href="#代码抽离" class="headerlink" title="代码抽离"></a>代码抽离</h2><p>把通用功能抽离到 utils 目录，把通用 api 进行二次封装，放到 api 文件里，以 export 的方式导出，需要的时候再引入，会使代码看起来简洁很多，也简化了对应页面的代码量，维护起来更是得心应手了，至于性能方面，对首屏加载速度还是有一定提高效果的。</p><p>组件抽离，核心思想，只抽离 ui，业务逻辑还是在引用处</p><p>多个 vue 组件引用同一个组件，且相似度高的，用 render 进行合并，并更新数据</p><h2 id="html"><a href="#html" class="headerlink" title="html"></a>html</h2><p>尽量的减少页面的节点，可以优化网页的加载速度，所以应该考虑的思路是以最少的节点，写最多的页面。同时避免过多的操作 DOM，尽量以数据驱动页面。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间戳转日期</title>
      <link href="/2019/06/30/%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%97%A5%E6%9C%9F/"/>
      <url>/2019/06/30/%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%97%A5%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeStampFormat</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(+x * <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">const</span> [m, d] = [date.getMonth() + <span class="number">1</span>, date.getDate()];</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> day = timeStampFormat(<span class="number">1560751917</span>);</span><br><span class="line"><span class="built_in">console</span>.log(day);</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>因为 js 的时间是按毫秒算的，这里要转成秒，所以要乘以一个 1000，之后就可以调用 js 内置对象中的 Date 获取对应的日期了，年份及其他，类似。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3 动画 vs Js 动画</title>
      <link href="/2019/05/19/css3%E5%8A%A8%E7%94%BB-vs-js%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/05/19/css3%E5%8A%A8%E7%94%BB-vs-js%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<p>之前被问到过，css3 动画与 js 动画孰优孰劣，脑袋的第一反应就是性能上肯定 css3 动画会好很多，但别人说不对，我就在想，不对？难道还有别的原因吗？答案是肯定的。先来看看二者实现动画的原理吧。</p><a id="more"></a><h2 id="css3-动画原理"><a href="#css3-动画原理" class="headerlink" title="css3 动画原理"></a>css3 动画原理</h2><p>css3 动画本质上是一直视觉上的动画，并未去触碰 DOM，换句话说，用 css3 实现的动画，原来的 DOM 的位置是不曾被改变的。</p><h2 id="js-动画原理"><a href="#js-动画原理" class="headerlink" title="js 动画原理"></a>js 动画原理</h2><p>js 动画是通过控制 DOM 的位置，来达到动的效果，是 DOM 一点点位移的结果，每一次的位移都要等待上一次的位移结束，而且因为频繁的操作 DOM，会带来频繁的重绘，所以会出现卡顿的现象。</p><h2 id="孰优孰劣？"><a href="#孰优孰劣？" class="headerlink" title="孰优孰劣？"></a>孰优孰劣？</h2><p>通过上面的分析，我们知道 css3 相比 js 实现的动画，会更流畅。我们还知道，过多的 js 脚本，页面的加载速度会受到影响，所以这在一定程度上肯定会影响到页面的性能。因此，推荐使用 css3 动画，而不建议使用 js 动画。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滚动翻页</title>
      <link href="/2019/04/15/%E6%BB%9A%E5%8A%A8%E7%BF%BB%E9%A1%B5/"/>
      <url>/2019/04/15/%E6%BB%9A%E5%8A%A8%E7%BF%BB%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<h5 id="一、-功能描述"><a href="#一、-功能描述" class="headerlink" title="一、 功能描述"></a>一、 功能描述</h5><p>有一个 list，长度不确定，显示区域只能容纳四条数据，往下滚动显示当前四条数据的前四条，往下滚动则显示当前数据的后四条。除了滚动切换数据之外，还能通过上下翻页键切换数据，切换数据的交互需要跟滚动效果一样。</p><h5 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h5><p>说到分页，首先想到的肯定是切割 list，因为只能容纳四条数据，就把 list 切割成 4 条每组的多个 list，每次只需要显示相应的子 list 就行了。因为要有滚动的交互效果，所以考虑的 html 结构是父级元素滚动，超出部分隐藏，子元素由多个 list 组成的块构成相应的 dom。既然是滚动翻页，肯定不希望出现滚动条，所以要考虑不同浏览器隐藏滚动条的方案。</p><h5 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h5><p><strong>html 结构：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;audioContainer&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;`$&#123;baseUrl&#125;img/last.png`&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;lastPageShow&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;jump(0)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;audioWrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;audioGroup&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, num) in audioGroupPage&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;num&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in audioGroup.slice(4*num, 4*(num+1))&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;spellAudio&#x27;, item.tone, item.letter)&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ruby</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">ruby</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;`$&#123;baseUrl&#125;img/next.png`&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;nextPageShow&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;jump(1)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>功能函数：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    <span class="comment">// 监听 list 的长度，如果超出可容纳数据的长度，显示下一页按钮</span></span><br><span class="line">    audioGroup(val) &#123;</span><br><span class="line">      val.length &gt; <span class="number">4</span> ? (<span class="built_in">this</span>.nextPageShow = <span class="literal">true</span>) : (<span class="built_in">this</span>.nextPageShow = <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    top(val) &#123;</span><br><span class="line">      <span class="comment">// 监听滚动的高度，如果小于 0，则上一页按钮隐藏</span></span><br><span class="line">      <span class="keyword">if</span> (val &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.lastPageShow = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 监听滚动的高度，如果大于所有 list 子元素构成的dom的高度，则下一页按钮隐藏，否则显示</span></span><br><span class="line">      <span class="keyword">if</span> (val &gt;= (<span class="built_in">Math</span>.ceil(<span class="built_in">this</span>.audioGroup.length / <span class="number">4</span>) - <span class="number">1</span>) * <span class="number">204</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.nextPageShow = <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nextPageShow = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// list 分页</span></span><br><span class="line">    audioGroupPage() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(<span class="built_in">this</span>.audioGroup.length / <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 上下翻页</span></span><br><span class="line">    jump(val) &#123;</span><br><span class="line">      <span class="keyword">const</span> el = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;audioWrap&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (val) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">          <span class="built_in">this</span>.lastPageShow = <span class="literal">true</span>;</span><br><span class="line">          el.top = el.scrollTop + <span class="number">204</span></span><br><span class="line">          <span class="built_in">this</span>.top = el.scrollTop + <span class="number">204</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">          el.top = el.scrollTop - <span class="number">204</span>;</span><br><span class="line">          <span class="built_in">this</span>.top = el.scrollTop - <span class="number">204</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h5><p>实现了之后肯定很丑，因为有滚动条，如何隐藏呢？如下:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* webkit 内核浏览器 */</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* firfox浏览器 */</span></span><br><span class="line"><span class="selector-class">.audioWrap</span> &#123;</span><br><span class="line">  <span class="attribute">scrollbar-width</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语学习笔记</title>
      <link href="/2019/03/31/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/31/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、日语关于介绍的基本句型"><a href="#一、日语关于介绍的基本句型" class="headerlink" title="一、日语关于介绍的基本句型"></a>一、日语关于介绍的基本句型</h3><ol><li><p>n + は + n + です　<strong>……是……</strong></p></li><li><p>n + は + n + じや　あぃません <strong>……不是……</strong></p></li><li><p>n + は + n + ですか <strong>……是……吗？</strong></p></li><li><p>n + の + n <strong>…的….</strong></p></li><li><p>n + も + n + です <strong>….也是…..</strong></p></li><li><p>n + は + n + 歳です <strong>….岁</strong></p></li><li><p>n + から 来まぃた <strong>来自….(国家、地区)</strong></p></li><li><p>どうぞ　よるしく　お願いします <strong>请多多指教</strong></p></li><li><p>お名前は？ <strong>你的名字叫什么</strong></p></li><li><p>こちらは + n + さんです <strong>这是…</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KNN算法</title>
      <link href="/2019/03/30/KNN%E7%AE%97%E6%B3%95/"/>
      <url>/2019/03/30/KNN%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="KNN-算法是做什么的"><a href="#KNN-算法是做什么的" class="headerlink" title="KNN 算法是做什么的"></a>KNN 算法是做什么的</h2><p>KNN 算法， 即 K 最邻近算法，通过对比与临近事物的相似度，可以对具有特征的事物进行分类，也可以根据这些分类，预测下一步的结果。</p><h2 id="KNN-算法步骤"><a href="#KNN-算法步骤" class="headerlink" title="KNN 算法步骤"></a>KNN 算法步骤</h2><p>KNN 算法主要分为三步：</p><h3 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h3><p>找出邻近值，这个邻近值 k 可以是任意数，1， 1000 甚至 10000 都可以。</p><h3 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h3><p>用毕达哥拉斯公式算出该对象与邻近值的相似度（该对象与邻近值得距离），并将该对象归到相似度最高的那一个近邻类里。</p><h3 id="三、回归"><a href="#三、回归" class="headerlink" title="三、回归"></a>三、回归</h3><p>重新找到该对象的近邻，算出这些近邻各特征的平均值，形成新的特征组合，即新的对象，这个对象就是预估的结果，也就是通常所说的预测值。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="KNN-算法的实现"><a href="#KNN-算法的实现" class="headerlink" title="KNN 算法的实现"></a>KNN 算法的实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 已知所有特征集合，第一个特征为颜色，第二个特征为所属类别</span></span><br><span class="line">L = &#123;<span class="string">&#x27;orange&#x27;</span> : [<span class="number">1</span>, <span class="number">0</span>], <span class="string">&#x27;apple&#x27;</span>: [<span class="number">2</span>, <span class="number">0</span>], <span class="string">&#x27;flower&#x27;</span>: [<span class="number">1</span>, <span class="number">1</span>], <span class="string">&#x27;fish&#x27;</span>: [<span class="number">5</span>, <span class="number">5</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 未知物体</span></span><br><span class="line">test = [<span class="number">1.1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="comment"># 所有的相似度集合</span></span><br><span class="line">results = []</span><br><span class="line"><span class="comment"># 已知所有水果的集合</span></span><br><span class="line">items = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> L:</span><br><span class="line">    x = L[item][<span class="number">0</span>] - test[<span class="number">0</span>]</span><br><span class="line">    y = L[item][<span class="number">1</span>] - test[<span class="number">1</span>]</span><br><span class="line">    instance = x ** <span class="number">2</span> + y ** <span class="number">2</span></span><br><span class="line">    results.append(instance ** <span class="number">0.5</span>)</span><br><span class="line">    items.append(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大相似度</span></span><br><span class="line">minValue = min(results)</span><br><span class="line"><span class="comment"># 物体名称</span></span><br><span class="line">result = items[results.index(minValue)]</span><br><span class="line"></span><br><span class="line">print(minValue, result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Table-Cell等分</title>
      <link href="/2019/03/20/table-cell%E7%AD%89%E5%88%86/"/>
      <url>/2019/03/20/table-cell%E7%AD%89%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>table 里面的元素等分，是经常遇到的需求，一般都会想所有宽度设为相同的应该就等分了，但是然并卵，今天就遇到了这种坑，就算设了宽度一致，还是没有等分，场景是这样的，一个 tr 里面第一个 th 的宽度跟其他不一样，table 宽度为 100%，最后实现等分的方法如下：</p><a id="more"></a><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="selector-tag">table</span>-layout: fixed;</span><br><span class="line">  <span class="selector-tag">th</span>,</span><br><span class="line">  <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#d9d9d9</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f7f9fa</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">display</span>: table-cell;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的例子不难看出，实现等分的秘诀就在于设置了 <code>display: table; table-layout: fixed;</code> 和 <code>display: table-cell; width: 2%;</code></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux后台执行脚本</title>
      <link href="/2019/03/20/linux%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/03/20/linux%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>最近在弄自己的 OA 系统，需要把 api 处理脚本部署到 linux 服务器上，在配置好环境，在服务器上成功运行代码后，发现一个问题，当我退出命令窗口时，程序就没在执行了，这没有达到永久可以连接 api 的目的，google 了一下之后，了解到要让程序永久运行，可以让程序在后台执行，主要的方法有 nohub、screen、开机启动等，其中 nohub 在关闭命令窗口之时，会关掉程序，去除，开机启动要修改系统配置，个人不太喜欢用这种方法，剩下 screen 了，它是可以让不同的程序在不同的命令窗口中执行，有屏幕分离的模式，会给每个屏幕创建不同的进程，只要不杀死进程，即使离开当前命令窗口，也不会停止程序的运行，所以使用 screen 是最好的方案了。</p><a id="more"></a><p>screen 的用法：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建并跳转到一个窗口</span></span><br><span class="line">screen -S name</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行程序</span></span><br><span class="line">python test.py</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出当前窗口</span></span><br><span class="line">ctrl a d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拼音学习项目笔记</title>
      <link href="/2019/03/19/%E6%8B%BC%E9%9F%B3%E5%AD%A6%E4%B9%A0%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/03/19/%E6%8B%BC%E9%9F%B3%E5%AD%A6%E4%B9%A0%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<ol><li><p>关于数据更新机制</p><p>（1）v-if 关闭组件的时候，会销毁数据，可以用于实现返回父组件关闭音频等媒体，如果只是界面的开关的话，用 v-show 即可</p><p>（2）离开子组件后，父组件所传递的数据需要清空，切记不要在网络请求里做清空操作，因为网络请求是有延迟的，一般放在打开子组件的事件里执行清空操作</p></li><li><p>关于 audio</p><p>对于不同格式的音频，audio 的播放机制不一样，对于 base64 等流媒体，audio 采用边下边播的机制，对于 MP3 等非流媒体，audio 采用下载完之后再播放的机制，所以为了播放效果更好，防止出现等待状况，最好把音频转换为流媒体的形式，下面是我写的一个 MP3 转 base64 的示例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mp3ToBase64(url) &#123;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="built_in">document</span>.getElementById(<span class="string">&quot;voiceM&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> temp = &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot; audio/mpeg3&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    responseType: <span class="string">&quot;arraybuffer&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  http.get(url, <span class="string">&quot;&quot;</span>, temp).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> val = <span class="keyword">new</span> Buffer(res.data, <span class="string">&quot;binary&quot;</span>).toString(<span class="string">&quot;base64&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> audioUrl = <span class="string">`data:<span class="subst">$&#123;res.headers[</span></span></span><br><span class="line"><span class="string"><span class="subst">      <span class="string">&quot;content-type&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="subst">    ].toLowerCase()&#125;</span>;base64,<span class="subst">$&#123;val&#125;</span>`</span>;</span><br><span class="line">    el.src = audioUrl;</span><br><span class="line">    el.play();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分页算法</title>
      <link href="/2019/03/18/%E5%88%86%E9%A1%B5%E7%AE%97%E6%B3%95/"/>
      <url>/2019/03/18/%E5%88%86%E9%A1%B5%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>分页是一种比较常见的功能，分页的原理其实也很简单，首先要知道没有需要展示的项目数量 pageSize，然后还得知道当前所在的页数 currentPage, 设所有的 item 都在一个数组 array 里，每页需要展示 5 个 item，那么当 currentPage = 1 时，第一页要展示的所有 item 为 array.slice(0, 4), 第二页要展示的 item 为 array.slice(5, 9), 以此类推，那么第 n（n &gt;= 0) 页需要展示的 item 应该为：array.slice(5n, 5n+4)，推而广之，基本数字的分页公式就出来了：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">currentArray = array.slice(pageSize * (currentPage - <span class="number">1</span>), pageSize * <span class="number">2</span>(currentPage - <span class="number">1</span>) - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>除了基本的数字分页，我们还经常看到上一页，下一页，这种怎么实现呢？上一页就是 currentPage - 1， 那么下一页就是 currentPage + 1，吧这两个分别带入上述公式，我们就得到了上一页，下一页的公式了：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上一页</span></span><br><span class="line">currentArray = array.slice(pageSize * (currentPage - <span class="number">2</span>), pageSize * <span class="number">2</span>(currentPage - <span class="number">2</span>) <span class="number">-1</span>)</span><br><span class="line"><span class="comment">// 下一页</span></span><br><span class="line">currentArray = array.slice(pageSize * currentPage, pageSize * <span class="number">2</span>currentPage <span class="number">-1</span>)</span><br></pre></td></tr></table></figure><p>分页中还常常看到跳转页面的功能，所要跳转的数字就是我们选择的页数，因此跟第一种同理，用第一个公式即可。</p><p>除此之外，在选择下一页的时候，页面的数字组合会往右偏移，选择上一页的时候，页面的数字组合往左偏移，实现的方法也很简单</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设当前页面数字组合为数组 nums，</span></span><br><span class="line"><span class="comment">// nums 初始化为 [1, 2, 3, 4, 5]，</span></span><br><span class="line"><span class="comment">// 那么选择上一页时，</span></span><br><span class="line">nums = nums.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item++;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 选择下一页时</span></span><br><span class="line">nums = nums.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item--;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实现了上面的页面数字组合更新之后，还有一个问题，当点击最后一页，和最开始一页时，页面数字组合应该是不被更新的，优化一下上面的算法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设当前页面数字组合为数组 nums，</span></span><br><span class="line"><span class="comment">// nums 初始化为 [1, 2, 3, 4, 5]，</span></span><br><span class="line"><span class="comment">// 那么选择上一页时，</span></span><br><span class="line">nums = nums.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (item !== <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item++;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 选择下一页时</span></span><br><span class="line">nums = nums.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (item !== totalPage.length - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item--;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>至此，我自己总结的分页算法就讲解完啦。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS2 下块级元素垂直水平居中</title>
      <link href="/2019/03/16/css2%E4%B8%8B%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
      <url>/2019/03/16/css2%E4%B8%8B%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>前几天有人问我给定一个这样的结构：div =&gt; div，如何让里面的元素水平垂直居中？给出 css2 代码。这对于一直用 css3 布局方式的我来说，一时还有点蒙蔽，只知道左右居中一般用 margin：0 auto，至于垂直居中，还真没用 css2 实现过。于是动手实践，发现以下的方式而已完美达到想要的效果。</p><a id="more"></a><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的一个要点是运用 position：absolute，使里面的块级元素始终相对于父元素定位，由水平居中 margin: 0 auto，可以类推上下左右都居中的话，应该 margin 都为 auto 可以达到想要的效果，至于四个方向大的定位都为 0，是为了防止位置偏移。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 安装 MySQL</title>
      <link href="/2019/03/09/MySQL/"/>
      <url>/2019/03/09/MySQL/</url>
      
        <content type="html"><![CDATA[<p>centos7 安装 MySQL</p><a id="more"></a><h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">centOS7 <span class="number">64</span>位</span><br></pre></td></tr></table></figure><h3 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h3><ol><li><p>添加 mysql yum 源：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https:<span class="regexp">//</span>repo.mysql.com<span class="regexp">//my</span>sql80-community-release-el7-<span class="number">2</span>.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>查看 yum 源中所有 Mysql 版本：</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">yum repolist <span class="keyword">all</span> | <span class="keyword">grep</span> mysql</span><br></pre></td></tr></table></figure></li><li><p>禁用其他版本：</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">yum-<span class="built_in">config</span>-manager <span class="comment">--disable mysql80-community</span></span><br></pre></td></tr></table></figure></li><li><p>启用要安装的版本 mysql5.7</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">yum-<span class="built_in">config</span>-manager <span class="comment">--enable mysql57-community</span></span><br></pre></td></tr></table></figure></li><li><p>检查配置是否生效</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">yum repolist enabled <span class="string">| grep mysql</span></span><br></pre></td></tr></table></figure></li><li><p>开始安装:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> mysql-community-<span class="keyword">server</span></span><br></pre></td></tr></table></figure></li><li><p>启动服务：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">service mysqld <span class="literal">start</span></span><br></pre></td></tr></table></figure></li><li><p>查看 mysql 状态:</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service mysqld status</span></span><br></pre></td></tr></table></figure></li><li><p>查看临时密码：</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grep</span> <span class="string">&#x27;temporary password&#x27;</span> <span class="regexp">/var/</span>log/mysqld.log</span><br></pre></td></tr></table></figure></li><li><p>登录</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql -uroot -p</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键生成响应式表格</title>
      <link href="/2019/02/28/%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90%E5%93%8D%E5%BA%94%E5%BC%8F%E8%A1%A8%E6%A0%BC/"/>
      <url>/2019/02/28/%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90%E5%93%8D%E5%BA%94%E5%BC%8F%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>这是一个一键生成响应式表格的方案。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">table-layout</span>: fixed;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5%</span> <span class="number">0</span>;</span><br><span class="line">  td&#123;</span><br><span class="line">    <span class="selector-tag">padding</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">thead</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#cce5ff</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table-bordered</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.table-bordered</span> &#123;</span><br><span class="line">  th &#123;</span><br><span class="line">    <span class="selector-tag">background</span>: <span class="selector-id">#e4efff</span>;</span><br><span class="line">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e0e0e0</span>;</span><br><span class="line">    <span class="selector-tag">font-weight</span>: <span class="selector-tag">normal</span>;</span><br><span class="line">    <span class="selector-tag">height</span>: <span class="selector-tag">auto</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#e4efff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e0e0e0</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">thead</span> &#123;</span><br><span class="line">    th &#123;</span><br><span class="line">      <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span>;</span><br><span class="line">      <span class="selector-tag">font-weight</span>: 500;</span><br><span class="line">      <span class="selector-tag">height</span>: <span class="selector-tag">auto</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">td</span> &#123;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">1px</span>;</span><br><span class="line">      <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">      <span class="attribute">height</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;table table-bordered&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;width: 40%;&quot;</span>&gt;</span>题型<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>题量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>分值<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>  &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;chapter.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;chapter.questionCount&#125;&#125; 题<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;chapter.presetScore&#125;&#125;分<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页或Html元素在浏览器上全屏解决方案</title>
      <link href="/2019/02/20/%E7%BD%91%E9%A1%B5%E6%88%96html%E5%85%83%E7%B4%A0%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E5%85%A8%E5%B1%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/02/20/%E7%BD%91%E9%A1%B5%E6%88%96html%E5%85%83%E7%B4%A0%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E5%85%A8%E5%B1%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<ol><li><p><strong>全屏是什么</strong>：</p><p>个人理解，全屏指的是去掉浏览器的导航栏，浏览器的全部空间被页面所占有，网页即 html 文档，网页全屏即 dom 全屏</p></li><li><p>不同的浏览器又不同的全屏事件可以调用，但是不同浏览器的全屏事件并不一致，因为还没被写入规范中，所以需要判断在特定的浏览器下，哪个事件可以用，以下是全屏事件的封装：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// el 是需要全屏的 dom</span></span><br><span class="line">requestFullscreen(el: Element): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (el.requestFullscreen) &#123;</span><br><span class="line">    el.requestFullscreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.mozRequestFullScreen) &#123;</span><br><span class="line">    el.mozRequestFullScreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.webkitRequestFullscreen) &#123;</span><br><span class="line">    el.webkitRequestFullscreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.msRequestFullscreen) &#123;</span><br><span class="line">    el.msRequestFullscreen();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>网页全屏之后，还需要退出全屏，退出全屏的方式有多种，比如按 esc 键退出全屏，点击全屏按钮退出全屏等，其中按 esc 退出全屏，一般的浏览器在打开了全屏之后，都可以进行这个操作，不需要人工另外操作。点击按钮退出全屏，需要调用到关闭全屏的事件，同样，在不同的浏览器有不同的实现，需要一一进行判断，封装的事件如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// document 即 html 文档，不需要改变</span></span><br><span class="line">exitFullscreen(): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.exitFullscreen) &#123;</span><br><span class="line">    <span class="built_in">document</span>.exitFullscreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.mozCancelFullScreen) &#123;</span><br><span class="line">    <span class="built_in">document</span>.mozCancelFullScreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.webkitExitFullscreen) &#123;</span><br><span class="line">    <span class="built_in">document</span>.webkitExitFullscreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.msExitFullscreen) &#123;</span><br><span class="line">    <span class="built_in">document</span>.msExitFullscreen();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>如何判断是否处于全屏状态？</strong></p><p>要判断是否处于全屏的状态，需要调用到相关的浏览器事件，在不同的浏览器，实现方式也不尽相同，因此同样需要判断，封装的代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断全屏元素是否存在，并返回相应的项</span></span><br><span class="line">fullscreenElement(): Element &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="built_in">document</span>.fullscreenElement ||</span><br><span class="line">    <span class="built_in">document</span>.webkitFullscreenElement ||</span><br><span class="line">    <span class="built_in">document</span>.msFullscreenElement ||</span><br><span class="line">    <span class="built_in">document</span>.mozFullScreenElement ||</span><br><span class="line">    <span class="literal">null</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否处于全屏状态</span></span><br><span class="line">isFullScreen() &#123;</span><br><span class="line">  <span class="keyword">return</span> !!(<span class="built_in">document</span>.webkitIsFullScreen || <span class="built_in">this</span>.fullscreenElement());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Key 值在 Vue 组件中的作用</title>
      <link href="/2019/02/19/key%E5%80%BC%E5%9C%A8vue%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
      <url>/2019/02/19/key%E5%80%BC%E5%9C%A8vue%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>key 值在 vue 组件的作用</p><a id="more"></a><ol><li><p>key 值在 vue 组件中的作用：</p><p>高效利用 dom</p></li><li><p>分析：</p><p>vue 生成 dom 的过程大致是：model -&gt; vn -&gt; diff -&gt; patch -&gt; dom， 这里在生成真实 dom 之前会先生成虚拟 dom，每次 dom 的改变不是直接生成新的 dom 的，因为每次改变都重新生成新的 dom，效率太低，消耗太大。在每次改变 dom 之时，会经历以下过程，diff 函数对比新旧 vn，包括属性值等，确认哪一项变了，则生成一个新的 patch，将改变的项目插入到 dom 中。</p><p>在执行 diff 函数之时，会判断 key 值是否存在，若存在，则采用 map 映射的方式，查找相应的 vn，若不存在则会一个个去遍历 vn，直到找到相应的改变项，由于直接遍历的速度比 map 映射查找的速度慢，所以在最好在 vue dom 中加上 key 值。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript 使用</title>
      <link href="/2019/02/18/typescript%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/02/18/typescript%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ol><li><p>安装： <code>npm i -g typescript</code></p></li><li><p>安装支持 typescript 的编辑器： vscode</p></li><li><p>项目中使用 typescript：<code>tsc --init</code> 创建 tsconfig.json 文件</p></li><li><p>编译 typescript：<code>tsc</code></p></li><li><p>TypeScript 基本语法：</p><ul><li><p>基本静态类型:</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Boolean</span></span><br><span class="line"><span class="keyword">let</span> isAwesome: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">&quot;Chris&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> joke: <span class="built_in">string</span> = <span class="string">`</span></span><br><span class="line"><span class="string">   Q: Why did the chicken cross the road?</span></span><br><span class="line"><span class="string">   A: <span class="subst">$&#123;punchline&#125;</span></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Number</span></span><br><span class="line"><span class="keyword">let</span> decimalNumber: <span class="built_in">number</span> = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">let</span> binaryNumber: <span class="built_in">number</span> = <span class="number">0b101010</span>; <span class="comment">// =&gt; 42</span></span><br><span class="line"><span class="keyword">let</span> octalNumber: <span class="built_in">number</span> = <span class="number">0o52</span>; <span class="comment">// =&gt; 42</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// array</span></span><br><span class="line"><span class="keyword">let</span> myPetFamily: <span class="built_in">string</span>[] = [<span class="string">&quot;rocket&quot;</span>, <span class="string">&quot;fluffly&quot;</span>, <span class="string">&quot;harry&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> myPetFamily: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&quot;rocket&quot;</span>, <span class="string">&quot;fluffly&quot;</span>, <span class="string">&quot;harry&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// tuple</span></span><br><span class="line"><span class="keyword">let</span> myFavoriteTuple: [<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">boolean</span>];</span><br><span class="line">myFavoriteTuple = [<span class="string">&quot;chair&quot;</span>, <span class="number">20</span>, <span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// enum</span></span><br><span class="line"><span class="built_in">enum</span> Sizes &#123;</span><br><span class="line">  Small = <span class="number">1</span>,</span><br><span class="line">  Medium,</span><br><span class="line">  Large</span><br><span class="line">&#125;</span><br><span class="line">Sizes.Small; <span class="comment">// =&gt; 1</span></span><br><span class="line">Sizes.Medium; <span class="comment">// =&gt; 2</span></span><br><span class="line">Sizes.Large; <span class="comment">// =&gt; 3</span></span><br><span class="line"><span class="built_in">enum</span> ThemeColors &#123;</span><br><span class="line">  Primary = <span class="string">&quot;primary&quot;</span>,</span><br><span class="line">  Secondary = <span class="string">&quot;secondary&quot;</span>,</span><br><span class="line">  Dark = <span class="string">&quot;dark&quot;</span>,</span><br><span class="line">  DarkSecondary = <span class="string">&quot;darkSecondary&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// any</span></span><br><span class="line"><span class="keyword">let</span> whoKnows: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// void</span></span><br><span class="line"><span class="keyword">const</span> darkestPlaceOnEarth = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Marianas Trench&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>- 其他：    <figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  kind: <span class="built_in">string</span>;</span><br><span class="line">  weight: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog: Animal;</span><br><span class="line">dog = &#123;</span><br><span class="line">  kind: <span class="string">&#x27;mammal&#x27;</span>,</span><br><span class="line">  weight: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内联注释</span></span><br><span class="line"><span class="keyword">let</span> dog: &#123;</span><br><span class="line">  kind: <span class="built_in">string</span>;</span><br><span class="line">  weight: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line">dog = &#123;</span><br><span class="line">  kind: <span class="string">&#x27;mammal&#x27;</span>,</span><br><span class="line">  weight: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型</span></span><br><span class="line"><span class="keyword">const</span> fillArray = &lt;T&gt;<span class="function">(<span class="params">len: <span class="built_in">number</span>, elem: T</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>&lt;T&gt;(len).fill(elem);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> newArray = fillArray&lt;<span class="built_in">string</span>&gt;(<span class="number">3</span>, <span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//联合类型</span></span><br><span class="line"><span class="keyword">const</span> sayHappyBirthdayOnFacebook = <span class="function">(<span class="params">name: <span class="built_in">string</span> | <span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (name === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Happy birthday!&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Happy birthday <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">sayHappyBirthdayOnFacebook(<span class="literal">null</span>); <span class="comment">// =&gt; &quot;Happy birthday!&quot;</span></span><br><span class="line">sayHappyBirthdayOnFacebook(<span class="string">&#x27;Jeremy&#x27;</span>); <span class="comment">// =&gt; &quot;Happy birthday Jeremy!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//交集类型</span></span><br><span class="line"><span class="keyword">type</span> Student = &#123;</span><br><span class="line">  id: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> Employee = &#123;</span><br><span class="line">  companyId: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person: Student &amp; Employee;</span><br><span class="line">person.age = <span class="number">21</span>; <span class="comment">// ✅</span></span><br><span class="line">person.companyId = <span class="string">&#x27;SP302334&#x27;</span>; <span class="comment">// ✅</span></span><br><span class="line">person.id = <span class="string">&#x27;10033402&#x27;</span>; <span class="comment">// ✅</span></span><br><span class="line">person.name = <span class="string">&#x27;Henry&#x27;</span>; <span class="comment">// ❌ - name does not exist in Student &amp; Employee</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可选类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callMom</span>(<span class="params">message?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!message) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hi mom. Love you. Bye.&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Interface describing an object containing an optional property</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  favoriteColor?: <span class="built_in">string</span>; <span class="comment">// This property is optional</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态类型检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端绘制图形验证码</title>
      <link href="/2019/02/13/%E5%89%8D%E7%AB%AF%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>/2019/02/13/%E5%89%8D%E7%AB%AF%E7%BB%98%E5%88%B6%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>摘要：<br>本文主要实现了一下功能：1、图形验证码由验证码、干扰线、干扰点组合而成；2、验证码由数字和字母随机组合形成；3、每次切换验证码，验证码字体颜色和背景颜色变化</p><p>一、实现思路</p><ol><li><p>生成一个随机色，用于切换验证码时控制字体颜色和背景颜色</p></li><li><p>生成一个随机数，用于改变颜色的 rgb 值和绘制干扰线与干扰点</p></li><li><p>生成一个由数字和字母组合而成的随机码</p></li><li><p>将随机数、干扰线、干扰点绘制在 canvas 画布上</p></li><li><p>由于图形验证码是会刷新的，所以下一次刷新的时候要确保画布是空的，才不会出现上一次绘制的图形，因此，要在绘制图形之前，清空画布</p></li><li><p>验证：通过对比输入的值和生成的随机码，验证是否输入正确</p></li></ol><p>二、示例</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> code;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成一个随机色</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomColor</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> r = randomNum(min, max);</span><br><span class="line">  <span class="keyword">let</span> g = randomNum(min, max);</span><br><span class="line">  <span class="keyword">let</span> b = randomNum(min, max);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;rgb(&quot;</span> + r + <span class="string">&quot;,&quot;</span> + g + <span class="string">&quot;,&quot;</span> + b + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成一个随机数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomNum</span>(<span class="params">min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min) + min);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 生成随机码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">//验证码的长度</span></span><br><span class="line">  <span class="keyword">let</span> codeLength = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">const</span> checkCode = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> codeChars = [];</span><br><span class="line">  <span class="comment">// 验证码所需数字和字母的集合</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      codeChars.push(<span class="built_in">String</span>.fromCharCode(i + <span class="number">48</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    codeChars.push(<span class="built_in">String</span>.fromCharCode(i + <span class="number">97</span>));</span><br><span class="line">    codeChars.push(<span class="built_in">String</span>.fromCharCode(i + <span class="number">65</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 组合数字和字母</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; codeLength; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> charNum = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">    code += codeChars[charNum];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (checkCode) &#123;</span><br><span class="line">    drawVerify(checkCode, code);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制验证码图形</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawVerify</span>(<span class="params">cEle, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [ctx, width, height] = [cEle.getContext(<span class="string">&quot;2d&quot;</span>), cEle.width, cEle.height];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空画布</span></span><br><span class="line">  ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">  <span class="comment">// 绘制背景色</span></span><br><span class="line">  ctx.fillStyle = randomColor(<span class="number">180</span>, <span class="number">240</span>);</span><br><span class="line">  ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">  <span class="comment">// 填充字体</span></span><br><span class="line">  ctx.font = <span class="string">&quot;30px Arial&quot;</span>;</span><br><span class="line">  ctx.fillStyle = randomColor(<span class="number">50</span>, <span class="number">160</span>);</span><br><span class="line">  ctx.fillText(value, <span class="number">20</span>, <span class="number">40</span>);</span><br><span class="line">  <span class="comment">// 绘制干扰线</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    ctx.strokeStyle = randomColor(<span class="number">40</span>, <span class="number">180</span>);</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo(randomNum(<span class="number">0</span>, width), randomNum(<span class="number">0</span>, height));</span><br><span class="line">    ctx.lineTo(randomNum(<span class="number">0</span>, width), randomNum(<span class="number">0</span>, height));</span><br><span class="line">    ctx.stroke();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 绘制干扰点</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">    ctx.fillStyle = randomColor(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.arc(randomNum(<span class="number">0</span>, width), randomNum(<span class="number">0</span>, height), <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span><br><span class="line">    ctx.fill();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [inputCode, warnToast] = [</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;inputCode&quot;</span>).value,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;warnToast&quot;</span>)</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (inputCode.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    warnToast.innerHTML = <span class="string">&quot;请输入验证码！&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inputCode.toUpperCase() != code.toUpperCase()) &#123;</span><br><span class="line">    warnToast.innerHTML = <span class="string">&quot;验证码错误&quot;</span>;</span><br><span class="line">    createCode();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    warnToast.innerHTML = <span class="string">&quot;验证码正确！&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火狐删除各种虚线框</title>
      <link href="/2019/02/12/%E7%81%AB%E7%8B%90%E5%88%A0%E9%99%A4%E5%90%84%E7%A7%8D%E8%99%9A%E7%BA%BF%E6%A1%86/"/>
      <url>/2019/02/12/%E7%81%AB%E7%8B%90%E5%88%A0%E9%99%A4%E5%90%84%E7%A7%8D%E8%99%9A%E7%BA%BF%E6%A1%86/</url>
      
        <content type="html"><![CDATA[<ol><li><p>删除按钮虚线框</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="selector-tag">--</span> 火狐浏览器，去除按钮虚线框 <span class="selector-tag">--</span> &gt; <span class="selector-tag">button</span><span class="selector-pseudo">::-moz-focus-inner</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;reset&#x27;</span>]</span><span class="selector-pseudo">::-moz-focus-inner</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;button&#x27;</span>]</span><span class="selector-pseudo">::-moz-focus-inner</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;submit&#x27;</span>]</span><span class="selector-pseudo">::-moz-focus-inner</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;file&#x27;</span>]</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;button&#x27;</span>]</span><span class="selector-pseudo">::-moz-focus-inner</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除 range 虚线框</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;range&#x27;</span>]</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&#x27;range&#x27;</span>]</span><span class="selector-pseudo">::-moz-focus-outer</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 基础</title>
      <link href="/2019/01/26/css-%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/01/26/css-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>css 基础知识笔记，包括专业术语介绍、css 流概述等，具体内容可以查看全文</p><a id="more"></a><h2 id="一、-专业术语概览"><a href="#一、-专业术语概览" class="headerlink" title="一、 专业术语概览"></a>一、 专业术语概览</h2><ol><li><p>属性，eg. height, width…</p></li><li><p>值的常用类别</p><ul><li><p>整数值, eg. z-index: 1</p></li><li><p>数值, eg. line-height: 1.5</p></li><li><p>百分比值, eg. padding: 20%</p></li><li><p>长度值，eg. 12px</p></li><li><p>颜色值, eg. #fff</p></li></ul></li><li><p>关键字, eg. transparent, solid</p></li><li><p>变量</p></li><li><p>长度单位分类：</p><ul><li><p>相对字体长度单位, eg. em, rem</p></li><li><p>相对视区长度单位, eg. vh, vw</p></li><li><p>绝对长度单位, eg. px</p></li></ul></li><li><p>功能符：eg. rgba, url, scale</p></li><li><p>选择器：</p><ul><li><p>类选择器, .</p></li><li><p>ID 选择器，唯一性, #</p></li><li><p>属性选择器，[]</p></li><li><p>伪类选择器，:</p></li><li><p>伪元素选择器，::before, ::after</p></li><li><p>关系选择器：后代选择器（空格连接）、相邻后代选择器（&gt;），兄弟选择器（~），相邻兄弟选择器（+）</p></li></ul></li></ol><h2 id="二、css-流"><a href="#二、css-流" class="headerlink" title="二、css 流"></a>二、css 流</h2><ol><li><p>流被破坏的原因：给块级元素设置了绝对宽度，而这个宽度实际是作用域 content-box 的，另外有设置了 border、padding、margin 等，把盒子撑大了。</p></li><li><p>防止流破坏的方式：</p><ul><li><p>宽度分离，即内容层跟包裹层分离，在包裹层设置 width，内容层设置 border、poadding、margin 等属性值。</p></li><li><p>设置 box-sizing（content-box, padding-box, border-box），兼容性不好，慎用</p></li><li><p>使用 flex 布局</p></li></ul></li><li><p>父元素没有设置 height，网上查找到顶部也没有设置 height，则子元素设置 height:100% 无效</p></li><li><p>元素支持 height: 100% 的方法：</p><ul><li><p>父元素或向上的元素设置 height</p></li><li><p>使用绝对定位</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html 笔记</title>
      <link href="/2019/01/22/html-%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/01/22/html-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>html 笔记</p><a id="more"></a><h2 id="一、html-是什么？"><a href="#一、html-是什么？" class="headerlink" title="一、html 是什么？"></a>一、html 是什么？</h2><ol><li><p>html 是使用标记标签来描述网页的一种标记语言。</p></li><li><p>html 文档 = 网页。</p></li><li><p>除了空元素，其他元素都要闭合</p></li><li><p>推荐使用小写</p></li><li><p>大多数元素具有以下属性：class、id、style、title</p></li></ol><h2 id="二、常用元素："><a href="#二、常用元素：" class="headerlink" title="二、常用元素："></a>二、常用元素：</h2><ol><li><p>标题：h</p></li><li><p>段落：p</p></li><li><p>图形：img、canvas</p></li><li><p>链接：a</p><p>A. 新的浏览器中打开链接（target=“_blank”)</p><p>B. 链接到同一个页面的不同位置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#C4&quot;</span>&gt;</span>查看 Chapter 4。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;C4&quot;</span>&gt;</span>Chapter 4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>C. 创建邮件链接：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:someone@microsoft.com?subject=Hello%20again&quot;</span>&gt;</span>发送邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>水平线：hr</p></li><li><p>折行：br</p></li><li><p>文本格式化：b（粗体）、em（强调）、i（斜体）、small（小号）、strong（加重语气）、sub（下标字）、sup（上标字）、ins（插入字）、del（删除字）</p></li><li><p>预格式文本：pre</p></li><li><p>地址：address</p></li><li><p>块引用：blockquote</p></li><li><p>著作标题：cite</p></li><li><p>表格：table、caption（标题）、tr（行）、th（表头）、td（单元格）、colspan（跨行属性）、rowspan（跨列属性）、cellpadding（单元格间距）、</p></li><li><p>列表：ul（无序列表，type：disc、circle、square）、ol（有序列表，type：A、a、I、i）、li（列表项）</p></li><li><p>语义元素：header（页眉）、nav（导航链接的容器）、section（章节）、article（独立的文章）、aside（侧栏）、footer（页脚）</p></li><li><p>表单：form(action、method, target)、<a href="&#39;http://www.w3school.com.cn/html/html_form_input_types.asp&#39;">input</a>(name、value、输入限制、输入类型)、select、option（selected）、textarea、button、datalist</p></li><li><p>媒体元素：audio、embed、video</p></li><li><p>其他：div、span</p></li></ol><h2 id="三、元素分类："><a href="#三、元素分类：" class="headerlink" title="三、元素分类："></a>三、元素分类：</h2><ol><li><p>块级元素：在浏览器显示时，通常会以新行来开始和结束</p></li><li><p>内联元素：内联元素在显示时通常不会以新行开始</p></li></ol><h2 id="四、url-组成：scheme-host-domain-port-path-filename"><a href="#四、url-组成：scheme-host-domain-port-path-filename" class="headerlink" title="四、url 组成：scheme://host.domain:port/path/filename"></a>四、url 组成：scheme://host.domain:port/path/filename</h2><ol><li><p>scheme - 因特网服务的类型。最常见的类型是 http， 还包括：https、ftp、file</p></li><li><p>host - 域主机（http 的默认主机是 www）</p></li><li><p>domain - 域名，比如 w3school.com.cn</p></li><li><p>:port - 端口号（http 的默认端口号是 80）</p></li><li><p>path - 服务器上的路径（如果省略，则文档必须位于网站的根目录中）。</p></li><li><p>filename - 文档/资源的名称</p></li></ol><h2 id="五、HTML-图形"><a href="#五、HTML-图形" class="headerlink" title="五、HTML 图形"></a>五、HTML 图形</h2><ol><li><p>canvas：</p><p>(1) 本质：创建画布，使用 JavaScript 画布上绘制图像，本身不具备绘图功能。</p><p>(2) 绘图步骤：获取元素(getContext(“2d”)) =&gt; 设置形状、样式等</p><p>(3) 常用属性：fillStyle、</p><p>(4) 常用事件：getContext、fillRect、moveTo、lineTo、stroke、beginPath、arc、closePath、fill、createLinearGradient、drawImageaddColorStop</p></li><li><p>svg：</p><p>(1) 本质：可伸缩的矢量图形</p><p>(2) 图形创建方式：使用 xml 定义</p><p>(3) 特性：图像在放大或改变尺寸的情况下其图形质量不变</p></li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li><p>响应式 web 设计（RWD，Responsive Web Design）， 是能够以可变尺寸传递网页的一种网页布局模式。</p></li><li><p>实体符号：<a href="http://www.w3school.com.cn/html/html_entities.asp">http://www.w3school.com.cn/html/html_entities.asp</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3 安装</title>
      <link href="/2019/01/06/python3%E5%AE%89%E8%A3%85/"/>
      <url>/2019/01/06/python3%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>python3 安装指南</p><a id="more"></a><h3 id="unbuntu"><a href="#unbuntu" class="headerlink" title="unbuntu"></a>unbuntu</h3><ol><li><p><code>yum -y install openssl*</code> (pip 依赖 ssl 环境)</p></li><li><p>编译安装 python3：</p><ul><li><p><a href="https://www.python.org/ftp/python/">下载地址</a></p></li><li><p>安装步骤： tar zxvf Python-3.5.2.tgz =&gt; cd Python-3.5.2 =&gt; ./configure =&gt; make &amp;&amp; make install</p></li></ul></li><li><p>安装 pip3: <code>sudo apt-get install python3-pip</code></p></li></ol><h3 id="centOs"><a href="#centOs" class="headerlink" title="centOs"></a>centOs</h3><ol><li><p>安装 yum-utils, 用于管理 repository 及扩展包: <code>sudo yum install yum-utils</code></p></li><li><p>使用 yum-builddep 为 Python3 构建环境,安装缺失的软件依赖： <code>sudo yum-builddep python</code></p></li><li><p>下载对应版本的 Python 包：<code>curl -O https://www.python.org/ftp/python/3.5.0/Python-3.5.0.tgz</code></p></li><li><p>解压 Python 包：<code>tar xf Python-3.5.0.tgz</code></p></li><li><p>安装 Python: <code>cd Python-3.5.0</code> =&gt; <code>./configure</code> =&gt; <code>make</code> =&gt; <code>sudo make install</code></p></li><li><p>检测 Python 是否安装完成：<code>python3 -V</code></p></li><li><p>把 python3 作为默认版本：<code>vi /etc/profile.d/python.sh</code> =&gt; <code>alias python=&#39;/usr/local/bin/python3.5&#39;</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode 配置 Wsl 并配置 Node 环境</title>
      <link href="/2018/12/18/wsl%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/12/18/wsl%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<ol><li><p>下载 WSL Guideline，里面会有配置安装 wsl 相关说明</p></li><li><p>切换终端到 wsl</p></li><li><p>安装 node：</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ touch ~/.bashrc</span><br><span class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash</span><br><span class="line">// restart bash</span><br><span class="line">$ nvm install node</span><br></pre></td></tr></table></figure><ol><li><p>安装 vue-cli3：<code>npm install -g @vue/cli</code></p></li><li><p>可以开始使用啦</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web 性能优化 —— 首屏优化</title>
      <link href="/2018/12/02/%E9%A6%96%E5%B1%8F%E4%BC%98%E5%8C%96/"/>
      <url>/2018/12/02/%E9%A6%96%E5%B1%8F%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>花了两周多，终于完成了一个基本无 bug 的项目，但是有个比较大的问题就是：在 webpack 测试环境下，编译时间太久了，app.js 太大了，导致页面初始化极其的慢，虽然说正式环境下不会有这个问题，同事也说测试环境 1000 kb 左右正常，不用优化，但是自己的页面打开慢还是让人感到极其不爽的，花了两个钟左右，我把 app.js 从 1983 kb 缩小到了 1083 kb，压缩之后为 273 kb，首屏运行速度从原来的可能要十多秒，提升到了 166 ms，我是怎么做到这些的呢？主要策略如下：</p><p>首先，从包开始优化，我用的包就一个 elementUI，用过的人应该都知道，这个包有几百 kb，简直就是恶魔啊，所以，必须要打压他一下。这里的主要策略就是按需引入 elementUI，关于 elementUI 的按需引入，官方有介绍，看<a href="http://element-cn.eleme.io/#/zh-CN/component/quickstart">这里</a>，这里我要讲的是，官方可能叫你这么引入这个库的：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">在 main.js 引入改库</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Button, Select &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.component(Button.name, Button);</span><br><span class="line">Vue.component(Select.name, Select);</span><br><span class="line"><span class="comment">/* 或写为</span></span><br><span class="line"><span class="comment"> * Vue.use(Button)</span></span><br><span class="line"><span class="comment"> * Vue.use(Select)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种引用方式在实际引用中，会大大增加 app.js 的体积，所以，这里，我是把 elemenui 相关的引用放到相应的组件里面，以组件的形式去引用，这样，app.js 的体积会缩小很多。</p><p>然后，就是写代码的习惯了，比如引用组件，尽量用以下形式，代替 import from 的方式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Loading = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;@/components/Common/loading&quot;</span>);</span><br></pre></td></tr></table></figure><p>这种方式引入组件的好处是，webpack 会对代码进行自动分割，异步加载组件，从而实现路由的懒加载，根据需求引入不同的组件，而不是第一次加载就全部引入。更详细的解释看<a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html#%E6%8A%8A%E7%BB%84%E4%BB%B6%E6%8C%89%E7%BB%84%E5%88%86%E5%9D%97">这里</a></p><p>接着就是把代码里的 console 相关的语句去掉啦，别看 console 只是稍微的调用了一下函数，看起来对性能影响不大，但是代码里满是 console 语句，就会有一点影响了，所以还是能去掉就去掉为好。除了去除 console 相关语句，别忘了把多余的代码和组件也去掉，这会一定程度上减少包的体积。</p><p>最后就是网络请求能少则少啦，但是个人不太推荐用缓存的，问题太多了，后期。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化</title>
      <link href="/2018/10/22/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2018/10/22/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="一、内容优化"><a href="#一、内容优化" class="headerlink" title="一、内容优化"></a>一、内容优化</h3><p>1、减少 HTTP 请求数:这条策略是最重要最有效的，因为一个完整的请求要经过 DNS 寻址，与服务器建立连接，发送数据，等待服务器响应，接收数据这样一个消耗时间成本和资源成本的复杂的过程。常见方法：合并多个 CSS 文件和 js 文件，利用 CSS Sprites 整合图像，Inline Images(使用 data：URL scheme 在实际的页面嵌入图像数据 )，合理设置 HTTP 缓存等。</p><p>2、减少 DNS 查找</p><p>3、避免重定向</p><p>3、使用 Ajax 缓存</p><p>4、延迟加载组件,预加载组件</p><p>5、减少 DOM 元素数量:页面中存在大量 DOM 元素,会导致 javascript 遍历 DOM 的效率变慢。</p><p>6、最小化 iframe 的数量：iframes 提供了一个简单的方式把一个网站的内容嵌入到另一个网站中。但其创建速度比其他包括 JavaScript 和 CSS 的 DOM 元素的创建慢了 1-2 个数量级。</p><p>7、避免 404：HTTP 请求时间消耗是很大的，因此使用 HTTP 请求来获得一个没有用处的响应（例如 404 没有找到页面）是完全没有必要的，它只会降低用户体验而不会有一点好处。</p><h3 id="二、服务器优化"><a href="#二、服务器优化" class="headerlink" title="二、服务器优化"></a>二、服务器优化</h3><p>1、 使用内容分发网络（CDN）：把网站内容分散到多个、处于不同地域位置的服务器上可以加快下载速度。</p><p>2、GZIP 压缩</p><p>3、设置 ETag：ETags（Entity tags，实体标签）是 web 服务器和浏览器用于判断浏览器缓存中的内容和服务器中的原始内容是否匹配的一种机制。</p><p>4、提前刷新缓冲区</p><p>5、对 Ajax 请求使用 GET 方法</p><p>6、避免空的图像 src</p><h3 id="三、Cookie-优化"><a href="#三、Cookie-优化" class="headerlink" title="三、Cookie 优化"></a>三、Cookie 优化</h3><p>1、减小 Cookie 大小</p><p>2、针对 Web 组件使用域名无关的 Cookie</p><h3 id="四、javascript-优化"><a href="#四、javascript-优化" class="headerlink" title="四、javascript 优化"></a>四、javascript 优化</h3><p>1、将 JavaScript 脚本放在页面的底部。</p><p>2、将 JavaScript 和 CSS 作为外部文件来引用：在实际应用中使用外部文件可以提高页面速度，因为 JavaScript 和 CSS 文件都能在浏览器中产生缓存。</p><p>3、缩小 JavaScript 和 CSS</p><p>4、删除重复的脚本</p><p>5、最小化 DOM 的访问：使用 JavaScript 访问 DOM 元素比较慢。</p><p>6、开发智能的事件处理程序</p><p>7、javascript 代码注意：谨慎使用 with,避免使用 eval Function 函数,减少作用域链查找。</p><h3 id="五、图像优化"><a href="#五、图像优化" class="headerlink" title="五、图像优化"></a>五、图像优化</h3><p>1、优化图片大小</p><p>2、通过 CSS Sprites 优化图片</p><p>3、不要在 HTML 中使用缩放图片</p><p>4、favicon.ico 要小而且可缓存</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript 面向对象编程</title>
      <link href="/2018/10/22/javaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/10/22/javaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="一、构造函数创建、继承和扩展类"><a href="#一、构造函数创建、继承和扩展类" class="headerlink" title="一、构造函数创建、继承和扩展类"></a>一、构造函数创建、继承和扩展类</h3><p>为了区分普通函数与构造函数，构造函数首字母大写，构造函数创建类，并进行类的继承和派生，相比于接下来要说的 class 创建、继承和派生类而言，略显得复杂。</p><h4 id="1、构造函数创建类"><a href="#1、构造函数创建类" class="headerlink" title="1、构造函数创建类"></a>1、构造函数创建类</h4><p>通过一个构造函数创建一个原始类 =&gt; 给原始类定义基本属性和原型方法，通过 new 构造函数，初始化一个新的类；</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = props.name || <span class="string">&quot;匿名&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.grade = props.grade || <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>!`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStudent</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Student(props || &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> xiaoming = createStudent(&#123;</span><br><span class="line">  name: <span class="string">&quot;小明&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(xiaoming.grade);</span><br><span class="line">xiaoming.hello()</span><br></pre></td></tr></table></figure><h4 id="2、构造函数继承类"><a href="#2、构造函数继承类" class="headerlink" title="2、构造函数继承类"></a>2、构造函数继承类</h4><p>属性的继承，利用函数的 call 方法，调用上一个构造函数创建的类，参数传入相应的属性以及 this 值，原型方法的继承，通过创建一个空的对象原型作为中介，把父类的原型方法传递给子类，实现子类继承父类的目的；</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原型继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">Child, Parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  F.prototype = Parent.prototype;</span><br><span class="line">  Child.prototype = <span class="keyword">new</span> F();</span><br><span class="line">  Child.constructor = Child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = props.name || <span class="string">&quot;Unnamed&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>!`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrimaryStudent</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 继承 student name</span></span><br><span class="line">  Student.call(<span class="built_in">this</span>, props);</span><br><span class="line">  <span class="built_in">this</span>.grade = props.grade || <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法继承</span></span><br><span class="line">inherits(PrimaryStudent, Student);</span><br></pre></td></tr></table></figure><h4 id="3、构造函数扩展"><a href="#3、构造函数扩展" class="headerlink" title="3、构造函数扩展"></a>3、构造函数扩展</h4><p>在原型上添加新的方法，即可</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">PrimaryStudent.prototype.getGrade = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.grade;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二、class-关键字创建、继承和派生类"><a href="#二、class-关键字创建、继承和派生类" class="headerlink" title="二、class 关键字创建、继承和派生类"></a>二、class 关键字创建、继承和派生类</h3><p>class 关键字是 es6 提出来的，极大的便利了 javaScript 类的操作，实例代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  hello() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> xiaojun = <span class="keyword">new</span> Teacher(<span class="string">&quot;小君&quot;</span>);</span><br><span class="line">xiaojun.hello();</span><br><span class="line"><span class="comment">// 类派生</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimaryTeacher</span> <span class="keyword">extends</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, grade) &#123;</span><br><span class="line">    <span class="comment">// 调用父类的构造函数</span></span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">    <span class="built_in">this</span>.grade = grade;</span><br><span class="line">  &#125;</span><br><span class="line">  myGrade() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`I am at grade <span class="subst">$&#123;<span class="built_in">this</span>.grade&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> xiaohong = <span class="keyword">new</span> PrimaryTeacher(<span class="string">&quot;小红&quot;</span>, <span class="number">3</span>);</span><br><span class="line">xiaohong.myGrade();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript 函数</title>
      <link href="/2018/10/22/javaScript%E5%87%BD%E6%95%B0/"/>
      <url>/2018/10/22/javaScript%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、箭头函数"><a href="#一、箭头函数" class="headerlink" title="一、箭头函数"></a>一、箭头函数</h3><p>相当于匿名函数的简写，不同之处在于及箭头函数的 this 指向的是当前的词法作用域，也就是说省去了写 <code>var that = this</code> 的过程，可以直接使用 this；</p><h3 id="二、generator"><a href="#二、generator" class="headerlink" title="二、generator"></a>二、generator</h3><p>类似 python 的生成器，不同的是，python 的生成器一般是写在 list 里，而 es6 的 generator 是写在函数里，形如：function*() {}，yield 在 generator 里可以多次返回函数值，而不用像 functoin 一样进行多次调用；</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//裴波那契数列</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fib</span>(<span class="params">max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t,</span><br><span class="line">    a = <span class="number">0</span>,</span><br><span class="line">    b = <span class="number">1</span>,</span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (n &lt; max) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a;</span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">    n++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> fib(<span class="number">10</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、解构赋值"><a href="#三、解构赋值" class="headerlink" title="三、解构赋值"></a>三、解构赋值</h3><p>简化代码的一种手段，可以同时对多个变量进行赋值操作，上面的代码 <code>[a, b] = [b, a + b]</code> 就用到了解构赋值，再把上面的示例代码用解构赋值改一下，得到如下代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fib</span>(<span class="params">max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t;</span><br><span class="line">  <span class="keyword">var</span> [a, b, n] = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>];</span><br><span class="line">  <span class="keyword">while</span> (n &lt; max) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a;</span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">    n++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">of</span> fib(<span class="number">10</span>)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、闭包"><a href="#四、闭包" class="headerlink" title="四、闭包"></a>四、闭包</h3><p>通常别人都会说闭包是用来延长函数作用域链的，但是听到这个词往往会使人一脸蒙蔽，廖雪峰的 js 教程中说闭包有以下功用：延迟执行函数、 多参数的函数变成单参数的函数、封装私有变量，总结来说闭包的作用就是私有化变量和延长变量的生命周期，下面是相关代码示例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 闭包 | 延迟执行函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazy_sum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = lazy_sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="comment">// console.log(f);</span></span><br><span class="line"><span class="comment">// console.log(f());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包 | 多参数的函数变成单参数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_pow</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(x, n);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> pow2 = make_pow(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">let</span> pow3 = make_pow(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// console.log(pow2(5));</span></span><br><span class="line"><span class="comment">// console.log(pow3(7));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包 | 封装私有变量（可以考虑用这种方法进行状态管理）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_counter</span>(<span class="params">innitial</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = innitial || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    inc: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      x += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c1 = create_counter();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = c1.inc();</span><br><span class="line">  <span class="comment">//   console.log(x);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c2 = create_counter(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = c2.inc();</span><br><span class="line">  <span class="comment">//   console.log(x);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、map"><a href="#五、map" class="headerlink" title="五、map"></a>五、map</h3><p>将一个函数作用在一个数组上，接收带一个参数的函数，是 array 的一个方法，可以方便快捷的对数组进行运算，省略循环过程，示例代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.pow(x, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> results = arr.map(pow);</span><br><span class="line"><span class="built_in">console</span>.log(results);</span><br></pre></td></tr></table></figure><h3 id="六、reduce"><a href="#六、reduce" class="headerlink" title="六、reduce"></a>六、reduce</h3><p>将一个函数作用在一个数组上，接收带两个参数的函数，对函数的结果做累积计算，可以方便快捷的对数组进行运算，省略循环过程，示例代码如下:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> mul = arr1.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y);</span><br><span class="line"><span class="built_in">console</span>.log(mul);</span><br></pre></td></tr></table></figure><h3 id="七、filter"><a href="#七、filter" class="headerlink" title="七、filter"></a>七、filter</h3><p>过滤数组元素，接收一个函数作为参数，函数内容为过滤条件。filter 的回调函数可以接收多个参数，element 参数返回的是数组的元素，index 返回数组元素的索引，self 参数返回整个数组，相关示例代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 过滤偶元素</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> r = arr2.filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> !== <span class="number">0</span>);</span><br><span class="line"><span class="comment">// console.log(r);</span></span><br><span class="line"><span class="comment">// 过滤空字符串</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> r1 = arr3.filter(<span class="function"><span class="params">s</span> =&gt;</span> s &amp;&amp; s.trim());</span><br><span class="line"><span class="comment">// console.log(r1);</span></span><br><span class="line"><span class="comment">// 利用回调函数去除数组中的重复元素</span></span><br><span class="line"><span class="keyword">let</span> arr4 = [</span><br><span class="line">  <span class="string">&quot;apple&quot;</span>,</span><br><span class="line">  <span class="string">&quot;strawberry&quot;</span>,</span><br><span class="line">  <span class="string">&quot;banana&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pear&quot;</span>,</span><br><span class="line">  <span class="string">&quot;apple&quot;</span>,</span><br><span class="line">  <span class="string">&quot;orange&quot;</span>,</span><br><span class="line">  <span class="string">&quot;orange&quot;</span>,</span><br><span class="line">  <span class="string">&quot;strawberry&quot;</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> r2 = arr4.filter(<span class="function">(<span class="params">element, index, self</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> self.indexOf(element) === index;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// console.log(r2);</span></span><br></pre></td></tr></table></figure><h3 id="八、sort"><a href="#八、sort" class="headerlink" title="八、sort"></a>八、sort</h3><p>排序方法，直接修改原来的数组，默认是把数组元素转换为字符串进行排序，接收有一个函数作为参数，函数内容是排序规则，示例代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数字按从大到小排序</span></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">nums.sort(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript-Promise</title>
      <link href="/2018/10/22/javaScript-promise/"/>
      <url>/2018/10/22/javaScript-promise/</url>
      
        <content type="html"><![CDATA[<p>promise 对于管理异步状态很有用，可以串行执行异步任务，也可以并行执行异步任务，下面是一个简单的串行执行一步步任务的例子：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> steps = [<span class="string">&quot;第一步&quot;</span>, <span class="string">&quot;第二步&quot;</span>, <span class="string">&quot;第三步&quot;</span>, <span class="string">&quot;最后&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showStep1</span>(<span class="params">step1</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(step1);</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showStep2</span>(<span class="params">step2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(step2);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> test = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">test.then(showStep1(steps[<span class="number">0</span>]));</span><br><span class="line">test.then(showStep2(steps[<span class="number">1</span>]));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web请求加密</title>
      <link href="/2018/10/22/web%E8%AF%B7%E6%B1%82%E5%8A%A0%E5%AF%86/"/>
      <url>/2018/10/22/web%E8%AF%B7%E6%B1%82%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<ol><li>代码：</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> CryptoJS <span class="keyword">from</span> <span class="string">&#x27;crypto-js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiSign</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    (<span class="built_in">this</span>.wordMap = &#123;</span><br><span class="line">      <span class="string">&#x27;*&#x27;</span>: <span class="string">&#x27;%2A&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;(&#x27;</span>: <span class="string">&#x27;%28&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;%29&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">      (<span class="built_in">this</span>.stdUrlsafe = &#123;</span><br><span class="line">        <span class="string">&#x27;+&#x27;</span>: <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;/&#x27;</span>: <span class="string">&#x27;_&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  encode(str) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">encodeURIComponent</span>(str).replace(<span class="regexp">/[*()]/g</span>, <span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.wordMap[v] || v;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sign(params) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(params);</span><br><span class="line">    <span class="keyword">if</span> (keys.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">&#x27;params empty&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!params.F_accesstoken) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">&#x27;F_accesstoken empty&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    keys.sort();</span><br><span class="line">    <span class="keyword">const</span> encryptStr = keys</span><br><span class="line">      .map(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">this</span>.encode(v), <span class="string">&#x27;=&#x27;</span>, <span class="built_in">this</span>.encode(params[v])].join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      .join(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">&#x27;01&#x27;</span> +</span><br><span class="line">      CryptoJS.HmacSHA1(encryptStr, params.F_accesstoken)</span><br><span class="line">        .toString(CryptoJS.enc.Base64)</span><br><span class="line">        .replace(<span class="regexp">/[+/]/g</span>, <span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">this</span>.stdUrlsafe[v] || v;</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apiSign = <span class="keyword">new</span> ApiSign();</span><br><span class="line"><span class="keyword">export</span> &#123; apiSign &#125;;</span><br></pre></td></tr></table></figure><ol><li>使用方法</li></ol><ul><li>安装 <a href="https://www.npmjs.com/package/crypto-js">crypto-js</a></li><li><p>使用示例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; apiSign &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/sign.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> params = &#123;&#125;;</span><br><span class="line">params.F_sign = apiSign.sign(params);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue动态改变title</title>
      <link href="/2018/10/22/vue%E5%8A%A8%E6%80%81%E6%94%B9%E5%8F%98title/"/>
      <url>/2018/10/22/vue%E5%8A%A8%E6%80%81%E6%94%B9%E5%8F%98title/</url>
      
        <content type="html"><![CDATA[<ol><li>代码：</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router&#x27;</span>;</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> n = to.query.subjectId;</span><br><span class="line">  <span class="keyword">let</span> x = [<span class="string">&#x27;mike&#x27;</span>, <span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;sarah&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="string">&#x27;4&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = x[<span class="number">2</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n === <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = x[<span class="number">1</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n === <span class="string">&#x27;6&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = x[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>在 main.js 引入即可，使用示例：</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./utils/title&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 项目搭建步骤</title>
      <link href="/2018/10/22/vue%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/"/>
      <url>/2018/10/22/vue%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="一、-初始化项目"><a href="#一、-初始化项目" class="headerlink" title="一、 初始化项目"></a>一、 初始化项目</h3><ol><li>安装 vue-cli3: <code>sudo npm install -g @vue/cli-service-global</code></li><li>卸载旧版本的 vue-cli: <code>sudo npm uninstall -g vue-cli</code></li><li>更新到 vue-cli3： <code>sudo npm install -g @vue/cli</code></li><li>创建项目，选项：preset（default）、package manage(npm)、安装相关插件（建议不要用淘宝的 npm，因为在使用的时候有点坑，之前项目中就被这个坑过）: <code>vue create flash-experiment</code></li><li>切换到项目目录: <code>cd flash-experiment</code></li><li>启动项目： <code>npm run serve</code></li><li>查看 vue-cli 相关命令: <code>vue create --help</code></li><li>打开图形化项目管理器，查看相关配置：<code>vue ui</code></li><li>添加插件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vue add @vue/eslint</span><br><span class="line">vue add router <span class="comment">//特殊添加插件的情况</span></span><br><span class="line">vue add vuex   <span class="comment">//特殊添加插件的情况</span></span><br></pre></td></tr></table></figure></li><li>加入 sass 支持，把一下语句加到 package.json 中：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;node-sass&quot;</span>: <span class="string">&quot;^4.9.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;sass-loader&quot;</span>: <span class="string">&quot;^7.0.1&quot;</span>,</span><br></pre></td></tr></table></figure></li><li>添加组件，在视图中注册组件，并配置相关路由</li><li>编写组件</li><li>引入 <a href="http://element-cn.eleme.io/#/zh-CN/component/pagination">elementUI</a></li><li>引入 <a href="https://github.com/axios/axios">axios</a></li></ol><h3 id="二、-git-配置"><a href="#二、-git-配置" class="headerlink" title="二、 git 配置"></a>二、 git 配置</h3><ol><li><p>之前没有 git</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd existing_folder</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@gitlab.dreamdev.cn:ebag&#x2F;flash-experiment.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br></pre></td></tr></table></figure></li><li><p>已有 git</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote set-url origin git@gitlab.dreamdev.cn:ebag&#x2F;live-experiment.git</span><br><span class="line">git remote -v</span><br><span class="line">git branch --set-upstream-to&#x3D;origin&#x2F;develop develop</span><br><span class="line">git branch --set-upstream-to&#x3D;origin&#x2F;master master</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Config 配置模板</title>
      <link href="/2018/10/22/vue-config%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/"/>
      <url>/2018/10/22/vue-config%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="params">dir</span> =&gt;</span> path.join(__dirname, dir);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> urlPath = process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;./&#x27;</span> : <span class="string">&#x27;/item-name/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 基本路径</span></span><br><span class="line">  baseUrl: urlPath,</span><br><span class="line">  <span class="comment">// 生产环境是否生成 sourceMap 文件</span></span><br><span class="line">  productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 服务器端口号</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="number">1234</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(<span class="string">&#x27;@$&#x27;</span>, resolve(<span class="string">&#x27;src&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;components&#x27;</span>, resolve(<span class="string">&#x27;src/components&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;utils&#x27;</span>, resolve(<span class="string">&#x27;src/utils&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;service&#x27;</span>, resolve(<span class="string">&#x27;src/service&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;views&#x27;</span>, resolve(<span class="string">&#x27;src/views&#x27;</span>))</span><br><span class="line">      .set(<span class="string">&#x27;assets&#x27;</span>, resolve(<span class="string">&#x27;src/assets&#x27;</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab Ci 配置模板</title>
      <link href="/2018/10/22/gitlab-ci%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/"/>
      <url>/2018/10/22/gitlab-ci%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>gitlab ci 配置模板</p><a id="more"></a><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">build site:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">node:latest</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">expire_in:</span> <span class="number">1</span> <span class="string">week</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">public</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">public</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mv</span> <span class="string">dist/*</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">expire_in:</span> <span class="number">3</span> <span class="string">days</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">develop</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js-Html转文本</title>
      <link href="/2018/08/25/html%E8%BD%AC%E6%96%87%E6%9C%AC(js)/"/>
      <url>/2018/08/25/html%E8%BD%AC%E6%96%87%E6%9C%AC(js)/</url>
      
        <content type="html"><![CDATA[<p>最近在折腾用 js 实现 html 转文本的东东，包括 html 转 docx、doc 以及 pdf 等文档，首选当然是用别人造好的轮子啦。</p><a id="more"></a><p>html 转 pdf 用的轮子是 jsPdf，这东西好用是好用，但是有一个很大的缺点，对中文的支持太差了，我用的是 fromhtml 方法，研究文档研究了几天，还是没发现对中文支持的方法，尝试了各种奇技淫巧（换字体，解码等）后，发现它这个方法根本就不支持中文，当然他官方就声明了不支持中文。不过他的 addhtml 方法勉强实现了我的需求，但是因为是采用截图方式，断页很不智能，甚至会出现文字被生生的拦腰截断的情况，加之生成的 pdf 像素实在惨不忍睹，决定还是放弃了。具体的实现，网上有很多的文档，大家可以自行查阅，我也是根据自己的需求定制了而已，所以源码示例就不做过多分享了。</p><p>html 转 word 文档，选的轮子是 html-docx，关于这个轮子的资料很少，不过看一下源码及实例还是很快上手的，网上说什么缺点是要用在线编辑器什么的，感觉就是没有自己动脑想过，直接抄官方示例的。官方示例摆出来的虽然是要用一个在线编辑器，但是我们可以根据自己的需求进行改良，比如我的需求是根据选定网页的不同区域，下载不同内容的 word 文档，就不容许出现什么在线编辑器啦，好吧，没什么要说了，看代码吧。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">public downloadDocx(printArea: any, outputName: string) &#123;</span><br><span class="line">    // +++++++ 样式定制 +++++++</span><br><span class="line">    const styles = `</span><br><span class="line">        //code here</span><br><span class="line">    `;</span><br><span class="line"></span><br><span class="line">    // 样式加载</span><br><span class="line">    let styleTagInnerHtml = &#x27;<span class="tag">&lt;<span class="name">style</span>&gt;</span>&#x27;;</span><br><span class="line">    styleTagInnerHtml += styles;</span><br><span class="line">    styleTagInnerHtml += &#x27;<span class="tag">&lt;/<span class="name">style</span>&gt;</span>&#x27;;</span><br><span class="line"></span><br><span class="line">    const content = &#x27;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span>&#x27; +</span><br><span class="line">      &#x27;<span class="tag">&lt;<span class="name">head</span>&gt;</span>&#x27; + styleTagInnerHtml + &#x27;<span class="tag">&lt;/<span class="name">head</span>&gt;</span>&#x27; +</span><br><span class="line">      &#x27;<span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#x27; printArea.outerHTML + &#x27;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;;</span><br><span class="line"></span><br><span class="line">    // +++++++ html 转 word +++++++</span><br><span class="line">    const converted = htmlDocx.asBlob(content);</span><br><span class="line">    saveAs(converted, outputName + &#x27;.docx&#x27;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面的代码是我写的示例，当然涉及业务需求更加复杂的逻辑就不展示了，上面的示例代码分为三部分。</p><p>第一部分是样式的定制，因为这个轮子要转 word 需要重新写一份 html 文档，而这份文档是检索不到我们在外面写的 css 的，只能检索得到 html 文档的 style 标签里的 css，所以需要根据自己的需求重新生成一份 css 文件，放到 html 文档里面。还有一个坑就是，word 并不是支持所有 css 属性的，一些比较新的属性建议还是不要用了，用老一点的方法实现吧。</p><p>第二部分是 css 文档部分，这部分主要是生成新的文档，用于转换成 word 文档。</p><p>第三部分是用轮子转换编码格式并保存为 word 文档的部分，这里其实是用了两个轮子：html-docx 和 file-saver，html-docx 这个轮子用于转换编码格式，file-saver 用于保存文档，后缀可以根据自己的需求改，但是要记得编码格式要对应上。</p><p>当然，我这里只是一个简单的示例，切无生搬硬套，可以根据自己的需求进行定制。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文本转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N * N 阶矩阵算法 </title>
      <link href="/2018/07/30/n-n-%E9%98%B6%E7%9F%A9%E9%98%B5%E7%AE%97%E6%B3%95/"/>
      <url>/2018/07/30/n-n-%E9%98%B6%E7%9F%A9%E9%98%B5%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>n * n 阶矩阵的解法有几种方式，分而治之、暴力破解等，我这里用的方法就是暴力破解的方法，时间和空间复杂度肯定是比较差的，不过能快速获得结果而已，用 js 的实现代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function matrix(A, B) &#123;</span><br><span class="line">    var n &#x3D; A.length;</span><br><span class="line">    var C &#x3D; [];</span><br><span class="line">    for ( var i &#x3D; 0; i &lt; n; i++ )&#123;</span><br><span class="line">        C[i] &#x3D; [];</span><br><span class="line">        for( var j &#x3D; 0; j &lt; n; j++ )&#123;</span><br><span class="line">            C[i][j] &#x3D; 0;</span><br><span class="line">            for( var k &#x3D; 0; k &lt; n; k++ )&#123;</span><br><span class="line">                C[i][j] +&#x3D; A[i][k] * B[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(C);</span><br><span class="line">&#125;</span><br><span class="line">matrix([[1,2], [3, 4]], [[3, 2], [1, 4]]);</span><br><span class="line">&#x2F;&#x2F;[ [ 5, 10 ], [ 13, 22 ] ]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客迁移</title>
      <link href="/2018/07/29/hexo-%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
      <url>/2018/07/29/hexo-%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<p>hexo 博客迁移</p><a id="more"></a><ol><li><p>更新 node 和 npm：<code>sudo npm install -g n</code> =&gt; <code>sudo n stable</code> =&gt; <code>sudo npm install npm -g</code></p></li><li><p>安装 hexo：<code>sudo npm install -g hexo</code></p></li><li><p>安装依赖包：<code>sudo npm i</code></p></li><li><p>复制以下文件到新建的 blog 文件夹里：package.json、source、scaffolds、themes、<br>_config.yml、.gitignore</p></li><li><p>在 home 目录下新建一个 .ssh 文件：<code>ssh-keygen -t rsa -C &lt;邮箱&gt;</code></p></li><li><p><code>sudo gedit .ssh/id_rsa.pub</code>，复制秘钥到 github 中</p></li><li><p><code>git init</code>，初始化空仓库</p></li><li><p>配置 git：<code>git config -–global user.name &lt;name&gt;</code> =&gt; <code>git config --global user.email &lt;email&gt;</code></p></li><li><p>生成新的 public 文件：<code>hexo g</code></p></li><li><p>下载必要的插件：<code>sudo npm install hexo-deployer-git --save</code></p></li><li><p>上传博客到 git： <code>hexo d</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Angular 导航栏与内容联动</title>
      <link href="/2018/07/29/angular-%E5%AF%BC%E8%88%AA%E6%A0%8F%E4%B8%8E%E5%86%85%E5%AE%B9%E8%81%94%E5%8A%A8/"/>
      <url>/2018/07/29/angular-%E5%AF%BC%E8%88%AA%E6%A0%8F%E4%B8%8E%E5%86%85%E5%AE%B9%E8%81%94%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>通过 angular 的 render2 渲染器操作 DOM , 通过获取 DOM 的滑动只与定位,计算出滑动距离,并控制速率。</p><a id="more"></a><ol><li>注入 commonService 服务,里面封装了 handleAnchor 函数,主要思路就是通过 angular 的 render2 渲染器操作 DOM , 通过获取 DOM 的滑动只与定位,计算出滑动距离,并控制速率。代码如下:</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 点击题目进行锚点定位</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>targetDom 需要定位的目标Dom元素</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>scrollElementRef 滑动区域</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>SCROLL_OFFSET 需定位的位置在滑动区域中的距离</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>ANCHOR_RATE 自动滑动速度，数值越小速度越快</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>isPreview 来自试卷预览的特殊处理 默认 false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">handleAnchor(targetDom: any, <span class="attr">scrollElementRef</span>: any, <span class="attr">SCROLL_OFFSET</span>: number, <span class="attr">ANCHOR_RATE</span>: number, isPreview = <span class="literal">false</span>): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> currentAnchor = scrollElementRef.scrollTop;</span><br><span class="line">    <span class="keyword">let</span> questionTop = <span class="built_in">this</span>.getElementTop(targetDom);</span><br><span class="line">    <span class="keyword">let</span> scrollWrapTop = <span class="built_in">this</span>.getElementTop(scrollElementRef);</span><br><span class="line">    <span class="keyword">let</span> actualTop = questionTop - scrollWrapTop - SCROLL_OFFSET;</span><br><span class="line">    <span class="keyword">if</span> (isPreview) &#123;</span><br><span class="line">        actualTop -= <span class="number">45</span>; <span class="comment">// 去掉解析栏的高度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> anchorRate = (<span class="built_in">Math</span>.abs(actualTop - currentAnchor)) / ANCHOR_RATE;</span><br><span class="line">    <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (currentAnchor &lt; actualTop) &#123;</span><br><span class="line">        scrollElementRef.scrollTop = currentAnchor += anchorRate;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        scrollElementRef.scrollTop = currentAnchor -= anchorRate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentAnchor &lt;= actualTop + anchorRate &amp;&amp; currentAnchor &gt;= actualTop - anchorRate) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(interval);</span><br><span class="line">        scrollElementRef.scrollTop = actualTop;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>以上函数通过注入依赖的形式在组件中进行使用,通过传递相应的参数, 实现数据联动效果, 代码如下:</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleAnchor(targetId): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> targetDom = <span class="built_in">document</span>.getElementById(targetId)</span><br><span class="line">    <span class="keyword">let</span> documentElement: Element;</span><br><span class="line">    documentElement = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="built_in">this</span>.commonService.handleAnchor(targetDom, documentElement, <span class="built_in">this</span>.SCROLL_OFFSET, <span class="built_in">this</span>.ANCHOR_RATE)</span><br><span class="line">    <span class="built_in">this</span>.renderer.addClass(targetDom, <span class="string">&#x27;paper-hover&#x27;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.renderer.removeClass(targetDom, <span class="string">&#x27;paper-hover&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码将整个文档流作为滑动区域传给了 handleAnchor 函数,并且通过虚拟 DOM 加了一段样式表, 实现滚动到相应位置, 出现一个边框的视觉效果。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CKeditor 在 Angular 中的使用文档</title>
      <link href="/2018/07/29/CKeditor-%E5%9C%A8-angular-%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/"/>
      <url>/2018/07/29/CKeditor-%E5%9C%A8-angular-%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p>CKeditor 是比较好用的一款所见即所得编辑器，有多种模式可供选择，里面还可集成 leText 等第三方插件，也可以自己开发一些插件，推荐使用。上手也很简单，但是在 angular 中使用还是要费一点时间，配置上也要花点时间。</p><a id="more"></a><ol><li><p>下载 ckeditor;</p></li><li><p>把 ckeditor 解压并放到 angular 的 assets 文件中;</p></li><li><p>在 angular 的 index 文件中引用 ckeditor.js;</p></li><li><p>根据自己的需求修改 ckeditor 配置文件;</p></li><li><p>ckeditor 相关配置说明:</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">CKEDITOR.editorConfig = <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  config.language = <span class="string">&quot;zh-cn&quot;</span>; <span class="comment">// 编辑器语言</span></span><br><span class="line">  config.skin = <span class="string">&quot;moono&quot;</span>; <span class="comment">// 编辑器皮肤,需要下载并解压到 ckeditor 的 skins 文件夹下</span></span><br><span class="line">  config.allowedContent = <span class="literal">true</span>;</span><br><span class="line">  config.toolbar = <span class="string">&quot;Full&quot;</span>; <span class="comment">// 工具条类型</span></span><br><span class="line">  config.extraPlugins = <span class="string">&quot;ckeditor_wiris&quot;</span>; <span class="comment">//  添加扩展插件 ckeditor_wiris</span></span><br><span class="line">  config.toolbar_Full = [</span><br><span class="line">    [<span class="string">&quot;Underline&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;Subscript&quot;</span>, <span class="string">&quot;Superscript&quot;</span>, <span class="string">&quot;RemoveFormat&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;Image&quot;</span>, <span class="string">&quot;Table&quot;</span>, <span class="string">&quot;SpecialChar&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;ckeditor_wiris_formulaEditor&quot;</span>]</span><br><span class="line">  ]; <span class="comment">// 配置工具条</span></span><br><span class="line">  config.width = <span class="number">360</span>; <span class="comment">// 编辑器宽度设置</span></span><br><span class="line">  config.resize_enabled = <span class="literal">false</span>; <span class="comment">// 编辑器拖拽设置</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CKEDITOR.plugins.addExternal(</span><br><span class="line">  <span class="string">&quot;ckeditor_wiris&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://www.wiris.net/demo/plugins/ckeditor/&quot;</span>,</span><br><span class="line">  <span class="string">&quot;plugin.js&quot;</span></span><br><span class="line">); <span class="comment">// 扩展编辑器引用</span></span><br></pre></td></tr></table></figure><ol><li><p>ckeditor 的使用有两种模式,一种是 inline 模式,使用方法是直接在相应的元素加上 contentable = “true” 即可生效, 第二种是 textarea 模式, 使用方法是以 class 的形式引用,这个我暂时还没有触及,之后再添加;</p></li><li><p>使用 ckeditor inline 模式会有一个广告,xx 所见即所得编辑器, 这句话可以通过删除 ckeditor.js 文件中的一些语句来删掉,要删除的语句如下:</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a.title =</span><br><span class="line">  <span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> d || !<span class="number">1</span> === d ? d : [a.lang.editor, a.name].join(<span class="string">&quot;, &quot;</span>);</span><br></pre></td></tr></table></figure><p>也可以通过设置 config.title = ‘ ‘， 去除编辑框的 title。</p><ol><li>工具栏加数学公式插件的方法:</li></ol><p>(1) 下载 ckeditor_wiri , 下载 asp 版, 具体为什么,是因为我只学过 asp.net, 看着有眼缘, 使用应该都没差吧;</p><p>(2) config.js 添加如下语句:</p><p>A. <code>config.extraPlugins = &#39;ckeditor_wiris&#39;;</code></p><p>B. <code>[ &#39;ckeditor_wiris_formulaEditor&#39;]</code></p><p>C. <code>CKEDITOR.plugins.addExternal(&#39;ckeditor_wiris&#39;, &#39;https://www.wiris.net/demo/plugins/ckeditor/&#39;, &#39;plugin.js&#39;);</code></p><p>此外,要修改显示图标可以替换掉相应的 icon</p><ol><li><p>CKedditor inline 模式是默认初始化一个全局实例的，也就是在页面的所有地方用 contenteditable = true 都会初始化一个 inline 编辑器，而这并不是我们想要的结果，可以通过在 index.html 中添加以下语句，禁止自动初始化编辑器： <code>CKEDITOR.disableAutoInline = true;</code></p></li><li><p>禁用了默认初始化全局实例，我们要用的话，就自己在相应的组件初始化一个编辑器就行了，大概思路就是，创建一个 editors 变量用于存储 CKeditor 实例， 声明一个初始化编辑器的函数，函数接收所有类名为 ckeditor 的元素，遍历这些元素，在相应的节点上依次添加编辑器的实例（<br>CKEDITOR.inline(elements[i])），保存在 editors 中，在 ngAfterViewInit() 生命周期钩子中执行函数，目的是在文档加载完之后执行函数，因为一开始元素默认隐藏状态还没加载进来，初始化不了。在执行完了函数之后，为了提高性能，记得把初始化的实例都销毁掉。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CKeditor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 模态框————Angular</title>
      <link href="/2018/07/11/JS%E6%A8%A1%E6%80%81%E6%A1%86blog/"/>
      <url>/2018/07/11/JS%E6%A8%A1%E6%80%81%E6%A1%86blog/</url>
      
        <content type="html"><![CDATA[<p>最近有个功能要做，要用到模态框，了解了一下，可以引用 boostrap + jquery 实现，但是看了看还要引用两个库，麻烦，自己写还来得快点，自己写还有个好处，想写成什么样都行。</p><a id="more"></a><p>主要思路就是，点击按钮，弹出模态框，同时模态框外的区域不可点击。</p><p>页面结构如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span> *<span class="attr">ngIf</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 按钮：用于打开模态框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;show()&quot;</span>&gt;</span></span><br><span class="line">    试卷分析</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 模态框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> *<span class="attr">ngIf</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 模态框头部 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>试卷分析: 总分(&#123;&#123;allScoreCount&#125;&#125;)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;close()&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 模态框主体 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mask 模块是一个遮罩层，只有 isShow 为真的时候才会被触发，show 函数用于处理是否要显示模态框和遮罩层，模态框模块也写了个判断，分辨何时显示这个区域，下面是 JS 代码，很简单，但是很实用，很多地方都可以用到，用于控制显示状态。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">isShow: boolean = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">show(): <span class="keyword">void</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.isShow = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(): <span class="keyword">void</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.isShow = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 配置前端环境</title>
      <link href="/2018/07/08/ubuntu%E9%85%8D%E7%BD%AE%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/07/08/ubuntu%E9%85%8D%E7%BD%AE%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>ubuntu 配置前端环境</p><a id="more"></a><ol><li><p>下载 sougou 输入法，直接下载安装包双击就行;</p></li><li><p>下载配置 ` sublime text ：</p><p>(1) <code>sudo add-apt-repository ppa:webupd8team/sublime-text-3</code></p><p>(2) <code>sudo apt-get update</code></p><p>(3) <code>sudo apt-get install sublime-text-installer</code></p><p>(4) <code>subl</code></p><p>(5) 安装 package control：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request,os,hashlib; h = <span class="string">&#x27;6f4c264a24d933ce70df5dedcf1dcaee&#x27;</span> + <span class="string">&#x27;ebe013ee18cced0ef93d5f746d80ef60&#x27;</span>; pf = <span class="string">&#x27;Package Control.sublime-package&#x27;</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="keyword">by</span> = urllib.request.urlopen( <span class="string">&#x27;http://packagecontrol.io/&#x27;</span> + pf.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;%20&#x27;</span>)).<span class="keyword">read</span>(); dh = hashlib.sha256(<span class="keyword">by</span>).hexdigest(); print(<span class="string">&#x27;Error validating download (got %s instead of %s), please try manual install&#x27;</span> % (dh, h)) <span class="keyword">if</span> dh != h <span class="keyword">else</span> <span class="keyword">open</span>(os.path.<span class="keyword">join</span>( ipp, pf), <span class="string">&#x27;wb&#x27;</span> ).<span class="keyword">write</span>(<span class="keyword">by</span>)</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">(<span class="number">6</span>)破解码</span><br><span class="line">```</span><br><span class="line">—– <span class="keyword">BEGIN</span> LICENSE —–</span><br><span class="line">Michael Barnes</span><br><span class="line">Single <span class="keyword">User</span> License</span><br><span class="line">EA7E<span class="number">-821385</span></span><br><span class="line"><span class="number">8</span>A353C41 <span class="number">872</span>A0D5C DF9B2950 AFF6F667</span><br><span class="line">C458EA6D <span class="number">8</span>EA3C286 <span class="number">98</span>D1D650 <span class="number">131</span>A97AB</span><br><span class="line">AA919AEC EF20E143 B361B1E7 <span class="number">4</span>C8B7F04</span><br><span class="line">B085E65E <span class="number">2</span>F5F5360 <span class="number">8489</span>D422 FB8FC1AA</span><br><span class="line"><span class="number">93</span>F6323C FD7F7544 <span class="number">3</span>F39C318 D95E6480</span><br><span class="line">FCCC7561 <span class="number">8</span>A4A1741 <span class="number">68</span>FA4223 ADCEDE07</span><br><span class="line"><span class="number">200</span>C25BE DBBC4855 C4CFB774 C5EC138C</span><br><span class="line"><span class="number">0</span>FEC1CEF D9DCECEC D3A5DAD1 <span class="number">01316</span>C36</span><br><span class="line">—— <span class="keyword">END</span> LICENSE ——</span><br><span class="line">```</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置前端环境：</p><p>(1) 安装 node: <code>curl -sL https://deb.nodesource.com/setup_5.x | sudo -E bash -</code> =&gt; <code>sudo apt-get install -y nodejs</code></p><p>(2) 更新 node 和 npm: <code>sudo npm install -g n</code> =&gt; <code>sudo n stable</code> =&gt; <code>sudo npm install npm -g</code></p><p>(3) 安装淘宝 npm 镜像: ‘ sudo npm install cnpm -g `</p><p>(4) 安装 webpack : <code>npm install webpack -g</code></p><p>(5) 安装 vue 脚手架: <code>sudo npm install vue-cli -g</code></p><p>(6) 安装 angular 脚手架：<code>sudo npm i -g @angular/cli</code></p></li><li><p>安装 git: <code>sudo apt-get intall git</code></p></li><li><p>查看软件位置：ex. <code>whereis node</code>、<code>whereis npm</code></p></li><li><p>安装 vscode 及其<a href="https://blog.csdn.net/win7583362/article/details/79315055">插件</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盒模型</title>
      <link href="/2018/06/08/%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
      <url>/2018/06/08/%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-标准盒模型："><a href="#1-标准盒模型：" class="headerlink" title="1. 标准盒模型："></a>1. 标准盒模型：</h3><p>因为 <code>width = margin_box_width(left_width + right_width) + border_width + padding_box_width(left_width + right_width) + content_box_width</code>，所以，同样宽度的内容因为 <code>margin</code>和<code>padding</code> 值不一样，撑开了内容块的宽度，显示出来的效果不尽相同。为了解决这个问题，IE8+可以用设置 <code>box-sizing：border-box</code> 来避免内容块的宽度被撑开。因此，一般可以进行如下设置，使 <code>content_box_width = width</code> 。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    <span class="attribute">-webkit-box-sizing</span>:border-box;</span><br><span class="line">    <span class="attribute">-moz-box-sizing</span>:border-box;</span><br><span class="line">    <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-弹性盒模型："><a href="#2-弹性盒模型：" class="headerlink" title="2. 弹性盒模型："></a>2. 弹性盒模型：</h3><p>弹性布局相比传统的块布局要简洁很多，但是实现原理差别挺大的。首先，要想进行弹性布局，要设置 <code>display:flex</code>，确定弹性容器。然后要知道弹性容器里面的内容块定位是由两条轴即主轴和测轴确定的。主轴由 <code>flex-direction</code> 属性值确定是横向还是纵向，<code>justify-content</code> 属性则确定内容块在主轴上的分布形式。内容块在测轴上的分布形式由 <code>align-item</code> 确定，也可以用 <code>align-self</code> 确定单个的内容块分布形式，不过这会覆盖掉 <code>align-item</code> 的值。目前弹性盒布局还没有完全普及，PC 端浏览器支持还不是很好，更多的是用于手机端的布局。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布尔变量在项目中的应用</title>
      <link href="/2018/06/08/%E5%B8%83%E5%B0%94%E5%8F%98%E9%87%8F%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2018/06/08/%E5%B8%83%E5%B0%94%E5%8F%98%E9%87%8F%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在本次项目中，收获最大的一点应该就是学会了在项目中应用布尔变量了，以下谈谈我对布尔变量使用的一些看法。</p><p>在本次项目中，有一个困扰了我许久的难题，那就是代码的逻辑问题，一开始由于各种逻辑混乱，导致插件效果不尽如人意，插件的控制效果很不理想，最后通过几个布尔变量，轻而易举的弄通了代码逻辑，也使插件很合乎我意的跑了起来，甚至还可以加以扩展。</p><p>下面举个小栗子来说明布尔变量的简单使用吧：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">help</span> =  <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> getHelp():</span><br><span class="line">    <span class="keyword">help</span> = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">global</span> <span class="keyword">help</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">help</span>:</span><br><span class="line">    print(<span class="string">&#x27;What can I do for you?)</span></span><br></pre></td></tr></table></figure><p>从上面的例子我们可以看出，布尔变量可以很好的用来控制代码块的执行顺序，在插件中的应用则是很好的控制进入插件后的操作过程，从而实现逻辑清晰的插件。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yml 文件操作方法</title>
      <link href="/2018/06/08/yml%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
      <url>/2018/06/08/yml%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ol><li>文件读取方法示例：</li></ol><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line">fr = <span class="keyword">open</span>(<span class="string">&#x27;yml_file_address&#x27;</span>, <span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">data = yaml.<span class="keyword">load</span>(fr)</span><br><span class="line">print(data)</span><br><span class="line">fr.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure><p>关于 yml 文件的操作，有一个专门的库 yaml ，yaml 直接给出了一个把 yml 文件读取到字典里的方法 load，所以要读取 yml 文件非常简单，只需要引入 yaml 库，用 python 的 open 方法打开文件，用 load 方法读取文件，就可以轻而易举的读取 yml 文件到字典里了。当然其中还是有点坑的，那就是解码的问题，因为默认读取的文件不是字符编码格式，所以要把它转换为字符编码，再传给 load。</p><ol><li>文件写入方法示例：</li></ol><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line">fr = <span class="keyword">open</span>(<span class="string">&#x27;yml_file_address&#x27;</span>, <span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">temp</span> = &#123;&quot;fruits&quot;:&quot;banana&quot;&#125;</span><br><span class="line">data = yaml.dump(<span class="keyword">temp</span>,fr, default_flow_style=<span class="keyword">False</span>)</span><br><span class="line">print(data)</span><br><span class="line">fr.<span class="keyword">close</span>()</span><br></pre></td></tr></table></figure><p>yaml 库提供了一个 dump 方法，只需要打开文件，给出要写入的参数（字典形式等），调用 dump 方法就可以很快捷的写入信息到 yml 文件啦</p><ol><li>这两个方法在项目中的运用：</li></ol><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">修改配置文件昵称</span><br><span class="line">def changeUserName(user):</span><br><span class="line">    fr = open(<span class="string">&#x27;yml_file_address&#x27;</span>, <span class="string">&#x27;r&#x27;</span>,<span class="attribute">encoding</span>=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = yaml.load(fr)</span><br><span class="line">    fr.close()</span><br><span class="line">    data[<span class="string">&#x27;robot_name_cn&#x27;</span>] = user</span><br><span class="line">    fr = open(<span class="string">&#x27;yml_file_address&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="attribute">encoding</span>=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    yaml.dump(data, fr, <span class="attribute">allow_unicode</span>=<span class="literal">True</span>, <span class="attribute">default_flow_style</span>=<span class="literal">False</span>)</span><br><span class="line">    fr.close()</span><br><span class="line">    return data[<span class="string">&#x27;robot_name_cn&#x27;</span>]</span><br><span class="line">修改配置文件密码</span><br><span class="line">def changePassword(password):</span><br><span class="line">    fr = open(<span class="string">&#x27;yml_file_address&#x27;</span>, <span class="string">&#x27;r&#x27;</span>,<span class="attribute">encoding</span>=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = yaml.load(fr)</span><br><span class="line">    fr.close()</span><br><span class="line">    data[<span class="string">&#x27;password&#x27;</span>] = password</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> data.keys():</span><br><span class="line">        fr = open(<span class="string">&#x27;yml_file_address&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="attribute">encoding</span>=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        yaml.dump(data, fr, <span class="attribute">allow_unicode</span>=<span class="literal">True</span>, <span class="attribute">default_flow_style</span>=<span class="literal">False</span>)</span><br><span class="line">        fr.close()</span><br><span class="line">        return data[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        fr = open(<span class="string">&#x27;yml_file_address&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="attribute">encoding</span>=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        yaml.dump(data, fr, <span class="attribute">allow_unicode</span>=<span class="literal">True</span>, <span class="attribute">default_flow_style</span>=<span class="literal">False</span>)</span><br><span class="line">        fr.close()</span><br><span class="line">        return data[<span class="string">&#x27;password&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这是两个修改配置信息的函数 changeUserName（） 和 changePassword（），故名思议，就是修改密码和昵称，两个函数的思路都是一样的，先读取配置文件，把相应的信息替换进配置文件里，然后通过写入方法，把这两个信息写入文件中。</p><p>其中的难点可能就是解码和生成 yaml 文件的样式问题了。一开始各种报解码错误，在打开文件的时候加一个 encoding，在写入函数中加一个 allow_unicode=True 搞定了。</p><p>解决替换信息在文件中的样式问题， 是在写入函数中加入 default_flow_style=False 搞定的。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python2 =&gt; Python3 踩坑集合</title>
      <link href="/2018/06/08/python%E9%87%87%E5%9D%91%E9%9B%86%E5%90%88/"/>
      <url>/2018/06/08/python%E9%87%87%E5%9D%91%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>python2 =&gt; python3 踩坑集合</p><a id="more"></a><h3 id="1-报错内容："><a href="#1-报错内容：" class="headerlink" title="1. 报错内容："></a>1. 报错内容：</h3><p>ModuleNotFoundError: No module named ‘md5’</p><h4 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h4><p>这是 python2 的库，python3 已经把它包含进 hashlib 库里了</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>直接把对 md5 库的引用语句注释掉，改为引用 hashlib 库</p><h3 id="2-报错内容："><a href="#2-报错内容：" class="headerlink" title="2. 报错内容："></a>2. 报错内容：</h3><p>AttributeError: module ‘sys’ has no attribute ‘setdefaultencoding’</p><h4 id="解析：-1"><a href="#解析：-1" class="headerlink" title="解析："></a>解析：</h4><p>python2 的默认字符编码为 ASCII 编码，所以有 setdefaultencoding 这个方法转换为 utf-8 编码，而 python3 的默认字符编码是 unicode 编码，这种编码本身支持汉字，所以就不存在上述方法了</p><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>直接把该语句注释掉</p><h3 id="3-报错内容："><a href="#3-报错内容：" class="headerlink" title="3. 报错内容："></a>3. 报错内容：</h3><p>ModuleNotFoundError: No module named ‘urlparse’</p><h4 id="解析：-2"><a href="#解析：-2" class="headerlink" title="解析："></a>解析：</h4><p>urlparse 是 python2 的库，python3 已经把这个库重命名为 urllib.parse 了</p><h4 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h4><p>把对 urlparse 库的引用语句注释掉，改为引用 urllib.parse 库</p><h3 id="4-报错内容："><a href="#4-报错内容：" class="headerlink" title="4. 报错内容："></a>4. 报错内容：</h3><p>ModuleNotFoundError: No module named ‘urlparse’</p><h4 id="解析：-3"><a href="#解析：-3" class="headerlink" title="解析："></a>解析：</h4><p>urlparse 是 python2 的库，python3 已经把这个库重命名为 urllib.parse 了</p><h4 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h4><p>把对 urlparse 库的引用语句注释掉，改为引用 multiprocessing 库里了</p><h3 id="5-报错内容："><a href="#5-报错内容：" class="headerlink" title="5. 报错内容："></a>5. 报错内容：</h3><p>ModuleNotFoundError: No module named ‘Queue’</p><h4 id="解析：-4"><a href="#解析：-4" class="headerlink" title="解析："></a>解析：</h4><p>Queue 是 python2 的库，python3 已经把这个库加到 multiprocessing 里了</p><h4 id="解决方法-4"><a href="#解决方法-4" class="headerlink" title="解决方法"></a>解决方法</h4><p>把对 Queue 库的引用语句注释掉，改为引用 <code>from multiprocessing import Queue</code></p>]]></content>
      
      
      <categories>
          
          <category> 服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Text3 配置node.js环境</title>
      <link href="/2018/06/08/sublime-text-nodeJS%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/06/08/sublime-text-nodeJS%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>前提：windows 系统，你已经安装了 Sublime Text3，电脑已经有 node 环境。</p><a id="more"></a><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ul><li>下载 sublime 的 nodejs 插件，需是集成 Nodejs 插件到 sublime 中，下载地址：<a href="https://github.com/tanepiper/SublimeText-Nodejs">https://github.com/tanepiper/SublimeText-Nodejs</a></li><li>解压 zip 文件， 并重命名文件夹“Nodejs”</li><li>打开 sublime，操作”preference” —&gt; “Browse packages”, 打开一个目录，这个目录是众多语言 IDE 插件的存放地。<ul><li>复制”Nodejs“文件夹到这个目录。 </li><li>打开 Nodejs 文件夹，找到文件“Nodejs.sublime-build”， 拖拽到 sublime，显示：<br><code><br>&#123;<br>“cmd”: [“node”, “$file”],<br>“file<em>regex”: “^[ ]_File \”(…</em>?)\”, line ([0-9]*)”,<br>“selector”: “source.js”,<br>“shell”:true,<br>“encoding”: “cp1252”,<br>“windows”:<br>&#123;<br>“cmd”: [“taskkill /F /IM node.exe &amp; node”, “$file”]<br>&#125;,<br>“linux”:<br>&#123;<br>“cmd”: [“killall node; node”, “$file”]<br>&#125;<br>&#125;</code></li></ul></li><li>需要更改上面标注的地方， 要更改 encoding 为 GB2312 或者 utf8，如果不更改此属性可能导致 build nodejs 代码时终端显示乱码。</li><li>要用 sublime 打开文件“Nodejs.sublime-settings” 或者 设置“preference” —》 “package settings” —》 “Nodejs”  —》“setting-default” 打开文件并 更改成：<br><code><br>&#123;<br>// save before running commands<br>“save_first”: true,<br>// if present, use this command instead of plain “node”<br>// e.g. “/usr/bin/node” or “C:\bin\node.exe”<br>“node_command”: /usr/bin/nodejs,<br>// Same for NPM command<br>“npm_command”: /usr/bin/npm,<br>// as ‘NODE_PATH’ environment variable for node runtime<br>“node_path”: false,<br>“expert_mode”: false,<br>“ouput_to_new_tab”: false<br>&#125;</code><br>到此，已经配置好了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试总结——读书郎</title>
      <link href="/2018/06/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E8%AF%BB%E4%B9%A6%E9%83%8E/"/>
      <url>/2018/06/07/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E8%AF%BB%E4%B9%A6%E9%83%8E/</url>
      
        <content type="html"><![CDATA[<p>前几天在拉勾投的简历，今天下午下班后去面试，总的感觉是面试很专业很基础，自己太不专业了，大三到现在也只是自己写写小项目自己玩，真正聊技术的话，一点都不专业，专业名词没几个能说的上来，想到之前工作中用到的很多 python 知识点自己也是说不上来，只是会用，后来看到别人的教程，才知道自己一直用的东东原来是有专业名词的。</p><p>下面是面试的题目：</p><ol><li>js 知识点考察：</li></ol><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">function <span class="function"><span class="keyword">fun</span>()&#123;</span></span><br><span class="line"><span class="function">    <span class="title">console</span></span>.log(this)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span>()</span></span><br><span class="line"><span class="function"><span class="title">b</span></span> = new <span class="function"><span class="keyword">fun</span>()</span></span><br><span class="line"><span class="function"><span class="title">console</span></span>.log(b)</span><br></pre></td></tr></table></figure><p>（1） 以上结果分别是什么？</p><p>第一个 this 指向全局作用域，所以打印的应该是 window，这个我当时一时没反应过来，知道是指向全局作用域，但是具体打印出来的是什么，没反应过来。</p><p>第二个 b 是 fun 函数的实例，继承了 fun 函数的所有特性，但是由于没有给这个实例传参，所以结果是 undefined，这个我知道打印出来的是 undefined，也知道原因，但是没有按着面试官走，没把实例这个名词说出来。</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">var a = <span class="number">1</span></span><br><span class="line">function <span class="function"><span class="keyword">fun</span>()&#123;</span></span><br><span class="line"><span class="function">    <span class="title">console</span></span>.log(a)</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        var a = <span class="number">2</span></span><br><span class="line">        console.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span>()</span></span><br><span class="line"><span class="function"><span class="title">console</span></span>.log(a)</span><br></pre></td></tr></table></figure><p>(2) 以上代码打印出来的分别是什么？为什么？</p><p>第一个 a 打印出来是 undefined,因为作用域内不存在这个参数，默认返回 undefined。第二个 a 打印出来是 2，因为在 if 内申明了局部变量 a 并把 2 赋值给了这个参数。第三个 a 打印出来同样是 2，因为这条语句在 if 作用域的下面，代码树是往下延伸的。第四个 a 打印出来是 a，因为 a=1 属于这个作用域，而函数里的 a 它是共享不到的，要共享函数内的参数的话，可以用闭包。</p><p>（3）第三个问题没太懂，问的是 function 除了 argument 外还有哪些内置 xx？这个我没听清的用 xx 表示吧，你们懂的告诉我一声。</p><ol><li>算法知识点考察</li></ol><p>（1）说说快排，这个我当时有点蒙圈了，因为好久之前接触的东东，都忘了，回来后补充解释如下：</p><p>快速排序是从目标数据中任意选取一个数据，以这个数据的值为分割点，把目标数据分割为两部分。这样循环操作下去进行排序。这个在代码中用的挺多的，但是我没记住它的学名，没想起来。这个解释摘自我大二时候读《写给大家的算法书》的算法基础部分的笔记。</p><p>（2）说说冒泡排序，同上，没打出来，回来后补充解释如下：</p><p>冒泡排序是对比相邻的两个数据，根据大小关系调整两个数据的顺序。同样摘自大二的阅读笔记。</p><p>除了这些还有一些零零碎碎的知识点，我就不一一罗列了，列出这几个典型的吧，可能面试经验比较少，很多东西都准备不充分，背着自己的电脑就过去面试了，面试问到项目就拿出了自己的一些小项目出来，也比较随意，结果是其次，最主要的是面试挺欢乐，知道了自己在前端算法这一块还很薄弱，接下来得好好学学数据结构和算法了。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow 模型训练步骤</title>
      <link href="/2018/05/27/%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%AD%A5%E9%AA%A4/"/>
      <url>/2018/05/27/%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="使用-tensorflow-进行算法设计、训练的步骤"><a href="#使用-tensorflow-进行算法设计、训练的步骤" class="headerlink" title="使用 tensorflow 进行算法设计、训练的步骤"></a>使用 tensorflow 进行算法设计、训练的步骤</h3><ol><li><p>定义算法公式，也就是神经网络 forward 时的计算；</p></li><li><p>定义 loss，选定优化器，比如 SGD，并指定优化器 loss；</p></li><li><p>迭代的对数据集进行训练；</p></li><li><p>在测试集上对准确率进行评测；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下配置Ss</title>
      <link href="/2018/05/27/ubuntu%E4%B8%8B%E9%85%8D%E7%BD%AEss/"/>
      <url>/2018/05/27/ubuntu%E4%B8%8B%E9%85%8D%E7%BD%AEss/</url>
      
        <content type="html"><![CDATA[<p>ubuntu 下配置 ss 步骤</p><a id="more"></a><ol><li><p>pip install shadowshocks</p></li><li><p>创建 json 文件，内容如下：</p></li></ol><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;server&quot;</span>:<span class="string">&quot;ip&quot;</span>,</span><br><span class="line"><span class="attr">&quot;server_port&quot;</span>:<span class="number">3002</span>,</span><br><span class="line"><span class="attr">&quot;local_port&quot;</span>:<span class="number">1080</span>,</span><br><span class="line"><span class="attr">&quot;password&quot;</span>:<span class="string">&quot;psd&quot;</span>,</span><br><span class="line"><span class="attr">&quot;timeout&quot;</span>:<span class="number">600</span>,</span><br><span class="line"><span class="attr">&quot;method&quot;</span>:<span class="string">&quot;加密方法&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>系统设置&gt;&gt;网络设置&gt;&gt;网络代理&gt;&gt;手动，填写 socks 主机和端口信息：127.0.0.1：1080</p></li><li><p>sslocal -c /home/canace/文档/ss.json 开启全局 ss</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下 Tensorflow CPU Release 版安装</title>
      <link href="/2018/05/27/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85tensorflow/"/>
      <url>/2018/05/27/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85tensorflow/</url>
      
        <content type="html"><![CDATA[<p>ubuntu 下 tensorflow CPU release 版安装步骤</p><a id="more"></a><h3 id="安装-anaconda："><a href="#安装-anaconda：" class="headerlink" title="安装 anaconda："></a>安装 anaconda：</h3><ol><li><p>下载<a href="https://repo.continuum.io/archive/">anaconda3-4.2.0 linux 版本</a></p></li><li><p>到 anaconda 的下载目录下执行一下命令：<code>bash Anaconda3-4.2.0-Linux-x86_64.sh</code></p></li><li><p>接下来就是按照提示一步步的往下就行了，会自动安装各种包，直到结束</p></li><li><p><code>echo &#39;export PATH=&quot;/home/canace/anaconda3/bin:$PATH&quot;&#39;&gt;&gt; ~/.bashrc</code>&gt;&gt;<code>source ~/.bashrc</code>启用 anaconda</p></li></ol><h3 id="tensorflow-环境配置："><a href="#tensorflow-环境配置：" class="headerlink" title="tensorflow 环境配置："></a>tensorflow 环境配置：</h3><ol><li>tensorflow 安装：<br><code>conda install tensorflow</code>（不要连代理，因为连了代理很可能装不成功）</li></ol><h4 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h4><h5 id="conda-常用命令："><a href="#conda-常用命令：" class="headerlink" title="conda 常用命令："></a>conda 常用命令：</h5><p>conda list：可以显示已经安装好的库。</p><p>conda install 库名 ：可以直接安装想要的库。如：conda install tensorflow</p><p>conda update 库名：升级库</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度工作哲学解读</title>
      <link href="/2018/05/20/%E6%B7%B1%E5%BA%A6%E5%B7%A5%E4%BD%9C%E5%93%B2%E5%AD%A6%E8%A7%A3%E8%AF%BB/"/>
      <url>/2018/05/20/%E6%B7%B1%E5%BA%A6%E5%B7%A5%E4%BD%9C%E5%93%B2%E5%AD%A6%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<p>卡尔.纽波特的《深度工作》一书中提到，深度工作的哲学包括以下几种：</p><ol><li><p>禁欲主义哲学；</p></li><li><p>双峰哲学；</p></li><li><p>节奏哲学；</p></li><li><p>新闻工作者哲学；</p></li></ol><p>以下是个人的一下理解：</p><ol><li><p>深度工作与浮浅工作相对，是一种排除外界干扰，长时间连续的集中全部精力于某一项活动的工作形式。</p></li><li><p>以上四种深度工作哲学按专注时间从长到短的顺序排列依次是：禁欲主义哲学 &gt; 双峰哲学 &gt; 节奏哲学 &gt; 新闻工作者哲学。</p></li><li><p>禁欲主义哲学主张工作中全力排除一切干扰，专注于工作，比如说作家隐居写作就是运用了这种深度工作哲学，适合使用这种哲学的人，一般是有很高的职业追求的人，并且这种人的职业看得到实际的产出，比如说作家一年要出多少本书。此外，使用这种哲学要求长时间的与世隔绝，过一种苦行僧式的生活。</p></li><li><p>双峰哲学是把生活中的时间分为部分，一部分用于深度工作，一部分用于浮浅工作。比如说一年有十二个月，可以预备三个月完全与世隔绝，用来进行深度工作。或者是每一周花一天完全与世隔绝进行深度工作。这种哲学要求要有大于一天的深度工作时间，可以说适合大部分人。</p></li><li><p>节奏哲学主张养成深度工作的习惯，每天花一部分的时间进行深度学习。比如八点半上班，可以五点起来进行深度工作到七点半。这是个人比较推崇的一种深度工作哲学，这种哲学可以保证每天都有一定的高效工作的时间，可以做任何自己想做的目标事物，坚持一段时间就能看到产出，还是很不错的，适合任何有有目标的人群。</p></li><li><p>新闻工作者哲学，顾名思义，像新闻工作者一样，随时可以进入状态。这种哲学只适合已熟使用其他哲学的少部分人，要求随时能够进入到深度工作的状态。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登陆华南师范大学校园网的方法</title>
      <link href="/2018/05/20/%E7%99%BB%E9%99%86%E5%8D%8E%E5%8D%97%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2018/05/20/%E7%99%BB%E9%99%86%E5%8D%8E%E5%8D%97%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>最近刚装了 unbuntu 系统,刚开始网络连接遇到了点小问题,原来是校园网不知道怎么认证,于是向好基友请教了下,得出快捷的方法如下:</p><ol><li><p>下载学校网络的认证客户端,记住位置,一般都是默认下载地址是 Download.</p></li><li><p>使用快捷键<code>Ctrl+Alt+T</code>打开终端，使用命令 <code>cd ~/下载</code> 或 <code>cd ～/Downloads</code>（如果您的系统语言为英文）进入文件下载目录。</p></li><li><p><code>unzip *.zip</code> 解压刚刚下载的客户端压缩文件,</p></li><li><p>如果您的下载目录不止一个 zip 文件，请把名字打全一点，如：<code>unzip RG_*.zip</code>,RG 为文件名.</p></li><li><p>如果提示 unzip 未安装，请安装它： <code>sudo apt-get install unzip</code> ；若提示输入密码，请输入您的系统账户密码，输入过程中不会有***的显示；若提示需要联网下载，请先用 Wifi（比如手机热点），安装文件并不大。</p></li></ol><p>6 以后的步骤,以后我们每次打开电脑都用这几行代码进行认证,可以复制到一个文件里,懒得每次都打代码</p><ol><li><p><code>cd ~/下载</code> —切换到安装目录</p></li><li><p><code>cd rjsup*</code> —进入文件夹.</p></li><li><p><code>sudo chmod +x ./rjsupplicant.sh</code> —给予 sh 文件最高权限</p></li><li><p><code>(sudo ./rj*.sh --dhcp=1 --nic=enp2s0 --user=201***** --password=****** &amp;)</code>进行认证,user 后是校园网账号,password 后是校园网密码.</p></li><li><p><code>service network-manager restart</code> 重新显示网络中心图标</p></li></ol><p>切记以后每次认证网络都用</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cd ~/下载</span><br><span class="line">cd rjsup*</span><br><span class="line">sudo chmod +x ./rjsupplicant.sh</span><br><span class="line">(sudo ./rj*.sh <span class="attribute">--dhcp</span>=1 <span class="attribute">--nic</span>=enp2s0 <span class="attribute">--user</span>=20143702058 <span class="attribute">--password</span>=232824 &amp;)</span><br><span class="line">service network-manager restart</span><br></pre></td></tr></table></figure><p>这几行代码,一条代码执行完再执行下一条.</p><p>本文是看完 blackstorm 的博客之后的笔记,因为对于小白来说,他写的文章太晦涩了,第一次看很懵懂,所以我就把他的文章简化了.</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天使之恋</title>
      <link href="/2018/05/20/%E5%A4%A9%E4%BD%BF%E4%B9%8B%E6%81%8B/"/>
      <url>/2018/05/20/%E5%A4%A9%E4%BD%BF%E4%B9%8B%E6%81%8B/</url>
      
        <content type="html"><![CDATA[<p>天使之恋，是一部日本的爱情电影。电影主要讲述的是失足女高中生由里与得了脑肿瘤又不愿意做手术准备等死的光辉大叔的纯纯的爱情故事。其实，选择继续看这部电影，是因为一开头给了一个镜头，是在医院中，光辉大叔刚从检查室出来，遇到由里和她妈妈，并且插肩而过，当时就在想，这样医院中毫不相干的两个人怎么把他们联系起来呢？后来看到由里跟一个老人家在一起，以为她做了人家的小三，应该跟在医院邂逅的那个大叔无关，可是这个画面也给了大叔一个镜头。再后一点，看到由里跟一个女的在床上接吻，心想，可能由里是一个双性恋者。就是跟着这一个个线索，最后我才看到了这部电影的最深情节，17岁的高中女生与35岁的大叔的纯洁的爱情故事，非常动人。大叔即使知道由里之前做过援交女的种种劣迹，依然表示自己是真的爱由里。也许，这就是浪漫主义的剧情吧。现实中，大多数男人都表示，自己不能接受自己的女朋友有过不洁的行为，即使是自己的女朋友跟之前的男朋友有过什么，也是不能容忍的。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>海边的曼彻斯特</title>
      <link href="/2018/05/20/%E6%B5%B7%E8%BE%B9%E7%9A%84%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9/"/>
      <url>/2018/05/20/%E6%B5%B7%E8%BE%B9%E7%9A%84%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9/</url>
      
        <content type="html"><![CDATA[<p>看完这部影片，用一个词来形容就是安静，安静的环境下，平凡的生活，同时又夹杂着男主人过去的故事。很喜欢这种叙述方式，通过唯美的画面，渲染故事情节，将男主人公的伤心，悔恨，往事不堪回首等种种复杂心情，一一展现。</p><p>整部片围绕乔的葬礼，层层铺垫，叙事朴实而又不会让人觉得乏味。</p><p>在看影片的过程中，我就想：要是自己能死于这样大雪纷飞的冬天里，那该多好啊，估计此生也无憾了吧。摇荡的海水也是我喜欢的，它使人冷静而又充满了哲思。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 影评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wordpress安装</title>
      <link href="/2018/05/20/wordpress%E5%AE%89%E8%A3%85/"/>
      <url>/2018/05/20/wordpress%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codex.wordpress.org/zh-cn:%E5%AE%89%E8%A3%85_WordPress#.E6.AD.A5.E9.AA.A43:.E8.AE.BE.E7.BD.AEwp-config.php">原文链接：</a></p><ol><li><p>下载并解压缩 WordPress 程序安装包</p></li><li><p>在你的网页服务器上为 WordPress 创建一个数据库, 并且创建一个 MySQL 拥有所有权限可以进入和修改的用户</p></li><li><p>重命名 wp-config-sample.php 文件为 wp-config.php</p></li><li><p>把 WordPress 文件夹放在你服务器上想要放的地方:</p></li></ol><p>(1) 如果你想把通过顶级域名来访问你的 WordPress 博客 (例如 <a href="http://example.com/),移动或上传所有解压后的">http://example.com/),移动或上传所有解压后的</a> WordPress 文件夹里面的文件(但不包括 WordPress 文件夹本身) 到你服务器的根目录下.</p><p>(2) 如果你想通过子域名来访问你的博客(例如 <a href="http://example.com/blog/">http://example.com/blog/</a>), 将 wordpress 重命名为你想要的子目录名称， 接着上传至你的网站服务器。 例如，你想让 WordPress 安装在子目录”blog”中，你就应该将”wordpress”这个文件夹重命名为”blog”，接着上传至你的网站服务器的根目录中。</p><ol><li>在你喜欢的浏览器中访问 wp-admin/install.php 以便启动安装程序.</li></ol><p>(1) 如果你在根目录下安装 WordPress,，你应该访问: <a href="http://example.com/wp-admin/install.php">http://example.com/wp-admin/install.php</a></p><p>(2) 如果你将 WordPress 安装在子目录 blog 下，你应该访问: <a href="http://example.com/blog/wp-admin/install.php">http://example.com/blog/wp-admin/install.php</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitpage 搭建 Hexo 博客</title>
      <link href="/2018/05/20/gitpage-hexo/"/>
      <url>/2018/05/20/gitpage-hexo/</url>
      
        <content type="html"><![CDATA[<p>大半天，一边折腾，一边查找各种文档，写出的这篇文档，不知道有没有把程序表示得足够简明，有不足之处望指明。</p><p>1、前提：已安装好 nodeJS 和 git。</p><p>2、桌面右击进入 gitbash，输入 <code>npm install -g hexo</code> 安装 hexo，关闭 gitbash。</p><p>3、在电脑中建立一个名为【hexo】的文件夹，新建的文件夹右击打开 gitbash，输入 hexo init 命令，命令执行完后，根据提示接着执行 npm install 命令。</p><p>4、运行 hexo server 命令，出现 running 字样说明 Hexo Server 已经启动了，在浏览器中打开<a href="http://localhost:4000/，可以看到生成的博客，按ctrl+C可以停止server；。">http://localhost:4000/，可以看到生成的博客，按ctrl+C可以停止server；。</a></p><p>5、新打开一个 git bash 命令行窗口，cd 到/D/hexo 下，执行 hexo new “My New Post” 命令,可以生成一篇新的文章 “My New Post”，打开<a href="http://localhost:4000/">http://localhost:4000/</a> 可以预览到新生成的文章。</p><p>6、执行 hexo generate 命令可以将 markdown 文章生成静态网页，该命令执行完后，会在 D:\Hexo\public\ 目录下生成一系列 html，css 等文件。</p><p>7、hexo new “My NewPost”会在 D:\Hexo\source\ _posts 目录下生成一个 markdown 文件：My-New-Post.md，可以使用一个支持 markdown 语法的编辑器（比如 Sublime Text 2）来编辑该文件。</p><p>8、部署博客到 github</p><p>(1) 部署到 Github 前需要配置_config.yml 文件，首先找到下面的内容</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">type:</span></span><br></pre></td></tr></table></figure><p>(2) 然后将它们修改为</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line"><span class="attribute">type</span>: git（新版本的hexo必须用git，不然会出错）</span><br><span class="line"><span class="attribute">repository</span>:git<span class="variable">@github</span>.<span class="attribute">com</span>:zhchnchn/zhchnchn.git（新版本用SSH不然会出错）</span><br><span class="line"><span class="attribute">branch</span>: gh-pages</span><br></pre></td></tr></table></figure><p>(3) 执行 npm install hexo-deployer-git –save 命令（hexo3.0 以上的版本必须在执行此命令后才能部署到 git 上）</p><p>A. 执行 hexo clean，清除缓存</p><p>B. 执行 hexo generate 更新生成静态网页</p><p>C. 执行hexo deploy 命令部署博客到github上；</p><p>D. 部署完成后，在浏览器中打开<a href="http://zhchnchn.github.io/（https://zhchnchn.github.io/）">http://zhchnchn.github.io/（https://zhchnchn.github.io/）</a> ，正常显示网页，表明部署成功。</p><h3 id="注意两大坑"><a href="#注意两大坑" class="headerlink" title="注意两大坑:"></a>注意两大坑:</h3><p>1、deploy 不了，3.0 版本以上要执行这个命令： npm install hexo-deployer-git<br>   –save，切记！不然可能一直 error</p><p>2、然后部署到 git 上记得修改 url，不然可能发布之后有些 js 和 css 文件路径找不到！</p>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 概谈</title>
      <link href="/2018/05/20/JS%E6%A6%82%E8%B0%88/"/>
      <url>/2018/05/20/JS%E6%A6%82%E8%B0%88/</url>
      
        <content type="html"><![CDATA[<p>话说 JavaScript 其实是诞生在一个特殊的时期，20 世纪 90 年代，正值第三次科技革命<br>时期，互联网刚开始进入人们的生活。设想一下，在网速只有几十比特的那个时代，在登录注册时要花上很长一段时间等待服务器传回验证信息，会是怎样一种体验？简直是嘴上也不笑眯眯，心里千万句 mmp 吧？为了解决这个问题，网景公司着手设计出了 JavaScript，与它的浏览器一起捆绑推出。</p><a id="more"></a><p>这里有个问题，那就是 Java 跟 JavaScript 有什么关系呢？毕竟单词里都带有相同的“Java”字节，难免会让人把他们联系在一起啊。这里只要记住 Java 跟 JavaScript 没有半毛钱关系，如果说勉强算得上有关系的话，那就是 JavaScript 在创立之初本名叫 LiveScript，但是因为当时 Java 风头正足，为了蹭热点，改了名。</p><p>JavaScript 在诞生之初，有一些克隆兄弟，比如微软家推出的 JScript。我们知道，克隆人的出现会影响社会秩序，编程语言亦然。论天下之大事，分久必合，合久必分，这个时候就继续一个统一的标准对这些脚本语言进行规范了，于是 ECMA 组织了一些大公司的程序员开始策划这个规范，ECMAScript 第一代就这样诞生了。现在我们说的 JavaScript 其实是说对 ECMAScript 的实现。</p><p>ECMAScript 第一代出现后，很快就繁衍到了第二代，但是这一代的 ECMAScript 基本继承了第一代的特性，对 JavaScript 的语法、句法进行描述，没有做什么改动。到第三代的时候，ECMAScript 已经开始成熟，可以被称为一门编程语言了，其中加入了新的的描述，比如支持错误处理、正则表达式等。第四代的 ECMAScript 可以说是废弃的一代，因为它的欲望太强了，试图改朝换代，把旧有的 ECMAScript 改得面目全非，最终没有被组织通过。第五代的 ECMAScript 可以说是经历了一个漫长的讨论孕育期终于在 2009 年发布了正式版，对 ECMAScript 特性进行了进一步的描述，包括引入模式，弥补 JAVAScript 松散的语言结构缺点，提供了更多方便快捷的新方法等。紧随着 ECMAScript5 之后，2015 年演化出了 ECMAScript6，这一代的 ECMAScript 是他自己看起来更像是一门系统的编程语言了，添加了箭头年符号简化函数的写法，强化了对象字面量等都使他看起来更像是年轻力壮的青年男子。进入壮年后的 ECMAScript 发展更加迅速了，2016 年推出了第六代，新增了 Array.prototype.includes 和幂运算符。2017 年又奋起直追，推出了第八代，新增了字符串填充、对象值遍历、对象的属性描述符获取、 函数参数列表与调用中的尾部逗号、异步函数、共享内存与原子操作等。</p><p>所以，时至今日，ECMAScript 也就是 JavaScript 的核心标准已经发展到了第八代，但是比较经常听到周围人提起的依然是 ECMAScript6。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Channels</title>
      <link href="/2018/05/20/Django-channels/"/>
      <url>/2018/05/20/Django-channels/</url>
      
        <content type="html"><![CDATA[<p>写在前面，这个项目用到了 py 的全能框架 Django 来写 web 界面，其中引用了一个通道插件 Django Channel。Django Channels 是为了解决 Django 只发送一个调用视图请求，却不断发送数据到客户端的问题而存在的。Django Channels 的实现机制大概是：生产者把消息推到通道队列中，再通过通道队列把消息传递给消费者之一。</p><a id="more"></a><h5 id="一、-关于-Django-实现实时聊天应用"><a href="#一、-关于-Django-实现实时聊天应用" class="headerlink" title="一、 关于 Django 实现实时聊天应用"></a>一、 关于 Django 实现实时聊天应用</h5><p>Django 实现实时聊天应用一共分为以下几步：</p><ol><li><p>定义一个模型，用来表示聊天室和其中的消息；</p></li><li><p>创建聊天室视图以及相应的 urls.py 和模板；</p></li><li><p>定义一个通道层；</p></li><li><p>创建通道路由；</p></li><li><p>替换 Django 的基于 HTTP/WSGI 的请求处理器；</p></li><li><p>运行应用</p></li></ol><h5 id="二、-项目目录"><a href="#二、-项目目录" class="headerlink" title="二、 项目目录"></a>二、 项目目录</h5><p>主要包括以下文件。</p><ol><li><p><strong>urls.py</strong> 是 Django 项目的 URL 声明，配置目录映射。</p></li><li><p><strong><em>init</em>.py</strong> 是一个空文件，告诉 python 该目录事一个 python 包。</p></li><li><p><strong>setting.py</strong> 是 Django 项目的配置文件，包括 template 模板 path 设置之类的。</p></li><li><p><strong>wsgi.py</strong> 是 WSGI 兼容的 Web 服务器入口。</p></li><li><p><strong>asgi.py</strong> 文件用于替换 Django 的基于 HTTP/WSGI 的请求处理器。</p></li><li><p><strong>production.py</strong> 创建队列消息。</p></li><li><p><strong>logger.py</strong> 提供 log 接口，记录 log，这里可以直接这么用，是因为在 setting 里已经配置过 logging 了。</p></li></ol><h5 id="三、-网页文件"><a href="#三、-网页文件" class="headerlink" title="三、 网页文件"></a>三、 网页文件</h5><p>主要网页文件，相当于 Django 框架的一个应用实例，通过 urls.py 可以映射到该文件夹并进行页面或者函数的调用。</p><ol><li><p><strong>admin.py</strong> 文件调用了 Django 的网站后台管理模块，主要使用方式是在 Django 框架的 url.py 中映射路径，激活该功能。</p></li><li><p><strong>apps.py</strong> 配置应用信息.</p></li><li><p><strong>consumer.py</strong></p><p>(1) 首先检测有没有新的请求要求打开 WebSocket,有的话,记录该请求产生的房间并给出回应。</p><p>(2) 接着，检测有没有新的消息请求，有的话，先把它转换为 json 字段，然后把它放入消息队列，并给出回应，这个过程会一直执行，知道接下来收到客户端发出的结束请求为止。简言之，这个文档就是实现线程通信的，俗称实时通信。</p></li><li><p><strong>routing.py</strong> 通信路由，用于连接 WebSocket。</p></li><li><p><strong>view.py</strong> 视图页，渲染前端页面。</p></li><li><p><strong>accounts 文件夹</strong> 是用户组件。</p></li></ol><h5 id="四、-tensorflow-组件"><a href="#四、-tensorflow-组件" class="headerlink" title="四、 tensorflow 组件"></a>四、 tensorflow 组件</h5><p>主要是用了 tensorflow 进行人机交互。</p>]]></content>
      
      
      <categories>
          
          <category> 服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 使用指南</title>
      <link href="/2018/05/20/hexo%E5%85%A5%E9%97%A8/"/>
      <url>/2018/05/20/hexo%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 Django 博客系统</title>
      <link href="/2018/05/20/%E6%90%AD%E5%BB%BA%20Django%20%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/05/20/%E6%90%AD%E5%BB%BA%20Django%20%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h5 id="一、-环境："><a href="#一、-环境：" class="headerlink" title="一、 环境："></a>一、 环境：</h5><p>win7 系统、Django、python</p><h5 id="二、-需求分析："><a href="#二、-需求分析：" class="headerlink" title="二、 需求分析："></a>二、 需求分析：</h5><p>实现博客的创建、编辑和删除功能，并开通后台 admin,加入富文本编辑器，并入项目中</p><h5 id="三、-搭建-Django-网站："><a href="#三、-搭建-Django-网站：" class="headerlink" title="三、 搭建 Django 网站："></a>三、 搭建 Django 网站：</h5><ol><li><p>检查 Django 版本信息，python &gt;&gt; import django &gt;&gt; django.get_version()</p></li><li><p>启动 DOS 命令窗口，切换到相应文件路径，输入：<code>django-admin startproject mysite(网站名称)</code> 命令，创建一个 blog 项目目录。</p></li><li><p><code>cd mysite</code> &gt; <code>ls -l</code> 查看项目目录，可以看到项目目录包括：<em>init</em>.py、manage.py、setting.py、urls.py。<em>init</em>.py 会把项目目录变成一个 python 包（相关模块的一个集合)，可以方便我们用 python 的“点记号”来制定项目中的某个部分，比如 mysite.urls。</p></li><li><p>manage.py 是项目的启动文件，我们完成之后，要在 dos 中启动的就是这个文件。</p></li><li><p>setting.py 顾名思义，项目的配置文件，主要用来配置数据库、变量之类的基础信息。</p></li><li><p>urls.py 有点像路由配置，就是一些路径的集合，方便在文件中调用。</p></li></ol><h5 id="四、-搭建-Django-博客："><a href="#四、-搭建-Django-博客：" class="headerlink" title="四、 搭建 Django 博客："></a>四、 搭建 Django 博客：</h5><p><code>cd mysite</code> &lt; <code>python manage.py startapp blog</code> 利用 manage.py 创建博客 app，可以看到生成了<em>init.py</em>、models.py、views.py。同样的,<em>init</em>.py 把博客变成了一个 python 包，model.py 和 views.py 是两个空文件，先占着位置。</p><h5 id="五、-修改配置文件："><a href="#五、-修改配置文件：" class="headerlink" title="五、 修改配置文件："></a>五、 修改配置文件：</h5><p>打开 setting.py ，找到 INSTALLED_APPS 元组，把 APP 以模块的形式添加到元组里。</p><h5 id="六、-初始化后台数据库："><a href="#六、-初始化后台数据库：" class="headerlink" title="六、 初始化后台数据库："></a>六、 初始化后台数据库：</h5><ol><li><p>由于使用的是 mysql 数据库，而 Django 默认的数据库是 SQLite3 ，所以需要修改 setting.py 文件中的数据库信息。</p></li><li><p>同步数据库信息：<code>python manage.py migrate</code></p></li><li><p>创建超级管理员账号，用于登录 admin 初始化后台数据库</p></li><li><p>访问 admin 后台： <code>python manage.py runserver</code> 启动页面，然后在主页链接后面加上 admin 路径 /admin/，用新创建的超级用户登录，就可以看到管理者后台了。</p></li></ol><h5 id="七、设计数据表"><a href="#七、设计数据表" class="headerlink" title="七、设计数据表"></a>七、设计数据表</h5><p>打开 blog 目录下的 models.py 文件，加入以下代码：</p><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">from django.db <span class="built_in">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line">class BlogsPost(models.Model):</span><br><span class="line">    <span class="attr">title</span> = models.CharField(<span class="attr">max_length</span> = <span class="number">150</span>)  <span class="comment"># 博客标题</span></span><br><span class="line">    <span class="attr">body</span> = models.TextField()                   <span class="comment"># 博客正文</span></span><br><span class="line">    <span class="attr">timestamp</span> = models.DateTimeField()          <span class="comment"># 创建时间</span></span><br></pre></td></tr></table></figure><p>然后执行 <code>python manage.py makemigrations blog</code> &gt; <code>python manage.py migrate</code> 命令，同步数据库。</p><h5 id="八、-admin-后台管理搭建："><a href="#八、-admin-后台管理搭建：" class="headerlink" title="八、 admin 后台管理搭建："></a>八、 admin 后台管理搭建：</h5><ol><li><p>打开 setting.py 文件，找到 INSTALLED_APPS 添加 <code>django.contrib.admin</code> 内置模块到元组里。</p></li><li><p>打开 urls.py ，配置 admin 的 url 映射，也就是添加<code>（r&#39;^admin/&#39;,include(django.contrib.admin.urls&#39;)),</code>到文件里。</p></li><li><p>注册 BlogPost model，打开 blog/models.py 文件，添加以下代码,启动项目，访问 admin 路径，就可以在后台添加 blog 文章了。</p></li></ol><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="title">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="meta"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">BlogsPost</span>(<span class="title">models</span>.<span class="type">Model</span>):</span></span><br><span class="line"><span class="class">    title = models.<span class="type">CharField</span>(<span class="title">max_length</span> = 150)  # 博客标题</span></span><br><span class="line"><span class="class">    body = models.<span class="type">TextField</span>()                   # 博客正文</span></span><br><span class="line"><span class="class">    timestamp = models.<span class="type">DateTimeField</span>()          # 创建时间</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">admin.site.register(<span class="type">BlogsPost</span>,<span class="type">BlogPostAdmin</span>)</span></span><br></pre></td></tr></table></figure><ol><li>但是我们发现这个 blog 管理界面有点丑，怎么办？添加一个列表展示类，就可以选择我们需要展示的内容了，代码如下,打开页面，点击 title 我们可以发现会按照 title 进行文章排序，点击其他两个，一样的效果。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogPostAdmin</span>(<span class="params">admin.ModelAdmin</span>):</span></span><br><span class="line">    list_display = (<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;body&#x27;</span>,<span class="string">&#x27;timestamp&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="九、-创建文章列表模板："><a href="#九、-创建文章列表模板：" class="headerlink" title="九、 创建文章列表模板："></a>九、 创建文章列表模板：</h5><p>在 blog 项目下创建 templates 目录（mysite/blog/templates/）,在目录下创建模板文件 archive.html，内容如下：</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="xml">&#123;% for post in posts %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">post.title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">post.timestamp</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">post.body</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#123;% endfor %&#125;</span></span><br></pre></td></tr></table></figure><h5 id="十、创建视图模板"><a href="#十、创建视图模板" class="headerlink" title="十、创建视图模板"></a>十、创建视图模板</h5><p>打开 mysite/blog/views.py 文件，添加以下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader,context</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> matrixtech.blog.models <span class="keyword">import</span> BlogsPost</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">archive</span>(<span class="params">request</span>):</span></span><br><span class="line">    blog_list = BlogsPost.objects.all()  <span class="comment"># 获取所有数据</span></span><br><span class="line">    t  = loader.get_template(<span class="string">&#x27;archive.html&#x27;</span>)</span><br><span class="line">    c = context(&#123;&#123;<span class="string">&#x27;posts&#x27;</span>: posts &#125;&#125;)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(t.render(c))  <span class="comment"># 返回blog.html页面</span></span><br></pre></td></tr></table></figure><h5 id="十一、创建-blog-的-url"><a href="#十一、创建-blog-的-url" class="headerlink" title="十一、创建 blog 的 url"></a>十一、创建 blog 的 url</h5><ol><li>在 mysite/urls 里创建 url 模式，添加如下代码</li></ol><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r&#x27;^blog/&#x27;</span>, include(<span class="string">&#x27;blog.urls&#x27;</span>))</span><br></pre></td></tr></table></figure><ol><li>在 blog/urls 定义 url，添加以下代码,重启服务，就可以访问 blog 了。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls.defaults <span class="keyword">import</span>  *</span><br><span class="line"><span class="keyword">from</span> matrixtech.blog.views <span class="keyword">import</span> archive</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^$&#x27;</span>, archive),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="十二、-博客整合到网站中"><a href="#十二、-博客整合到网站中" class="headerlink" title="十二、 博客整合到网站中"></a>十二、 博客整合到网站中</h5><p>博客创建好之后，我需要把它整合到项目中，这里我主要是用链接的形式，把博客链接放在了主导航栏上，点击就会跳转到博客，博客导航栏有主页项，点击也可以调回来。方法是这样的：</p><p>通过 url 匹配名称，查找资源位置，代码如下：</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> &#x27;blog&#x27; %&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="十三、博客外观改善"><a href="#十三、博客外观改善" class="headerlink" title="十三、博客外观改善"></a>十三、博客外观改善</h5><ol><li><p>外观改善主要是生成 templates 文件夹，在里面添加一个 archive.html 文件作为文章模板，还有各个 theme.html 文件作为页面主题模板，其中会涉及到一些 Django 模板语言，需要去了解下，感觉用起来爽歪歪。</p></li><li><p>除了模板语言之外，可以直接通过 url 来查找相关的。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于浏览器内核及其 CSS 写法</title>
      <link href="/2017/12/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E5%8F%8A%E5%86%99%E6%B3%95/"/>
      <url>/2017/12/05/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E5%8F%8A%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、主流浏览器内核包括哪几种，怎么发展的？"><a href="#一、主流浏览器内核包括哪几种，怎么发展的？" class="headerlink" title="一、主流浏览器内核包括哪几种，怎么发展的？"></a>一、主流浏览器内核包括哪几种，怎么发展的？</h3><p>1、<strong>Trident：</strong> IE浏览器使用的内核，启用于1997年的IE4，一直延用至IE9。很多人叫它IE内核，其实Trident实际上也是开放内核，其接口内核设计的相当成熟，因此才有许多采用IE内核而非IE的浏览器涌现，如Maxthon等。</p><p><strong>基于 Trident 的浏览器有：IE4~IE9,Maxthon</strong></p><p>2、<strong>Geckos：</strong> Netscape6开始采用的内核，后来的FireFox沿用该内核，Gecko的特点是代码公开，它的可开发程度极高，广受青睐。</p><p><strong>基于Gecko的浏览器主要有：FireFox，Redfox，K-Meleon；</strong></p><p>3、<strong>Webkit：</strong> 苹果自己的内核，用于Safari浏览器，也是开放源码的自由软件，在安全方面不受IE,FireFox制约，在国内很安全</p><p><strong>基于 Webkit 的浏览器主要有：Safari,Chrome。</strong></p><p>4、<strong>Presto：</strong> 该内核在2003年的Opera7中首次被使用，该款引擎的特点就是渲染速度的优化达到了极致，也是目前公认网页浏览速度最快的浏览器内核，然而代价是牺牲了网页的兼容性。</p><p><strong>基于 Presto 的浏览器主要是 opera Mini。</strong></p><p>5、还有一类浏览器是基于多种内核的，如 Maxthon3，QQ浏览器，搜狗浏览器等。</p><h3 id="二、不同的浏览器内核，在CSS中该怎么写？"><a href="#二、不同的浏览器内核，在CSS中该怎么写？" class="headerlink" title="二、不同的浏览器内核，在CSS中该怎么写？"></a>二、不同的浏览器内核，在CSS中该怎么写？</h3><p><strong>CSS 中的写法一般是根据不同浏览器的自定义样式加前缀：</strong> 如webkit内核浏览器的-Webkit 、Gecko内核浏览器的 -moz 、Presto内核浏览器的-o以及Trident内核浏览器的-ms。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/IP三次握手</title>
      <link href="/2017/05/25/TCP-IP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
      <url>/2017/05/25/TCP-IP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p>TCP/IP 三次握手描述</p><a id="more"></a><ol><li><p>第一次 握手：客户端向服务器端发包，并且不确定服务器端是否收到，同时服务器端确认接受包；</p></li><li><p>第二次握手：服务器端向客户端发包作为回复，并且不确定客户端是否能接收自己发出的包，同时客户端收到包；</p></li><li><p>客户端发包回应服务器端，服务器端确认收到包，两边都确认能接收传递信息，通过快速连接，客户端发出初始信息，开始通信;<br>用简洁易懂的话说就是：</p><pre><code>A：在吗？亲（第一次握手）B：恩，有啥事？（第二次握手）A：我们来聊天吧。（第三次握手）</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git域名配置</title>
      <link href="/2017/05/09/git%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/05/09/git%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>git 域名配置</p><a id="more"></a><ol><li><p>在 Godaddy 购买的域名；</p></li><li><p>查找 DNSpod 解析域名，没什么难度，就是添加一条记录，保存而已，记得在添加域名到 DNSpod 之后，复制两个 NS 地址到 godaddy 的域名服务器下；</p></li><li><p>Git 项目根目录下创建 CNAME 文件，把域名填进去，push 就行了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git环境配置</title>
      <link href="/2017/05/09/git%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/05/09/git%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>结合了一些网上的方法，结合自己配置的实际情况写的文档。</p><a id="more"></a><ol><li><p>下载 git 主程序，下载地址：<a href="https://git-scm.com/downloads，">https://git-scm.com/downloads，</a> 双击安装包，一路 next 就行；</p></li><li><p>对于技术小白的我来说，命令行神马的太复杂了，所以就需要一个 git 界面画的软件来帮助我啦，这个软件就是 TortoiseGit，下载地址：<a href="https://tortoisegit.org/download/，">https://tortoisegit.org/download/，</a> 分为 32 位版和 64 位版，下载时要选好，安装的时候也是一路 next；</p></li><li><p>接下来就是解决怎么把本地项目关联发布到 git 上的问题了；</p></li></ol><p>(1) 首先打开 git 上的项目，复制 git 的 HTTP 地址；</p><p>(2) 然后创打开硬盘里的一个目录，最好是专门开发用的目录，点右键，选择“Git Clone…”，将地址复制进去，点击 OK；<br>(3) 出现 Success 提示，就代表 clone 成功了，close 掉对话框，然后就出现了名为 git 项目的文件夹了；</p><ol><li>本地改动保存为一个版本，我们以新建文件为例；</li></ol><p>(1) 首先，打开刚才生成文件夹，新建一个名为 readme.txt 的空文件；</p><p>(2) 然后在这里鼠标右击，选择 Git Commit -&gt; “master”…，会弹出一个对话框（注意：这里可能会提醒设置用户名、密码 和邮箱，点击确定，填写 git 账户的用户名和注册邮箱以及密码即可）；</p>]]></content>
      
      
      <categories>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodeJs 配置</title>
      <link href="/2017/05/09/nodeJs%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/05/09/nodeJs%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>nodeJs 配置</p><a id="more"></a><ol><li><p>下载 node.js 安装包，下载地址： <a href="https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi，">https://nodejs.org/dist/v4.4.3/node-v4.4.3-x64.msi，</a> 双击安装包，开始安装，一路 next 就行；</p></li><li><p>检测 PATH 环境变量是否配置了 node.js，进入 cmd 界面，输入 path 命令，结果中环境变量出现了 nodeJS 字眼，说明环境变量配置成功了；</p></li><li><p>运行 node -v 命令，检测 node.js 版本，查看是否安装成功；</p></li><li><p>运行 npm -v 命令，检测 npm 版本，查看是否安装成功；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>碎片化阅读知识系统化方法</title>
      <link href="/2017/05/06/%E7%A2%8E%E7%89%87%E5%8C%96%E9%98%85%E8%AF%BB%E7%9F%A5%E8%AF%86%E7%B3%BB%E7%BB%9F%E5%8C%96%E6%96%B9%E6%B3%95/"/>
      <url>/2017/05/06/%E7%A2%8E%E7%89%87%E5%8C%96%E9%98%85%E8%AF%BB%E7%9F%A5%E8%AF%86%E7%B3%BB%E7%BB%9F%E5%8C%96%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、认识"><a href="#一、认识" class="headerlink" title="一、认识"></a>一、认识</h3><p>碎片化阅读分为两个维度，即阅读时间碎片化和阅读内容碎片化。</p><h3 id="二、高效阅读"><a href="#二、高效阅读" class="headerlink" title="二、高效阅读"></a>二、高效阅读</h3><p>指在读完大量书籍之后能记住书中的有效信息，可以讲出读过的书的主要内容，能讲的核心是学会做笔记和整理笔记。</p><h3 id="三、阅读材料分类"><a href="#三、阅读材料分类" class="headerlink" title="三、阅读材料分类"></a>三、阅读材料分类</h3><p>基础的分类：专业精读、兴趣泛读、休闲轻松（阅读材料分级）。</p><h3 id="四、个人阅读时间规划（阅读时间分级）"><a href="#四、个人阅读时间规划（阅读时间分级）" class="headerlink" title="四、个人阅读时间规划（阅读时间分级）"></a>四、个人阅读时间规划（阅读时间分级）</h3><p>大致可以分为：长时段（周末超过2小时的长时段、晚饭后到睡前1-4小时不等的时间）、每日恒定时间（乘坐各种交通工具上下班/学的时间，午饭/晚饭前、后的半小时，学生的课间）、机动时间（偶然状况空闲）。随机时间的应对策略：随身带书或者阅读器（要求：能做笔记、输出笔记）。</p><h3 id="五、阅读的材料与时间段合理"><a href="#五、阅读的材料与时间段合理" class="headerlink" title="五、阅读的材料与时间段合理"></a>五、阅读的材料与时间段合理</h3><p>配比，比如：长时间段→阅读专业精读书目、每日恒定时间→阅读兴趣泛读书目、机动时间→阅读休闲轻松书目。注意：无论选用哪种时间与书目的配比类型，一周之内都需要一个完整的时间段来完成全部笔记的整理工作，只有这样才能永久性保证阅读质量。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写给大家看的算法书笔记</title>
      <link href="/2017/03/07/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/03/07/%E5%86%99%E7%BB%99%E5%A4%A7%E5%AE%B6%E7%9C%8B%E7%9A%84%E7%AE%97%E6%B3%95%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是算法"><a href="#一、什么是算法" class="headerlink" title="一、什么是算法"></a>一、什么是算法</h3><h4 id="1、算法是对特定问题的解决步骤（对信息进行排序、搜索目标信息等）"><a href="#1、算法是对特定问题的解决步骤（对信息进行排序、搜索目标信息等）" class="headerlink" title="1、算法是对特定问题的解决步骤（对信息进行排序、搜索目标信息等）"></a>1、算法是对特定问题的解决步骤（对信息进行排序、搜索目标信息等）</h4><p>算法 → 更优质的算法 → 好的程序；</p><h4 id="2、算法的两个必要条件："><a href="#2、算法的两个必要条件：" class="headerlink" title="2、算法的两个必要条件："></a>2、算法的两个必要条件：</h4><ul><li><p>准确性，证明方法——断言；</p></li><li><p>可停止性（死循环不能看做算法）；</p></li></ul><h4 id="3、几种重要的算法："><a href="#3、几种重要的算法：" class="headerlink" title="3、几种重要的算法："></a>3、几种重要的算法：</h4><p>(1) 数论算法：</p><ul><li><p>求解最大公约数的辗转相除法；</p></li><li><p>求解联立方程的高斯消元法；</p></li><li><p>求解定积分近似值的梯形公式;</p></li><li><p>计算质数的艾拉斯托尼筛法;</p></li></ul><p>(2) 排序算法(按序排列)：</p><ul><li><p>选择排序；</p></li><li><p>冒泡排序；</p></li><li><p>插入排序；</p></li><li><p>希尔排序;</p></li><li><p>归并排序;</p></li><li><p>快速排序；</p></li></ul><p>(3) 搜索算法：（比较求同）</p><ul><li><p>线性搜索；</p></li><li><p>二分搜索；</p></li></ul><p>(4) 字符串匹配算法：</p><ul><li><p>简单字符串搜索；</p></li><li><p>KMP 算法；</p></li><li><p>BM 算法；</p></li></ul><h4 id="4、结构化编程思想"><a href="#4、结构化编程思想" class="headerlink" title="4、结构化编程思想"></a>4、结构化编程思想</h4><p>旨在高效描述程序，最大限度减少设计误差的方法论，其中的处理流程结构组合包括：</p><p>(1) 顺序结构：按顺序处理；</p><p>  <img src="https://upload-images.jianshu.io/upload_images/1476489-9f036b6001ef4e07.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/212/format/webp" alt="图片来源于网络"></p><p>(2) 选择结构：按条件处理；</p><p>  <img src="https://upload-images.jianshu.io/upload_images/1476489-68f37dd7d235e531.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来源于网络"></p><p>(3) 循环结构：条件成立下，进行定量循环处理；</p><p>  <img src="https://upload-images.jianshu.io/upload_images/1476489-a41112c31c533ab9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来源于网络"></p><h3 id="二、-变量和数组"><a href="#二、-变量和数组" class="headerlink" title="二、 变量和数组"></a>二、 变量和数组</h3><p>算法由数据和处理构成；</p><p>(1) 基本数据类型：整数、浮点数、字符、布尔值及字符串；</p><p>(2) 描述数据信息的方法是数据值；</p><p>(3) 变量是存放数据值的容器，变量的作用是使处理过程通用化，每个变量只能存放一个数据，变量名是区分不同变量的标记，变量名要能表示所装载的数据； </p><p>(4) 把数据赋值给变量的过程叫代入；</p><p>(5) 数组是用来保存大量同一数据类型值的，数组索引，即数组元素的位置标号，可以利用数组进行关联数据的处理；</p><p>(6) 二维数组，数组元素沿横纵方向排列；</p><h3 id="三、数据结构——高效的管理大量数据的构造"><a href="#三、数据结构——高效的管理大量数据的构造" class="headerlink" title="三、数据结构——高效的管理大量数据的构造"></a>三、数据结构——高效的管理大量数据的构造</h3><p>常用的数据结构：</p><p>(1) <strong>数组</strong>，快速定位第 N 个数据；</p><p>  <img src="https://upload-images.jianshu.io/upload_images/1476489-5279810825a68703.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来源于手机拍摄"></p><p>(2) <strong>链表</strong>，离散数据排序，快速插入删除数据（插入、删除数据不改变数据位置）。单向链表只能单向检索，元素由数据和“NEXT 指针”构成，HEAD 指针标记链表的第一个元素。双向链表元素由数据，PREV、NEXT 指针构成，可向前向后检索数据，链表为空的状态，HEAD 指针，TAIL 指针分别存储“没有起始元素”、“没有末尾元素”的信息；</p><p>  <img src="https://upload-images.jianshu.io/upload_images/1476489-6113ee58c4fc1e74.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来源于网络"></p><p>(3) <strong>堆栈</strong>（先进后出），数据操作：入栈 → 写入数据（push）→ 出栈（POP）→ 读取数据。考虑计算机优先级或者计算机管理子程序调用的顺序时用到；</p><p>  <img src="https://upload-images.jianshu.io/upload_images/1476489-21be1fcb8546bd49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来源于网络"></p><p>(4) <strong>队列</strong>（先进先出），应用在电文发放和接收中；</p><p>  <img src="https://upload-images.jianshu.io/upload_images/1476489-0789fc904f456296.gif?imageMogr2/auto-orient/strip" alt="图片来源于网络"></p><p>(5) <strong>树</strong>，管理父节点数据和子节点数据，二叉树一个父节点对用两个子节点，可以用数组来表示二叉树；</p><p>  <img src="https://upload-images.jianshu.io/upload_images/1476489-a812b66052043bd4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来源于手机拍摄"></p><p>  <img src="https://upload-images.jianshu.io/upload_images/1476489-061f5d3516622b9b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来源于手机拍摄"></p><p>  <img src="https://upload-images.jianshu.io/upload_images/1476489-f43abcb33e47957a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来源于手机拍摄"></p><p>(6) 图，自由的表示各种关系的数据。图的分类：有向图（边有方向性）、加权图（边有权重）；</p><p>  <img src="https://upload-images.jianshu.io/upload_images/1476489-ea65bbf1f9b3b98b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来源于手机拍摄"></p><h3 id="四、算法基础"><a href="#四、算法基础" class="headerlink" title="四、算法基础"></a>四、算法基础</h3><h4 id="1、-循环处理和控制变量"><a href="#1、-循环处理和控制变量" class="headerlink" title="1、 循环处理和控制变量"></a>1、 循环处理和控制变量</h4><p>(1) 循环处理：利用一个控制变量来管理循环次数，从而进行必要次数的处理；</p><p>(2) 循环处理的步骤：</p><ul><li><p>设置控制变量的初始值；</p></li><li><p>判断循环条件，如果为 true，进行以下 3,4,步，否则为 false，终止处理；</p></li><li><p>执行循环体；</p></li><li><p>改变控制变量，回到步骤 2；</p></li></ul><p>(3) 利用循环处理使处理过程通用化；</p><p>  <strong>案例：</strong></p><p>  计算 1~N 的整数的总和。</p><p>  算法：</p><p>  <img src="https://upload-images.jianshu.io/upload_images/1476489-233c00b2f31f8e76.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>  JavaScript 代码：</p><p>  <img src="https://upload-images.jianshu.io/upload_images/1476489-4ea54b8cba9d8db1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2、-使用数组可以高效的处理大量数据"><a href="#2、-使用数组可以高效的处理大量数据" class="headerlink" title="2、 使用数组可以高效的处理大量数据"></a>2、 使用数组可以高效的处理大量数据</h4><p>(1) 求斐波那契数列。</p><p>算法：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-b0f7928c9e70b00c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="案例"></p><p>JavaScript 代码：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-aae2fafe110aeb4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><p>(2) 数组求和</p><p>计算一年的营业额。</p><p>算法：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-ca431aa7a661a3fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="算法"></p><p>JavaScript 代码：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-2498e2f8f6979555.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><p>(3) 求平均值</p><p>求班级考试的平均分。</p><p>算法：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-a288f74be53c16ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="算法"></p><p>JavaScript 代码：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-a4ea9bb73708cdf4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><p>(4) 求数组数据中的最大值</p><p>求最高分。</p><p>算法：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-5934e850b29830b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="算法"></p><p>JavaScript 代码：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-393b1a7d9a9bc418.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><p>(5) 求数据中的最小值</p><p>求最低分。</p><p>算法：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-7d3483e3bd32591a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="算法"></p><p>JavaScript 代码：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-a49e301d22d84669.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><p>(6) 为数组元素排序</p><p>为考试成绩排名。</p><p>算法：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-2d67aeb495cc806e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="算法"></p><p>JavaScript 代码：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-34838194b6e477e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><p>(7) 二维数组操作</p><p>求全班学生不同科目考试合计总分。</p><p>算法：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-bfadc73a743b91f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="算法"></p><p>JavaScript 代码：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-b4681f4285738dc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><p>(8) 求两个数的最大公约数</p><p>辗转相除法</p><p>算法：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-460179a152a07806.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="算法"></p><p>JavaScript 代码：</p><p><img src="https://upload-images.jianshu.io/upload_images/1476489-3fc4fb3e5c8ebb16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代码"></p><h4 id="2、排序算法"><a href="#2、排序算法" class="headerlink" title="2、排序算法"></a>2、排序算法</h4><p>几种常用的排序算法</p><p>(1) 桶排序: 准备与待排序数据取值范围大小个数的木桶，利用这些木桶对数据进行保存、排序。</p><p>排序过程：</p><ul><li><p>准备好木桶数据，把其所有元素初始化为 0；</p></li><li><p>把保存排序数组（n 个数据）的下标的变量 i 初始化为 0；</p></li><li><p>i 小于 n 时，循环执行 4~5；</p></li><li><p>把 data[i]代入变量 value；</p></li><li><p>bucket[value]加 1；</p></li><li><p>i 加 1；</p></li><li><p>从 bucket 的起始元素开始，把每个数值非 0 的元素的下标按照数值（出现次数）取出来，排成一列。</p></li></ul><p>(2) 选择排序: 遍历数据，把数据中的最大值（或最小值）与起始（或者末尾）数据进行交换。</p><p>排序过程：</p><ul><li><p>从“待排序部分”中找到最小值；</p></li><li><p>把最小值和“待排序部分起始位置的元素”交换；</p></li><li><p>“待排序部分”的起始位置向后移动一位；</p></li><li><p>循环操作 1~3，直至“待排序部分”只剩下一个元素。</p></li></ul><p>(3) 冒泡排序: 对比相邻的两个数据，根据大小关系调整两个数据的顺序。</p><p>(4) 插入排序: 把目标数据按照正确的大小排列顺序插入相应的位置中。</p><p>(5) 归并排序: 把目标数据分割成更小的部分进行排序，更小的部分正确排序之后再合并起来。</p><p>(6) 希尔排序: 把目标数据按照一定的个数分成几个区域进行插入排序。</p><p>(7) 快速排序: 从目标数据中任意选取一个数据，以这个数据的值为分割点，把目标数据分割为两部分。这样循环操作下去进行排序。</p><h4 id="3、搜索算法"><a href="#3、搜索算法" class="headerlink" title="3、搜索算法"></a>3、搜索算法</h4><p>常用的搜索算法：</p><ul><li><p>线性搜索（随机排布的数据列中使用，效率比较低）；</p></li><li><p>二分搜索（已经排好序的数据列中使用，效率较高）；</p></li><li><p>利用哈希表进行搜索（高效搜索）；</p></li><li><p>简单字符串搜索（有长度的数据）；</p></li><li><p>利用 KMP 算法 进行字符串搜索；</p></li><li><p>利用 BM 算法进行字符串搜索。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithmn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于写周报的笔记</title>
      <link href="/2016/05/20/%E5%85%B3%E4%BA%8E%E5%86%99%E5%91%A8%E6%8A%A5%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2016/05/20/%E5%85%B3%E4%BA%8E%E5%86%99%E5%91%A8%E6%8A%A5%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>如果你上班了，你们公司会要求你写周报吗？如果你还是学生，你的父母或老师会要求你写周报吗？没人要求，还会自发性的写周报吗？写周报给你带来了什么样的改变？</p><p>我是写周报的，虽然公司也要求写，但更多出于自发性的写，我把他当作 GTD 系统中的一部分，对我而言是 CONTEXT，起承上启下的作用。</p><h3 id="1、被动写周报与主动写周报的区别"><a href="#1、被动写周报与主动写周报的区别" class="headerlink" title="1、被动写周报与主动写周报的区别"></a>1、被动写周报与主动写周报的区别</h3><ul><li><p><strong>被动写周报和主动记录反馈本周状态是有区别的</strong>，被动通常受命于人，属于履行任务，追求的是效率，希望尽可能快的完成；而主动写周报通常是自发性的，属于自我反省，追求的是问题的发现-解决-反馈，需要静下心来思考。</p></li><li><p><strong>工作周报和个人总结周报也是有区别的</strong>： <strong>内容上</strong>，工作周报只需要记录和工作相关的事情，而个人周报不仅需要总结工作，还需要总结生活、学习；<strong>深度上</strong>，由于工作周报通常是需要提交给部门老大看，因此在剖析问题、总结得失，自我反省上非常不深刻，甚至会出现避重就轻的问题，一份周报常常沦为简单对工作任务的概括和陈述；而个人周报则不容易出现这类问题，就好比面壁自省，谁还会在乎什么话该说还是不该说，都是自个儿的事；</p></li></ul><h3 id="2、写周报的方法"><a href="#2、写周报的方法" class="headerlink" title="2、写周报的方法"></a>2、写周报的方法</h3><h4 id="1-Step-1-回顾"><a href="#1-Step-1-回顾" class="headerlink" title="(1) Step-1-回顾"></a>(1) Step-1-回顾</h4><ul><li><p>检查计划中关键项目/任务的完成进度是否符合预期；</p></li><li><p>反馈各项目/任务的执行结果，如：完成情况/未达预期的原因/失败的原因；</p></li><li><p>统计日程表中各任务的耗时情况是否正常，有没有效率特低或特高的情况，原因写到备注中；</p></li><li><p>回溯上一周面临的问题是否得到解决，解决方案是否有效，并对问题解决的过程进行概括；</p></li></ul><h4 id="2-Step-2-总结"><a href="#2-Step-2-总结" class="headerlink" title="(2) Step-2-总结"></a>(2) Step-2-总结</h4><ul><li><p>总结本周面临的新问题，描述问题并概括导致问题出现的原因，准备以何种解决方案应对？</p></li><li><p>对工作、学习、生活（主要是人际关系）三方面进行评估，一方面对重点任务进行陈述性总结，另一方面评估重点任务的完成质量</p></li></ul><h4 id="3-Step-3-计划"><a href="#3-Step-3-计划" class="headerlink" title="(3) Step-3-计划"></a>(3) Step-3-计划</h4><ul><li><p>列出能预见到的项目/任务，如：阅读书籍&lt;在你身边为你设计&gt;；</p></li><li><p>细化任务，一方面要计划任务量，另一方面要计划时间分配，如：阅读到用研部分（P125 页）完，睡前阅读 30 分钟，周末统一整理笔记</p></li></ul><p>OK，通过这三个步骤，基本上就可以写出一份到位的周报总结了，另外月报的方法也大同小异，可参考着写。</p><p>另外，以前还看到过别人周报中设置的一些关注点，可供大家参考：</p><ul><li><p>黄金时间分布段：目的是把重点任务分配到精力最集中，最不容易受干扰的时间段去做；</p></li><li><p>总结任务的分类，各分类下的任务量，无需脑力的 Brain Dead 任务和需要静下心做的 Deep Time 任务各占了多少时间</p></li><li><p>如果你有建立一个靠谱的理想，你每天花费多少时间在上面？</p></li><li><p>评估你的精力状况，避免因为安排太多任务而透支</p></li></ul><p>一句话就是总结：你这周做了什么？做得怎么样？接下来你准备做什么？怎么去做？</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人管理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
